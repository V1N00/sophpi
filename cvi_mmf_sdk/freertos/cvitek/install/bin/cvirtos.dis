
/data/sam/proj_aiot/wanmosi/rls_sdk/sophpi-duo/sophpi-duo/cvi_mmf_sdk/freertos/cvitek/install/bin/cvirtos.elf:     file format elf64-littleriscv


Disassembly of section .text:

0000000083f40000 <_start>:
    83f40000:	f1402573          	csrr	a0,mhartid
    83f40004:	4581                	li	a1,0
    83f40006:	0eb51a63          	bne	a0,a1,83f400fa <secondary>
    83f4000a:	4081                	li	ra,0
    83f4000c:	4101                	li	sp,0
    83f4000e:	4181                	li	gp,0
    83f40010:	4201                	li	tp,0
    83f40012:	4281                	li	t0,0
    83f40014:	4301                	li	t1,0
    83f40016:	4381                	li	t2,0
    83f40018:	4401                	li	s0,0
    83f4001a:	4481                	li	s1,0
    83f4001c:	4501                	li	a0,0
    83f4001e:	4581                	li	a1,0
    83f40020:	4601                	li	a2,0
    83f40022:	4681                	li	a3,0
    83f40024:	4701                	li	a4,0
    83f40026:	4781                	li	a5,0
    83f40028:	4801                	li	a6,0
    83f4002a:	4881                	li	a7,0
    83f4002c:	4901                	li	s2,0
    83f4002e:	4981                	li	s3,0
    83f40030:	4a01                	li	s4,0
    83f40032:	4a81                	li	s5,0
    83f40034:	4b01                	li	s6,0
    83f40036:	4b81                	li	s7,0
    83f40038:	4c01                	li	s8,0
    83f4003a:	4c81                	li	s9,0
    83f4003c:	4d01                	li	s10,0
    83f4003e:	4d81                	li	s11,0
    83f40040:	4e01                	li	t3,0
    83f40042:	4e81                	li	t4,0
    83f40044:	4f01                	li	t5,0
    83f40046:	4f81                	li	t6,0
    83f40048:	000011b7          	lui	gp,0x1
    83f4004c:	8801819b          	addiw	gp,gp,-1920
    83f40050:	30419073          	csrw	mie,gp
    83f40054:	000301b7          	lui	gp,0x30
    83f40058:	0131819b          	addiw	gp,gp,19
    83f4005c:	7c21a073          	csrs	mcor,gp
    83f40060:	07f00193          	li	gp,127
    83f40064:	7c11a073          	csrs	mhcr,gp
    83f40068:	000061b7          	lui	gp,0x6
    83f4006c:	10c1819b          	addiw	gp,gp,268
    83f40070:	7c51a073          	csrs	mhint,gp
    83f40074:	6189                	lui	gp,0x2
    83f40076:	3001a073          	csrs	mstatus,gp
    83f4007a:	000c0117          	auipc	sp,0xc0
    83f4007e:	cc610113          	addi	sp,sp,-826 # 83fffd40 <_end>
    83f40082:	00012517          	auipc	a0,0x12
    83f40086:	6fe50513          	addi	a0,a0,1790 # 83f52780 <_data_lma>
    83f4008a:	00012597          	auipc	a1,0x12
    83f4008e:	6f658593          	addi	a1,a1,1782 # 83f52780 <_data_lma>
    83f40092:	00013617          	auipc	a2,0x13
    83f40096:	14e60613          	addi	a2,a2,334 # 83f531e0 <_edata>
    83f4009a:	00c5fa63          	bgeu	a1,a2,83f400ae <_start+0xae>
    83f4009e:	00053283          	ld	t0,0(a0)
    83f400a2:	0055b023          	sd	t0,0(a1)
    83f400a6:	0521                	addi	a0,a0,8
    83f400a8:	05a1                	addi	a1,a1,8
    83f400aa:	fec5eae3          	bltu	a1,a2,83f4009e <_start+0x9e>
    83f400ae:	00013517          	auipc	a0,0x13
    83f400b2:	15250513          	addi	a0,a0,338 # 83f53200 <__data1_end>
    83f400b6:	00020597          	auipc	a1,0x20
    83f400ba:	c8a58593          	addi	a1,a1,-886 # 83f5fd40 <_ebss>
    83f400be:	02b57663          	bgeu	a0,a1,83f400ea <_start+0xea>
    83f400c2:	00053023          	sd	zero,0(a0)
    83f400c6:	00053423          	sd	zero,8(a0)
    83f400ca:	00053823          	sd	zero,16(a0)
    83f400ce:	00053c23          	sd	zero,24(a0)
    83f400d2:	02053023          	sd	zero,32(a0)
    83f400d6:	02053423          	sd	zero,40(a0)
    83f400da:	02053823          	sd	zero,48(a0)
    83f400de:	02053c23          	sd	zero,56(a0)
    83f400e2:	04050513          	addi	a0,a0,64
    83f400e6:	fcb56ee3          	bltu	a0,a1,83f400c2 <_start+0xc2>
    83f400ea:	4501                	li	a0,0
    83f400ec:	4581                	li	a1,0
    83f400ee:	4601                	li	a2,0
    83f400f0:	531020ef          	jal	ra,83f42e20 <main>
    83f400f4:	10500073          	wfi
    83f400f8:	bff5                	j	83f400f4 <_start+0xf4>

0000000083f400fa <secondary>:
    83f400fa:	10500073          	wfi
    83f400fe:	bff5                	j	83f400fa <secondary>

0000000083f40100 <memcpy>:
    83f40100:	8faa                	mv	t6,a0
    83f40102:	08063693          	sltiu	a3,a2,128
    83f40106:	eedd                	bnez	a3,83f401c4 <memcpy+0xc4>
    83f40108:	007ff693          	andi	a3,t6,7
    83f4010c:	0075f713          	andi	a4,a1,7
    83f40110:	0ae69a63          	bne	a3,a4,83f401c4 <memcpy+0xc4>
    83f40114:	ce99                	beqz	a3,83f40132 <memcpy+0x32>
    83f40116:	ff85f693          	andi	a3,a1,-8
    83f4011a:	06a1                	addi	a3,a3,8
    83f4011c:	40b68733          	sub	a4,a3,a1
    83f40120:	00058783          	lb	a5,0(a1)
    83f40124:	0585                	addi	a1,a1,1
    83f40126:	00ff8023          	sb	a5,0(t6)
    83f4012a:	0f85                	addi	t6,t6,1
    83f4012c:	fed5eae3          	bltu	a1,a3,83f40120 <memcpy+0x20>
    83f40130:	8e19                	sub	a2,a2,a4
    83f40132:	f8067713          	andi	a4,a2,-128
    83f40136:	c759                	beqz	a4,83f401c4 <memcpy+0xc4>
    83f40138:	00e586b3          	add	a3,a1,a4
    83f4013c:	6198                	ld	a4,0(a1)
    83f4013e:	659c                	ld	a5,8(a1)
    83f40140:	0105b803          	ld	a6,16(a1)
    83f40144:	0185b883          	ld	a7,24(a1)
    83f40148:	0205b283          	ld	t0,32(a1)
    83f4014c:	0285b303          	ld	t1,40(a1)
    83f40150:	0305b383          	ld	t2,48(a1)
    83f40154:	0385be03          	ld	t3,56(a1)
    83f40158:	0405be83          	ld	t4,64(a1)
    83f4015c:	0485bf03          	ld	t5,72(a1)
    83f40160:	00efb023          	sd	a4,0(t6)
    83f40164:	00ffb423          	sd	a5,8(t6)
    83f40168:	010fb823          	sd	a6,16(t6)
    83f4016c:	011fbc23          	sd	a7,24(t6)
    83f40170:	025fb023          	sd	t0,32(t6)
    83f40174:	026fb423          	sd	t1,40(t6)
    83f40178:	027fb823          	sd	t2,48(t6)
    83f4017c:	03cfbc23          	sd	t3,56(t6)
    83f40180:	05dfb023          	sd	t4,64(t6)
    83f40184:	05efb423          	sd	t5,72(t6)
    83f40188:	69b8                	ld	a4,80(a1)
    83f4018a:	6dbc                	ld	a5,88(a1)
    83f4018c:	0605b803          	ld	a6,96(a1)
    83f40190:	0685b883          	ld	a7,104(a1)
    83f40194:	0705b283          	ld	t0,112(a1)
    83f40198:	0785b303          	ld	t1,120(a1)
    83f4019c:	08058593          	addi	a1,a1,128
    83f401a0:	04efb823          	sd	a4,80(t6)
    83f401a4:	04ffbc23          	sd	a5,88(t6)
    83f401a8:	070fb023          	sd	a6,96(t6)
    83f401ac:	071fb423          	sd	a7,104(t6)
    83f401b0:	065fb823          	sd	t0,112(t6)
    83f401b4:	066fbc23          	sd	t1,120(t6)
    83f401b8:	080f8f93          	addi	t6,t6,128
    83f401bc:	f8d5e0e3          	bltu	a1,a3,83f4013c <memcpy+0x3c>
    83f401c0:	07f67613          	andi	a2,a2,127
    83f401c4:	ca05                	beqz	a2,83f401f4 <memcpy+0xf4>
    83f401c6:	00c586b3          	add	a3,a1,a2
    83f401ca:	01f5e7b3          	or	a5,a1,t6
    83f401ce:	8fd5                	or	a5,a5,a3
    83f401d0:	8b8d                	andi	a5,a5,3
    83f401d2:	eb89                	bnez	a5,83f401e4 <memcpy+0xe4>
    83f401d4:	4198                	lw	a4,0(a1)
    83f401d6:	0591                	addi	a1,a1,4
    83f401d8:	00efa023          	sw	a4,0(t6)
    83f401dc:	0f91                	addi	t6,t6,4
    83f401de:	fed5ebe3          	bltu	a1,a3,83f401d4 <memcpy+0xd4>
    83f401e2:	8082                	ret
    83f401e4:	00058703          	lb	a4,0(a1)
    83f401e8:	0585                	addi	a1,a1,1
    83f401ea:	00ef8023          	sb	a4,0(t6)
    83f401ee:	0f85                	addi	t6,t6,1
    83f401f0:	fed5eae3          	bltu	a1,a3,83f401e4 <memcpy+0xe4>
    83f401f4:	8082                	ret
	...

0000000083f40200 <freertos_risc_v_trap_handler>:
    83f40200:	7151                	addi	sp,sp,-240
    83f40202:	e406                	sd	ra,8(sp)
    83f40204:	e816                	sd	t0,16(sp)
    83f40206:	ec1a                	sd	t1,24(sp)
    83f40208:	f01e                	sd	t2,32(sp)
    83f4020a:	f422                	sd	s0,40(sp)
    83f4020c:	f826                	sd	s1,48(sp)
    83f4020e:	fc2a                	sd	a0,56(sp)
    83f40210:	e0ae                	sd	a1,64(sp)
    83f40212:	e4b2                	sd	a2,72(sp)
    83f40214:	e8b6                	sd	a3,80(sp)
    83f40216:	ecba                	sd	a4,88(sp)
    83f40218:	f0be                	sd	a5,96(sp)
    83f4021a:	f4c2                	sd	a6,104(sp)
    83f4021c:	f8c6                	sd	a7,112(sp)
    83f4021e:	fcca                	sd	s2,120(sp)
    83f40220:	e14e                	sd	s3,128(sp)
    83f40222:	e552                	sd	s4,136(sp)
    83f40224:	e956                	sd	s5,144(sp)
    83f40226:	ed5a                	sd	s6,152(sp)
    83f40228:	f15e                	sd	s7,160(sp)
    83f4022a:	f562                	sd	s8,168(sp)
    83f4022c:	f966                	sd	s9,176(sp)
    83f4022e:	fd6a                	sd	s10,184(sp)
    83f40230:	e1ee                	sd	s11,192(sp)
    83f40232:	e5f2                	sd	t3,200(sp)
    83f40234:	e9f6                	sd	t4,208(sp)
    83f40236:	edfa                	sd	t5,216(sp)
    83f40238:	f1fe                	sd	t6,224(sp)
    83f4023a:	300022f3          	csrr	t0,mstatus
    83f4023e:	f596                	sd	t0,232(sp)
    83f40240:	716d                	addi	sp,sp,-272
    83f40242:	a402                	fsd	ft0,8(sp)
    83f40244:	a806                	fsd	ft1,16(sp)
    83f40246:	ac0a                	fsd	ft2,24(sp)
    83f40248:	b00e                	fsd	ft3,32(sp)
    83f4024a:	b412                	fsd	ft4,40(sp)
    83f4024c:	b816                	fsd	ft5,48(sp)
    83f4024e:	bc1a                	fsd	ft6,56(sp)
    83f40250:	a09e                	fsd	ft7,64(sp)
    83f40252:	a4a2                	fsd	fs0,72(sp)
    83f40254:	a8a6                	fsd	fs1,80(sp)
    83f40256:	acaa                	fsd	fa0,88(sp)
    83f40258:	b0ae                	fsd	fa1,96(sp)
    83f4025a:	b4b2                	fsd	fa2,104(sp)
    83f4025c:	b8b6                	fsd	fa3,112(sp)
    83f4025e:	bcba                	fsd	fa4,120(sp)
    83f40260:	a13e                	fsd	fa5,128(sp)
    83f40262:	a542                	fsd	fa6,136(sp)
    83f40264:	a946                	fsd	fa7,144(sp)
    83f40266:	ad4a                	fsd	fs2,152(sp)
    83f40268:	b14e                	fsd	fs3,160(sp)
    83f4026a:	b552                	fsd	fs4,168(sp)
    83f4026c:	b956                	fsd	fs5,176(sp)
    83f4026e:	bd5a                	fsd	fs6,184(sp)
    83f40270:	a1de                	fsd	fs7,192(sp)
    83f40272:	a5e2                	fsd	fs8,200(sp)
    83f40274:	a9e6                	fsd	fs9,208(sp)
    83f40276:	adea                	fsd	fs10,216(sp)
    83f40278:	b1ee                	fsd	fs11,224(sp)
    83f4027a:	b5f2                	fsd	ft8,232(sp)
    83f4027c:	b9f6                	fsd	ft9,240(sp)
    83f4027e:	bdfa                	fsd	ft10,248(sp)
    83f40280:	a27e                	fsd	ft11,256(sp)
    83f40282:	003022f3          	frsr	t0
    83f40286:	e616                	sd	t0,264(sp)
    83f40288:	00020297          	auipc	t0,0x20
    83f4028c:	a002b283          	ld	t0,-1536(t0) # 83f5fc88 <pxCurrentTCB>
    83f40290:	0022b023          	sd	sp,0(t0)
    83f40294:	34202573          	csrr	a0,mcause
    83f40298:	341025f3          	csrr	a1,mepc

0000000083f4029c <test_if_asynchronous>:
    83f4029c:	03f55613          	srli	a2,a0,0x3f
    83f402a0:	c62d                	beqz	a2,83f4030a <handle_synchronous>
    83f402a2:	e02e                	sd	a1,0(sp)

0000000083f402a4 <handle_asynchronous>:
    83f402a4:	00100293          	li	t0,1
    83f402a8:	12fe                	slli	t0,t0,0x3f
    83f402aa:	00728313          	addi	t1,t0,7
    83f402ae:	04651463          	bne	a0,t1,83f402f6 <test_if_external_interrupt>
    83f402b2:	00020297          	auipc	t0,0x20
    83f402b6:	a762b283          	ld	t0,-1418(t0) # 83f5fd28 <pulMachineTimerCompareRegisterL>
    83f402ba:	00013317          	auipc	t1,0x13
    83f402be:	f1e33303          	ld	t1,-226(t1) # 83f531d8 <pullNextTime>
    83f402c2:	00033383          	ld	t2,0(t1)
    83f402c6:	0072a023          	sw	t2,0(t0)
    83f402ca:	0203de13          	srli	t3,t2,0x20
    83f402ce:	01c2a223          	sw	t3,4(t0)
    83f402d2:	00012297          	auipc	t0,0x12
    83f402d6:	1b62b283          	ld	t0,438(t0) # 83f52488 <uxTimerIncrementsForOneTick>
    83f402da:	00728eb3          	add	t4,t0,t2
    83f402de:	01d33023          	sd	t4,0(t1)
    83f402e2:	00012117          	auipc	sp,0x12
    83f402e6:	1ae13103          	ld	sp,430(sp) # 83f52490 <xISRStackTop>
    83f402ea:	1660f0ef          	jal	ra,83f4f450 <xTaskIncrementTick>
    83f402ee:	c521                	beqz	a0,83f40336 <processed_source>
    83f402f0:	18c0f0ef          	jal	ra,83f4f47c <vTaskSwitchContext>
    83f402f4:	a089                	j	83f40336 <processed_source>

0000000083f402f6 <test_if_external_interrupt>:
    83f402f6:	0311                	addi	t1,t1,4
    83f402f8:	02651c63          	bne	a0,t1,83f40330 <as_yet_unhandled>
    83f402fc:	00012117          	auipc	sp,0x12
    83f40300:	19413103          	ld	sp,404(sp) # 83f52490 <xISRStackTop>
    83f40304:	2240c0ef          	jal	ra,83f4c528 <do_irq>
    83f40308:	a03d                	j	83f40336 <processed_source>

0000000083f4030a <handle_synchronous>:
    83f4030a:	0591                	addi	a1,a1,4
    83f4030c:	e02e                	sd	a1,0(sp)

0000000083f4030e <test_if_environment_call>:
    83f4030e:	42ad                	li	t0,11
    83f40310:	00551963          	bne	a0,t0,83f40322 <is_exception>
    83f40314:	00012117          	auipc	sp,0x12
    83f40318:	17c13103          	ld	sp,380(sp) # 83f52490 <xISRStackTop>
    83f4031c:	1600f0ef          	jal	ra,83f4f47c <vTaskSwitchContext>
    83f40320:	a819                	j	83f40336 <processed_source>

0000000083f40322 <is_exception>:
    83f40322:	342022f3          	csrr	t0,mcause
    83f40326:	34102373          	csrr	t1,mepc
    83f4032a:	300023f3          	csrr	t2,mstatus
    83f4032e:	bfd5                	j	83f40322 <is_exception>

0000000083f40330 <as_yet_unhandled>:
    83f40330:	342022f3          	csrr	t0,mcause
    83f40334:	bff5                	j	83f40330 <as_yet_unhandled>

0000000083f40336 <processed_source>:
    83f40336:	00020317          	auipc	t1,0x20
    83f4033a:	95233303          	ld	t1,-1710(t1) # 83f5fc88 <pxCurrentTCB>
    83f4033e:	00033103          	ld	sp,0(t1)
    83f40342:	6282                	ld	t0,0(sp)
    83f40344:	34129073          	csrw	mepc,t0
    83f40348:	2022                	fld	ft0,8(sp)
    83f4034a:	20c2                	fld	ft1,16(sp)
    83f4034c:	2162                	fld	ft2,24(sp)
    83f4034e:	3182                	fld	ft3,32(sp)
    83f40350:	3222                	fld	ft4,40(sp)
    83f40352:	32c2                	fld	ft5,48(sp)
    83f40354:	3362                	fld	ft6,56(sp)
    83f40356:	2386                	fld	ft7,64(sp)
    83f40358:	2426                	fld	fs0,72(sp)
    83f4035a:	24c6                	fld	fs1,80(sp)
    83f4035c:	2566                	fld	fa0,88(sp)
    83f4035e:	3586                	fld	fa1,96(sp)
    83f40360:	3626                	fld	fa2,104(sp)
    83f40362:	36c6                	fld	fa3,112(sp)
    83f40364:	3766                	fld	fa4,120(sp)
    83f40366:	278a                	fld	fa5,128(sp)
    83f40368:	282a                	fld	fa6,136(sp)
    83f4036a:	28ca                	fld	fa7,144(sp)
    83f4036c:	296a                	fld	fs2,152(sp)
    83f4036e:	398a                	fld	fs3,160(sp)
    83f40370:	3a2a                	fld	fs4,168(sp)
    83f40372:	3aca                	fld	fs5,176(sp)
    83f40374:	3b6a                	fld	fs6,184(sp)
    83f40376:	2b8e                	fld	fs7,192(sp)
    83f40378:	2c2e                	fld	fs8,200(sp)
    83f4037a:	2cce                	fld	fs9,208(sp)
    83f4037c:	2d6e                	fld	fs10,216(sp)
    83f4037e:	3d8e                	fld	fs11,224(sp)
    83f40380:	3e2e                	fld	ft8,232(sp)
    83f40382:	3ece                	fld	ft9,240(sp)
    83f40384:	3f6e                	fld	ft10,248(sp)
    83f40386:	2f92                	fld	ft11,256(sp)
    83f40388:	62b2                	ld	t0,264(sp)
    83f4038a:	00329073          	fssr	t0
    83f4038e:	6151                	addi	sp,sp,272
    83f40390:	72ae                	ld	t0,232(sp)
    83f40392:	30029073          	csrw	mstatus,t0
    83f40396:	60a2                	ld	ra,8(sp)
    83f40398:	62c2                	ld	t0,16(sp)
    83f4039a:	6362                	ld	t1,24(sp)
    83f4039c:	7382                	ld	t2,32(sp)
    83f4039e:	7422                	ld	s0,40(sp)
    83f403a0:	74c2                	ld	s1,48(sp)
    83f403a2:	7562                	ld	a0,56(sp)
    83f403a4:	6586                	ld	a1,64(sp)
    83f403a6:	6626                	ld	a2,72(sp)
    83f403a8:	66c6                	ld	a3,80(sp)
    83f403aa:	6766                	ld	a4,88(sp)
    83f403ac:	7786                	ld	a5,96(sp)
    83f403ae:	7826                	ld	a6,104(sp)
    83f403b0:	78c6                	ld	a7,112(sp)
    83f403b2:	7966                	ld	s2,120(sp)
    83f403b4:	698a                	ld	s3,128(sp)
    83f403b6:	6a2a                	ld	s4,136(sp)
    83f403b8:	6aca                	ld	s5,144(sp)
    83f403ba:	6b6a                	ld	s6,152(sp)
    83f403bc:	7b8a                	ld	s7,160(sp)
    83f403be:	7c2a                	ld	s8,168(sp)
    83f403c0:	7cca                	ld	s9,176(sp)
    83f403c2:	7d6a                	ld	s10,184(sp)
    83f403c4:	6d8e                	ld	s11,192(sp)
    83f403c6:	6e2e                	ld	t3,200(sp)
    83f403c8:	6ece                	ld	t4,208(sp)
    83f403ca:	6f6e                	ld	t5,216(sp)
    83f403cc:	7f8e                	ld	t6,224(sp)
    83f403ce:	616d                	addi	sp,sp,240
    83f403d0:	30200073          	mret
    83f403d4:	00000013          	nop
    83f403d8:	00000013          	nop
    83f403dc:	00000013          	nop
    83f403e0:	00000013          	nop
    83f403e4:	00000013          	nop
    83f403e8:	00000013          	nop
    83f403ec:	00000013          	nop
    83f403f0:	00000013          	nop
    83f403f4:	00000013          	nop
    83f403f8:	00000013          	nop
    83f403fc:	00000013          	nop

0000000083f40400 <xPortStartFirstTask>:
    83f40400:	00000297          	auipc	t0,0x0
    83f40404:	e0028293          	addi	t0,t0,-512 # 83f40200 <freertos_risc_v_trap_handler>
    83f40408:	30529073          	csrw	mtvec,t0
    83f4040c:	00020117          	auipc	sp,0x20
    83f40410:	87c13103          	ld	sp,-1924(sp) # 83f5fc88 <pxCurrentTCB>
    83f40414:	6102                	ld	sp,0(sp)
    83f40416:	6082                	ld	ra,0(sp)
    83f40418:	2022                	fld	ft0,8(sp)
    83f4041a:	20c2                	fld	ft1,16(sp)
    83f4041c:	2162                	fld	ft2,24(sp)
    83f4041e:	3182                	fld	ft3,32(sp)
    83f40420:	3222                	fld	ft4,40(sp)
    83f40422:	32c2                	fld	ft5,48(sp)
    83f40424:	3362                	fld	ft6,56(sp)
    83f40426:	2386                	fld	ft7,64(sp)
    83f40428:	2426                	fld	fs0,72(sp)
    83f4042a:	24c6                	fld	fs1,80(sp)
    83f4042c:	2566                	fld	fa0,88(sp)
    83f4042e:	3586                	fld	fa1,96(sp)
    83f40430:	3626                	fld	fa2,104(sp)
    83f40432:	36c6                	fld	fa3,112(sp)
    83f40434:	3766                	fld	fa4,120(sp)
    83f40436:	278a                	fld	fa5,128(sp)
    83f40438:	282a                	fld	fa6,136(sp)
    83f4043a:	28ca                	fld	fa7,144(sp)
    83f4043c:	296a                	fld	fs2,152(sp)
    83f4043e:	398a                	fld	fs3,160(sp)
    83f40440:	3a2a                	fld	fs4,168(sp)
    83f40442:	3aca                	fld	fs5,176(sp)
    83f40444:	3b6a                	fld	fs6,184(sp)
    83f40446:	2b8e                	fld	fs7,192(sp)
    83f40448:	2c2e                	fld	fs8,200(sp)
    83f4044a:	2cce                	fld	fs9,208(sp)
    83f4044c:	2d6e                	fld	fs10,216(sp)
    83f4044e:	3d8e                	fld	fs11,224(sp)
    83f40450:	3e2e                	fld	ft8,232(sp)
    83f40452:	3ece                	fld	ft9,240(sp)
    83f40454:	3f6e                	fld	ft10,248(sp)
    83f40456:	2f92                	fld	ft11,256(sp)
    83f40458:	62b2                	ld	t0,264(sp)
    83f4045a:	00329073          	fssr	t0
    83f4045e:	6151                	addi	sp,sp,272
    83f40460:	6362                	ld	t1,24(sp)
    83f40462:	7382                	ld	t2,32(sp)
    83f40464:	7422                	ld	s0,40(sp)
    83f40466:	74c2                	ld	s1,48(sp)
    83f40468:	7562                	ld	a0,56(sp)
    83f4046a:	6586                	ld	a1,64(sp)
    83f4046c:	6626                	ld	a2,72(sp)
    83f4046e:	66c6                	ld	a3,80(sp)
    83f40470:	6766                	ld	a4,88(sp)
    83f40472:	7786                	ld	a5,96(sp)
    83f40474:	7826                	ld	a6,104(sp)
    83f40476:	78c6                	ld	a7,112(sp)
    83f40478:	7966                	ld	s2,120(sp)
    83f4047a:	698a                	ld	s3,128(sp)
    83f4047c:	6a2a                	ld	s4,136(sp)
    83f4047e:	6aca                	ld	s5,144(sp)
    83f40480:	6b6a                	ld	s6,152(sp)
    83f40482:	7b8a                	ld	s7,160(sp)
    83f40484:	7c2a                	ld	s8,168(sp)
    83f40486:	7cca                	ld	s9,176(sp)
    83f40488:	7d6a                	ld	s10,184(sp)
    83f4048a:	6d8e                	ld	s11,192(sp)
    83f4048c:	6e2e                	ld	t3,200(sp)
    83f4048e:	6ece                	ld	t4,208(sp)
    83f40490:	6f6e                	ld	t5,216(sp)
    83f40492:	7f8e                	ld	t6,224(sp)
    83f40494:	72ae                	ld	t0,232(sp)
    83f40496:	02a1                	addi	t0,t0,8
    83f40498:	30029073          	csrw	mstatus,t0
    83f4049c:	62c2                	ld	t0,16(sp)
    83f4049e:	616d                	addi	sp,sp,240
    83f404a0:	8082                	ret
    83f404a2:	00000013          	nop
    83f404a6:	00000013          	nop
    83f404aa:	00000013          	nop
    83f404ae:	00000013          	nop
    83f404b2:	00000013          	nop
    83f404b6:	00000013          	nop
    83f404ba:	00000013          	nop
    83f404be:	00000013          	nop
    83f404c2:	00000013          	nop
    83f404c6:	00000013          	nop
    83f404ca:	00000013          	nop
    83f404ce:	00000013          	nop
    83f404d2:	00000013          	nop
    83f404d6:	00000013          	nop
    83f404da:	00000013          	nop
    83f404de:	00000013          	nop
    83f404e2:	00000013          	nop
    83f404e6:	00000013          	nop
    83f404ea:	00000013          	nop
    83f404ee:	00000013          	nop
    83f404f2:	00000013          	nop
    83f404f6:	00000013          	nop
    83f404fa:	00000013          	nop
    83f404fe:	0001                	nop

0000000083f40500 <pxPortInitialiseStack>:
    83f40500:	300022f3          	csrr	t0,mstatus
    83f40504:	ff72f293          	andi	t0,t0,-9
    83f40508:	18800313          	li	t1,392
    83f4050c:	0312                	slli	t1,t1,0x4
    83f4050e:	0062e2b3          	or	t0,t0,t1
    83f40512:	1561                	addi	a0,a0,-8
    83f40514:	00553023          	sd	t0,0(a0)
    83f40518:	f5050513          	addi	a0,a0,-176
    83f4051c:	e110                	sd	a2,0(a0)
    83f4051e:	fd050513          	addi	a0,a0,-48
    83f40522:	00053023          	sd	zero,0(a0)
    83f40526:	02200293          	li	t0,34

0000000083f4052a <chip_specific_stack_frame>:
    83f4052a:	00028763          	beqz	t0,83f40538 <chip_specific_stack_frame+0xe>
    83f4052e:	1561                	addi	a0,a0,-8
    83f40530:	00053023          	sd	zero,0(a0)
    83f40534:	12fd                	addi	t0,t0,-1
    83f40536:	bfd5                	j	83f4052a <chip_specific_stack_frame>
    83f40538:	1561                	addi	a0,a0,-8
    83f4053a:	e10c                	sd	a1,0(a0)
    83f4053c:	8082                	ret
	...

0000000083f40590 <atan>:
    83f40590:	e20507d3          	fmv.x.d	a5,fa0
    83f40594:	1101                	addi	sp,sp,-32
    83f40596:	e426                	sd	s1,8(sp)
    83f40598:	4207d493          	srai	s1,a5,0x20
    83f4059c:	e822                	sd	s0,16(sp)
    83f4059e:	02149413          	slli	s0,s1,0x21
    83f405a2:	ec06                	sd	ra,24(sp)
    83f405a4:	44100737          	lui	a4,0x44100
    83f405a8:	9005                	srli	s0,s0,0x21
    83f405aa:	02e44f63          	blt	s0,a4,83f405e8 <atan+0x58>
    83f405ae:	7ff00737          	lui	a4,0x7ff00
    83f405b2:	02874263          	blt	a4,s0,83f405d6 <atan+0x46>
    83f405b6:	00e40d63          	beq	s0,a4,83f405d0 <atan+0x40>
    83f405ba:	12905663          	blez	s1,83f406e6 <atan+0x156>
    83f405be:	60e2                	ld	ra,24(sp)
    83f405c0:	6442                	ld	s0,16(sp)
    83f405c2:	64a2                	ld	s1,8(sp)
    83f405c4:	00012797          	auipc	a5,0x12
    83f405c8:	e447b507          	fld	fa0,-444(a5) # 83f52408 <__func__.1+0x210>
    83f405cc:	6105                	addi	sp,sp,32
    83f405ce:	8082                	ret
    83f405d0:	0007869b          	sext.w	a3,a5
    83f405d4:	d2fd                	beqz	a3,83f405ba <atan+0x2a>
    83f405d6:	f20787d3          	fmv.d.x	fa5,a5
    83f405da:	02f7f553          	fadd.d	fa0,fa5,fa5
    83f405de:	60e2                	ld	ra,24(sp)
    83f405e0:	6442                	ld	s0,16(sp)
    83f405e2:	64a2                	ld	s1,8(sp)
    83f405e4:	6105                	addi	sp,sp,32
    83f405e6:	8082                	ret
    83f405e8:	3fdc0737          	lui	a4,0x3fdc0
    83f405ec:	10e45663          	bge	s0,a4,83f406f8 <atan+0x168>
    83f405f0:	3e200737          	lui	a4,0x3e200
    83f405f4:	0ce44b63          	blt	s0,a4,83f406ca <atan+0x13a>
    83f405f8:	577d                	li	a4,-1
    83f405fa:	f20786d3          	fmv.d.x	fa3,a5
    83f405fe:	00012697          	auipc	a3,0x12
    83f40602:	ec26b787          	fld	fa5,-318(a3) # 83f524c0 <xISRStackTop+0x30>
    83f40606:	00012697          	auipc	a3,0x12
    83f4060a:	ec26b507          	fld	fa0,-318(a3) # 83f524c8 <xISRStackTop+0x38>
    83f4060e:	12d6f653          	fmul.d	fa2,fa3,fa3
    83f40612:	00012697          	auipc	a3,0x12
    83f40616:	ede6b707          	fld	fa4,-290(a3) # 83f524f0 <xISRStackTop+0x60>
    83f4061a:	00012697          	auipc	a3,0x12
    83f4061e:	ede6b307          	fld	ft6,-290(a3) # 83f524f8 <xISRStackTop+0x68>
    83f40622:	00012697          	auipc	a3,0x12
    83f40626:	eae6b287          	fld	ft5,-338(a3) # 83f524d0 <xISRStackTop+0x40>
    83f4062a:	00012697          	auipc	a3,0x12
    83f4062e:	ed66b207          	fld	ft4,-298(a3) # 83f52500 <xISRStackTop+0x70>
    83f40632:	00012697          	auipc	a3,0x12
    83f40636:	ea66b187          	fld	ft3,-346(a3) # 83f524d8 <xISRStackTop+0x48>
    83f4063a:	00012697          	auipc	a3,0x12
    83f4063e:	ece6b107          	fld	ft2,-306(a3) # 83f52508 <xISRStackTop+0x78>
    83f40642:	12c676d3          	fmul.d	fa3,fa2,fa2
    83f40646:	00012697          	auipc	a3,0x12
    83f4064a:	e9a6b087          	fld	ft1,-358(a3) # 83f524e0 <xISRStackTop+0x50>
    83f4064e:	00012697          	auipc	a3,0x12
    83f40652:	ec26b007          	fld	ft0,-318(a3) # 83f52510 <xISRStackTop+0x80>
    83f40656:	00012697          	auipc	a3,0x12
    83f4065a:	e926b587          	fld	fa1,-366(a3) # 83f524e8 <xISRStackTop+0x58>
    83f4065e:	56fd                	li	a3,-1
    83f40660:	52f6f543          	fmadd.d	fa0,fa3,fa5,fa0
    83f40664:	32e6f7c3          	fmadd.d	fa5,fa3,fa4,ft6
    83f40668:	2ad57543          	fmadd.d	fa0,fa0,fa3,ft5
    83f4066c:	22d7f7c3          	fmadd.d	fa5,fa5,fa3,ft4
    83f40670:	1ad57543          	fmadd.d	fa0,fa0,fa3,ft3
    83f40674:	12d7f7c3          	fmadd.d	fa5,fa5,fa3,ft2
    83f40678:	0ad57543          	fmadd.d	fa0,fa0,fa3,ft1
    83f4067c:	02d7f7c3          	fmadd.d	fa5,fa5,fa3,ft0
    83f40680:	5ad57543          	fmadd.d	fa0,fa0,fa3,fa1
    83f40684:	12d7f7d3          	fmul.d	fa5,fa5,fa3
    83f40688:	7ac57543          	fmadd.d	fa0,fa0,fa2,fa5
    83f4068c:	f20787d3          	fmv.d.x	fa5,a5
    83f40690:	12a7f553          	fmul.d	fa0,fa5,fa0
    83f40694:	08d70e63          	beq	a4,a3,83f40730 <atan+0x1a0>
    83f40698:	070e                	slli	a4,a4,0x3
    83f4069a:	00010697          	auipc	a3,0x10
    83f4069e:	33e68693          	addi	a3,a3,830 # 83f509d8 <atanhi>
    83f406a2:	9736                	add	a4,a4,a3
    83f406a4:	3318                	fld	fa4,32(a4)
    83f406a6:	231c                	fld	fa5,0(a4)
    83f406a8:	0ae57553          	fsub.d	fa0,fa0,fa4
    83f406ac:	f2078753          	fmv.d.x	fa4,a5
    83f406b0:	0ae57553          	fsub.d	fa0,fa0,fa4
    83f406b4:	0aa7f553          	fsub.d	fa0,fa5,fa0
    83f406b8:	f204d3e3          	bgez	s1,83f405de <atan+0x4e>
    83f406bc:	60e2                	ld	ra,24(sp)
    83f406be:	6442                	ld	s0,16(sp)
    83f406c0:	64a2                	ld	s1,8(sp)
    83f406c2:	22a51553          	fneg.d	fa0,fa0
    83f406c6:	6105                	addi	sp,sp,32
    83f406c8:	8082                	ret
    83f406ca:	00012717          	auipc	a4,0x12
    83f406ce:	dd673787          	fld	fa5,-554(a4) # 83f524a0 <xISRStackTop+0x10>
    83f406d2:	02f577d3          	fadd.d	fa5,fa0,fa5
    83f406d6:	00012717          	auipc	a4,0x12
    83f406da:	c3a73707          	fld	fa4,-966(a4) # 83f52310 <__func__.1+0x118>
    83f406de:	a2f71753          	flt.d	a4,fa4,fa5
    83f406e2:	db19                	beqz	a4,83f405f8 <atan+0x68>
    83f406e4:	bded                	j	83f405de <atan+0x4e>
    83f406e6:	60e2                	ld	ra,24(sp)
    83f406e8:	6442                	ld	s0,16(sp)
    83f406ea:	64a2                	ld	s1,8(sp)
    83f406ec:	00012797          	auipc	a5,0x12
    83f406f0:	dac7b507          	fld	fa0,-596(a5) # 83f52498 <xISRStackTop+0x8>
    83f406f4:	6105                	addi	sp,sp,32
    83f406f6:	8082                	ret
    83f406f8:	250000ef          	jal	ra,83f40948 <fabs>
    83f406fc:	3ff307b7          	lui	a5,0x3ff30
    83f40700:	02f45f63          	bge	s0,a5,83f4073e <atan+0x1ae>
    83f40704:	3fe607b7          	lui	a5,0x3fe60
    83f40708:	06f45b63          	bge	s0,a5,83f4077e <atan+0x1ee>
    83f4070c:	00012797          	auipc	a5,0x12
    83f40710:	d9c7b707          	fld	fa4,-612(a5) # 83f524a8 <xISRStackTop+0x18>
    83f40714:	00012797          	auipc	a5,0x12
    83f40718:	d9c7b787          	fld	fa5,-612(a5) # 83f524b0 <xISRStackTop+0x20>
    83f4071c:	7ae577c3          	fmadd.d	fa5,fa0,fa4,fa5
    83f40720:	02e57553          	fadd.d	fa0,fa0,fa4
    83f40724:	4701                	li	a4,0
    83f40726:	1aa7f7d3          	fdiv.d	fa5,fa5,fa0
    83f4072a:	e20787d3          	fmv.x.d	a5,fa5
    83f4072e:	b5f1                	j	83f405fa <atan+0x6a>
    83f40730:	60e2                	ld	ra,24(sp)
    83f40732:	6442                	ld	s0,16(sp)
    83f40734:	64a2                	ld	s1,8(sp)
    83f40736:	0aa7f553          	fsub.d	fa0,fa5,fa0
    83f4073a:	6105                	addi	sp,sp,32
    83f4073c:	8082                	ret
    83f4073e:	400387b7          	lui	a5,0x40038
    83f40742:	02f45463          	bge	s0,a5,83f4076a <atan+0x1da>
    83f40746:	00012797          	auipc	a5,0x12
    83f4074a:	d727b787          	fld	fa5,-654(a5) # 83f524b8 <xISRStackTop+0x28>
    83f4074e:	00012797          	auipc	a5,0x12
    83f40752:	bc27b687          	fld	fa3,-1086(a5) # 83f52310 <__func__.1+0x118>
    83f40756:	0af57753          	fsub.d	fa4,fa0,fa5
    83f4075a:	6af57543          	fmadd.d	fa0,fa0,fa5,fa3
    83f4075e:	4709                	li	a4,2
    83f40760:	1aa777d3          	fdiv.d	fa5,fa4,fa0
    83f40764:	e20787d3          	fmv.x.d	a5,fa5
    83f40768:	bd49                	j	83f405fa <atan+0x6a>
    83f4076a:	00012797          	auipc	a5,0x12
    83f4076e:	d467b787          	fld	fa5,-698(a5) # 83f524b0 <xISRStackTop+0x20>
    83f40772:	1aa7f7d3          	fdiv.d	fa5,fa5,fa0
    83f40776:	470d                	li	a4,3
    83f40778:	e20787d3          	fmv.x.d	a5,fa5
    83f4077c:	bdbd                	j	83f405fa <atan+0x6a>
    83f4077e:	00012797          	auipc	a5,0x12
    83f40782:	b927b787          	fld	fa5,-1134(a5) # 83f52310 <__func__.1+0x118>
    83f40786:	0af57753          	fsub.d	fa4,fa0,fa5
    83f4078a:	02f57553          	fadd.d	fa0,fa0,fa5
    83f4078e:	4705                	li	a4,1
    83f40790:	1aa777d3          	fdiv.d	fa5,fa4,fa0
    83f40794:	e20787d3          	fmv.x.d	a5,fa5
    83f40798:	b58d                	j	83f405fa <atan+0x6a>

0000000083f4079a <ceil>:
    83f4079a:	e20507d3          	fmv.x.d	a5,fa0
    83f4079e:	464d                	li	a2,19
    83f407a0:	4347d713          	srai	a4,a5,0x34
    83f407a4:	7ff77713          	andi	a4,a4,2047
    83f407a8:	c017081b          	addiw	a6,a4,-1023
    83f407ac:	4207d893          	srai	a7,a5,0x20
    83f407b0:	0007851b          	sext.w	a0,a5
    83f407b4:	09064863          	blt	a2,a6,83f40844 <ceil+0xaa>
    83f407b8:	06084163          	bltz	a6,83f4081a <ceil+0x80>
    83f407bc:	00100737          	lui	a4,0x100
    83f407c0:	fff7059b          	addiw	a1,a4,-1
    83f407c4:	4105d5bb          	sraw	a1,a1,a6
    83f407c8:	00b8f6b3          	and	a3,a7,a1
    83f407cc:	8ec9                	or	a3,a3,a0
    83f407ce:	2681                	sext.w	a3,a3
    83f407d0:	e2050653          	fmv.x.d	a2,fa0
    83f407d4:	c2a1                	beqz	a3,83f40814 <ceil+0x7a>
    83f407d6:	00012697          	auipc	a3,0x12
    83f407da:	cca6b787          	fld	fa5,-822(a3) # 83f524a0 <xISRStackTop+0x10>
    83f407de:	02f577d3          	fadd.d	fa5,fa0,fa5
    83f407e2:	f2000753          	fmv.d.x	fa4,zero
    83f407e6:	a2f717d3          	flt.d	a5,fa4,fa5
    83f407ea:	cf91                	beqz	a5,83f40806 <ceil+0x6c>
    83f407ec:	01105663          	blez	a7,83f407f8 <ceil+0x5e>
    83f407f0:	4107573b          	sraw	a4,a4,a6
    83f407f4:	011708bb          	addw	a7,a4,a7
    83f407f8:	fff5c713          	not	a4,a1
    83f407fc:	01177733          	and	a4,a4,a7
    83f40800:	0007089b          	sext.w	a7,a4
    83f40804:	4501                	li	a0,0
    83f40806:	02051793          	slli	a5,a0,0x20
    83f4080a:	9381                	srli	a5,a5,0x20
    83f4080c:	02089713          	slli	a4,a7,0x20
    83f40810:	00f76633          	or	a2,a4,a5
    83f40814:	f2060553          	fmv.d.x	fa0,a2
    83f40818:	8082                	ret
    83f4081a:	00012717          	auipc	a4,0x12
    83f4081e:	c8673787          	fld	fa5,-890(a4) # 83f524a0 <xISRStackTop+0x10>
    83f40822:	02f577d3          	fadd.d	fa5,fa0,fa5
    83f40826:	f2000753          	fmv.d.x	fa4,zero
    83f4082a:	a2f717d3          	flt.d	a5,fa4,fa5
    83f4082e:	dfe1                	beqz	a5,83f40806 <ceil+0x6c>
    83f40830:	0808cb63          	bltz	a7,83f408c6 <ceil+0x12c>
    83f40834:	00a8e6b3          	or	a3,a7,a0
    83f40838:	4501                	li	a0,0
    83f4083a:	3ff008b7          	lui	a7,0x3ff00
    83f4083e:	f6e1                	bnez	a3,83f40806 <ceil+0x6c>
    83f40840:	4881                	li	a7,0
    83f40842:	b7d1                	j	83f40806 <ceil+0x6c>
    83f40844:	03300613          	li	a2,51
    83f40848:	01065d63          	bge	a2,a6,83f40862 <ceil+0xc8>
    83f4084c:	40000713          	li	a4,1024
    83f40850:	e2050653          	fmv.x.d	a2,fa0
    83f40854:	fce810e3          	bne	a6,a4,83f40814 <ceil+0x7a>
    83f40858:	02a577d3          	fadd.d	fa5,fa0,fa0
    83f4085c:	e2078653          	fmv.x.d	a2,fa5
    83f40860:	bf55                	j	83f40814 <ceil+0x7a>
    83f40862:	567d                	li	a2,-1
    83f40864:	bed7071b          	addiw	a4,a4,-1043
    83f40868:	00e6573b          	srlw	a4,a2,a4
    83f4086c:	00e57e33          	and	t3,a0,a4
    83f40870:	2e01                	sext.w	t3,t3
    83f40872:	e2050653          	fmv.x.d	a2,fa0
    83f40876:	f80e0fe3          	beqz	t3,83f40814 <ceil+0x7a>
    83f4087a:	00012617          	auipc	a2,0x12
    83f4087e:	c2663787          	fld	fa5,-986(a2) # 83f524a0 <xISRStackTop+0x10>
    83f40882:	02f577d3          	fadd.d	fa5,fa0,fa5
    83f40886:	f2000753          	fmv.d.x	fa4,zero
    83f4088a:	a2f717d3          	flt.d	a5,fa4,fa5
    83f4088e:	dfa5                	beqz	a5,83f40806 <ceil+0x6c>
    83f40890:	03105263          	blez	a7,83f408b4 <ceil+0x11a>
    83f40894:	47d1                	li	a5,20
    83f40896:	02f80663          	beq	a6,a5,83f408c2 <ceil+0x128>
    83f4089a:	03400793          	li	a5,52
    83f4089e:	410787bb          	subw	a5,a5,a6
    83f408a2:	4585                	li	a1,1
    83f408a4:	00f595bb          	sllw	a1,a1,a5
    83f408a8:	00a586bb          	addw	a3,a1,a0
    83f408ac:	02a6f163          	bgeu	a3,a0,83f408ce <ceil+0x134>
    83f408b0:	2885                	addiw	a7,a7,1
    83f408b2:	8536                	mv	a0,a3
    83f408b4:	fff74713          	not	a4,a4
    83f408b8:	00a777b3          	and	a5,a4,a0
    83f408bc:	0007851b          	sext.w	a0,a5
    83f408c0:	b799                	j	83f40806 <ceil+0x6c>
    83f408c2:	2885                	addiw	a7,a7,1
    83f408c4:	bfc5                	j	83f408b4 <ceil+0x11a>
    83f408c6:	4501                	li	a0,0
    83f408c8:	800008b7          	lui	a7,0x80000
    83f408cc:	bf2d                	j	83f40806 <ceil+0x6c>
    83f408ce:	8536                	mv	a0,a3
    83f408d0:	b7d5                	j	83f408b4 <ceil+0x11a>

0000000083f408d2 <cos>:
    83f408d2:	e20507d3          	fmv.x.d	a5,fa0
    83f408d6:	3fe926b7          	lui	a3,0x3fe92
    83f408da:	1fb68693          	addi	a3,a3,507 # 3fe921fb <CVIMMAP_DRAM_SIZE+0x3be921fb>
    83f408de:	00179713          	slli	a4,a5,0x1
    83f408e2:	9305                	srli	a4,a4,0x21
    83f408e4:	02e6de63          	bge	a3,a4,83f40920 <cos+0x4e>
    83f408e8:	7ff006b7          	lui	a3,0x7ff00
    83f408ec:	00d74563          	blt	a4,a3,83f408f6 <cos+0x24>
    83f408f0:	0aa57553          	fsub.d	fa0,fa0,fa0
    83f408f4:	8082                	ret
    83f408f6:	1101                	addi	sp,sp,-32
    83f408f8:	850a                	mv	a0,sp
    83f408fa:	ec06                	sd	ra,24(sp)
    83f408fc:	372010ef          	jal	ra,83f41c6e <__ieee754_rem_pio2>
    83f40900:	890d                	andi	a0,a0,3
    83f40902:	4785                	li	a5,1
    83f40904:	02f50263          	beq	a0,a5,83f40928 <cos+0x56>
    83f40908:	4789                	li	a5,2
    83f4090a:	25a2                	fld	fa1,8(sp)
    83f4090c:	2502                	fld	fa0,0(sp)
    83f4090e:	02f50863          	beq	a0,a5,83f4093e <cos+0x6c>
    83f40912:	c11d                	beqz	a0,83f40938 <cos+0x66>
    83f40914:	4505                	li	a0,1
    83f40916:	09a020ef          	jal	ra,83f429b0 <__kernel_sin>
    83f4091a:	60e2                	ld	ra,24(sp)
    83f4091c:	6105                	addi	sp,sp,32
    83f4091e:	8082                	ret
    83f40920:	f20005d3          	fmv.d.x	fa1,zero
    83f40924:	7ec0106f          	j	83f42110 <__kernel_cos>
    83f40928:	25a2                	fld	fa1,8(sp)
    83f4092a:	2502                	fld	fa0,0(sp)
    83f4092c:	4505                	li	a0,1
    83f4092e:	082020ef          	jal	ra,83f429b0 <__kernel_sin>
    83f40932:	22a51553          	fneg.d	fa0,fa0
    83f40936:	b7d5                	j	83f4091a <cos+0x48>
    83f40938:	7d8010ef          	jal	ra,83f42110 <__kernel_cos>
    83f4093c:	bff9                	j	83f4091a <cos+0x48>
    83f4093e:	7d2010ef          	jal	ra,83f42110 <__kernel_cos>
    83f40942:	22a51553          	fneg.d	fa0,fa0
    83f40946:	bfd1                	j	83f4091a <cos+0x48>

0000000083f40948 <fabs>:
    83f40948:	e20506d3          	fmv.x.d	a3,fa0
    83f4094c:	57fd                	li	a5,-1
    83f4094e:	9381                	srli	a5,a5,0x20
    83f40950:	00169713          	slli	a4,a3,0x1
    83f40954:	9305                	srli	a4,a4,0x21
    83f40956:	1702                	slli	a4,a4,0x20
    83f40958:	8ff5                	and	a5,a5,a3
    83f4095a:	8fd9                	or	a5,a5,a4
    83f4095c:	f2078553          	fmv.d.x	fa0,a5
    83f40960:	8082                	ret

0000000083f40962 <floor>:
    83f40962:	e20507d3          	fmv.x.d	a5,fa0
    83f40966:	464d                	li	a2,19
    83f40968:	4347d713          	srai	a4,a5,0x34
    83f4096c:	7ff77713          	andi	a4,a4,2047
    83f40970:	c017081b          	addiw	a6,a4,-1023
    83f40974:	4207d893          	srai	a7,a5,0x20
    83f40978:	0007851b          	sext.w	a0,a5
    83f4097c:	09064363          	blt	a2,a6,83f40a02 <floor+0xa0>
    83f40980:	06084163          	bltz	a6,83f409e2 <floor+0x80>
    83f40984:	001005b7          	lui	a1,0x100
    83f40988:	fff5869b          	addiw	a3,a1,-1
    83f4098c:	4106d6bb          	sraw	a3,a3,a6
    83f40990:	00d8f733          	and	a4,a7,a3
    83f40994:	8f49                	or	a4,a4,a0
    83f40996:	2701                	sext.w	a4,a4
    83f40998:	e2050653          	fmv.x.d	a2,fa0
    83f4099c:	c321                	beqz	a4,83f409dc <floor+0x7a>
    83f4099e:	00012717          	auipc	a4,0x12
    83f409a2:	b0273787          	fld	fa5,-1278(a4) # 83f524a0 <xISRStackTop+0x10>
    83f409a6:	02f577d3          	fadd.d	fa5,fa0,fa5
    83f409aa:	f2000753          	fmv.d.x	fa4,zero
    83f409ae:	a2f717d3          	flt.d	a5,fa4,fa5
    83f409b2:	cf91                	beqz	a5,83f409ce <floor+0x6c>
    83f409b4:	0008d663          	bgez	a7,83f409c0 <floor+0x5e>
    83f409b8:	4105d73b          	sraw	a4,a1,a6
    83f409bc:	011708bb          	addw	a7,a4,a7
    83f409c0:	fff6c713          	not	a4,a3
    83f409c4:	01177733          	and	a4,a4,a7
    83f409c8:	0007089b          	sext.w	a7,a4
    83f409cc:	4501                	li	a0,0
    83f409ce:	02051793          	slli	a5,a0,0x20
    83f409d2:	9381                	srli	a5,a5,0x20
    83f409d4:	02089713          	slli	a4,a7,0x20
    83f409d8:	00f76633          	or	a2,a4,a5
    83f409dc:	f2060553          	fmv.d.x	fa0,a2
    83f409e0:	8082                	ret
    83f409e2:	00012717          	auipc	a4,0x12
    83f409e6:	abe73787          	fld	fa5,-1346(a4) # 83f524a0 <xISRStackTop+0x10>
    83f409ea:	02f577d3          	fadd.d	fa5,fa0,fa5
    83f409ee:	f2000753          	fmv.d.x	fa4,zero
    83f409f2:	a2f717d3          	flt.d	a5,fa4,fa5
    83f409f6:	dfe1                	beqz	a5,83f409ce <floor+0x6c>
    83f409f8:	0608c463          	bltz	a7,83f40a60 <floor+0xfe>
    83f409fc:	4501                	li	a0,0
    83f409fe:	4881                	li	a7,0
    83f40a00:	b7f9                	j	83f409ce <floor+0x6c>
    83f40a02:	03300613          	li	a2,51
    83f40a06:	01065d63          	bge	a2,a6,83f40a20 <floor+0xbe>
    83f40a0a:	40000713          	li	a4,1024
    83f40a0e:	e2050653          	fmv.x.d	a2,fa0
    83f40a12:	fce815e3          	bne	a6,a4,83f409dc <floor+0x7a>
    83f40a16:	02a577d3          	fadd.d	fa5,fa0,fa0
    83f40a1a:	e2078653          	fmv.x.d	a2,fa5
    83f40a1e:	bf7d                	j	83f409dc <floor+0x7a>
    83f40a20:	567d                	li	a2,-1
    83f40a22:	bed7071b          	addiw	a4,a4,-1043
    83f40a26:	00e6573b          	srlw	a4,a2,a4
    83f40a2a:	00e57e33          	and	t3,a0,a4
    83f40a2e:	2e01                	sext.w	t3,t3
    83f40a30:	e2050653          	fmv.x.d	a2,fa0
    83f40a34:	fa0e04e3          	beqz	t3,83f409dc <floor+0x7a>
    83f40a38:	00012617          	auipc	a2,0x12
    83f40a3c:	a6863787          	fld	fa5,-1432(a2) # 83f524a0 <xISRStackTop+0x10>
    83f40a40:	02f577d3          	fadd.d	fa5,fa0,fa5
    83f40a44:	f2000753          	fmv.d.x	fa4,zero
    83f40a48:	a2f717d3          	flt.d	a5,fa4,fa5
    83f40a4c:	d3c9                	beqz	a5,83f409ce <floor+0x6c>
    83f40a4e:	0208c463          	bltz	a7,83f40a76 <floor+0x114>
    83f40a52:	fff74713          	not	a4,a4
    83f40a56:	00a777b3          	and	a5,a4,a0
    83f40a5a:	0007851b          	sext.w	a0,a5
    83f40a5e:	bf85                	j	83f409ce <floor+0x6c>
    83f40a60:	02189313          	slli	t1,a7,0x21
    83f40a64:	02135313          	srli	t1,t1,0x21
    83f40a68:	006566b3          	or	a3,a0,t1
    83f40a6c:	4501                	li	a0,0
    83f40a6e:	d2a5                	beqz	a3,83f409ce <floor+0x6c>
    83f40a70:	bff008b7          	lui	a7,0xbff00
    83f40a74:	bfa9                	j	83f409ce <floor+0x6c>
    83f40a76:	47d1                	li	a5,20
    83f40a78:	02f80063          	beq	a6,a5,83f40a98 <floor+0x136>
    83f40a7c:	03400793          	li	a5,52
    83f40a80:	410787bb          	subw	a5,a5,a6
    83f40a84:	4585                	li	a1,1
    83f40a86:	00f595bb          	sllw	a1,a1,a5
    83f40a8a:	00a586bb          	addw	a3,a1,a0
    83f40a8e:	00a6f763          	bgeu	a3,a0,83f40a9c <floor+0x13a>
    83f40a92:	2885                	addiw	a7,a7,1
    83f40a94:	8536                	mv	a0,a3
    83f40a96:	bf75                	j	83f40a52 <floor+0xf0>
    83f40a98:	2885                	addiw	a7,a7,1
    83f40a9a:	bf65                	j	83f40a52 <floor+0xf0>
    83f40a9c:	8536                	mv	a0,a3
    83f40a9e:	bf55                	j	83f40a52 <floor+0xf0>

0000000083f40aa0 <round>:
    83f40aa0:	e20507d3          	fmv.x.d	a5,fa0
    83f40aa4:	484d                	li	a6,19
    83f40aa6:	4347d693          	srai	a3,a5,0x34
    83f40aaa:	7ff6f693          	andi	a3,a3,2047
    83f40aae:	c016861b          	addiw	a2,a3,-1023
    83f40ab2:	4207d713          	srai	a4,a5,0x20
    83f40ab6:	8532                	mv	a0,a2
    83f40ab8:	88ba                	mv	a7,a4
    83f40aba:	0007859b          	sext.w	a1,a5
    83f40abe:	04c84c63          	blt	a6,a2,83f40b16 <round+0x76>
    83f40ac2:	02064e63          	bltz	a2,83f40afe <round+0x5e>
    83f40ac6:	001006b7          	lui	a3,0x100
    83f40aca:	36fd                	addiw	a3,a3,-1
    83f40acc:	40c6d6bb          	sraw	a3,a3,a2
    83f40ad0:	8f75                	and	a4,a4,a3
    83f40ad2:	8dd9                	or	a1,a1,a4
    83f40ad4:	2581                	sext.w	a1,a1
    83f40ad6:	c18d                	beqz	a1,83f40af8 <round+0x58>
    83f40ad8:	00080737          	lui	a4,0x80
    83f40adc:	40c7573b          	sraw	a4,a4,a2
    83f40ae0:	011708bb          	addw	a7,a4,a7
    83f40ae4:	fff6c713          	not	a4,a3
    83f40ae8:	01177733          	and	a4,a4,a7
    83f40aec:	2701                	sext.w	a4,a4
    83f40aee:	4781                	li	a5,0
    83f40af0:	1782                	slli	a5,a5,0x20
    83f40af2:	9381                	srli	a5,a5,0x20
    83f40af4:	1702                	slli	a4,a4,0x20
    83f40af6:	8fd9                	or	a5,a5,a4
    83f40af8:	f2078553          	fmv.d.x	fa0,a5
    83f40afc:	8082                	ret
    83f40afe:	80000737          	lui	a4,0x80000
    83f40b02:	57fd                	li	a5,-1
    83f40b04:	00e8f733          	and	a4,a7,a4
    83f40b08:	fef612e3          	bne	a2,a5,83f40aec <round+0x4c>
    83f40b0c:	3ff007b7          	lui	a5,0x3ff00
    83f40b10:	8f5d                	or	a4,a4,a5
    83f40b12:	4781                	li	a5,0
    83f40b14:	bff1                	j	83f40af0 <round+0x50>
    83f40b16:	03300813          	li	a6,51
    83f40b1a:	00c85b63          	bge	a6,a2,83f40b30 <round+0x90>
    83f40b1e:	40000713          	li	a4,1024
    83f40b22:	fce61be3          	bne	a2,a4,83f40af8 <round+0x58>
    83f40b26:	02a577d3          	fadd.d	fa5,fa0,fa0
    83f40b2a:	e20787d3          	fmv.x.d	a5,fa5
    83f40b2e:	b7e9                	j	83f40af8 <round+0x58>
    83f40b30:	567d                	li	a2,-1
    83f40b32:	bed6869b          	addiw	a3,a3,-1043
    83f40b36:	00d656bb          	srlw	a3,a2,a3
    83f40b3a:	00d5f633          	and	a2,a1,a3
    83f40b3e:	2601                	sext.w	a2,a2
    83f40b40:	de45                	beqz	a2,83f40af8 <round+0x58>
    83f40b42:	03300793          	li	a5,51
    83f40b46:	40a7853b          	subw	a0,a5,a0
    83f40b4a:	4785                	li	a5,1
    83f40b4c:	00a797bb          	sllw	a5,a5,a0
    83f40b50:	9fad                	addw	a5,a5,a1
    83f40b52:	0007861b          	sext.w	a2,a5
    83f40b56:	00b67363          	bgeu	a2,a1,83f40b5c <round+0xbc>
    83f40b5a:	2705                	addiw	a4,a4,1
    83f40b5c:	fff6c693          	not	a3,a3
    83f40b60:	8ff5                	and	a5,a5,a3
    83f40b62:	2781                	sext.w	a5,a5
    83f40b64:	b771                	j	83f40af0 <round+0x50>

0000000083f40b66 <sin>:
    83f40b66:	e20507d3          	fmv.x.d	a5,fa0
    83f40b6a:	3fe926b7          	lui	a3,0x3fe92
    83f40b6e:	1fb68693          	addi	a3,a3,507 # 3fe921fb <CVIMMAP_DRAM_SIZE+0x3be921fb>
    83f40b72:	00179713          	slli	a4,a5,0x1
    83f40b76:	9305                	srli	a4,a4,0x21
    83f40b78:	02e6df63          	bge	a3,a4,83f40bb6 <sin+0x50>
    83f40b7c:	7ff006b7          	lui	a3,0x7ff00
    83f40b80:	00d74563          	blt	a4,a3,83f40b8a <sin+0x24>
    83f40b84:	0aa57553          	fsub.d	fa0,fa0,fa0
    83f40b88:	8082                	ret
    83f40b8a:	1101                	addi	sp,sp,-32
    83f40b8c:	850a                	mv	a0,sp
    83f40b8e:	ec06                	sd	ra,24(sp)
    83f40b90:	0de010ef          	jal	ra,83f41c6e <__ieee754_rem_pio2>
    83f40b94:	890d                	andi	a0,a0,3
    83f40b96:	4785                	li	a5,1
    83f40b98:	02f50463          	beq	a0,a5,83f40bc0 <sin+0x5a>
    83f40b9c:	4789                	li	a5,2
    83f40b9e:	25a2                	fld	fa1,8(sp)
    83f40ba0:	2502                	fld	fa0,0(sp)
    83f40ba2:	02f50863          	beq	a0,a5,83f40bd2 <sin+0x6c>
    83f40ba6:	c115                	beqz	a0,83f40bca <sin+0x64>
    83f40ba8:	568010ef          	jal	ra,83f42110 <__kernel_cos>
    83f40bac:	22a51553          	fneg.d	fa0,fa0
    83f40bb0:	60e2                	ld	ra,24(sp)
    83f40bb2:	6105                	addi	sp,sp,32
    83f40bb4:	8082                	ret
    83f40bb6:	f20005d3          	fmv.d.x	fa1,zero
    83f40bba:	4501                	li	a0,0
    83f40bbc:	5f50106f          	j	83f429b0 <__kernel_sin>
    83f40bc0:	25a2                	fld	fa1,8(sp)
    83f40bc2:	2502                	fld	fa0,0(sp)
    83f40bc4:	54c010ef          	jal	ra,83f42110 <__kernel_cos>
    83f40bc8:	b7e5                	j	83f40bb0 <sin+0x4a>
    83f40bca:	4505                	li	a0,1
    83f40bcc:	5e5010ef          	jal	ra,83f429b0 <__kernel_sin>
    83f40bd0:	b7c5                	j	83f40bb0 <sin+0x4a>
    83f40bd2:	4505                	li	a0,1
    83f40bd4:	5dd010ef          	jal	ra,83f429b0 <__kernel_sin>
    83f40bd8:	22a51553          	fneg.d	fa0,fa0
    83f40bdc:	bfd1                	j	83f40bb0 <sin+0x4a>

0000000083f40bde <atan2>:
    83f40bde:	a495                	j	83f40e42 <__ieee754_atan2>

0000000083f40be0 <exp>:
    83f40be0:	1101                	addi	sp,sp,-32
    83f40be2:	a422                	fsd	fs0,8(sp)
    83f40be4:	a026                	fsd	fs1,0(sp)
    83f40be6:	22a50453          	fmv.d	fs0,fa0
    83f40bea:	ec06                	sd	ra,24(sp)
    83f40bec:	440000ef          	jal	ra,83f4102c <__ieee754_exp>
    83f40bf0:	0001f717          	auipc	a4,0x1f
    83f40bf4:	fb072703          	lw	a4,-80(a4) # 83f5fba0 <__fdlib_version>
    83f40bf8:	57fd                	li	a5,-1
    83f40bfa:	22a504d3          	fmv.d	fs1,fa0
    83f40bfe:	02f70563          	beq	a4,a5,83f40c28 <exp+0x48>
    83f40c02:	22840553          	fmv.d	fa0,fs0
    83f40c06:	64f010ef          	jal	ra,83f42a54 <finite>
    83f40c0a:	cd19                	beqz	a0,83f40c28 <exp+0x48>
    83f40c0c:	00012797          	auipc	a5,0x12
    83f40c10:	9147b787          	fld	fa5,-1772(a5) # 83f52520 <xISRStackTop+0x90>
    83f40c14:	a28797d3          	flt.d	a5,fa5,fs0
    83f40c18:	e79d                	bnez	a5,83f40c46 <exp+0x66>
    83f40c1a:	00012797          	auipc	a5,0x12
    83f40c1e:	90e7b787          	fld	fa5,-1778(a5) # 83f52528 <xISRStackTop+0x98>
    83f40c22:	a2f417d3          	flt.d	a5,fs0,fa5
    83f40c26:	eb81                	bnez	a5,83f40c36 <exp+0x56>
    83f40c28:	60e2                	ld	ra,24(sp)
    83f40c2a:	22948553          	fmv.d	fa0,fs1
    83f40c2e:	2422                	fld	fs0,8(sp)
    83f40c30:	2482                	fld	fs1,0(sp)
    83f40c32:	6105                	addi	sp,sp,32
    83f40c34:	8082                	ret
    83f40c36:	0da020ef          	jal	ra,83f42d10 <__errno>
    83f40c3a:	02200793          	li	a5,34
    83f40c3e:	f20004d3          	fmv.d.x	fs1,zero
    83f40c42:	c11c                	sw	a5,0(a0)
    83f40c44:	b7d5                	j	83f40c28 <exp+0x48>
    83f40c46:	0ca020ef          	jal	ra,83f42d10 <__errno>
    83f40c4a:	02200793          	li	a5,34
    83f40c4e:	c11c                	sw	a5,0(a0)
    83f40c50:	00012797          	auipc	a5,0x12
    83f40c54:	8c87b487          	fld	fs1,-1848(a5) # 83f52518 <xISRStackTop+0x88>
    83f40c58:	bfc1                	j	83f40c28 <exp+0x48>

0000000083f40c5a <log>:
    83f40c5a:	1101                	addi	sp,sp,-32
    83f40c5c:	a422                	fsd	fs0,8(sp)
    83f40c5e:	ec06                	sd	ra,24(sp)
    83f40c60:	22a50453          	fmv.d	fs0,fa0
    83f40c64:	646000ef          	jal	ra,83f412aa <__ieee754_log>
    83f40c68:	0001f717          	auipc	a4,0x1f
    83f40c6c:	f3872703          	lw	a4,-200(a4) # 83f5fba0 <__fdlib_version>
    83f40c70:	57fd                	li	a5,-1
    83f40c72:	02f70663          	beq	a4,a5,83f40c9e <log+0x44>
    83f40c76:	a28427d3          	feq.d	a5,fs0,fs0
    83f40c7a:	c395                	beqz	a5,83f40c9e <log+0x44>
    83f40c7c:	f20007d3          	fmv.d.x	fa5,zero
    83f40c80:	a28797d3          	flt.d	a5,fa5,fs0
    83f40c84:	ef89                	bnez	a5,83f40c9e <log+0x44>
    83f40c86:	a2f427d3          	feq.d	a5,fs0,fa5
    83f40c8a:	cf91                	beqz	a5,83f40ca6 <log+0x4c>
    83f40c8c:	084020ef          	jal	ra,83f42d10 <__errno>
    83f40c90:	02200793          	li	a5,34
    83f40c94:	c11c                	sw	a5,0(a0)
    83f40c96:	00012797          	auipc	a5,0x12
    83f40c9a:	89a7b507          	fld	fa0,-1894(a5) # 83f52530 <xISRStackTop+0xa0>
    83f40c9e:	60e2                	ld	ra,24(sp)
    83f40ca0:	2422                	fld	fs0,8(sp)
    83f40ca2:	6105                	addi	sp,sp,32
    83f40ca4:	8082                	ret
    83f40ca6:	06a020ef          	jal	ra,83f42d10 <__errno>
    83f40caa:	60e2                	ld	ra,24(sp)
    83f40cac:	2422                	fld	fs0,8(sp)
    83f40cae:	02100793          	li	a5,33
    83f40cb2:	c11c                	sw	a5,0(a0)
    83f40cb4:	00011517          	auipc	a0,0x11
    83f40cb8:	53c50513          	addi	a0,a0,1340 # 83f521f0 <__func__.0+0x30>
    83f40cbc:	6105                	addi	sp,sp,32
    83f40cbe:	5ab0106f          	j	83f42a68 <nan>

0000000083f40cc2 <pow>:
    83f40cc2:	7179                	addi	sp,sp,-48
    83f40cc4:	ac22                	fsd	fs0,24(sp)
    83f40cc6:	a826                	fsd	fs1,16(sp)
    83f40cc8:	a44a                	fsd	fs2,8(sp)
    83f40cca:	22a504d3          	fmv.d	fs1,fa0
    83f40cce:	22b58453          	fmv.d	fs0,fa1
    83f40cd2:	f406                	sd	ra,40(sp)
    83f40cd4:	a04e                	fsd	fs3,0(sp)
    83f40cd6:	025000ef          	jal	ra,83f414fa <__ieee754_pow>
    83f40cda:	0001f717          	auipc	a4,0x1f
    83f40cde:	ec672703          	lw	a4,-314(a4) # 83f5fba0 <__fdlib_version>
    83f40ce2:	57fd                	li	a5,-1
    83f40ce4:	22a50953          	fmv.d	fs2,fa0
    83f40ce8:	02f70863          	beq	a4,a5,83f40d18 <pow+0x56>
    83f40cec:	a28427d3          	feq.d	a5,fs0,fs0
    83f40cf0:	c785                	beqz	a5,83f40d18 <pow+0x56>
    83f40cf2:	a294a7d3          	feq.d	a5,fs1,fs1
    83f40cf6:	c7a5                	beqz	a5,83f40d5e <pow+0x9c>
    83f40cf8:	f20009d3          	fmv.d.x	fs3,zero
    83f40cfc:	a334a7d3          	feq.d	a5,fs1,fs3
    83f40d00:	c78d                	beqz	a5,83f40d2a <pow+0x68>
    83f40d02:	a33427d3          	feq.d	a5,fs0,fs3
    83f40d06:	e3ad                	bnez	a5,83f40d68 <pow+0xa6>
    83f40d08:	22840553          	fmv.d	fa0,fs0
    83f40d0c:	549010ef          	jal	ra,83f42a54 <finite>
    83f40d10:	c501                	beqz	a0,83f40d18 <pow+0x56>
    83f40d12:	a33417d3          	flt.d	a5,fs0,fs3
    83f40d16:	e3c5                	bnez	a5,83f40db6 <pow+0xf4>
    83f40d18:	70a2                	ld	ra,40(sp)
    83f40d1a:	23290553          	fmv.d	fa0,fs2
    83f40d1e:	2462                	fld	fs0,24(sp)
    83f40d20:	24c2                	fld	fs1,16(sp)
    83f40d22:	2922                	fld	fs2,8(sp)
    83f40d24:	2982                	fld	fs3,0(sp)
    83f40d26:	6145                	addi	sp,sp,48
    83f40d28:	8082                	ret
    83f40d2a:	52b010ef          	jal	ra,83f42a54 <finite>
    83f40d2e:	c931                	beqz	a0,83f40d82 <pow+0xc0>
    83f40d30:	f20007d3          	fmv.d.x	fa5,zero
    83f40d34:	a2f927d3          	feq.d	a5,fs2,fa5
    83f40d38:	d3e5                	beqz	a5,83f40d18 <pow+0x56>
    83f40d3a:	22948553          	fmv.d	fa0,fs1
    83f40d3e:	517010ef          	jal	ra,83f42a54 <finite>
    83f40d42:	d979                	beqz	a0,83f40d18 <pow+0x56>
    83f40d44:	22840553          	fmv.d	fa0,fs0
    83f40d48:	50d010ef          	jal	ra,83f42a54 <finite>
    83f40d4c:	d571                	beqz	a0,83f40d18 <pow+0x56>
    83f40d4e:	7c3010ef          	jal	ra,83f42d10 <__errno>
    83f40d52:	02200793          	li	a5,34
    83f40d56:	f2000953          	fmv.d.x	fs2,zero
    83f40d5a:	c11c                	sw	a5,0(a0)
    83f40d5c:	bf75                	j	83f40d18 <pow+0x56>
    83f40d5e:	f20007d3          	fmv.d.x	fa5,zero
    83f40d62:	a2f427d3          	feq.d	a5,fs0,fa5
    83f40d66:	dbcd                	beqz	a5,83f40d18 <pow+0x56>
    83f40d68:	70a2                	ld	ra,40(sp)
    83f40d6a:	00011797          	auipc	a5,0x11
    83f40d6e:	5a67b907          	fld	fs2,1446(a5) # 83f52310 <__func__.1+0x118>
    83f40d72:	23290553          	fmv.d	fa0,fs2
    83f40d76:	2462                	fld	fs0,24(sp)
    83f40d78:	24c2                	fld	fs1,16(sp)
    83f40d7a:	2922                	fld	fs2,8(sp)
    83f40d7c:	2982                	fld	fs3,0(sp)
    83f40d7e:	6145                	addi	sp,sp,48
    83f40d80:	8082                	ret
    83f40d82:	22948553          	fmv.d	fa0,fs1
    83f40d86:	4cf010ef          	jal	ra,83f42a54 <finite>
    83f40d8a:	d15d                	beqz	a0,83f40d30 <pow+0x6e>
    83f40d8c:	22840553          	fmv.d	fa0,fs0
    83f40d90:	4c5010ef          	jal	ra,83f42a54 <finite>
    83f40d94:	dd51                	beqz	a0,83f40d30 <pow+0x6e>
    83f40d96:	a32927d3          	feq.d	a5,fs2,fs2
    83f40d9a:	c7a1                	beqz	a5,83f40de2 <pow+0x120>
    83f40d9c:	775010ef          	jal	ra,83f42d10 <__errno>
    83f40da0:	a33497d3          	flt.d	a5,fs1,fs3
    83f40da4:	02200713          	li	a4,34
    83f40da8:	c118                	sw	a4,0(a0)
    83f40daa:	e385                	bnez	a5,83f40dca <pow+0x108>
    83f40dac:	00011797          	auipc	a5,0x11
    83f40db0:	76c7b907          	fld	fs2,1900(a5) # 83f52518 <xISRStackTop+0x88>
    83f40db4:	b795                	j	83f40d18 <pow+0x56>
    83f40db6:	75b010ef          	jal	ra,83f42d10 <__errno>
    83f40dba:	02100793          	li	a5,33
    83f40dbe:	c11c                	sw	a5,0(a0)
    83f40dc0:	00011797          	auipc	a5,0x11
    83f40dc4:	7707b907          	fld	fs2,1904(a5) # 83f52530 <xISRStackTop+0xa0>
    83f40dc8:	bf81                	j	83f40d18 <pow+0x56>
    83f40dca:	22840553          	fmv.d	fa0,fs0
    83f40dce:	4a5010ef          	jal	ra,83f42a72 <rint>
    83f40dd2:	a28527d3          	feq.d	a5,fa0,fs0
    83f40dd6:	fbf9                	bnez	a5,83f40dac <pow+0xea>
    83f40dd8:	00011797          	auipc	a5,0x11
    83f40ddc:	7587b907          	fld	fs2,1880(a5) # 83f52530 <xISRStackTop+0xa0>
    83f40de0:	bf25                	j	83f40d18 <pow+0x56>
    83f40de2:	72f010ef          	jal	ra,83f42d10 <__errno>
    83f40de6:	02100793          	li	a5,33
    83f40dea:	1b39f953          	fdiv.d	fs2,fs3,fs3
    83f40dee:	c11c                	sw	a5,0(a0)
    83f40df0:	b725                	j	83f40d18 <pow+0x56>

0000000083f40df2 <sqrt>:
    83f40df2:	1101                	addi	sp,sp,-32
    83f40df4:	a422                	fsd	fs0,8(sp)
    83f40df6:	ec06                	sd	ra,24(sp)
    83f40df8:	22a50453          	fmv.d	fs0,fa0
    83f40dfc:	a026                	fsd	fs1,0(sp)
    83f40dfe:	136010ef          	jal	ra,83f41f34 <__ieee754_sqrt>
    83f40e02:	0001f717          	auipc	a4,0x1f
    83f40e06:	d9e72703          	lw	a4,-610(a4) # 83f5fba0 <__fdlib_version>
    83f40e0a:	57fd                	li	a5,-1
    83f40e0c:	00f70a63          	beq	a4,a5,83f40e20 <sqrt+0x2e>
    83f40e10:	a28427d3          	feq.d	a5,fs0,fs0
    83f40e14:	c791                	beqz	a5,83f40e20 <sqrt+0x2e>
    83f40e16:	f20004d3          	fmv.d.x	fs1,zero
    83f40e1a:	a29417d3          	flt.d	a5,fs0,fs1
    83f40e1e:	e791                	bnez	a5,83f40e2a <sqrt+0x38>
    83f40e20:	60e2                	ld	ra,24(sp)
    83f40e22:	2422                	fld	fs0,8(sp)
    83f40e24:	2482                	fld	fs1,0(sp)
    83f40e26:	6105                	addi	sp,sp,32
    83f40e28:	8082                	ret
    83f40e2a:	6e7010ef          	jal	ra,83f42d10 <__errno>
    83f40e2e:	60e2                	ld	ra,24(sp)
    83f40e30:	02100793          	li	a5,33
    83f40e34:	c11c                	sw	a5,0(a0)
    83f40e36:	1a94f553          	fdiv.d	fa0,fs1,fs1
    83f40e3a:	2422                	fld	fs0,8(sp)
    83f40e3c:	2482                	fld	fs1,0(sp)
    83f40e3e:	6105                	addi	sp,sp,32
    83f40e40:	8082                	ret

0000000083f40e42 <__ieee754_atan2>:
    83f40e42:	e2058653          	fmv.x.d	a2,fa1
    83f40e46:	80000737          	lui	a4,0x80000
    83f40e4a:	fff74713          	not	a4,a4
    83f40e4e:	0006051b          	sext.w	a0,a2
    83f40e52:	40c007bb          	negw	a5,a2
    83f40e56:	42065593          	srai	a1,a2,0x20
    83f40e5a:	8fc9                	or	a5,a5,a0
    83f40e5c:	00e5f8b3          	and	a7,a1,a4
    83f40e60:	01f7d79b          	srliw	a5,a5,0x1f
    83f40e64:	00f8e7b3          	or	a5,a7,a5
    83f40e68:	7ff00837          	lui	a6,0x7ff00
    83f40e6c:	2781                	sext.w	a5,a5
    83f40e6e:	e20506d3          	fmv.x.d	a3,fa0
    83f40e72:	06f86c63          	bltu	a6,a5,83f40eea <__ieee754_atan2+0xa8>
    83f40e76:	4206de13          	srai	t3,a3,0x20
    83f40e7a:	00068e9b          	sext.w	t4,a3
    83f40e7e:	40d007bb          	negw	a5,a3
    83f40e82:	00ee7733          	and	a4,t3,a4
    83f40e86:	00fee7b3          	or	a5,t4,a5
    83f40e8a:	00070f9b          	sext.w	t6,a4
    83f40e8e:	01f7d79b          	srliw	a5,a5,0x1f
    83f40e92:	00ffe7b3          	or	a5,t6,a5
    83f40e96:	2781                	sext.w	a5,a5
    83f40e98:	04f86963          	bltu	a6,a5,83f40eea <__ieee754_atan2+0xa8>
    83f40e9c:	c01007b7          	lui	a5,0xc0100
    83f40ea0:	9fad                	addw	a5,a5,a1
    83f40ea2:	8fc9                	or	a5,a5,a0
    83f40ea4:	2781                	sext.w	a5,a5
    83f40ea6:	c7f9                	beqz	a5,83f40f74 <__ieee754_atan2+0x132>
    83f40ea8:	1141                	addi	sp,sp,-16
    83f40eaa:	e022                	sd	s0,0(sp)
    83f40eac:	41e5d41b          	sraiw	s0,a1,0x1e
    83f40eb0:	8809                	andi	s0,s0,2
    83f40eb2:	01fe5f1b          	srliw	t5,t3,0x1f
    83f40eb6:	01e46433          	or	s0,s0,t5
    83f40eba:	e406                	sd	ra,8(sp)
    83f40ebc:	01feeeb3          	or	t4,t4,t6
    83f40ec0:	2401                	sext.w	s0,s0
    83f40ec2:	020e9d63          	bnez	t4,83f40efc <__ieee754_atan2+0xba>
    83f40ec6:	4789                	li	a5,2
    83f40ec8:	0af40f63          	beq	s0,a5,83f40f86 <__ieee754_atan2+0x144>
    83f40ecc:	470d                	li	a4,3
    83f40ece:	e20507d3          	fmv.x.d	a5,fa0
    83f40ed2:	00e41663          	bne	s0,a4,83f40ede <__ieee754_atan2+0x9c>
    83f40ed6:	00011797          	auipc	a5,0x11
    83f40eda:	6627b783          	ld	a5,1634(a5) # 83f52538 <xISRStackTop+0xa8>
    83f40ede:	60a2                	ld	ra,8(sp)
    83f40ee0:	6402                	ld	s0,0(sp)
    83f40ee2:	f2078553          	fmv.d.x	fa0,a5
    83f40ee6:	0141                	addi	sp,sp,16
    83f40ee8:	8082                	ret
    83f40eea:	f20607d3          	fmv.d.x	fa5,a2
    83f40eee:	f2068753          	fmv.d.x	fa4,a3
    83f40ef2:	02e7f7d3          	fadd.d	fa5,fa5,fa4
    83f40ef6:	22f78553          	fmv.d	fa0,fa5
    83f40efa:	8082                	ret
    83f40efc:	01156533          	or	a0,a0,a7
    83f40f00:	2501                	sext.w	a0,a0
    83f40f02:	c93d                	beqz	a0,83f40f78 <__ieee754_atan2+0x136>
    83f40f04:	0b088063          	beq	a7,a6,83f40fa4 <__ieee754_atan2+0x162>
    83f40f08:	070f8863          	beq	t6,a6,83f40f78 <__ieee754_atan2+0x136>
    83f40f0c:	411f873b          	subw	a4,t6,a7
    83f40f10:	4147571b          	sraiw	a4,a4,0x14
    83f40f14:	03c00793          	li	a5,60
    83f40f18:	08e7c163          	blt	a5,a4,83f40f9a <__ieee754_atan2+0x158>
    83f40f1c:	0005d863          	bgez	a1,83f40f2c <__ieee754_atan2+0xea>
    83f40f20:	fc400593          	li	a1,-60
    83f40f24:	00000793          	li	a5,0
    83f40f28:	00b74e63          	blt	a4,a1,83f40f44 <__ieee754_atan2+0x102>
    83f40f2c:	f20687d3          	fmv.d.x	fa5,a3
    83f40f30:	f2060753          	fmv.d.x	fa4,a2
    83f40f34:	1ae7f553          	fdiv.d	fa0,fa5,fa4
    83f40f38:	a11ff0ef          	jal	ra,83f40948 <fabs>
    83f40f3c:	e54ff0ef          	jal	ra,83f40590 <atan>
    83f40f40:	e20507d3          	fmv.x.d	a5,fa0
    83f40f44:	4705                	li	a4,1
    83f40f46:	0ae40563          	beq	s0,a4,83f40ff0 <__ieee754_atan2+0x1ae>
    83f40f4a:	4709                	li	a4,2
    83f40f4c:	08e40163          	beq	s0,a4,83f40fce <__ieee754_atan2+0x18c>
    83f40f50:	d459                	beqz	s0,83f40ede <__ieee754_atan2+0x9c>
    83f40f52:	f2078753          	fmv.d.x	fa4,a5
    83f40f56:	00011717          	auipc	a4,0x11
    83f40f5a:	5fa73787          	fld	fa5,1530(a4) # 83f52550 <xISRStackTop+0xc0>
    83f40f5e:	0af777d3          	fsub.d	fa5,fa4,fa5
    83f40f62:	00011797          	auipc	a5,0x11
    83f40f66:	5de7b707          	fld	fa4,1502(a5) # 83f52540 <xISRStackTop+0xb0>
    83f40f6a:	0ae7f7d3          	fsub.d	fa5,fa5,fa4
    83f40f6e:	e20787d3          	fmv.x.d	a5,fa5
    83f40f72:	b7b5                	j	83f40ede <__ieee754_atan2+0x9c>
    83f40f74:	e1cff06f          	j	83f40590 <atan>
    83f40f78:	000e4c63          	bltz	t3,83f40f90 <__ieee754_atan2+0x14e>
    83f40f7c:	00011797          	auipc	a5,0x11
    83f40f80:	48c7b783          	ld	a5,1164(a5) # 83f52408 <__func__.1+0x210>
    83f40f84:	bfa9                	j	83f40ede <__ieee754_atan2+0x9c>
    83f40f86:	00011797          	auipc	a5,0x11
    83f40f8a:	5ba7b783          	ld	a5,1466(a5) # 83f52540 <xISRStackTop+0xb0>
    83f40f8e:	bf81                	j	83f40ede <__ieee754_atan2+0x9c>
    83f40f90:	00011797          	auipc	a5,0x11
    83f40f94:	5087b783          	ld	a5,1288(a5) # 83f52498 <xISRStackTop+0x8>
    83f40f98:	b799                	j	83f40ede <__ieee754_atan2+0x9c>
    83f40f9a:	00011797          	auipc	a5,0x11
    83f40f9e:	46e7b783          	ld	a5,1134(a5) # 83f52408 <__func__.1+0x210>
    83f40fa2:	b74d                	j	83f40f44 <__ieee754_atan2+0x102>
    83f40fa4:	347d                	addiw	s0,s0,-1
    83f40fa6:	0004069b          	sext.w	a3,s0
    83f40faa:	051f8e63          	beq	t6,a7,83f41006 <__ieee754_atan2+0x1c4>
    83f40fae:	4709                	li	a4,2
    83f40fb0:	00000793          	li	a5,0
    83f40fb4:	f2d765e3          	bltu	a4,a3,83f40ede <__ieee754_atan2+0x9c>
    83f40fb8:	02041793          	slli	a5,s0,0x20
    83f40fbc:	01d7d413          	srli	s0,a5,0x1d
    83f40fc0:	00010797          	auipc	a5,0x10
    83f40fc4:	a5878793          	addi	a5,a5,-1448 # 83f50a18 <CSWTCH.8>
    83f40fc8:	943e                	add	s0,s0,a5
    83f40fca:	6c1c                	ld	a5,24(s0)
    83f40fcc:	bf09                	j	83f40ede <__ieee754_atan2+0x9c>
    83f40fce:	f2078753          	fmv.d.x	fa4,a5
    83f40fd2:	00011717          	auipc	a4,0x11
    83f40fd6:	57e73787          	fld	fa5,1406(a4) # 83f52550 <xISRStackTop+0xc0>
    83f40fda:	0af777d3          	fsub.d	fa5,fa4,fa5
    83f40fde:	00011797          	auipc	a5,0x11
    83f40fe2:	5627b707          	fld	fa4,1378(a5) # 83f52540 <xISRStackTop+0xb0>
    83f40fe6:	0af777d3          	fsub.d	fa5,fa4,fa5
    83f40fea:	e20787d3          	fmv.x.d	a5,fa5
    83f40fee:	bdc5                	j	83f40ede <__ieee754_atan2+0x9c>
    83f40ff0:	0207d713          	srli	a4,a5,0x20
    83f40ff4:	800006b7          	lui	a3,0x80000
    83f40ff8:	8f35                	xor	a4,a4,a3
    83f40ffa:	56fd                	li	a3,-1
    83f40ffc:	9281                	srli	a3,a3,0x20
    83f40ffe:	1702                	slli	a4,a4,0x20
    83f41000:	8ff5                	and	a5,a5,a3
    83f41002:	8fd9                	or	a5,a5,a4
    83f41004:	bde9                	j	83f40ede <__ieee754_atan2+0x9c>
    83f41006:	4789                	li	a5,2
    83f41008:	00d7ed63          	bltu	a5,a3,83f41022 <__ieee754_atan2+0x1e0>
    83f4100c:	02041793          	slli	a5,s0,0x20
    83f41010:	01d7d413          	srli	s0,a5,0x1d
    83f41014:	00010797          	auipc	a5,0x10
    83f41018:	a0478793          	addi	a5,a5,-1532 # 83f50a18 <CSWTCH.8>
    83f4101c:	943e                	add	s0,s0,a5
    83f4101e:	601c                	ld	a5,0(s0)
    83f41020:	bd7d                	j	83f40ede <__ieee754_atan2+0x9c>
    83f41022:	00011797          	auipc	a5,0x11
    83f41026:	5267b783          	ld	a5,1318(a5) # 83f52548 <xISRStackTop+0xb8>
    83f4102a:	bd55                	j	83f40ede <__ieee754_atan2+0x9c>

0000000083f4102c <__ieee754_exp>:
    83f4102c:	e20507d3          	fmv.x.d	a5,fa0
    83f41030:	40863637          	lui	a2,0x40863
    83f41034:	e4160613          	addi	a2,a2,-447 # 40862e41 <CVIMMAP_DRAM_SIZE+0x3c862e41>
    83f41038:	4207d693          	srai	a3,a5,0x20
    83f4103c:	02169713          	slli	a4,a3,0x21
    83f41040:	9305                	srli	a4,a4,0x21
    83f41042:	03f7d513          	srli	a0,a5,0x3f
    83f41046:	0007a593          	slti	a1,a5,0
    83f4104a:	02e67463          	bgeu	a2,a4,83f41072 <__ieee754_exp+0x46>
    83f4104e:	7ff00637          	lui	a2,0x7ff00
    83f41052:	0ac76763          	bltu	a4,a2,83f41100 <__ieee754_exp+0xd4>
    83f41056:	02c69713          	slli	a4,a3,0x2c
    83f4105a:	9331                	srli	a4,a4,0x2c
    83f4105c:	8f5d                	or	a4,a4,a5
    83f4105e:	2701                	sext.w	a4,a4
    83f41060:	1e071963          	bnez	a4,83f41252 <__ieee754_exp+0x226>
    83f41064:	00000713          	li	a4,0
    83f41068:	1a059f63          	bnez	a1,83f41226 <__ieee754_exp+0x1fa>
    83f4106c:	e2050753          	fmv.x.d	a4,fa0
    83f41070:	aa5d                	j	83f41226 <__ieee754_exp+0x1fa>
    83f41072:	3fd636b7          	lui	a3,0x3fd63
    83f41076:	e4268693          	addi	a3,a3,-446 # 3fd62e42 <CVIMMAP_DRAM_SIZE+0x3bd62e42>
    83f4107a:	0ee6e663          	bltu	a3,a4,83f41166 <__ieee754_exp+0x13a>
    83f4107e:	3e3006b7          	lui	a3,0x3e300
    83f41082:	1ad76563          	bltu	a4,a3,83f4122c <__ieee754_exp+0x200>
    83f41086:	00011717          	auipc	a4,0x11
    83f4108a:	28a73707          	fld	fa4,650(a4) # 83f52310 <__func__.1+0x118>
    83f4108e:	f20787d3          	fmv.d.x	fa5,a5
    83f41092:	00011717          	auipc	a4,0x11
    83f41096:	4de73687          	fld	fa3,1246(a4) # 83f52570 <xISRStackTop+0xe0>
    83f4109a:	00011717          	auipc	a4,0x11
    83f4109e:	4de73007          	fld	ft0,1246(a4) # 83f52578 <xISRStackTop+0xe8>
    83f410a2:	12f7f7d3          	fmul.d	fa5,fa5,fa5
    83f410a6:	00011717          	auipc	a4,0x11
    83f410aa:	4da73507          	fld	fa0,1242(a4) # 83f52580 <xISRStackTop+0xf0>
    83f410ae:	00011717          	auipc	a4,0x11
    83f410b2:	4da73587          	fld	fa1,1242(a4) # 83f52588 <xISRStackTop+0xf8>
    83f410b6:	00011717          	auipc	a4,0x11
    83f410ba:	4da73607          	fld	fa2,1242(a4) # 83f52590 <xISRStackTop+0x100>
    83f410be:	02d7f6c3          	fmadd.d	fa3,fa5,fa3,ft0
    83f410c2:	52d7f6c3          	fmadd.d	fa3,fa5,fa3,fa0
    83f410c6:	5ad7f6c3          	fmadd.d	fa3,fa5,fa3,fa1
    83f410ca:	62d7f6c3          	fmadd.d	fa3,fa5,fa3,fa2
    83f410ce:	f2078653          	fmv.d.x	fa2,a5
    83f410d2:	62d7f7cb          	fnmsub.d	fa5,fa5,fa3,fa2
    83f410d6:	12f676d3          	fmul.d	fa3,fa2,fa5
    83f410da:	00011717          	auipc	a4,0x11
    83f410de:	3ce73607          	fld	fa2,974(a4) # 83f524a8 <xISRStackTop+0x18>
    83f410e2:	0ac7f7d3          	fsub.d	fa5,fa5,fa2
    83f410e6:	1af6f7d3          	fdiv.d	fa5,fa3,fa5
    83f410ea:	f20786d3          	fmv.d.x	fa3,a5
    83f410ee:	0ad7f7d3          	fsub.d	fa5,fa5,fa3
    83f410f2:	0af777d3          	fsub.d	fa5,fa4,fa5
    83f410f6:	e2078753          	fmv.x.d	a4,fa5
    83f410fa:	f2070553          	fmv.d.x	fa0,a4
    83f410fe:	8082                	ret
    83f41100:	00011717          	auipc	a4,0x11
    83f41104:	42073787          	fld	fa5,1056(a4) # 83f52520 <xISRStackTop+0x90>
    83f41108:	a2a79753          	flt.d	a4,fa5,fa0
    83f4110c:	14071a63          	bnez	a4,83f41260 <__ieee754_exp+0x234>
    83f41110:	00011717          	auipc	a4,0x11
    83f41114:	41873787          	fld	fa5,1048(a4) # 83f52528 <xISRStackTop+0x98>
    83f41118:	a2f516d3          	flt.d	a3,fa0,fa5
    83f4111c:	00000713          	li	a4,0
    83f41120:	10069363          	bnez	a3,83f41226 <__ieee754_exp+0x1fa>
    83f41124:	00010717          	auipc	a4,0x10
    83f41128:	92470713          	addi	a4,a4,-1756 # 83f50a48 <ln2HI>
    83f4112c:	058e                	slli	a1,a1,0x3
    83f4112e:	95ba                	add	a1,a1,a4
    83f41130:	f2078753          	fmv.d.x	fa4,a5
    83f41134:	3194                	fld	fa3,32(a1)
    83f41136:	00011717          	auipc	a4,0x11
    83f4113a:	42273787          	fld	fa5,1058(a4) # 83f52558 <xISRStackTop+0xc8>
    83f4113e:	00011717          	auipc	a4,0x11
    83f41142:	42273587          	fld	fa1,1058(a4) # 83f52560 <xISRStackTop+0xd0>
    83f41146:	6af777c3          	fmadd.d	fa5,fa4,fa5,fa3
    83f4114a:	00011717          	auipc	a4,0x11
    83f4114e:	41e73687          	fld	fa3,1054(a4) # 83f52568 <xISRStackTop+0xd8>
    83f41152:	c2079753          	fcvt.w.d	a4,fa5,rtz
    83f41156:	d20707d3          	fcvt.d.w	fa5,a4
    83f4115a:	2701                	sext.w	a4,a4
    83f4115c:	72b7f5cb          	fnmsub.d	fa1,fa5,fa1,fa4
    83f41160:	12d7f753          	fmul.d	fa4,fa5,fa3
    83f41164:	a025                	j	83f4118c <__ieee754_exp+0x160>
    83f41166:	3ff0a6b7          	lui	a3,0x3ff0a
    83f4116a:	2b168693          	addi	a3,a3,689 # 3ff0a2b1 <CVIMMAP_DRAM_SIZE+0x3bf0a2b1>
    83f4116e:	fae6ebe3          	bltu	a3,a4,83f41124 <__ieee754_exp+0xf8>
    83f41172:	00010717          	auipc	a4,0x10
    83f41176:	8d670713          	addi	a4,a4,-1834 # 83f50a48 <ln2HI>
    83f4117a:	058e                	slli	a1,a1,0x3
    83f4117c:	95ba                	add	a1,a1,a4
    83f4117e:	2198                	fld	fa4,0(a1)
    83f41180:	4705                	li	a4,1
    83f41182:	9f09                	subw	a4,a4,a0
    83f41184:	0ae575d3          	fsub.d	fa1,fa0,fa4
    83f41188:	2998                	fld	fa4,16(a1)
    83f4118a:	9f09                	subw	a4,a4,a0
    83f4118c:	0ae5f7d3          	fsub.d	fa5,fa1,fa4
    83f41190:	00011697          	auipc	a3,0x11
    83f41194:	3e86b087          	fld	ft1,1000(a3) # 83f52578 <xISRStackTop+0xe8>
    83f41198:	00011697          	auipc	a3,0x11
    83f4119c:	3e86b007          	fld	ft0,1000(a3) # 83f52580 <xISRStackTop+0xf0>
    83f411a0:	00011697          	auipc	a3,0x11
    83f411a4:	3e86b507          	fld	fa0,1000(a3) # 83f52588 <xISRStackTop+0xf8>
    83f411a8:	00011697          	auipc	a3,0x11
    83f411ac:	3e86b607          	fld	fa2,1000(a3) # 83f52590 <xISRStackTop+0x100>
    83f411b0:	e20787d3          	fmv.x.d	a5,fa5
    83f411b4:	00011697          	auipc	a3,0x11
    83f411b8:	3bc6b787          	fld	fa5,956(a3) # 83f52570 <xISRStackTop+0xe0>
    83f411bc:	f20786d3          	fmv.d.x	fa3,a5
    83f411c0:	12d6f6d3          	fmul.d	fa3,fa3,fa3
    83f411c4:	0af6f7c3          	fmadd.d	fa5,fa3,fa5,ft1
    83f411c8:	02d7f7c3          	fmadd.d	fa5,fa5,fa3,ft0
    83f411cc:	52d7f7c3          	fmadd.d	fa5,fa5,fa3,fa0
    83f411d0:	62d7f7c3          	fmadd.d	fa5,fa5,fa3,fa2
    83f411d4:	f2078653          	fmv.d.x	fa2,a5
    83f411d8:	62d7f7cb          	fnmsub.d	fa5,fa5,fa3,fa2
    83f411dc:	12f676d3          	fmul.d	fa3,fa2,fa5
    83f411e0:	c361                	beqz	a4,83f412a0 <__ieee754_exp+0x274>
    83f411e2:	00011797          	auipc	a5,0x11
    83f411e6:	2c67b607          	fld	fa2,710(a5) # 83f524a8 <xISRStackTop+0x18>
    83f411ea:	0af677d3          	fsub.d	fa5,fa2,fa5
    83f411ee:	00011797          	auipc	a5,0x11
    83f411f2:	1227b607          	fld	fa2,290(a5) # 83f52310 <__func__.1+0x118>
    83f411f6:	c0300613          	li	a2,-1021
    83f411fa:	1af6f6d3          	fdiv.d	fa3,fa3,fa5
    83f411fe:	0ad77753          	fsub.d	fa4,fa4,fa3
    83f41202:	0ab77753          	fsub.d	fa4,fa4,fa1
    83f41206:	0ae677d3          	fsub.d	fa5,fa2,fa4
    83f4120a:	e20786d3          	fmv.x.d	a3,fa5
    83f4120e:	4206d593          	srai	a1,a3,0x20
    83f41212:	06c74063          	blt	a4,a2,83f41272 <__ieee754_exp+0x246>
    83f41216:	0147179b          	slliw	a5,a4,0x14
    83f4121a:	577d                	li	a4,-1
    83f4121c:	9fad                	addw	a5,a5,a1
    83f4121e:	9301                	srli	a4,a4,0x20
    83f41220:	1782                	slli	a5,a5,0x20
    83f41222:	8f75                	and	a4,a4,a3
    83f41224:	8f5d                	or	a4,a4,a5
    83f41226:	f2070553          	fmv.d.x	fa0,a4
    83f4122a:	8082                	ret
    83f4122c:	00011717          	auipc	a4,0x11
    83f41230:	27473787          	fld	fa5,628(a4) # 83f524a0 <xISRStackTop+0x10>
    83f41234:	02f577d3          	fadd.d	fa5,fa0,fa5
    83f41238:	00011717          	auipc	a4,0x11
    83f4123c:	0d873707          	fld	fa4,216(a4) # 83f52310 <__func__.1+0x118>
    83f41240:	a2f71753          	flt.d	a4,fa4,fa5
    83f41244:	e40705e3          	beqz	a4,83f4108e <__ieee754_exp+0x62>
    83f41248:	02e577d3          	fadd.d	fa5,fa0,fa4
    83f4124c:	e2078753          	fmv.x.d	a4,fa5
    83f41250:	bfd9                	j	83f41226 <__ieee754_exp+0x1fa>
    83f41252:	02a577d3          	fadd.d	fa5,fa0,fa0
    83f41256:	e2078753          	fmv.x.d	a4,fa5
    83f4125a:	f2070553          	fmv.d.x	fa0,a4
    83f4125e:	8082                	ret
    83f41260:	00011797          	auipc	a5,0x11
    83f41264:	2407b787          	fld	fa5,576(a5) # 83f524a0 <xISRStackTop+0x10>
    83f41268:	12f7f7d3          	fmul.d	fa5,fa5,fa5
    83f4126c:	e2078753          	fmv.x.d	a4,fa5
    83f41270:	bf5d                	j	83f41226 <__ieee754_exp+0x1fa>
    83f41272:	3e87079b          	addiw	a5,a4,1000
    83f41276:	0147979b          	slliw	a5,a5,0x14
    83f4127a:	577d                	li	a4,-1
    83f4127c:	9fad                	addw	a5,a5,a1
    83f4127e:	9301                	srli	a4,a4,0x20
    83f41280:	1782                	slli	a5,a5,0x20
    83f41282:	8f75                	and	a4,a4,a3
    83f41284:	8f5d                	or	a4,a4,a5
    83f41286:	f2070753          	fmv.d.x	fa4,a4
    83f4128a:	00011797          	auipc	a5,0x11
    83f4128e:	30e7b787          	fld	fa5,782(a5) # 83f52598 <xISRStackTop+0x108>
    83f41292:	12e7f7d3          	fmul.d	fa5,fa5,fa4
    83f41296:	e2078753          	fmv.x.d	a4,fa5
    83f4129a:	f2070553          	fmv.d.x	fa0,a4
    83f4129e:	8082                	ret
    83f412a0:	00011717          	auipc	a4,0x11
    83f412a4:	07073707          	fld	fa4,112(a4) # 83f52310 <__func__.1+0x118>
    83f412a8:	bd0d                	j	83f410da <__ieee754_exp+0xae>

0000000083f412aa <__ieee754_log>:
    83f412aa:	e20507d3          	fmv.x.d	a5,fa0
    83f412ae:	00100637          	lui	a2,0x100
    83f412b2:	4207d713          	srai	a4,a5,0x20
    83f412b6:	0cc75563          	bge	a4,a2,83f41380 <__ieee754_log+0xd6>
    83f412ba:	02171693          	slli	a3,a4,0x21
    83f412be:	9285                	srli	a3,a3,0x21
    83f412c0:	8edd                	or	a3,a3,a5
    83f412c2:	2681                	sext.w	a3,a3
    83f412c4:	18068363          	beqz	a3,83f4144a <__ieee754_log+0x1a0>
    83f412c8:	20074163          	bltz	a4,83f414ca <__ieee754_log+0x220>
    83f412cc:	00011717          	auipc	a4,0x11
    83f412d0:	2dc73787          	fld	fa5,732(a4) # 83f525a8 <xISRStackTop+0x118>
    83f412d4:	12f577d3          	fmul.d	fa5,fa0,fa5
    83f412d8:	7ff006b7          	lui	a3,0x7ff00
    83f412dc:	fca00313          	li	t1,-54
    83f412e0:	e20787d3          	fmv.x.d	a5,fa5
    83f412e4:	4207d713          	srai	a4,a5,0x20
    83f412e8:	0ad75163          	bge	a4,a3,83f4138a <__ieee754_log+0xe0>
    83f412ec:	00100637          	lui	a2,0x100
    83f412f0:	fff60893          	addi	a7,a2,-1 # fffff <CVIMMAP_FREERTOS_SIZE+0x3ffff>
    83f412f4:	000966b7          	lui	a3,0x96
    83f412f8:	01177833          	and	a6,a4,a7
    83f412fc:	f646869b          	addiw	a3,a3,-156
    83f41300:	00d806bb          	addw	a3,a6,a3
    83f41304:	8ef1                	and	a3,a3,a2
    83f41306:	3ff005b7          	lui	a1,0x3ff00
    83f4130a:	8db5                	xor	a1,a1,a3
    83f4130c:	567d                	li	a2,-1
    83f4130e:	9201                	srli	a2,a2,0x20
    83f41310:	00b865b3          	or	a1,a6,a1
    83f41314:	1582                	slli	a1,a1,0x20
    83f41316:	8ff1                	and	a5,a5,a2
    83f41318:	8fcd                	or	a5,a5,a1
    83f4131a:	4147571b          	sraiw	a4,a4,0x14
    83f4131e:	0028051b          	addiw	a0,a6,2
    83f41322:	f2078753          	fmv.d.x	fa4,a5
    83f41326:	c017071b          	addiw	a4,a4,-1023
    83f4132a:	0067073b          	addw	a4,a4,t1
    83f4132e:	01157633          	and	a2,a0,a7
    83f41332:	4146d69b          	sraiw	a3,a3,0x14
    83f41336:	00e685bb          	addw	a1,a3,a4
    83f4133a:	2601                	sext.w	a2,a2
    83f4133c:	00011717          	auipc	a4,0x11
    83f41340:	fd473787          	fld	fa5,-44(a4) # 83f52310 <__func__.1+0x118>
    83f41344:	4509                	li	a0,2
    83f41346:	0af777d3          	fsub.d	fa5,fa4,fa5
    83f4134a:	04c54563          	blt	a0,a2,83f41394 <__ieee754_log+0xea>
    83f4134e:	f2000753          	fmv.d.x	fa4,zero
    83f41352:	a2e7a7d3          	feq.d	a5,fa5,fa4
    83f41356:	10078363          	beqz	a5,83f4145c <__ieee754_log+0x1b2>
    83f4135a:	22e70553          	fmv.d	fa0,fa4
    83f4135e:	16058563          	beqz	a1,83f414c8 <__ieee754_log+0x21e>
    83f41362:	d20587d3          	fcvt.d.w	fa5,a1
    83f41366:	00011797          	auipc	a5,0x11
    83f4136a:	2027b507          	fld	fa0,514(a5) # 83f52568 <xISRStackTop+0xd8>
    83f4136e:	00011797          	auipc	a5,0x11
    83f41372:	1f27b707          	fld	fa4,498(a5) # 83f52560 <xISRStackTop+0xd0>
    83f41376:	12a7f553          	fmul.d	fa0,fa5,fa0
    83f4137a:	52e7f543          	fmadd.d	fa0,fa5,fa4,fa0
    83f4137e:	8082                	ret
    83f41380:	7ff006b7          	lui	a3,0x7ff00
    83f41384:	4301                	li	t1,0
    83f41386:	f6d743e3          	blt	a4,a3,83f412ec <__ieee754_log+0x42>
    83f4138a:	f20787d3          	fmv.d.x	fa5,a5
    83f4138e:	02f7f553          	fadd.d	fa0,fa5,fa5
    83f41392:	8082                	ret
    83f41394:	00011797          	auipc	a5,0x11
    83f41398:	1147b507          	fld	fa0,276(a5) # 83f524a8 <xISRStackTop+0x18>
    83f4139c:	02a7f553          	fadd.d	fa0,fa5,fa0
    83f413a0:	00011797          	auipc	a5,0x11
    83f413a4:	2307b687          	fld	fa3,560(a5) # 83f525d0 <xISRStackTop+0x140>
    83f413a8:	00011797          	auipc	a5,0x11
    83f413ac:	2307b207          	fld	ft4,560(a5) # 83f525d8 <xISRStackTop+0x148>
    83f413b0:	00011797          	auipc	a5,0x11
    83f413b4:	2307b107          	fld	ft2,560(a5) # 83f525e0 <xISRStackTop+0x150>
    83f413b8:	00011797          	auipc	a5,0x11
    83f413bc:	2007b707          	fld	fa4,512(a5) # 83f525b8 <xISRStackTop+0x128>
    83f413c0:	00011797          	auipc	a5,0x11
    83f413c4:	2007b187          	fld	ft3,512(a5) # 83f525c0 <xISRStackTop+0x130>
    83f413c8:	00011797          	auipc	a5,0x11
    83f413cc:	2207b007          	fld	ft0,544(a5) # 83f525e8 <xISRStackTop+0x158>
    83f413d0:	1aa7f553          	fdiv.d	fa0,fa5,fa0
    83f413d4:	00011797          	auipc	a5,0x11
    83f413d8:	1f47b087          	fld	ft1,500(a5) # 83f525c8 <xISRStackTop+0x138>
    83f413dc:	fff9f637          	lui	a2,0xfff9f
    83f413e0:	0006c7b7          	lui	a5,0x6c
    83f413e4:	b866061b          	addiw	a2,a2,-1146
    83f413e8:	8517879b          	addiw	a5,a5,-1967
    83f413ec:	0106063b          	addw	a2,a2,a6
    83f413f0:	4107883b          	subw	a6,a5,a6
    83f413f4:	01066633          	or	a2,a2,a6
    83f413f8:	2601                	sext.w	a2,a2
    83f413fa:	d20582d3          	fcvt.d.w	ft5,a1
    83f413fe:	12a575d3          	fmul.d	fa1,fa0,fa0
    83f41402:	12b5f653          	fmul.d	fa2,fa1,fa1
    83f41406:	22d676c3          	fmadd.d	fa3,fa2,fa3,ft4
    83f4140a:	1ae67743          	fmadd.d	fa4,fa2,fa4,ft3
    83f4140e:	12c6f6c3          	fmadd.d	fa3,fa3,fa2,ft2
    83f41412:	0ac77743          	fmadd.d	fa4,fa4,fa2,ft1
    83f41416:	02c6f6c3          	fmadd.d	fa3,fa3,fa2,ft0
    83f4141a:	12b6f6d3          	fmul.d	fa3,fa3,fa1
    83f4141e:	6ac77743          	fmadd.d	fa4,fa4,fa2,fa3
    83f41422:	06c05d63          	blez	a2,83f4149c <__ieee754_log+0x1f2>
    83f41426:	00011797          	auipc	a5,0x11
    83f4142a:	e727b687          	fld	fa3,-398(a5) # 83f52298 <__func__.1+0xa0>
    83f4142e:	12d7f6d3          	fmul.d	fa3,fa5,fa3
    83f41432:	12f6f6d3          	fmul.d	fa3,fa3,fa5
    83f41436:	02d77753          	fadd.d	fa4,fa4,fa3
    83f4143a:	12a77753          	fmul.d	fa4,fa4,fa0
    83f4143e:	edc9                	bnez	a1,83f414d8 <__ieee754_log+0x22e>
    83f41440:	0ae6f553          	fsub.d	fa0,fa3,fa4
    83f41444:	0aa7f553          	fsub.d	fa0,fa5,fa0
    83f41448:	8082                	ret
    83f4144a:	f2000553          	fmv.d.x	fa0,zero
    83f4144e:	00011797          	auipc	a5,0x11
    83f41452:	1527b787          	fld	fa5,338(a5) # 83f525a0 <xISRStackTop+0x110>
    83f41456:	1aa7f553          	fdiv.d	fa0,fa5,fa0
    83f4145a:	8082                	ret
    83f4145c:	00011797          	auipc	a5,0x11
    83f41460:	1547b707          	fld	fa4,340(a5) # 83f525b0 <xISRStackTop+0x120>
    83f41464:	00011797          	auipc	a5,0x11
    83f41468:	e347b687          	fld	fa3,-460(a5) # 83f52298 <__func__.1+0xa0>
    83f4146c:	12f7f553          	fmul.d	fa0,fa5,fa5
    83f41470:	6ae7f74b          	fnmsub.d	fa4,fa5,fa4,fa3
    83f41474:	12e57553          	fmul.d	fa0,fa0,fa4
    83f41478:	d5f1                	beqz	a1,83f41444 <__ieee754_log+0x19a>
    83f4147a:	d20586d3          	fcvt.d.w	fa3,a1
    83f4147e:	00011797          	auipc	a5,0x11
    83f41482:	0ea7b707          	fld	fa4,234(a5) # 83f52568 <xISRStackTop+0xd8>
    83f41486:	00011797          	auipc	a5,0x11
    83f4148a:	0da7b607          	fld	fa2,218(a5) # 83f52560 <xISRStackTop+0xd0>
    83f4148e:	52e6f54b          	fnmsub.d	fa0,fa3,fa4,fa0
    83f41492:	0af57553          	fsub.d	fa0,fa0,fa5
    83f41496:	52c6f547          	fmsub.d	fa0,fa3,fa2,fa0
    83f4149a:	8082                	ret
    83f4149c:	0ae7f753          	fsub.d	fa4,fa5,fa4
    83f414a0:	12a77753          	fmul.d	fa4,fa4,fa0
    83f414a4:	e581                	bnez	a1,83f414ac <__ieee754_log+0x202>
    83f414a6:	0ae7f553          	fsub.d	fa0,fa5,fa4
    83f414aa:	8082                	ret
    83f414ac:	00011797          	auipc	a5,0x11
    83f414b0:	0bc7b507          	fld	fa0,188(a5) # 83f52568 <xISRStackTop+0xd8>
    83f414b4:	72a2f54b          	fnmsub.d	fa0,ft5,fa0,fa4
    83f414b8:	00011797          	auipc	a5,0x11
    83f414bc:	0a87b707          	fld	fa4,168(a5) # 83f52560 <xISRStackTop+0xd0>
    83f414c0:	0af57553          	fsub.d	fa0,fa0,fa5
    83f414c4:	52e2f547          	fmsub.d	fa0,ft5,fa4,fa0
    83f414c8:	8082                	ret
    83f414ca:	0aa577d3          	fsub.d	fa5,fa0,fa0
    83f414ce:	f2000553          	fmv.d.x	fa0,zero
    83f414d2:	1aa7f553          	fdiv.d	fa0,fa5,fa0
    83f414d6:	8082                	ret
    83f414d8:	00011797          	auipc	a5,0x11
    83f414dc:	0907b507          	fld	fa0,144(a5) # 83f52568 <xISRStackTop+0xd8>
    83f414e0:	72a2f543          	fmadd.d	fa0,ft5,fa0,fa4
    83f414e4:	00011797          	auipc	a5,0x11
    83f414e8:	07c7b607          	fld	fa2,124(a5) # 83f52560 <xISRStackTop+0xd0>
    83f414ec:	0aa6f553          	fsub.d	fa0,fa3,fa0
    83f414f0:	0af57553          	fsub.d	fa0,fa0,fa5
    83f414f4:	52c2f547          	fmsub.d	fa0,ft5,fa2,fa0
    83f414f8:	8082                	ret

0000000083f414fa <__ieee754_pow>:
    83f414fa:	711d                	addi	sp,sp,-96
    83f414fc:	f852                	sd	s4,48(sp)
    83f414fe:	e2058a53          	fmv.x.d	s4,fa1
    83f41502:	800007b7          	lui	a5,0x80000
    83f41506:	f456                	sd	s5,40(sp)
    83f41508:	fff7c793          	not	a5,a5
    83f4150c:	420a5a93          	srai	s5,s4,0x20
    83f41510:	fc4e                	sd	s3,56(sp)
    83f41512:	000a071b          	sext.w	a4,s4
    83f41516:	00faf9b3          	and	s3,s5,a5
    83f4151a:	ec86                	sd	ra,88(sp)
    83f4151c:	e8a2                	sd	s0,80(sp)
    83f4151e:	e4a6                	sd	s1,72(sp)
    83f41520:	e0ca                	sd	s2,64(sp)
    83f41522:	f05a                	sd	s6,32(sp)
    83f41524:	ec5e                	sd	s7,24(sp)
    83f41526:	e862                	sd	s8,16(sp)
    83f41528:	a422                	fsd	fs0,8(sp)
    83f4152a:	00e9e6b3          	or	a3,s3,a4
    83f4152e:	c6c1                	beqz	a3,83f415b6 <__ieee754_pow+0xbc>
    83f41530:	e2050453          	fmv.x.d	s0,fa0
    83f41534:	7ff00637          	lui	a2,0x7ff00
    83f41538:	42045b13          	srai	s6,s0,0x20
    83f4153c:	00fb74b3          	and	s1,s6,a5
    83f41540:	8bda                	mv	s7,s6
    83f41542:	0004091b          	sext.w	s2,s0
    83f41546:	06964163          	blt	a2,s1,83f415a8 <__ieee754_pow+0xae>
    83f4154a:	08c48963          	beq	s1,a2,83f415dc <__ieee754_pow+0xe2>
    83f4154e:	05364d63          	blt	a2,s3,83f415a8 <__ieee754_pow+0xae>
    83f41552:	7ff007b7          	lui	a5,0x7ff00
    83f41556:	04f98863          	beq	s3,a5,83f415a6 <__ieee754_pow+0xac>
    83f4155a:	4c01                	li	s8,0
    83f4155c:	0a0b4663          	bltz	s6,83f41608 <__ieee754_pow+0x10e>
    83f41560:	ef71                	bnez	a4,83f4163c <__ieee754_pow+0x142>
    83f41562:	7ff007b7          	lui	a5,0x7ff00
    83f41566:	12f98963          	beq	s3,a5,83f41698 <__ieee754_pow+0x19e>
    83f4156a:	3ff007b7          	lui	a5,0x3ff00
    83f4156e:	14f98663          	beq	s3,a5,83f416ba <__ieee754_pow+0x1c0>
    83f41572:	400007b7          	lui	a5,0x40000
    83f41576:	64fa8e63          	beq	s5,a5,83f41bd2 <__ieee754_pow+0x6d8>
    83f4157a:	3fe007b7          	lui	a5,0x3fe00
    83f4157e:	0afa9f63          	bne	s5,a5,83f4163c <__ieee754_pow+0x142>
    83f41582:	0a0b4d63          	bltz	s6,83f4163c <__ieee754_pow+0x142>
    83f41586:	f2040553          	fmv.d.x	fa0,s0
    83f4158a:	6446                	ld	s0,80(sp)
    83f4158c:	60e6                	ld	ra,88(sp)
    83f4158e:	64a6                	ld	s1,72(sp)
    83f41590:	6906                	ld	s2,64(sp)
    83f41592:	79e2                	ld	s3,56(sp)
    83f41594:	7a42                	ld	s4,48(sp)
    83f41596:	7aa2                	ld	s5,40(sp)
    83f41598:	7b02                	ld	s6,32(sp)
    83f4159a:	6be2                	ld	s7,24(sp)
    83f4159c:	6c42                	ld	s8,16(sp)
    83f4159e:	2422                	fld	fs0,8(sp)
    83f415a0:	6125                	addi	sp,sp,96
    83f415a2:	1930006f          	j	83f41f34 <__ieee754_sqrt>
    83f415a6:	db55                	beqz	a4,83f4155a <__ieee754_pow+0x60>
    83f415a8:	c01007b7          	lui	a5,0xc0100
    83f415ac:	9fa5                	addw	a5,a5,s1
    83f415ae:	00f967b3          	or	a5,s2,a5
    83f415b2:	2781                	sext.w	a5,a5
    83f415b4:	eb85                	bnez	a5,83f415e4 <__ieee754_pow+0xea>
    83f415b6:	00011717          	auipc	a4,0x11
    83f415ba:	d5a73703          	ld	a4,-678(a4) # 83f52310 <__func__.1+0x118>
    83f415be:	60e6                	ld	ra,88(sp)
    83f415c0:	6446                	ld	s0,80(sp)
    83f415c2:	64a6                	ld	s1,72(sp)
    83f415c4:	6906                	ld	s2,64(sp)
    83f415c6:	79e2                	ld	s3,56(sp)
    83f415c8:	7a42                	ld	s4,48(sp)
    83f415ca:	7aa2                	ld	s5,40(sp)
    83f415cc:	7b02                	ld	s6,32(sp)
    83f415ce:	6be2                	ld	s7,24(sp)
    83f415d0:	6c42                	ld	s8,16(sp)
    83f415d2:	2422                	fld	fs0,8(sp)
    83f415d4:	f2070553          	fmv.d.x	fa0,a4
    83f415d8:	6125                	addi	sp,sp,96
    83f415da:	8082                	ret
    83f415dc:	00091463          	bnez	s2,83f415e4 <__ieee754_pow+0xea>
    83f415e0:	f734d9e3          	bge	s1,s3,83f41552 <__ieee754_pow+0x58>
    83f415e4:	6446                	ld	s0,80(sp)
    83f415e6:	60e6                	ld	ra,88(sp)
    83f415e8:	64a6                	ld	s1,72(sp)
    83f415ea:	6906                	ld	s2,64(sp)
    83f415ec:	79e2                	ld	s3,56(sp)
    83f415ee:	7a42                	ld	s4,48(sp)
    83f415f0:	7aa2                	ld	s5,40(sp)
    83f415f2:	7b02                	ld	s6,32(sp)
    83f415f4:	6be2                	ld	s7,24(sp)
    83f415f6:	6c42                	ld	s8,16(sp)
    83f415f8:	2422                	fld	fs0,8(sp)
    83f415fa:	00011517          	auipc	a0,0x11
    83f415fe:	bf650513          	addi	a0,a0,-1034 # 83f521f0 <__func__.0+0x30>
    83f41602:	6125                	addi	sp,sp,96
    83f41604:	4640106f          	j	83f42a68 <nan>
    83f41608:	434007b7          	lui	a5,0x43400
    83f4160c:	12f9d163          	bge	s3,a5,83f4172e <__ieee754_pow+0x234>
    83f41610:	3ff007b7          	lui	a5,0x3ff00
    83f41614:	02f9c363          	blt	s3,a5,83f4163a <__ieee754_pow+0x140>
    83f41618:	4149d79b          	sraiw	a5,s3,0x14
    83f4161c:	c017861b          	addiw	a2,a5,-1023
    83f41620:	46d1                	li	a3,20
    83f41622:	5ac6df63          	bge	a3,a2,83f41be0 <__ieee754_pow+0x6e6>
    83f41626:	03400693          	li	a3,52
    83f4162a:	40c687bb          	subw	a5,a3,a2
    83f4162e:	00f756bb          	srlw	a3,a4,a5
    83f41632:	00f697bb          	sllw	a5,a3,a5
    83f41636:	0ee78563          	beq	a5,a4,83f41720 <__ieee754_pow+0x226>
    83f4163a:	db05                	beqz	a4,83f4156a <__ieee754_pow+0x70>
    83f4163c:	f2040553          	fmv.d.x	fa0,s0
    83f41640:	b08ff0ef          	jal	ra,83f40948 <fabs>
    83f41644:	e2050753          	fmv.x.d	a4,fa0
    83f41648:	00091a63          	bnez	s2,83f4165c <__ieee754_pow+0x162>
    83f4164c:	c8d1                	beqz	s1,83f416e0 <__ieee754_pow+0x1e6>
    83f4164e:	022b1793          	slli	a5,s6,0x22
    83f41652:	9389                	srli	a5,a5,0x22
    83f41654:	3ff006b7          	lui	a3,0x3ff00
    83f41658:	08d78463          	beq	a5,a3,83f416e0 <__ieee754_pow+0x1e6>
    83f4165c:	01fbdb9b          	srliw	s7,s7,0x1f
    83f41660:	3bfd                	addiw	s7,s7,-1
    83f41662:	017c67b3          	or	a5,s8,s7
    83f41666:	2781                	sext.w	a5,a5
    83f41668:	cfe9                	beqz	a5,83f41742 <__ieee754_pow+0x248>
    83f4166a:	41e007b7          	lui	a5,0x41e00
    83f4166e:	0f37d363          	bge	a5,s3,83f41754 <__ieee754_pow+0x25a>
    83f41672:	43f007b7          	lui	a5,0x43f00
    83f41676:	4d37dd63          	bge	a5,s3,83f41b50 <__ieee754_pow+0x656>
    83f4167a:	3ff007b7          	lui	a5,0x3ff00
    83f4167e:	04f4cc63          	blt	s1,a5,83f416d6 <__ieee754_pow+0x1dc>
    83f41682:	03505963          	blez	s5,83f416b4 <__ieee754_pow+0x1ba>
    83f41686:	00011797          	auipc	a5,0x11
    83f4168a:	e1a7b787          	fld	fa5,-486(a5) # 83f524a0 <xISRStackTop+0x10>
    83f4168e:	12f7f7d3          	fmul.d	fa5,fa5,fa5
    83f41692:	e2078753          	fmv.x.d	a4,fa5
    83f41696:	b725                	j	83f415be <__ieee754_pow+0xc4>
    83f41698:	c01007b7          	lui	a5,0xc0100
    83f4169c:	9fa5                	addw	a5,a5,s1
    83f4169e:	00f967b3          	or	a5,s2,a5
    83f416a2:	2781                	sext.w	a5,a5
    83f416a4:	db89                	beqz	a5,83f415b6 <__ieee754_pow+0xbc>
    83f416a6:	3ff007b7          	lui	a5,0x3ff00
    83f416aa:	46f4ce63          	blt	s1,a5,83f41b26 <__ieee754_pow+0x62c>
    83f416ae:	8752                	mv	a4,s4
    83f416b0:	f00ad7e3          	bgez	s5,83f415be <__ieee754_pow+0xc4>
    83f416b4:	00000713          	li	a4,0
    83f416b8:	b719                	j	83f415be <__ieee754_pow+0xc4>
    83f416ba:	8722                	mv	a4,s0
    83f416bc:	f00ad1e3          	bgez	s5,83f415be <__ieee754_pow+0xc4>
    83f416c0:	f2040753          	fmv.d.x	fa4,s0
    83f416c4:	00011797          	auipc	a5,0x11
    83f416c8:	c4c7b787          	fld	fa5,-948(a5) # 83f52310 <__func__.1+0x118>
    83f416cc:	1ae7f7d3          	fdiv.d	fa5,fa5,fa4
    83f416d0:	e2078753          	fmv.x.d	a4,fa5
    83f416d4:	b5ed                	j	83f415be <__ieee754_pow+0xc4>
    83f416d6:	fa0ac8e3          	bltz	s5,83f41686 <__ieee754_pow+0x18c>
    83f416da:	00000713          	li	a4,0
    83f416de:	b5c5                	j	83f415be <__ieee754_pow+0xc4>
    83f416e0:	020ac563          	bltz	s5,83f4170a <__ieee754_pow+0x210>
    83f416e4:	ec0b5de3          	bgez	s6,83f415be <__ieee754_pow+0xc4>
    83f416e8:	c01007b7          	lui	a5,0xc0100
    83f416ec:	9fa5                	addw	a5,a5,s1
    83f416ee:	00fc67b3          	or	a5,s8,a5
    83f416f2:	2781                	sext.w	a5,a5
    83f416f4:	52079963          	bnez	a5,83f41c26 <__ieee754_pow+0x72c>
    83f416f8:	f20707d3          	fmv.d.x	fa5,a4
    83f416fc:	0af7f7d3          	fsub.d	fa5,fa5,fa5
    83f41700:	1af7f7d3          	fdiv.d	fa5,fa5,fa5
    83f41704:	e2078753          	fmv.x.d	a4,fa5
    83f41708:	bd5d                	j	83f415be <__ieee754_pow+0xc4>
    83f4170a:	f2070753          	fmv.d.x	fa4,a4
    83f4170e:	00011797          	auipc	a5,0x11
    83f41712:	c027b787          	fld	fa5,-1022(a5) # 83f52310 <__func__.1+0x118>
    83f41716:	1ae7f7d3          	fdiv.d	fa5,fa5,fa4
    83f4171a:	e2078753          	fmv.x.d	a4,fa5
    83f4171e:	b7d9                	j	83f416e4 <__ieee754_pow+0x1ea>
    83f41720:	8a85                	andi	a3,a3,1
    83f41722:	4c09                	li	s8,2
    83f41724:	40dc0c3b          	subw	s8,s8,a3
    83f41728:	e40701e3          	beqz	a4,83f4156a <__ieee754_pow+0x70>
    83f4172c:	bf01                	j	83f4163c <__ieee754_pow+0x142>
    83f4172e:	4c09                	li	s8,2
    83f41730:	bd05                	j	83f41560 <__ieee754_pow+0x66>
    83f41732:	f2040553          	fmv.d.x	fa0,s0
    83f41736:	a12ff0ef          	jal	ra,83f40948 <fabs>
    83f4173a:	e2050753          	fmv.x.d	a4,fa0
    83f4173e:	f00907e3          	beqz	s2,83f4164c <__ieee754_pow+0x152>
    83f41742:	f20407d3          	fmv.d.x	fa5,s0
    83f41746:	0af7f7d3          	fsub.d	fa5,fa5,fa5
    83f4174a:	1af7f7d3          	fdiv.d	fa5,fa5,fa5
    83f4174e:	e2078753          	fmv.x.d	a4,fa5
    83f41752:	b5b5                	j	83f415be <__ieee754_pow+0xc4>
    83f41754:	7ff007b7          	lui	a5,0x7ff00
    83f41758:	00fb7b33          	and	s6,s6,a5
    83f4175c:	4681                	li	a3,0
    83f4175e:	020b1063          	bnez	s6,83f4177e <__ieee754_pow+0x284>
    83f41762:	f2070753          	fmv.d.x	fa4,a4
    83f41766:	00011797          	auipc	a5,0x11
    83f4176a:	eaa7b787          	fld	fa5,-342(a5) # 83f52610 <xISRStackTop+0x180>
    83f4176e:	fcb00693          	li	a3,-53
    83f41772:	12f777d3          	fmul.d	fa5,fa4,fa5
    83f41776:	e2078753          	fmv.x.d	a4,fa5
    83f4177a:	42075493          	srai	s1,a4,0x20
    83f4177e:	4144d61b          	sraiw	a2,s1,0x14
    83f41782:	c016061b          	addiw	a2,a2,-1023
    83f41786:	02c49793          	slli	a5,s1,0x2c
    83f4178a:	0003a537          	lui	a0,0x3a
    83f4178e:	00d605bb          	addw	a1,a2,a3
    83f41792:	93b1                	srli	a5,a5,0x2c
    83f41794:	3ff006b7          	lui	a3,0x3ff00
    83f41798:	88e50513          	addi	a0,a0,-1906 # 3988e <_STACK_SIZE+0x1988e>
    83f4179c:	8edd                	or	a3,a3,a5
    83f4179e:	38f55d63          	bge	a0,a5,83f41b38 <__ieee754_pow+0x63e>
    83f417a2:	000bb537          	lui	a0,0xbb
    83f417a6:	67950513          	addi	a0,a0,1657 # bb679 <CVIMMAP_ATF_SIZE+0x3b679>
    83f417aa:	48f55863          	bge	a0,a5,83f41c3a <__ieee754_pow+0x740>
    83f417ae:	f20002d3          	fmv.d.x	ft5,zero
    83f417b2:	00011797          	auipc	a5,0x11
    83f417b6:	b5e7b587          	fld	fa1,-1186(a5) # 83f52310 <__func__.1+0x118>
    83f417ba:	22b587d3          	fmv.d	fa5,fa1
    83f417be:	22528853          	fmv.d	fa6,ft5
    83f417c2:	fff007b7          	lui	a5,0xfff00
    83f417c6:	2585                	addiw	a1,a1,1
    83f417c8:	9ebd                	addw	a3,a3,a5
    83f417ca:	4801                	li	a6,0
    83f417cc:	557d                	li	a0,-1
    83f417ce:	02055793          	srli	a5,a0,0x20
    83f417d2:	02069613          	slli	a2,a3,0x20
    83f417d6:	8ff9                	and	a5,a5,a4
    83f417d8:	8fd1                	or	a5,a5,a2
    83f417da:	f2078753          	fmv.d.x	fa4,a5
    83f417de:	20000737          	lui	a4,0x20000
    83f417e2:	4016d69b          	sraiw	a3,a3,0x1
    83f417e6:	02e7f1d3          	fadd.d	ft3,fa5,fa4
    83f417ea:	0af77253          	fsub.d	ft4,fa4,fa5
    83f417ee:	00080637          	lui	a2,0x80
    83f417f2:	8ed9                	or	a3,a3,a4
    83f417f4:	9eb1                	addw	a3,a3,a2
    83f417f6:	010686bb          	addw	a3,a3,a6
    83f417fa:	1682                	slli	a3,a3,0x20
    83f417fc:	1a35f1d3          	fdiv.d	ft3,fa1,ft3
    83f41800:	f2068753          	fmv.d.x	fa4,a3
    83f41804:	00011717          	auipc	a4,0x11
    83f41808:	e1c73507          	fld	fa0,-484(a4) # 83f52620 <xISRStackTop+0x190>
    83f4180c:	00011717          	auipc	a4,0x11
    83f41810:	e0c73687          	fld	fa3,-500(a4) # 83f52618 <xISRStackTop+0x188>
    83f41814:	0af777d3          	fsub.d	fa5,fa4,fa5
    83f41818:	f2078753          	fmv.d.x	fa4,a5
    83f4181c:	00011797          	auipc	a5,0x11
    83f41820:	e447b387          	fld	ft7,-444(a5) # 83f52660 <xISRStackTop+0x1d0>
    83f41824:	00011797          	auipc	a5,0x11
    83f41828:	e2c7b887          	fld	fa7,-468(a5) # 83f52650 <xISRStackTop+0x1c0>
    83f4182c:	02051713          	slli	a4,a0,0x20
    83f41830:	00011617          	auipc	a2,0x11
    83f41834:	e1863107          	fld	ft2,-488(a2) # 83f52648 <xISRStackTop+0x1b8>
    83f41838:	00011617          	auipc	a2,0x11
    83f4183c:	df063f87          	fld	ft11,-528(a2) # 83f52628 <xISRStackTop+0x198>
    83f41840:	0af777d3          	fsub.d	fa5,fa4,fa5
    83f41844:	00011797          	auipc	a5,0x11
    83f41848:	e147b707          	fld	fa4,-492(a5) # 83f52658 <xISRStackTop+0x1c8>
    83f4184c:	00011617          	auipc	a2,0x11
    83f41850:	de463f07          	fld	ft10,-540(a2) # 83f52630 <xISRStackTop+0x1a0>
    83f41854:	00011617          	auipc	a2,0x11
    83f41858:	de463e87          	fld	ft9,-540(a2) # 83f52638 <xISRStackTop+0x1a8>
    83f4185c:	00011617          	auipc	a2,0x11
    83f41860:	de463e07          	fld	ft8,-540(a2) # 83f52640 <xISRStackTop+0x1b0>
    83f41864:	f2068453          	fmv.d.x	fs0,a3
    83f41868:	d20580d3          	fcvt.d.w	ft1,a1
    83f4186c:	12327653          	fmul.d	fa2,ft4,ft3
    83f41870:	12c67053          	fmul.d	ft0,fa2,fa2
    83f41874:	e20607d3          	fmv.x.d	a5,fa2
    83f41878:	00f77633          	and	a2,a4,a5
    83f4187c:	f2060653          	fmv.d.x	fa2,a2
    83f41880:	52d076c3          	fmadd.d	fa3,ft0,fa3,fa0
    83f41884:	2286724b          	fnmsub.d	ft4,fa2,fs0,ft4
    83f41888:	f2060453          	fmv.d.x	fs0,a2
    83f4188c:	f2078653          	fmv.d.x	fa2,a5
    83f41890:	12007553          	fmul.d	fa0,ft0,ft0
    83f41894:	02867353          	fadd.d	ft6,fa2,fs0
    83f41898:	fa06f6c3          	fmadd.d	fa3,fa3,ft0,ft11
    83f4189c:	22f477cb          	fnmsub.d	fa5,fs0,fa5,ft4
    83f418a0:	12847643          	fmadd.d	fa2,fs0,fs0,ft2
    83f418a4:	f206f6c3          	fmadd.d	fa3,fa3,ft0,ft10
    83f418a8:	1237f7d3          	fmul.d	fa5,fa5,ft3
    83f418ac:	ea06f6c3          	fmadd.d	fa3,fa3,ft0,ft9
    83f418b0:	12f37353          	fmul.d	ft6,ft6,fa5
    83f418b4:	e206f6c3          	fmadd.d	fa3,fa3,ft0,ft8
    83f418b8:	32d576c3          	fmadd.d	fa3,fa0,fa3,ft6
    83f418bc:	02d67653          	fadd.d	fa2,fa2,fa3
    83f418c0:	e20606d3          	fmv.x.d	a3,fa2
    83f418c4:	8ef9                	and	a3,a3,a4
    83f418c6:	f2068653          	fmv.d.x	fa2,a3
    83f418ca:	0a267653          	fsub.d	fa2,fa2,ft2
    83f418ce:	6284764b          	fnmsub.d	fa2,fs0,fs0,fa2
    83f418d2:	0ac6f6d3          	fsub.d	fa3,fa3,fa2
    83f418d6:	f2078653          	fmv.d.x	fa2,a5
    83f418da:	12c6f6d3          	fmul.d	fa3,fa3,fa2
    83f418de:	f2068653          	fmv.d.x	fa2,a3
    83f418e2:	6ac7f7c3          	fmadd.d	fa5,fa5,fa2,fa3
    83f418e6:	7a8676c3          	fmadd.d	fa3,fa2,fs0,fa5
    83f418ea:	e20687d3          	fmv.x.d	a5,fa3
    83f418ee:	8ff9                	and	a5,a5,a4
    83f418f0:	f2078553          	fmv.d.x	fa0,a5
    83f418f4:	52c476cb          	fnmsub.d	fa3,fs0,fa2,fa0
    83f418f8:	0ad7f7d3          	fsub.d	fa5,fa5,fa3
    83f418fc:	1317f7d3          	fmul.d	fa5,fa5,fa7
    83f41900:	7aa777c3          	fmadd.d	fa5,fa4,fa0,fa5
    83f41904:	0307f7d3          	fadd.d	fa5,fa5,fa6
    83f41908:	7aa3f743          	fmadd.d	fa4,ft7,fa0,fa5
    83f4190c:	02577753          	fadd.d	fa4,fa4,ft5
    83f41910:	02177753          	fadd.d	fa4,fa4,ft1
    83f41914:	e20706d3          	fmv.x.d	a3,fa4
    83f41918:	8f75                	and	a4,a4,a3
    83f4191a:	f2070753          	fmv.d.x	fa4,a4
    83f4191e:	0a1776d3          	fsub.d	fa3,fa4,ft1
    83f41922:	0a56f6d3          	fsub.d	fa3,fa3,ft5
    83f41926:	6a7576cb          	fnmsub.d	fa3,fa0,ft7,fa3
    83f4192a:	0ad7f6d3          	fsub.d	fa3,fa5,fa3
    83f4192e:	3c7d                	addiw	s8,s8,-1
    83f41930:	017c6bb3          	or	s7,s8,s7
    83f41934:	2b81                	sext.w	s7,s7
    83f41936:	22b58453          	fmv.d	fs0,fa1
    83f4193a:	000b9663          	bnez	s7,83f41946 <__ieee754_pow+0x44c>
    83f4193e:	00011797          	auipc	a5,0x11
    83f41942:	b727b407          	fld	fs0,-1166(a5) # 83f524b0 <xISRStackTop+0x20>
    83f41946:	020a5793          	srli	a5,s4,0x20
    83f4194a:	1782                	slli	a5,a5,0x20
    83f4194c:	f2078653          	fmv.d.x	fa2,a5
    83f41950:	f20a07d3          	fmv.d.x	fa5,s4
    83f41954:	40900637          	lui	a2,0x40900
    83f41958:	0ac7f7d3          	fsub.d	fa5,fa5,fa2
    83f4195c:	f20a0653          	fmv.d.x	fa2,s4
    83f41960:	12c6f6d3          	fmul.d	fa3,fa3,fa2
    83f41964:	f2078653          	fmv.d.x	fa2,a5
    83f41968:	12c77653          	fmul.d	fa2,fa4,fa2
    83f4196c:	6ae7f7c3          	fmadd.d	fa5,fa5,fa4,fa3
    83f41970:	02c7f753          	fadd.d	fa4,fa5,fa2
    83f41974:	e20706d3          	fmv.x.d	a3,fa4
    83f41978:	4206d593          	srai	a1,a3,0x20
    83f4197c:	0006871b          	sext.w	a4,a3
    83f41980:	16c5c163          	blt	a1,a2,83f41ae2 <__ieee754_pow+0x5e8>
    83f41984:	bf7007b7          	lui	a5,0xbf700
    83f41988:	9fad                	addw	a5,a5,a1
    83f4198a:	8fd9                	or	a5,a5,a4
    83f4198c:	2781                	sext.w	a5,a5
    83f4198e:	28079163          	bnez	a5,83f41c10 <__ieee754_pow+0x716>
    83f41992:	f20686d3          	fmv.d.x	fa3,a3
    83f41996:	00011797          	auipc	a5,0x11
    83f4199a:	cd27b707          	fld	fa4,-814(a5) # 83f52668 <xISRStackTop+0x1d8>
    83f4199e:	02e7f753          	fadd.d	fa4,fa5,fa4
    83f419a2:	0ac6f6d3          	fsub.d	fa3,fa3,fa2
    83f419a6:	a2e697d3          	flt.d	a5,fa3,fa4
    83f419aa:	26079363          	bnez	a5,83f41c10 <__ieee754_pow+0x716>
    83f419ae:	4145d79b          	sraiw	a5,a1,0x14
    83f419b2:	7ff7f793          	andi	a5,a5,2047
    83f419b6:	00100537          	lui	a0,0x100
    83f419ba:	c027879b          	addiw	a5,a5,-1022
    83f419be:	40f557bb          	sraw	a5,a0,a5
    83f419c2:	9fad                	addw	a5,a5,a1
    83f419c4:	4147d69b          	sraiw	a3,a5,0x14
    83f419c8:	7ff6f693          	andi	a3,a3,2047
    83f419cc:	c016869b          	addiw	a3,a3,-1023
    83f419d0:	fff5061b          	addiw	a2,a0,-1
    83f419d4:	02c79713          	slli	a4,a5,0x2c
    83f419d8:	40d6563b          	sraw	a2,a2,a3
    83f419dc:	9331                	srli	a4,a4,0x2c
    83f419de:	8f49                	or	a4,a4,a0
    83f419e0:	fff64613          	not	a2,a2
    83f419e4:	4551                	li	a0,20
    83f419e6:	40d506bb          	subw	a3,a0,a3
    83f419ea:	8ff1                	and	a5,a5,a2
    83f419ec:	40d7553b          	sraw	a0,a4,a3
    83f419f0:	1782                	slli	a5,a5,0x20
    83f419f2:	0005d463          	bgez	a1,83f419fa <__ieee754_pow+0x500>
    83f419f6:	40a0053b          	negw	a0,a0
    83f419fa:	f2078753          	fmv.d.x	fa4,a5
    83f419fe:	0145161b          	slliw	a2,a0,0x14
    83f41a02:	0ae67653          	fsub.d	fa2,fa2,fa4
    83f41a06:	02c7f753          	fadd.d	fa4,fa5,fa2
    83f41a0a:	e20706d3          	fmv.x.d	a3,fa4
    83f41a0e:	57fd                	li	a5,-1
    83f41a10:	02079713          	slli	a4,a5,0x20
    83f41a14:	8ef9                	and	a3,a3,a4
    83f41a16:	f2068753          	fmv.d.x	fa4,a3
    83f41a1a:	00011717          	auipc	a4,0x11
    83f41a1e:	c5e73687          	fld	fa3,-930(a4) # 83f52678 <xISRStackTop+0x1e8>
    83f41a22:	00011717          	auipc	a4,0x11
    83f41a26:	c5e73287          	fld	ft5,-930(a4) # 83f52680 <xISRStackTop+0x1f0>
    83f41a2a:	0ac77653          	fsub.d	fa2,fa4,fa2
    83f41a2e:	12e6f6d3          	fmul.d	fa3,fa3,fa4
    83f41a32:	00011717          	auipc	a4,0x11
    83f41a36:	c5673507          	fld	fa0,-938(a4) # 83f52688 <xISRStackTop+0x1f8>
    83f41a3a:	00011717          	auipc	a4,0x11
    83f41a3e:	b3673707          	fld	fa4,-1226(a4) # 83f52570 <xISRStackTop+0xe0>
    83f41a42:	00011717          	auipc	a4,0x11
    83f41a46:	b3673207          	fld	ft4,-1226(a4) # 83f52578 <xISRStackTop+0xe8>
    83f41a4a:	00011717          	auipc	a4,0x11
    83f41a4e:	b3673187          	fld	ft3,-1226(a4) # 83f52580 <xISRStackTop+0xf0>
    83f41a52:	00011717          	auipc	a4,0x11
    83f41a56:	b3673107          	fld	ft2,-1226(a4) # 83f52588 <xISRStackTop+0xf8>
    83f41a5a:	0ac7f7d3          	fsub.d	fa5,fa5,fa2
    83f41a5e:	00011717          	auipc	a4,0x11
    83f41a62:	b3273087          	fld	ft1,-1230(a4) # 83f52590 <xISRStackTop+0x100>
    83f41a66:	00011717          	auipc	a4,0x11
    83f41a6a:	a4273007          	fld	ft0,-1470(a4) # 83f524a8 <xISRStackTop+0x18>
    83f41a6e:	6a57f7c3          	fmadd.d	fa5,fa5,ft5,fa3
    83f41a72:	f20686d3          	fmv.d.x	fa3,a3
    83f41a76:	f20682d3          	fmv.d.x	ft5,a3
    83f41a7a:	7ad57643          	fmadd.d	fa2,fa0,fa3,fa5
    83f41a7e:	12c676d3          	fmul.d	fa3,fa2,fa2
    83f41a82:	62a2f54b          	fnmsub.d	fa0,ft5,fa0,fa2
    83f41a86:	22e6f743          	fmadd.d	fa4,fa3,fa4,ft4
    83f41a8a:	0aa7f7d3          	fsub.d	fa5,fa5,fa0
    83f41a8e:	1ad77743          	fmadd.d	fa4,fa4,fa3,ft3
    83f41a92:	7af677c3          	fmadd.d	fa5,fa2,fa5,fa5
    83f41a96:	12d77743          	fmadd.d	fa4,fa4,fa3,ft2
    83f41a9a:	0ad77743          	fmadd.d	fa4,fa4,fa3,ft1
    83f41a9e:	62d7774b          	fnmsub.d	fa4,fa4,fa3,fa2
    83f41aa2:	12e676d3          	fmul.d	fa3,fa2,fa4
    83f41aa6:	0a077753          	fsub.d	fa4,fa4,ft0
    83f41aaa:	1ae6f753          	fdiv.d	fa4,fa3,fa4
    83f41aae:	0af777d3          	fsub.d	fa5,fa4,fa5
    83f41ab2:	0ac7f7d3          	fsub.d	fa5,fa5,fa2
    83f41ab6:	0af5f7d3          	fsub.d	fa5,fa1,fa5
    83f41aba:	e2078753          	fmv.x.d	a4,fa5
    83f41abe:	42075693          	srai	a3,a4,0x20
    83f41ac2:	9e35                	addw	a2,a2,a3
    83f41ac4:	4146569b          	sraiw	a3,a2,0x14
    83f41ac8:	18d05c63          	blez	a3,83f41c60 <__ieee754_pow+0x766>
    83f41acc:	9381                	srli	a5,a5,0x20
    83f41ace:	1602                	slli	a2,a2,0x20
    83f41ad0:	8f7d                	and	a4,a4,a5
    83f41ad2:	8f51                	or	a4,a4,a2
    83f41ad4:	f20707d3          	fmv.d.x	fa5,a4
    83f41ad8:	1287f7d3          	fmul.d	fa5,fa5,fs0
    83f41adc:	e2078753          	fmv.x.d	a4,fa5
    83f41ae0:	bcf9                	j	83f415be <__ieee754_pow+0xc4>
    83f41ae2:	02159793          	slli	a5,a1,0x21
    83f41ae6:	4090d637          	lui	a2,0x4090d
    83f41aea:	9385                	srli	a5,a5,0x21
    83f41aec:	bff60613          	addi	a2,a2,-1025 # 4090cbff <CVIMMAP_DRAM_SIZE+0x3c90cbff>
    83f41af0:	10f65863          	bge	a2,a5,83f41c00 <__ieee754_pow+0x706>
    83f41af4:	3f6f37b7          	lui	a5,0x3f6f3
    83f41af8:	4007879b          	addiw	a5,a5,1024
    83f41afc:	9fad                	addw	a5,a5,a1
    83f41afe:	8fd9                	or	a5,a5,a4
    83f41b00:	2781                	sext.w	a5,a5
    83f41b02:	e799                	bnez	a5,83f41b10 <__ieee754_pow+0x616>
    83f41b04:	0ac77753          	fsub.d	fa4,fa4,fa2
    83f41b08:	a2e787d3          	fle.d	a5,fa5,fa4
    83f41b0c:	ea0781e3          	beqz	a5,83f419ae <__ieee754_pow+0x4b4>
    83f41b10:	00011797          	auipc	a5,0x11
    83f41b14:	b607b787          	fld	fa5,-1184(a5) # 83f52670 <xISRStackTop+0x1e0>
    83f41b18:	12f47453          	fmul.d	fs0,fs0,fa5
    83f41b1c:	12f477d3          	fmul.d	fa5,fs0,fa5
    83f41b20:	e2078753          	fmv.x.d	a4,fa5
    83f41b24:	bc69                	j	83f415be <__ieee754_pow+0xc4>
    83f41b26:	b80ad7e3          	bgez	s5,83f416b4 <__ieee754_pow+0x1ba>
    83f41b2a:	f20a07d3          	fmv.d.x	fa5,s4
    83f41b2e:	22f797d3          	fneg.d	fa5,fa5
    83f41b32:	e2078753          	fmv.x.d	a4,fa5
    83f41b36:	b461                	j	83f415be <__ieee754_pow+0xc4>
    83f41b38:	f20002d3          	fmv.d.x	ft5,zero
    83f41b3c:	00010797          	auipc	a5,0x10
    83f41b40:	7d47b587          	fld	fa1,2004(a5) # 83f52310 <__func__.1+0x118>
    83f41b44:	22b587d3          	fmv.d	fa5,fa1
    83f41b48:	22528853          	fmv.d	fa6,ft5
    83f41b4c:	4801                	li	a6,0
    83f41b4e:	b9bd                	j	83f417cc <__ieee754_pow+0x2d2>
    83f41b50:	3ff007b7          	lui	a5,0x3ff00
    83f41b54:	ffe78693          	addi	a3,a5,-2 # 3feffffe <CVIMMAP_DRAM_SIZE+0x3beffffe>
    83f41b58:	b696dfe3          	bge	a3,s1,83f416d6 <__ieee754_pow+0x1dc>
    83f41b5c:	b297c3e3          	blt	a5,s1,83f41682 <__ieee754_pow+0x188>
    83f41b60:	f20707d3          	fmv.d.x	fa5,a4
    83f41b64:	00010797          	auipc	a5,0x10
    83f41b68:	7ac7b587          	fld	fa1,1964(a5) # 83f52310 <__func__.1+0x118>
    83f41b6c:	00011797          	auipc	a5,0x11
    83f41b70:	a447b707          	fld	fa4,-1468(a5) # 83f525b0 <xISRStackTop+0x120>
    83f41b74:	0ab7f7d3          	fsub.d	fa5,fa5,fa1
    83f41b78:	00010797          	auipc	a5,0x10
    83f41b7c:	7a87b607          	fld	fa2,1960(a5) # 83f52320 <__func__.1+0x128>
    83f41b80:	00010797          	auipc	a5,0x10
    83f41b84:	7187b087          	fld	ft1,1816(a5) # 83f52298 <__func__.1+0xa0>
    83f41b88:	00011797          	auipc	a5,0x11
    83f41b8c:	9d07b007          	fld	ft0,-1584(a5) # 83f52558 <xISRStackTop+0xc8>
    83f41b90:	00011797          	auipc	a5,0x11
    83f41b94:	a707b687          	fld	fa3,-1424(a5) # 83f52600 <xISRStackTop+0x170>
    83f41b98:	00011797          	auipc	a5,0x11
    83f41b9c:	a707b507          	fld	fa0,-1424(a5) # 83f52608 <xISRStackTop+0x178>
    83f41ba0:	72c7f64b          	fnmsub.d	fa2,fa5,fa2,fa4
    83f41ba4:	12f7f753          	fmul.d	fa4,fa5,fa5
    83f41ba8:	0af6764b          	fnmsub.d	fa2,fa2,fa5,ft1
    83f41bac:	12c77753          	fmul.d	fa4,fa4,fa2
    83f41bb0:	12077753          	fmul.d	fa4,fa4,ft0
    83f41bb4:	72d7f6c7          	fmsub.d	fa3,fa5,fa3,fa4
    83f41bb8:	6aa7f743          	fmadd.d	fa4,fa5,fa0,fa3
    83f41bbc:	e20707d3          	fmv.x.d	a5,fa4
    83f41bc0:	9381                	srli	a5,a5,0x20
    83f41bc2:	1782                	slli	a5,a5,0x20
    83f41bc4:	f2078753          	fmv.d.x	fa4,a5
    83f41bc8:	72a7f7cb          	fnmsub.d	fa5,fa5,fa0,fa4
    83f41bcc:	0af6f6d3          	fsub.d	fa3,fa3,fa5
    83f41bd0:	bbb9                	j	83f4192e <__ieee754_pow+0x434>
    83f41bd2:	f20407d3          	fmv.d.x	fa5,s0
    83f41bd6:	12f7f7d3          	fmul.d	fa5,fa5,fa5
    83f41bda:	e2078753          	fmv.x.d	a4,fa5
    83f41bde:	b2c5                	j	83f415be <__ieee754_pow+0xc4>
    83f41be0:	b40719e3          	bnez	a4,83f41732 <__ieee754_pow+0x238>
    83f41be4:	4751                	li	a4,20
    83f41be6:	40c707bb          	subw	a5,a4,a2
    83f41bea:	40f9d73b          	sraw	a4,s3,a5
    83f41bee:	00f717bb          	sllw	a5,a4,a5
    83f41bf2:	97379ce3          	bne	a5,s3,83f4156a <__ieee754_pow+0x70>
    83f41bf6:	8b05                	andi	a4,a4,1
    83f41bf8:	4c09                	li	s8,2
    83f41bfa:	40ec0c3b          	subw	s8,s8,a4
    83f41bfe:	b2b5                	j	83f4156a <__ieee754_pow+0x70>
    83f41c00:	3fe00737          	lui	a4,0x3fe00
    83f41c04:	4601                	li	a2,0
    83f41c06:	4501                	li	a0,0
    83f41c08:	e0f753e3          	bge	a4,a5,83f41a0e <__ieee754_pow+0x514>
    83f41c0c:	83d1                	srli	a5,a5,0x14
    83f41c0e:	b365                	j	83f419b6 <__ieee754_pow+0x4bc>
    83f41c10:	00011797          	auipc	a5,0x11
    83f41c14:	8907b787          	fld	fa5,-1904(a5) # 83f524a0 <xISRStackTop+0x10>
    83f41c18:	12f47453          	fmul.d	fs0,fs0,fa5
    83f41c1c:	12f477d3          	fmul.d	fa5,fs0,fa5
    83f41c20:	e2078753          	fmv.x.d	a4,fa5
    83f41c24:	ba69                	j	83f415be <__ieee754_pow+0xc4>
    83f41c26:	4785                	li	a5,1
    83f41c28:	98fc1be3          	bne	s8,a5,83f415be <__ieee754_pow+0xc4>
    83f41c2c:	f20707d3          	fmv.d.x	fa5,a4
    83f41c30:	22f797d3          	fneg.d	fa5,fa5
    83f41c34:	e2078753          	fmv.x.d	a4,fa5
    83f41c38:	b259                	j	83f415be <__ieee754_pow+0xc4>
    83f41c3a:	00011797          	auipc	a5,0x11
    83f41c3e:	9b67b287          	fld	ft5,-1610(a5) # 83f525f0 <xISRStackTop+0x160>
    83f41c42:	00011797          	auipc	a5,0x11
    83f41c46:	9b67b807          	fld	fa6,-1610(a5) # 83f525f8 <xISRStackTop+0x168>
    83f41c4a:	00040837          	lui	a6,0x40
    83f41c4e:	00011797          	auipc	a5,0x11
    83f41c52:	86a7b787          	fld	fa5,-1942(a5) # 83f524b8 <xISRStackTop+0x28>
    83f41c56:	00010797          	auipc	a5,0x10
    83f41c5a:	6ba7b587          	fld	fa1,1722(a5) # 83f52310 <__func__.1+0x118>
    83f41c5e:	b6bd                	j	83f417cc <__ieee754_pow+0x2d2>
    83f41c60:	22f78553          	fmv.d	fa0,fa5
    83f41c64:	779000ef          	jal	ra,83f42bdc <scalbn>
    83f41c68:	e2050753          	fmv.x.d	a4,fa0
    83f41c6c:	b5a5                	j	83f41ad4 <__ieee754_pow+0x5da>

0000000083f41c6e <__ieee754_rem_pio2>:
    83f41c6e:	e20507d3          	fmv.x.d	a5,fa0
    83f41c72:	7139                	addi	sp,sp,-64
    83f41c74:	f04a                	sd	s2,32(sp)
    83f41c76:	4207d913          	srai	s2,a5,0x20
    83f41c7a:	f822                	sd	s0,48(sp)
    83f41c7c:	3fe92737          	lui	a4,0x3fe92
    83f41c80:	02191413          	slli	s0,s2,0x21
    83f41c84:	f426                	sd	s1,40(sp)
    83f41c86:	fc06                	sd	ra,56(sp)
    83f41c88:	1fb70713          	addi	a4,a4,507 # 3fe921fb <CVIMMAP_DRAM_SIZE+0x3be921fb>
    83f41c8c:	9005                	srli	s0,s0,0x21
    83f41c8e:	84aa                	mv	s1,a0
    83f41c90:	0e875a63          	bge	a4,s0,83f41d84 <__ieee754_rem_pio2+0x116>
    83f41c94:	4002e737          	lui	a4,0x4002e
    83f41c98:	97b70713          	addi	a4,a4,-1669 # 4002d97b <CVIMMAP_DRAM_SIZE+0x3c02d97b>
    83f41c9c:	04874363          	blt	a4,s0,83f41ce2 <__ieee754_rem_pio2+0x74>
    83f41ca0:	00011717          	auipc	a4,0x11
    83f41ca4:	9f073787          	fld	fa5,-1552(a4) # 83f52690 <xISRStackTop+0x200>
    83f41ca8:	3ff92737          	lui	a4,0x3ff92
    83f41cac:	1fb70713          	addi	a4,a4,507 # 3ff921fb <CVIMMAP_DRAM_SIZE+0x3bf921fb>
    83f41cb0:	23205c63          	blez	s2,83f41ee8 <__ieee754_rem_pio2+0x27a>
    83f41cb4:	0af577d3          	fsub.d	fa5,fa0,fa5
    83f41cb8:	0ee40663          	beq	s0,a4,83f41da4 <__ieee754_rem_pio2+0x136>
    83f41cbc:	00011797          	auipc	a5,0x11
    83f41cc0:	9dc7b707          	fld	fa4,-1572(a5) # 83f52698 <xISRStackTop+0x208>
    83f41cc4:	0ae7f6d3          	fsub.d	fa3,fa5,fa4
    83f41cc8:	4505                	li	a0,1
    83f41cca:	0ad7f7d3          	fsub.d	fa5,fa5,fa3
    83f41cce:	a094                	fsd	fa3,0(s1)
    83f41cd0:	0ae7f7d3          	fsub.d	fa5,fa5,fa4
    83f41cd4:	a49c                	fsd	fa5,8(s1)
    83f41cd6:	70e2                	ld	ra,56(sp)
    83f41cd8:	7442                	ld	s0,48(sp)
    83f41cda:	74a2                	ld	s1,40(sp)
    83f41cdc:	7902                	ld	s2,32(sp)
    83f41cde:	6121                	addi	sp,sp,64
    83f41ce0:	8082                	ret
    83f41ce2:	41392737          	lui	a4,0x41392
    83f41ce6:	1fb70713          	addi	a4,a4,507 # 413921fb <CVIMMAP_DRAM_SIZE+0x3d3921fb>
    83f41cea:	0e875663          	bge	a4,s0,83f41dd6 <__ieee754_rem_pio2+0x168>
    83f41cee:	7ff00737          	lui	a4,0x7ff00
    83f41cf2:	0ae45363          	bge	s0,a4,83f41d98 <__ieee754_rem_pio2+0x12a>
    83f41cf6:	4144561b          	sraiw	a2,s0,0x14
    83f41cfa:	bea6061b          	addiw	a2,a2,-1046
    83f41cfe:	86be                	mv	a3,a5
    83f41d00:	0146179b          	slliw	a5,a2,0x14
    83f41d04:	9c1d                	subw	s0,s0,a5
    83f41d06:	1682                	slli	a3,a3,0x20
    83f41d08:	9281                	srli	a3,a3,0x20
    83f41d0a:	1402                	slli	s0,s0,0x20
    83f41d0c:	8c55                	or	s0,s0,a3
    83f41d0e:	f20407d3          	fmv.d.x	fa5,s0
    83f41d12:	f20406d3          	fmv.d.x	fa3,s0
    83f41d16:	00011717          	auipc	a4,0x11
    83f41d1a:	9b273707          	fld	fa4,-1614(a4) # 83f526c8 <xISRStackTop+0x238>
    83f41d1e:	c20797d3          	fcvt.w.d	a5,fa5,rtz
    83f41d22:	468d                	li	a3,3
    83f41d24:	d20787d3          	fcvt.d.w	fa5,a5
    83f41d28:	0af6f6d3          	fsub.d	fa3,fa3,fa5
    83f41d2c:	a43e                	fsd	fa5,8(sp)
    83f41d2e:	12e6f7d3          	fmul.d	fa5,fa3,fa4
    83f41d32:	c20797d3          	fcvt.w.d	a5,fa5,rtz
    83f41d36:	d20786d3          	fcvt.d.w	fa3,a5
    83f41d3a:	2781                	sext.w	a5,a5
    83f41d3c:	0ad7f7d3          	fsub.d	fa5,fa5,fa3
    83f41d40:	a836                	fsd	fa3,16(sp)
    83f41d42:	12e7f7d3          	fmul.d	fa5,fa5,fa4
    83f41d46:	f2000753          	fmv.d.x	fa4,zero
    83f41d4a:	a2e7a753          	feq.d	a4,fa5,fa4
    83f41d4e:	ac3e                	fsd	fa5,24(sp)
    83f41d50:	c701                	beqz	a4,83f41d58 <__ieee754_rem_pio2+0xea>
    83f41d52:	00f036b3          	snez	a3,a5
    83f41d56:	0685                	addi	a3,a3,1
    83f41d58:	0000f797          	auipc	a5,0xf
    83f41d5c:	da078793          	addi	a5,a5,-608 # 83f50af8 <two_over_pi>
    83f41d60:	4709                	li	a4,2
    83f41d62:	85a6                	mv	a1,s1
    83f41d64:	0028                	addi	a0,sp,8
    83f41d66:	4f2000ef          	jal	ra,83f42258 <__kernel_rem_pio2>
    83f41d6a:	f60956e3          	bgez	s2,83f41cd6 <__ieee754_rem_pio2+0x68>
    83f41d6e:	2098                	fld	fa4,0(s1)
    83f41d70:	249c                	fld	fa5,8(s1)
    83f41d72:	40a0053b          	negw	a0,a0
    83f41d76:	22e71753          	fneg.d	fa4,fa4
    83f41d7a:	22f797d3          	fneg.d	fa5,fa5
    83f41d7e:	a098                	fsd	fa4,0(s1)
    83f41d80:	a49c                	fsd	fa5,8(s1)
    83f41d82:	bf91                	j	83f41cd6 <__ieee754_rem_pio2+0x68>
    83f41d84:	70e2                	ld	ra,56(sp)
    83f41d86:	7442                	ld	s0,48(sp)
    83f41d88:	a088                	fsd	fa0,0(s1)
    83f41d8a:	00053423          	sd	zero,8(a0) # 100008 <CVIMMAP_FREERTOS_SIZE+0x40008>
    83f41d8e:	74a2                	ld	s1,40(sp)
    83f41d90:	7902                	ld	s2,32(sp)
    83f41d92:	4501                	li	a0,0
    83f41d94:	6121                	addi	sp,sp,64
    83f41d96:	8082                	ret
    83f41d98:	0aa577d3          	fsub.d	fa5,fa0,fa0
    83f41d9c:	4501                	li	a0,0
    83f41d9e:	a49c                	fsd	fa5,8(s1)
    83f41da0:	a09c                	fsd	fa5,0(s1)
    83f41da2:	bf15                	j	83f41cd6 <__ieee754_rem_pio2+0x68>
    83f41da4:	00011797          	auipc	a5,0x11
    83f41da8:	8fc7b707          	fld	fa4,-1796(a5) # 83f526a0 <xISRStackTop+0x210>
    83f41dac:	0ae7f7d3          	fsub.d	fa5,fa5,fa4
    83f41db0:	00011797          	auipc	a5,0x11
    83f41db4:	8f87b707          	fld	fa4,-1800(a5) # 83f526a8 <xISRStackTop+0x218>
    83f41db8:	70e2                	ld	ra,56(sp)
    83f41dba:	7442                	ld	s0,48(sp)
    83f41dbc:	7902                	ld	s2,32(sp)
    83f41dbe:	4505                	li	a0,1
    83f41dc0:	0ae7f6d3          	fsub.d	fa3,fa5,fa4
    83f41dc4:	0ad7f7d3          	fsub.d	fa5,fa5,fa3
    83f41dc8:	a094                	fsd	fa3,0(s1)
    83f41dca:	0ae7f7d3          	fsub.d	fa5,fa5,fa4
    83f41dce:	a49c                	fsd	fa5,8(s1)
    83f41dd0:	74a2                	ld	s1,40(sp)
    83f41dd2:	6121                	addi	sp,sp,64
    83f41dd4:	8082                	ret
    83f41dd6:	b73fe0ef          	jal	ra,83f40948 <fabs>
    83f41dda:	00011797          	auipc	a5,0x11
    83f41dde:	8d67b687          	fld	fa3,-1834(a5) # 83f526b0 <xISRStackTop+0x220>
    83f41de2:	00010797          	auipc	a5,0x10
    83f41de6:	4b67b607          	fld	fa2,1206(a5) # 83f52298 <__func__.1+0xa0>
    83f41dea:	62d576c3          	fmadd.d	fa3,fa0,fa3,fa2
    83f41dee:	00011797          	auipc	a5,0x11
    83f41df2:	8a27b787          	fld	fa5,-1886(a5) # 83f52690 <xISRStackTop+0x200>
    83f41df6:	00011797          	auipc	a5,0x11
    83f41dfa:	8a27b707          	fld	fa4,-1886(a5) # 83f52698 <xISRStackTop+0x208>
    83f41dfe:	47fd                	li	a5,31
    83f41e00:	c20696d3          	fcvt.w.d	a3,fa3,rtz
    83f41e04:	d20686d3          	fcvt.d.w	fa3,a3
    83f41e08:	0006851b          	sext.w	a0,a3
    83f41e0c:	52f6f54b          	fnmsub.d	fa0,fa3,fa5,fa0
    83f41e10:	12e6f7d3          	fmul.d	fa5,fa3,fa4
    83f41e14:	04a7c563          	blt	a5,a0,83f41e5e <__ieee754_rem_pio2+0x1f0>
    83f41e18:	0af57753          	fsub.d	fa4,fa0,fa5
    83f41e1c:	fff6879b          	addiw	a5,a3,-1
    83f41e20:	00279713          	slli	a4,a5,0x2
    83f41e24:	0000f797          	auipc	a5,0xf
    83f41e28:	c5478793          	addi	a5,a5,-940 # 83f50a78 <npio2_hw>
    83f41e2c:	97ba                	add	a5,a5,a4
    83f41e2e:	4398                	lw	a4,0(a5)
    83f41e30:	e20707d3          	fmv.x.d	a5,fa4
    83f41e34:	02870963          	beq	a4,s0,83f41e66 <__ieee754_rem_pio2+0x1f8>
    83f41e38:	e09c                	sd	a5,0(s1)
    83f41e3a:	f2078753          	fmv.d.x	fa4,a5
    83f41e3e:	0ae57553          	fsub.d	fa0,fa0,fa4
    83f41e42:	0af57553          	fsub.d	fa0,fa0,fa5
    83f41e46:	a488                	fsd	fa0,8(s1)
    83f41e48:	e80957e3          	bgez	s2,83f41cd6 <__ieee754_rem_pio2+0x68>
    83f41e4c:	22e717d3          	fneg.d	fa5,fa4
    83f41e50:	22a51553          	fneg.d	fa0,fa0
    83f41e54:	40d0053b          	negw	a0,a3
    83f41e58:	a09c                	fsd	fa5,0(s1)
    83f41e5a:	a488                	fsd	fa0,8(s1)
    83f41e5c:	bdad                	j	83f41cd6 <__ieee754_rem_pio2+0x68>
    83f41e5e:	0af57753          	fsub.d	fa4,fa0,fa5
    83f41e62:	e20707d3          	fmv.x.d	a5,fa4
    83f41e66:	0347d713          	srli	a4,a5,0x34
    83f41e6a:	4144541b          	sraiw	s0,s0,0x14
    83f41e6e:	7ff77713          	andi	a4,a4,2047
    83f41e72:	40e4073b          	subw	a4,s0,a4
    83f41e76:	4641                	li	a2,16
    83f41e78:	fce650e3          	bge	a2,a4,83f41e38 <__ieee754_rem_pio2+0x1ca>
    83f41e7c:	00011797          	auipc	a5,0x11
    83f41e80:	8247b607          	fld	fa2,-2012(a5) # 83f526a0 <xISRStackTop+0x210>
    83f41e84:	52c6f74b          	fnmsub.d	fa4,fa3,fa2,fa0
    83f41e88:	00011797          	auipc	a5,0x11
    83f41e8c:	8207b787          	fld	fa5,-2016(a5) # 83f526a8 <xISRStackTop+0x218>
    83f41e90:	03100613          	li	a2,49
    83f41e94:	0ae57553          	fsub.d	fa0,fa0,fa4
    83f41e98:	52c6f54b          	fnmsub.d	fa0,fa3,fa2,fa0
    83f41e9c:	52f6f7c7          	fmsub.d	fa5,fa3,fa5,fa0
    83f41ea0:	0af77653          	fsub.d	fa2,fa4,fa5
    83f41ea4:	e20607d3          	fmv.x.d	a5,fa2
    83f41ea8:	0347d713          	srli	a4,a5,0x34
    83f41eac:	7ff77713          	andi	a4,a4,2047
    83f41eb0:	9c19                	subw	s0,s0,a4
    83f41eb2:	00864663          	blt	a2,s0,83f41ebe <__ieee754_rem_pio2+0x250>
    83f41eb6:	22e70553          	fmv.d	fa0,fa4
    83f41eba:	a090                	fsd	fa2,0(s1)
    83f41ebc:	bfbd                	j	83f41e3a <__ieee754_rem_pio2+0x1cc>
    83f41ebe:	00010797          	auipc	a5,0x10
    83f41ec2:	7fa7b607          	fld	fa2,2042(a5) # 83f526b8 <xISRStackTop+0x228>
    83f41ec6:	72c6f54b          	fnmsub.d	fa0,fa3,fa2,fa4
    83f41eca:	00010797          	auipc	a5,0x10
    83f41ece:	7f67b787          	fld	fa5,2038(a5) # 83f526c0 <xISRStackTop+0x230>
    83f41ed2:	0aa77753          	fsub.d	fa4,fa4,fa0
    83f41ed6:	72c6f74b          	fnmsub.d	fa4,fa3,fa2,fa4
    83f41eda:	72f6f7c7          	fmsub.d	fa5,fa3,fa5,fa4
    83f41ede:	0af57753          	fsub.d	fa4,fa0,fa5
    83f41ee2:	e20707d3          	fmv.x.d	a5,fa4
    83f41ee6:	bf89                	j	83f41e38 <__ieee754_rem_pio2+0x1ca>
    83f41ee8:	02f577d3          	fadd.d	fa5,fa0,fa5
    83f41eec:	02e40063          	beq	s0,a4,83f41f0c <__ieee754_rem_pio2+0x29e>
    83f41ef0:	00010797          	auipc	a5,0x10
    83f41ef4:	7a87b707          	fld	fa4,1960(a5) # 83f52698 <xISRStackTop+0x208>
    83f41ef8:	02e7f6d3          	fadd.d	fa3,fa5,fa4
    83f41efc:	557d                	li	a0,-1
    83f41efe:	0ad7f7d3          	fsub.d	fa5,fa5,fa3
    83f41f02:	a094                	fsd	fa3,0(s1)
    83f41f04:	02e7f7d3          	fadd.d	fa5,fa5,fa4
    83f41f08:	a49c                	fsd	fa5,8(s1)
    83f41f0a:	b3f1                	j	83f41cd6 <__ieee754_rem_pio2+0x68>
    83f41f0c:	00010797          	auipc	a5,0x10
    83f41f10:	7947b707          	fld	fa4,1940(a5) # 83f526a0 <xISRStackTop+0x210>
    83f41f14:	02e7f7d3          	fadd.d	fa5,fa5,fa4
    83f41f18:	00010797          	auipc	a5,0x10
    83f41f1c:	7907b707          	fld	fa4,1936(a5) # 83f526a8 <xISRStackTop+0x218>
    83f41f20:	557d                	li	a0,-1
    83f41f22:	02e7f6d3          	fadd.d	fa3,fa5,fa4
    83f41f26:	0ad7f7d3          	fsub.d	fa5,fa5,fa3
    83f41f2a:	a094                	fsd	fa3,0(s1)
    83f41f2c:	02e7f7d3          	fadd.d	fa5,fa5,fa4
    83f41f30:	a49c                	fsd	fa5,8(s1)
    83f41f32:	b355                	j	83f41cd6 <__ieee754_rem_pio2+0x68>

0000000083f41f34 <__ieee754_sqrt>:
    83f41f34:	e2050553          	fmv.x.d	a0,fa0
    83f41f38:	7ff00737          	lui	a4,0x7ff00
    83f41f3c:	7ff006b7          	lui	a3,0x7ff00
    83f41f40:	42055793          	srai	a5,a0,0x20
    83f41f44:	8f7d                	and	a4,a4,a5
    83f41f46:	0005061b          	sext.w	a2,a0
    83f41f4a:	18d70e63          	beq	a4,a3,83f420e6 <__ieee754_sqrt+0x1b2>
    83f41f4e:	10f05a63          	blez	a5,83f42062 <__ieee754_sqrt+0x12e>
    83f41f52:	4147d593          	srai	a1,a5,0x14
    83f41f56:	12058763          	beqz	a1,83f42084 <__ieee754_sqrt+0x150>
    83f41f5a:	02c79693          	slli	a3,a5,0x2c
    83f41f5e:	92b1                	srli	a3,a3,0x2c
    83f41f60:	001007b7          	lui	a5,0x100
    83f41f64:	8edd                	or	a3,a3,a5
    83f41f66:	c015859b          	addiw	a1,a1,-1023
    83f41f6a:	0016969b          	slliw	a3,a3,0x1
    83f41f6e:	01f6579b          	srliw	a5,a2,0x1f
    83f41f72:	0016171b          	slliw	a4,a2,0x1
    83f41f76:	0015f813          	andi	a6,a1,1
    83f41f7a:	9fb5                	addw	a5,a5,a3
    83f41f7c:	853a                	mv	a0,a4
    83f41f7e:	00080963          	beqz	a6,83f41f90 <__ieee754_sqrt+0x5c>
    83f41f82:	0017979b          	slliw	a5,a5,0x1
    83f41f86:	01f5551b          	srliw	a0,a0,0x1f
    83f41f8a:	0026171b          	slliw	a4,a2,0x2
    83f41f8e:	9fa9                	addw	a5,a5,a0
    83f41f90:	4015df1b          	sraiw	t5,a1,0x1
    83f41f94:	4e81                	li	t4,0
    83f41f96:	45d9                	li	a1,22
    83f41f98:	4681                	li	a3,0
    83f41f9a:	00200637          	lui	a2,0x200
    83f41f9e:	00c688bb          	addw	a7,a3,a2
    83f41fa2:	01f7581b          	srliw	a6,a4,0x1f
    83f41fa6:	35fd                	addiw	a1,a1,-1
    83f41fa8:	0017171b          	slliw	a4,a4,0x1
    83f41fac:	0117c863          	blt	a5,a7,83f41fbc <__ieee754_sqrt+0x88>
    83f41fb0:	411787bb          	subw	a5,a5,a7
    83f41fb4:	00c886bb          	addw	a3,a7,a2
    83f41fb8:	00ce8ebb          	addw	t4,t4,a2
    83f41fbc:	0017979b          	slliw	a5,a5,0x1
    83f41fc0:	00f807bb          	addw	a5,a6,a5
    83f41fc4:	8205                	srli	a2,a2,0x1
    83f41fc6:	fde1                	bnez	a1,83f41f9e <__ieee754_sqrt+0x6a>
    83f41fc8:	4e01                	li	t3,0
    83f41fca:	02000513          	li	a0,32
    83f41fce:	80000637          	lui	a2,0x80000
    83f41fd2:	a839                	j	83f41ff0 <__ieee754_sqrt+0xbc>
    83f41fd4:	0ed78863          	beq	a5,a3,83f420c4 <__ieee754_sqrt+0x190>
    83f41fd8:	01f7581b          	srliw	a6,a4,0x1f
    83f41fdc:	0017979b          	slliw	a5,a5,0x1
    83f41fe0:	357d                	addiw	a0,a0,-1
    83f41fe2:	0017171b          	slliw	a4,a4,0x1
    83f41fe6:	010787bb          	addw	a5,a5,a6
    83f41fea:	0016561b          	srliw	a2,a2,0x1
    83f41fee:	c121                	beqz	a0,83f4202e <__ieee754_sqrt+0xfa>
    83f41ff0:	00b608bb          	addw	a7,a2,a1
    83f41ff4:	8846                	mv	a6,a7
    83f41ff6:	fcf6dfe3          	bge	a3,a5,83f41fd4 <__ieee754_sqrt+0xa0>
    83f41ffa:	00c885bb          	addw	a1,a7,a2
    83f41ffe:	8336                	mv	t1,a3
    83f42000:	0a08cc63          	bltz	a7,83f420b8 <__ieee754_sqrt+0x184>
    83f42004:	9f95                	subw	a5,a5,a3
    83f42006:	01177363          	bgeu	a4,a7,83f4200c <__ieee754_sqrt+0xd8>
    83f4200a:	37fd                	addiw	a5,a5,-1
    83f4200c:	4107073b          	subw	a4,a4,a6
    83f42010:	01f7581b          	srliw	a6,a4,0x1f
    83f42014:	0017979b          	slliw	a5,a5,0x1
    83f42018:	357d                	addiw	a0,a0,-1
    83f4201a:	01c60e3b          	addw	t3,a2,t3
    83f4201e:	869a                	mv	a3,t1
    83f42020:	0017171b          	slliw	a4,a4,0x1
    83f42024:	010787bb          	addw	a5,a5,a6
    83f42028:	0016561b          	srliw	a2,a2,0x1
    83f4202c:	f171                	bnez	a0,83f41ff0 <__ieee754_sqrt+0xbc>
    83f4202e:	8fd9                	or	a5,a5,a4
    83f42030:	e3dd                	bnez	a5,83f420d6 <__ieee754_sqrt+0x1a2>
    83f42032:	001e551b          	srliw	a0,t3,0x1
    83f42036:	401ed71b          	sraiw	a4,t4,0x1
    83f4203a:	3fe007b7          	lui	a5,0x3fe00
    83f4203e:	001efe93          	andi	t4,t4,1
    83f42042:	9f3d                	addw	a4,a4,a5
    83f42044:	000e8563          	beqz	t4,83f4204e <__ieee754_sqrt+0x11a>
    83f42048:	800007b7          	lui	a5,0x80000
    83f4204c:	8d5d                	or	a0,a0,a5
    83f4204e:	014f179b          	slliw	a5,t5,0x14
    83f42052:	9fb9                	addw	a5,a5,a4
    83f42054:	1502                	slli	a0,a0,0x20
    83f42056:	9101                	srli	a0,a0,0x20
    83f42058:	1782                	slli	a5,a5,0x20
    83f4205a:	8d5d                	or	a0,a0,a5
    83f4205c:	f2050553          	fmv.d.x	fa0,a0
    83f42060:	8082                	ret
    83f42062:	02179713          	slli	a4,a5,0x21
    83f42066:	9305                	srli	a4,a4,0x21
    83f42068:	8f51                	or	a4,a4,a2
    83f4206a:	db6d                	beqz	a4,83f4205c <__ieee754_sqrt+0x128>
    83f4206c:	4581                	li	a1,0
    83f4206e:	e3d9                	bnez	a5,83f420f4 <__ieee754_sqrt+0x1c0>
    83f42070:	00b6571b          	srliw	a4,a2,0xb
    83f42074:	35ad                	addiw	a1,a1,-21
    83f42076:	0156161b          	slliw	a2,a2,0x15
    83f4207a:	87ba                	mv	a5,a4
    83f4207c:	db75                	beqz	a4,83f42070 <__ieee754_sqrt+0x13c>
    83f4207e:	01475693          	srli	a3,a4,0x14
    83f42082:	e2d1                	bnez	a3,83f42106 <__ieee754_sqrt+0x1d2>
    83f42084:	4681                	li	a3,0
    83f42086:	00100837          	lui	a6,0x100
    83f4208a:	0017979b          	slliw	a5,a5,0x1
    83f4208e:	0107f733          	and	a4,a5,a6
    83f42092:	2701                	sext.w	a4,a4
    83f42094:	8536                	mv	a0,a3
    83f42096:	2685                	addiw	a3,a3,1
    83f42098:	db6d                	beqz	a4,83f4208a <__ieee754_sqrt+0x156>
    83f4209a:	02000893          	li	a7,32
    83f4209e:	8832                	mv	a6,a2
    83f420a0:	40d888bb          	subw	a7,a7,a3
    83f420a4:	0007871b          	sext.w	a4,a5
    83f420a8:	00d6163b          	sllw	a2,a2,a3
    83f420ac:	011857bb          	srlw	a5,a6,a7
    83f420b0:	8fd9                	or	a5,a5,a4
    83f420b2:	9d89                	subw	a1,a1,a0
    83f420b4:	2781                	sext.w	a5,a5
    83f420b6:	b555                	j	83f41f5a <__ieee754_sqrt+0x26>
    83f420b8:	8336                	mv	t1,a3
    83f420ba:	f405c5e3          	bltz	a1,83f42004 <__ieee754_sqrt+0xd0>
    83f420be:	0016831b          	addiw	t1,a3,1
    83f420c2:	b789                	j	83f42004 <__ieee754_sqrt+0xd0>
    83f420c4:	f1176ae3          	bltu	a4,a7,83f41fd8 <__ieee754_sqrt+0xa4>
    83f420c8:	00c885bb          	addw	a1,a7,a2
    83f420cc:	fe08c6e3          	bltz	a7,83f420b8 <__ieee754_sqrt+0x184>
    83f420d0:	833e                	mv	t1,a5
    83f420d2:	4781                	li	a5,0
    83f420d4:	bf25                	j	83f4200c <__ieee754_sqrt+0xd8>
    83f420d6:	57fd                	li	a5,-1
    83f420d8:	02fe0563          	beq	t3,a5,83f42102 <__ieee754_sqrt+0x1ce>
    83f420dc:	001e051b          	addiw	a0,t3,1
    83f420e0:	0015551b          	srliw	a0,a0,0x1
    83f420e4:	bf89                	j	83f42036 <__ieee754_sqrt+0x102>
    83f420e6:	52a577c3          	fmadd.d	fa5,fa0,fa0,fa0
    83f420ea:	e2078553          	fmv.x.d	a0,fa5
    83f420ee:	f2050553          	fmv.d.x	fa0,a0
    83f420f2:	8082                	ret
    83f420f4:	0aa577d3          	fsub.d	fa5,fa0,fa0
    83f420f8:	1af7f7d3          	fdiv.d	fa5,fa5,fa5
    83f420fc:	e2078553          	fmv.x.d	a0,fa5
    83f42100:	bfb1                	j	83f4205c <__ieee754_sqrt+0x128>
    83f42102:	2e85                	addiw	t4,t4,1
    83f42104:	bf0d                	j	83f42036 <__ieee754_sqrt+0x102>
    83f42106:	8832                	mv	a6,a2
    83f42108:	02000893          	li	a7,32
    83f4210c:	557d                	li	a0,-1
    83f4210e:	bf79                	j	83f420ac <__ieee754_sqrt+0x178>

0000000083f42110 <__kernel_cos>:
    83f42110:	e20507d3          	fmv.x.d	a5,fa0
    83f42114:	3e4006b7          	lui	a3,0x3e400
    83f42118:	00179713          	slli	a4,a5,0x1
    83f4211c:	9305                	srli	a4,a4,0x21
    83f4211e:	08d75063          	bge	a4,a3,83f4219e <__kernel_cos+0x8e>
    83f42122:	c2051753          	fcvt.w.d	a4,fa0,rtz
    83f42126:	2701                	sext.w	a4,a4
    83f42128:	12070363          	beqz	a4,83f4224e <__kernel_cos+0x13e>
    83f4212c:	12a576d3          	fmul.d	fa3,fa0,fa0
    83f42130:	00010717          	auipc	a4,0x10
    83f42134:	5b073707          	fld	fa4,1456(a4) # 83f526e0 <xISRStackTop+0x250>
    83f42138:	00010717          	auipc	a4,0x10
    83f4213c:	5b073087          	fld	ft1,1456(a4) # 83f526e8 <xISRStackTop+0x258>
    83f42140:	00010717          	auipc	a4,0x10
    83f42144:	5b073007          	fld	ft0,1456(a4) # 83f526f0 <xISRStackTop+0x260>
    83f42148:	00010717          	auipc	a4,0x10
    83f4214c:	5b073787          	fld	fa5,1456(a4) # 83f526f8 <xISRStackTop+0x268>
    83f42150:	00010717          	auipc	a4,0x10
    83f42154:	5b073507          	fld	fa0,1456(a4) # 83f52700 <xISRStackTop+0x270>
    83f42158:	00010717          	auipc	a4,0x10
    83f4215c:	5b073607          	fld	fa2,1456(a4) # 83f52708 <xISRStackTop+0x278>
    83f42160:	0ae6f743          	fmadd.d	fa4,fa3,fa4,ft1
    83f42164:	02e6f743          	fmadd.d	fa4,fa3,fa4,ft0
    83f42168:	7ae6f7c3          	fmadd.d	fa5,fa3,fa4,fa5
    83f4216c:	52f6f7c3          	fmadd.d	fa5,fa3,fa5,fa0
    83f42170:	62f6f7c3          	fmadd.d	fa5,fa3,fa5,fa2
    83f42174:	12f6f7d3          	fmul.d	fa5,fa3,fa5
    83f42178:	f2078753          	fmv.d.x	fa4,a5
    83f4217c:	00010797          	auipc	a5,0x10
    83f42180:	1947b507          	fld	fa0,404(a5) # 83f52310 <__func__.1+0x118>
    83f42184:	12b775d3          	fmul.d	fa1,fa4,fa1
    83f42188:	00010797          	auipc	a5,0x10
    83f4218c:	1107b707          	fld	fa4,272(a5) # 83f52298 <__func__.1+0xa0>
    83f42190:	5af6f7c7          	fmsub.d	fa5,fa3,fa5,fa1
    83f42194:	7ae6f7c7          	fmsub.d	fa5,fa3,fa4,fa5
    83f42198:	0af57553          	fsub.d	fa0,fa0,fa5
    83f4219c:	8082                	ret
    83f4219e:	12a576d3          	fmul.d	fa3,fa0,fa0
    83f421a2:	00010697          	auipc	a3,0x10
    83f421a6:	53e6b707          	fld	fa4,1342(a3) # 83f526e0 <xISRStackTop+0x250>
    83f421aa:	00010697          	auipc	a3,0x10
    83f421ae:	53e6b787          	fld	fa5,1342(a3) # 83f526e8 <xISRStackTop+0x258>
    83f421b2:	00010697          	auipc	a3,0x10
    83f421b6:	53e6b087          	fld	ft1,1342(a3) # 83f526f0 <xISRStackTop+0x260>
    83f421ba:	00010697          	auipc	a3,0x10
    83f421be:	53e6b007          	fld	ft0,1342(a3) # 83f526f8 <xISRStackTop+0x268>
    83f421c2:	00010697          	auipc	a3,0x10
    83f421c6:	53e6b507          	fld	fa0,1342(a3) # 83f52700 <xISRStackTop+0x270>
    83f421ca:	00010697          	auipc	a3,0x10
    83f421ce:	53e6b607          	fld	fa2,1342(a3) # 83f52708 <xISRStackTop+0x278>
    83f421d2:	7ae6f7c3          	fmadd.d	fa5,fa3,fa4,fa5
    83f421d6:	3fd336b7          	lui	a3,0x3fd33
    83f421da:	33268693          	addi	a3,a3,818 # 3fd33332 <CVIMMAP_DRAM_SIZE+0x3bd33332>
    83f421de:	0ad7f7c3          	fmadd.d	fa5,fa5,fa3,ft1
    83f421e2:	02d7f7c3          	fmadd.d	fa5,fa5,fa3,ft0
    83f421e6:	52d7f7c3          	fmadd.d	fa5,fa5,fa3,fa0
    83f421ea:	62d7f7c3          	fmadd.d	fa5,fa5,fa3,fa2
    83f421ee:	12d7f7d3          	fmul.d	fa5,fa5,fa3
    83f421f2:	f8e6d3e3          	bge	a3,a4,83f42178 <__kernel_cos+0x68>
    83f421f6:	3fe906b7          	lui	a3,0x3fe90
    83f421fa:	04e6c163          	blt	a3,a4,83f4223c <__kernel_cos+0x12c>
    83f421fe:	ffe006b7          	lui	a3,0xffe00
    83f42202:	9f35                	addw	a4,a4,a3
    83f42204:	1702                	slli	a4,a4,0x20
    83f42206:	f2070753          	fmv.d.x	fa4,a4
    83f4220a:	00010697          	auipc	a3,0x10
    83f4220e:	1066b507          	fld	fa0,262(a3) # 83f52310 <__func__.1+0x118>
    83f42212:	f2070653          	fmv.d.x	fa2,a4
    83f42216:	0ae57553          	fsub.d	fa0,fa0,fa4
    83f4221a:	f2078753          	fmv.d.x	fa4,a5
    83f4221e:	12b775d3          	fmul.d	fa1,fa4,fa1
    83f42222:	00010797          	auipc	a5,0x10
    83f42226:	0767b707          	fld	fa4,118(a5) # 83f52298 <__func__.1+0xa0>
    83f4222a:	62e6f747          	fmsub.d	fa4,fa3,fa4,fa2
    83f4222e:	5af6f6c7          	fmsub.d	fa3,fa3,fa5,fa1
    83f42232:	0ad77753          	fsub.d	fa4,fa4,fa3
    83f42236:	0ae57553          	fsub.d	fa0,fa0,fa4
    83f4223a:	8082                	ret
    83f4223c:	00010717          	auipc	a4,0x10
    83f42240:	49473507          	fld	fa0,1172(a4) # 83f526d0 <xISRStackTop+0x240>
    83f42244:	00010717          	auipc	a4,0x10
    83f42248:	49473607          	fld	fa2,1172(a4) # 83f526d8 <xISRStackTop+0x248>
    83f4224c:	b7f9                	j	83f4221a <__kernel_cos+0x10a>
    83f4224e:	00010797          	auipc	a5,0x10
    83f42252:	0c27b507          	fld	fa0,194(a5) # 83f52310 <__func__.1+0x118>
    83f42256:	8082                	ret

0000000083f42258 <__kernel_rem_pio2>:
    83f42258:	d0010113          	addi	sp,sp,-768
    83f4225c:	2d313c23          	sd	s3,728(sp)
    83f42260:	e43a                	sd	a4,8(sp)
    83f42262:	89b6                	mv	s3,a3
    83f42264:	00271693          	slli	a3,a4,0x2
    83f42268:	0000f717          	auipc	a4,0xf
    83f4226c:	99870713          	addi	a4,a4,-1640 # 83f50c00 <init_jk>
    83f42270:	9736                	add	a4,a4,a3
    83f42272:	2d413823          	sd	s4,720(sp)
    83f42276:	2b713c23          	sd	s7,696(sp)
    83f4227a:	2b913423          	sd	s9,680(sp)
    83f4227e:	2ba13023          	sd	s10,672(sp)
    83f42282:	29b13c23          	sd	s11,664(sp)
    83f42286:	fff9889b          	addiw	a7,s3,-1
    83f4228a:	2e113c23          	sd	ra,760(sp)
    83f4228e:	2e813823          	sd	s0,752(sp)
    83f42292:	2e913423          	sd	s1,744(sp)
    83f42296:	2f213023          	sd	s2,736(sp)
    83f4229a:	2d513423          	sd	s5,712(sp)
    83f4229e:	2d613023          	sd	s6,704(sp)
    83f422a2:	2b813823          	sd	s8,688(sp)
    83f422a6:	28813427          	fsd	fs0,648(sp)
    83f422aa:	28913027          	fsd	fs1,640(sp)
    83f422ae:	27213c27          	fsd	fs2,632(sp)
    83f422b2:	27313827          	fsd	fs3,624(sp)
    83f422b6:	27413427          	fsd	fs4,616(sp)
    83f422ba:	27513027          	fsd	fs5,608(sp)
    83f422be:	25613c27          	fsd	fs6,600(sp)
    83f422c2:	56b1                	li	a3,-20
    83f422c4:	e02e                	sd	a1,0(sp)
    83f422c6:	00072c83          	lw	s9,0(a4)
    83f422ca:	8bb2                	mv	s7,a2
    83f422cc:	8daa                	mv	s11,a0
    83f422ce:	8a3e                	mv	s4,a5
    83f422d0:	00088d1b          	sext.w	s10,a7
    83f422d4:	60d64463          	blt	a2,a3,83f428dc <__kernel_rem_pio2+0x684>
    83f422d8:	47e1                	li	a5,24
    83f422da:	ffd6049b          	addiw	s1,a2,-3
    83f422de:	02f4c4bb          	divw	s1,s1,a5
    83f422e2:	0014879b          	addiw	a5,s1,1
    83f422e6:	0027971b          	slliw	a4,a5,0x2
    83f422ea:	9f99                	subw	a5,a5,a4
    83f422ec:	0037979b          	slliw	a5,a5,0x3
    83f422f0:	00fb8b3b          	addw	s6,s7,a5
    83f422f4:	019886bb          	addw	a3,a7,s9
    83f422f8:	411485bb          	subw	a1,s1,a7
    83f422fc:	c85a                	sw	s6,16(sp)
    83f422fe:	8736                	mv	a4,a3
    83f42300:	0005879b          	sext.w	a5,a1
    83f42304:	0206c663          	bltz	a3,83f42330 <__kernel_rem_pio2+0xd8>
    83f42308:	0017061b          	addiw	a2,a4,1
    83f4230c:	00279693          	slli	a3,a5,0x2
    83f42310:	1898                	addi	a4,sp,112
    83f42312:	96d2                	add	a3,a3,s4
    83f42314:	9e2d                	addw	a2,a2,a1
    83f42316:	f20007d3          	fmv.d.x	fa5,zero
    83f4231a:	0007c563          	bltz	a5,83f42324 <__kernel_rem_pio2+0xcc>
    83f4231e:	428c                	lw	a1,0(a3)
    83f42320:	d20587d3          	fcvt.d.w	fa5,a1
    83f42324:	2785                	addiw	a5,a5,1
    83f42326:	a31c                	fsd	fa5,0(a4)
    83f42328:	0721                	addi	a4,a4,8
    83f4232a:	0691                	addi	a3,a3,4
    83f4232c:	fec795e3          	bne	a5,a2,83f42316 <__kernel_rem_pio2+0xbe>
    83f42330:	040cc563          	bltz	s9,83f4237a <__kernel_rem_pio2+0x122>
    83f42334:	fff9869b          	addiw	a3,s3,-1
    83f42338:	02069793          	slli	a5,a3,0x20
    83f4233c:	01d7d693          	srli	a3,a5,0x1d
    83f42340:	008d8793          	addi	a5,s11,8
    83f42344:	1b0c                	addi	a1,sp,432
    83f42346:	866a                	mv	a2,s10
    83f42348:	013c853b          	addw	a0,s9,s3
    83f4234c:	96be                	add	a3,a3,a5
    83f4234e:	f20007d3          	fmv.d.x	fa5,zero
    83f42352:	000d4f63          	bltz	s10,83f42370 <__kernel_rem_pio2+0x118>
    83f42356:	189c                	addi	a5,sp,112
    83f42358:	00361713          	slli	a4,a2,0x3
    83f4235c:	973e                	add	a4,a4,a5
    83f4235e:	87ee                	mv	a5,s11
    83f42360:	2394                	fld	fa3,0(a5)
    83f42362:	2318                	fld	fa4,0(a4)
    83f42364:	07a1                	addi	a5,a5,8
    83f42366:	1761                	addi	a4,a4,-8
    83f42368:	7ae6f7c3          	fmadd.d	fa5,fa3,fa4,fa5
    83f4236c:	fed79ae3          	bne	a5,a3,83f42360 <__kernel_rem_pio2+0x108>
    83f42370:	a19c                	fsd	fa5,0(a1)
    83f42372:	2605                	addiw	a2,a2,1
    83f42374:	05a1                	addi	a1,a1,8
    83f42376:	fca61ce3          	bne	a2,a0,83f4234e <__kernel_rem_pio2+0xf6>
    83f4237a:	02089793          	slli	a5,a7,0x20
    83f4237e:	002c9913          	slli	s2,s9,0x2
    83f42382:	01d7d893          	srli	a7,a5,0x1d
    83f42386:	1961                	addi	s2,s2,-8
    83f42388:	101c                	addi	a5,sp,32
    83f4238a:	993e                	add	s2,s2,a5
    83f4238c:	fffc841b          	addiw	s0,s9,-1
    83f42390:	00010797          	auipc	a5,0x10
    83f42394:	3907b487          	fld	fs1,912(a5) # 83f52720 <xISRStackTop+0x290>
    83f42398:	00010797          	auipc	a5,0x10
    83f4239c:	3907b407          	fld	fs0,912(a5) # 83f52728 <xISRStackTop+0x298>
    83f423a0:	00010797          	auipc	a5,0x10
    83f423a4:	f707b907          	fld	fs2,-144(a5) # 83f52310 <__func__.1+0x118>
    83f423a8:	00010797          	auipc	a5,0x10
    83f423ac:	3707ba87          	fld	fs5,880(a5) # 83f52718 <xISRStackTop+0x288>
    83f423b0:	00010797          	auipc	a5,0x10
    83f423b4:	3187ba07          	fld	fs4,792(a5) # 83f526c8 <xISRStackTop+0x238>
    83f423b8:	00010797          	auipc	a5,0x10
    83f423bc:	ee07b987          	fld	fs3,-288(a5) # 83f52298 <__func__.1+0xa0>
    83f423c0:	040a                	slli	s0,s0,0x2
    83f423c2:	0c9c                	addi	a5,sp,592
    83f423c4:	011d8c33          	add	s8,s11,a7
    83f423c8:	8ae6                	mv	s5,s9
    83f423ca:	943e                	add	s0,s0,a5
    83f423cc:	003a9793          	slli	a5,s5,0x3
    83f423d0:	0c98                	addi	a4,sp,592
    83f423d2:	973e                	add	a4,a4,a5
    83f423d4:	f6073507          	fld	fa0,-160(a4)
    83f423d8:	05505263          	blez	s5,83f4241c <__kernel_rem_pio2+0x1c4>
    83f423dc:	fffa859b          	addiw	a1,s5,-1
    83f423e0:	ff878713          	addi	a4,a5,-8
    83f423e4:	1b14                	addi	a3,sp,432
    83f423e6:	02059793          	slli	a5,a1,0x20
    83f423ea:	01e7d593          	srli	a1,a5,0x1e
    83f423ee:	9736                	add	a4,a4,a3
    83f423f0:	1054                	addi	a3,sp,36
    83f423f2:	101c                	addi	a5,sp,32
    83f423f4:	95b6                	add	a1,a1,a3
    83f423f6:	135577d3          	fmul.d	fa5,fa0,fs5
    83f423fa:	2314                	fld	fa3,0(a4)
    83f423fc:	0791                	addi	a5,a5,4
    83f423fe:	1761                	addi	a4,a4,-8
    83f42400:	c2079653          	fcvt.w.d	a2,fa5,rtz
    83f42404:	d20607d3          	fcvt.d.w	fa5,a2
    83f42408:	5347f74b          	fnmsub.d	fa4,fa5,fs4,fa0
    83f4240c:	02d7f553          	fadd.d	fa0,fa5,fa3
    83f42410:	c2071653          	fcvt.w.d	a2,fa4,rtz
    83f42414:	fec7ae23          	sw	a2,-4(a5)
    83f42418:	fcb79fe3          	bne	a5,a1,83f423f6 <__kernel_rem_pio2+0x19e>
    83f4241c:	855a                	mv	a0,s6
    83f4241e:	7be000ef          	jal	ra,83f42bdc <scalbn>
    83f42422:	22a50b53          	fmv.d	fs6,fa0
    83f42426:	12957553          	fmul.d	fa0,fa0,fs1
    83f4242a:	d38fe0ef          	jal	ra,83f40962 <floor>
    83f4242e:	b285754b          	fnmsub.d	fa0,fa0,fs0,fs6
    83f42432:	c2051653          	fcvt.w.d	a2,fa0,rtz
    83f42436:	d2060b53          	fcvt.d.w	fs6,a2
    83f4243a:	00060b9b          	sext.w	s7,a2
    83f4243e:	0b657b53          	fsub.d	fs6,fa0,fs6
    83f42442:	0f605f63          	blez	s6,83f42540 <__kernel_rem_pio2+0x2e8>
    83f42446:	fffa879b          	addiw	a5,s5,-1
    83f4244a:	0c98                	addi	a4,sp,592
    83f4244c:	078a                	slli	a5,a5,0x2
    83f4244e:	97ba                	add	a5,a5,a4
    83f42450:	dd07a883          	lw	a7,-560(a5)
    83f42454:	4761                	li	a4,24
    83f42456:	4167073b          	subw	a4,a4,s6
    83f4245a:	40e8de3b          	sraw	t3,a7,a4
    83f4245e:	00ee173b          	sllw	a4,t3,a4
    83f42462:	40e8873b          	subw	a4,a7,a4
    83f42466:	48dd                	li	a7,23
    83f42468:	416888bb          	subw	a7,a7,s6
    83f4246c:	dce7a823          	sw	a4,-560(a5)
    83f42470:	411758bb          	sraw	a7,a4,a7
    83f42474:	01c60bbb          	addw	s7,a2,t3
    83f42478:	0f104163          	bgtz	a7,83f4255a <__kernel_rem_pio2+0x302>
    83f4247c:	f2000753          	fmv.d.x	fa4,zero
    83f42480:	a2eb27d3          	feq.d	a5,fs6,fa4
    83f42484:	1a078263          	beqz	a5,83f42628 <__kernel_rem_pio2+0x3d0>
    83f42488:	fffa831b          	addiw	t1,s5,-1
    83f4248c:	03934b63          	blt	t1,s9,83f424c2 <__kernel_rem_pio2+0x26a>
    83f42490:	fffcc713          	not	a4,s9
    83f42494:	002a9593          	slli	a1,s5,0x2
    83f42498:	0157073b          	addw	a4,a4,s5
    83f4249c:	0834                	addi	a3,sp,24
    83f4249e:	ffc58793          	addi	a5,a1,-4 # 3feffffc <CVIMMAP_DRAM_SIZE+0x3beffffc>
    83f424a2:	95b6                	add	a1,a1,a3
    83f424a4:	02071693          	slli	a3,a4,0x20
    83f424a8:	01e6d713          	srli	a4,a3,0x1e
    83f424ac:	1014                	addi	a3,sp,32
    83f424ae:	8d99                	sub	a1,a1,a4
    83f424b0:	97b6                	add	a5,a5,a3
    83f424b2:	4701                	li	a4,0
    83f424b4:	4390                	lw	a2,0(a5)
    83f424b6:	17f1                	addi	a5,a5,-4
    83f424b8:	8f51                	or	a4,a4,a2
    83f424ba:	feb79de3          	bne	a5,a1,83f424b4 <__kernel_rem_pio2+0x25c>
    83f424be:	30071f63          	bnez	a4,83f427dc <__kernel_rem_pio2+0x584>
    83f424c2:	dd042783          	lw	a5,-560(s0)
    83f424c6:	30079763          	bnez	a5,83f427d4 <__kernel_rem_pio2+0x57c>
    83f424ca:	87ca                	mv	a5,s2
    83f424cc:	4705                	li	a4,1
    83f424ce:	4390                	lw	a2,0(a5)
    83f424d0:	2705                	addiw	a4,a4,1
    83f424d2:	17f1                	addi	a5,a5,-4
    83f424d4:	de6d                	beqz	a2,83f424ce <__kernel_rem_pio2+0x276>
    83f424d6:	001a851b          	addiw	a0,s5,1
    83f424da:	00ea88bb          	addw	a7,s5,a4
    83f424de:	00ad07bb          	addw	a5,s10,a0
    83f424e2:	013a8333          	add	t1,s5,s3
    83f424e6:	40f30333          	sub	t1,t1,a5
    83f424ea:	00a48633          	add	a2,s1,a0
    83f424ee:	078e                	slli	a5,a5,0x3
    83f424f0:	1898                	addi	a4,sp,112
    83f424f2:	060a                	slli	a2,a2,0x2
    83f424f4:	00351593          	slli	a1,a0,0x3
    83f424f8:	030e                	slli	t1,t1,0x3
    83f424fa:	00f706b3          	add	a3,a4,a5
    83f424fe:	1b1c                	addi	a5,sp,432
    83f42500:	9652                	add	a2,a2,s4
    83f42502:	95be                	add	a1,a1,a5
    83f42504:	1361                	addi	t1,t1,-8
    83f42506:	421c                	lw	a5,0(a2)
    83f42508:	f20007d3          	fmv.d.x	fa5,zero
    83f4250c:	d2078753          	fcvt.d.w	fa4,a5
    83f42510:	a298                	fsd	fa4,0(a3)
    83f42512:	000d4e63          	bltz	s10,83f4252e <__kernel_rem_pio2+0x2d6>
    83f42516:	00d30733          	add	a4,t1,a3
    83f4251a:	87ee                	mv	a5,s11
    83f4251c:	a021                	j	83f42524 <__kernel_rem_pio2+0x2cc>
    83f4251e:	2318                	fld	fa4,0(a4)
    83f42520:	07a1                	addi	a5,a5,8
    83f42522:	1761                	addi	a4,a4,-8
    83f42524:	2394                	fld	fa3,0(a5)
    83f42526:	7ae6f7c3          	fmadd.d	fa5,fa3,fa4,fa5
    83f4252a:	ff879ae3          	bne	a5,s8,83f4251e <__kernel_rem_pio2+0x2c6>
    83f4252e:	a19c                	fsd	fa5,0(a1)
    83f42530:	2505                	addiw	a0,a0,1
    83f42532:	0611                	addi	a2,a2,4
    83f42534:	06a1                	addi	a3,a3,8
    83f42536:	05a1                	addi	a1,a1,8
    83f42538:	fca8d7e3          	bge	a7,a0,83f42506 <__kernel_rem_pio2+0x2ae>
    83f4253c:	8ac6                	mv	s5,a7
    83f4253e:	b579                	j	83f423cc <__kernel_rem_pio2+0x174>
    83f42540:	260b1d63          	bnez	s6,83f427ba <__kernel_rem_pio2+0x562>
    83f42544:	fffa879b          	addiw	a5,s5,-1
    83f42548:	078a                	slli	a5,a5,0x2
    83f4254a:	0c98                	addi	a4,sp,592
    83f4254c:	97ba                	add	a5,a5,a4
    83f4254e:	dd07a883          	lw	a7,-560(a5)
    83f42552:	4178d89b          	sraiw	a7,a7,0x17
    83f42556:	f31053e3          	blez	a7,83f4247c <__kernel_rem_pio2+0x224>
    83f4255a:	2b85                	addiw	s7,s7,1
    83f4255c:	39505e63          	blez	s5,83f428f8 <__kernel_rem_pio2+0x6a0>
    83f42560:	5782                	lw	a5,32(sp)
    83f42562:	24079963          	bnez	a5,83f427b4 <__kernel_rem_pio2+0x55c>
    83f42566:	4705                	li	a4,1
    83f42568:	06ea8763          	beq	s5,a4,83f425d6 <__kernel_rem_pio2+0x37e>
    83f4256c:	5792                	lw	a5,36(sp)
    83f4256e:	1050                	addi	a2,sp,36
    83f42570:	0017051b          	addiw	a0,a4,1
    83f42574:	0611                	addi	a2,a2,4
    83f42576:	eb89                	bnez	a5,83f42588 <__kernel_rem_pio2+0x330>
    83f42578:	04aa8f63          	beq	s5,a0,83f425d6 <__kernel_rem_pio2+0x37e>
    83f4257c:	421c                	lw	a5,0(a2)
    83f4257e:	872a                	mv	a4,a0
    83f42580:	0017051b          	addiw	a0,a4,1
    83f42584:	0611                	addi	a2,a2,4
    83f42586:	dbed                	beqz	a5,83f42578 <__kernel_rem_pio2+0x320>
    83f42588:	00271613          	slli	a2,a4,0x2
    83f4258c:	0c94                	addi	a3,sp,592
    83f4258e:	01000737          	lui	a4,0x1000
    83f42592:	9636                	add	a2,a2,a3
    83f42594:	40f707bb          	subw	a5,a4,a5
    83f42598:	dcf62823          	sw	a5,-560(a2) # ffffffff7ffffdd0 <_end+0xfffffffefc000090>
    83f4259c:	03555c63          	bge	a0,s5,83f425d4 <__kernel_rem_pio2+0x37c>
    83f425a0:	fffa879b          	addiw	a5,s5,-1
    83f425a4:	9f89                	subw	a5,a5,a0
    83f425a6:	1782                	slli	a5,a5,0x20
    83f425a8:	00251613          	slli	a2,a0,0x2
    83f425ac:	9381                	srli	a5,a5,0x20
    83f425ae:	00c685b3          	add	a1,a3,a2
    83f425b2:	97aa                	add	a5,a5,a0
    83f425b4:	1014                	addi	a3,sp,32
    83f425b6:	078a                	slli	a5,a5,0x2
    83f425b8:	9636                	add	a2,a2,a3
    83f425ba:	1054                	addi	a3,sp,36
    83f425bc:	dd05a583          	lw	a1,-560(a1)
    83f425c0:	97b6                	add	a5,a5,a3
    83f425c2:	377d                	addiw	a4,a4,-1
    83f425c4:	a011                	j	83f425c8 <__kernel_rem_pio2+0x370>
    83f425c6:	420c                	lw	a1,0(a2)
    83f425c8:	40b705bb          	subw	a1,a4,a1
    83f425cc:	c20c                	sw	a1,0(a2)
    83f425ce:	0611                	addi	a2,a2,4
    83f425d0:	fef61be3          	bne	a2,a5,83f425c6 <__kernel_rem_pio2+0x36e>
    83f425d4:	4785                	li	a5,1
    83f425d6:	03605363          	blez	s6,83f425fc <__kernel_rem_pio2+0x3a4>
    83f425da:	4705                	li	a4,1
    83f425dc:	2eeb0463          	beq	s6,a4,83f428c4 <__kernel_rem_pio2+0x66c>
    83f425e0:	4709                	li	a4,2
    83f425e2:	00eb1d63          	bne	s6,a4,83f425fc <__kernel_rem_pio2+0x3a4>
    83f425e6:	fffa871b          	addiw	a4,s5,-1
    83f425ea:	070a                	slli	a4,a4,0x2
    83f425ec:	0c94                	addi	a3,sp,592
    83f425ee:	9736                	add	a4,a4,a3
    83f425f0:	dd072603          	lw	a2,-560(a4) # fffdd0 <CVIMMAP_FSBL_UNZIP_SIZE+0xffdd0>
    83f425f4:	162a                	slli	a2,a2,0x2a
    83f425f6:	9229                	srli	a2,a2,0x2a
    83f425f8:	dcc72823          	sw	a2,-560(a4)
    83f425fc:	4709                	li	a4,2
    83f425fe:	e6e89fe3          	bne	a7,a4,83f4247c <__kernel_rem_pio2+0x224>
    83f42602:	0b697b53          	fsub.d	fs6,fs2,fs6
    83f42606:	e6078be3          	beqz	a5,83f4247c <__kernel_rem_pio2+0x224>
    83f4260a:	23290553          	fmv.d	fa0,fs2
    83f4260e:	855a                	mv	a0,s6
    83f42610:	ec46                	sd	a7,24(sp)
    83f42612:	5ca000ef          	jal	ra,83f42bdc <scalbn>
    83f42616:	0aab7b53          	fsub.d	fs6,fs6,fa0
    83f4261a:	f2000753          	fmv.d.x	fa4,zero
    83f4261e:	68e2                	ld	a7,24(sp)
    83f42620:	a2eb27d3          	feq.d	a5,fs6,fa4
    83f42624:	e60792e3          	bnez	a5,83f42488 <__kernel_rem_pio2+0x230>
    83f42628:	4442                	lw	s0,16(sp)
    83f4262a:	236b0553          	fmv.d	fa0,fs6
    83f4262e:	ec46                	sd	a7,24(sp)
    83f42630:	4080053b          	negw	a0,s0
    83f42634:	5a8000ef          	jal	ra,83f42bdc <scalbn>
    83f42638:	00010797          	auipc	a5,0x10
    83f4263c:	0907b607          	fld	fa2,144(a5) # 83f526c8 <xISRStackTop+0x238>
    83f42640:	a2a607d3          	fle.d	a5,fa2,fa0
    83f42644:	68e2                	ld	a7,24(sp)
    83f42646:	30078063          	beqz	a5,83f42946 <__kernel_rem_pio2+0x6ee>
    83f4264a:	00010797          	auipc	a5,0x10
    83f4264e:	0ce7b687          	fld	fa3,206(a5) # 83f52718 <xISRStackTop+0x288>
    83f42652:	12d576d3          	fmul.d	fa3,fa0,fa3
    83f42656:	0c9c                	addi	a5,sp,592
    83f42658:	002a9713          	slli	a4,s5,0x2
    83f4265c:	001a831b          	addiw	t1,s5,1
    83f42660:	973e                	add	a4,a4,a5
    83f42662:	0c94                	addi	a3,sp,592
    83f42664:	00231793          	slli	a5,t1,0x2
    83f42668:	97b6                	add	a5,a5,a3
    83f4266a:	c20696d3          	fcvt.w.d	a3,fa3,rtz
    83f4266e:	01840b1b          	addiw	s6,s0,24
    83f42672:	d2068753          	fcvt.d.w	fa4,a3
    83f42676:	52c777cb          	fnmsub.d	fa5,fa4,fa2,fa0
    83f4267a:	c2079653          	fcvt.w.d	a2,fa5,rtz
    83f4267e:	dcc72823          	sw	a2,-560(a4)
    83f42682:	dcd7a823          	sw	a3,-560(a5)
    83f42686:	23290553          	fmv.d	fa0,fs2
    83f4268a:	855a                	mv	a0,s6
    83f4268c:	ec1a                	sd	t1,24(sp)
    83f4268e:	e846                	sd	a7,16(sp)
    83f42690:	54c000ef          	jal	ra,83f42bdc <scalbn>
    83f42694:	6362                	ld	t1,24(sp)
    83f42696:	68c2                	ld	a7,16(sp)
    83f42698:	2e034863          	bltz	t1,83f42988 <__kernel_rem_pio2+0x730>
    83f4269c:	1b18                	addi	a4,sp,432
    83f4269e:	00331f13          	slli	t5,t1,0x3
    83f426a2:	01e705b3          	add	a1,a4,t5
    83f426a6:	00231793          	slli	a5,t1,0x2
    83f426aa:	1018                	addi	a4,sp,32
    83f426ac:	97ba                	add	a5,a5,a4
    83f426ae:	0870                	addi	a2,sp,28
    83f426b0:	872e                	mv	a4,a1
    83f426b2:	00010697          	auipc	a3,0x10
    83f426b6:	0666b687          	fld	fa3,102(a3) # 83f52718 <xISRStackTop+0x288>
    83f426ba:	4394                	lw	a3,0(a5)
    83f426bc:	1761                	addi	a4,a4,-8
    83f426be:	17f1                	addi	a5,a5,-4
    83f426c0:	d20687d3          	fcvt.d.w	fa5,a3
    83f426c4:	12a7f7d3          	fmul.d	fa5,fa5,fa0
    83f426c8:	12d57553          	fmul.d	fa0,fa0,fa3
    83f426cc:	a71c                	fsd	fa5,8(a4)
    83f426ce:	fec796e3          	bne	a5,a2,83f426ba <__kernel_rem_pio2+0x462>
    83f426d2:	11010813          	addi	a6,sp,272
    83f426d6:	851a                	mv	a0,t1
    83f426d8:	4e81                	li	t4,0
    83f426da:	00010797          	auipc	a5,0x10
    83f426de:	0367b607          	fld	fa2,54(a5) # 83f52710 <xISRStackTop+0x280>
    83f426e2:	5ffd                	li	t6,-1
    83f426e4:	1e0ccf63          	bltz	s9,83f428e2 <__kernel_rem_pio2+0x68a>
    83f426e8:	22c60753          	fmv.d	fa4,fa2
    83f426ec:	f20007d3          	fmv.d.x	fa5,zero
    83f426f0:	0000e697          	auipc	a3,0xe
    83f426f4:	52068693          	addi	a3,a3,1312 # 83f50c10 <PIo2>
    83f426f8:	872e                	mv	a4,a1
    83f426fa:	4781                	li	a5,0
    83f426fc:	000e861b          	sext.w	a2,t4
    83f42700:	a029                	j	83f4270a <__kernel_rem_pio2+0x4b2>
    83f42702:	0721                	addi	a4,a4,8
    83f42704:	00f64a63          	blt	a2,a5,83f42718 <__kernel_rem_pio2+0x4c0>
    83f42708:	2298                	fld	fa4,0(a3)
    83f4270a:	2314                	fld	fa3,0(a4)
    83f4270c:	2785                	addiw	a5,a5,1
    83f4270e:	06a1                	addi	a3,a3,8
    83f42710:	7ae6f7c3          	fmadd.d	fa5,fa3,fa4,fa5
    83f42714:	fefcd7e3          	bge	s9,a5,83f42702 <__kernel_rem_pio2+0x4aa>
    83f42718:	00f83027          	fsd	fa5,0(a6) # 100000 <CVIMMAP_FREERTOS_SIZE+0x40000>
    83f4271c:	357d                	addiw	a0,a0,-1
    83f4271e:	0e85                	addi	t4,t4,1
    83f42720:	0821                	addi	a6,a6,8
    83f42722:	15e1                	addi	a1,a1,-8
    83f42724:	fdf510e3          	bne	a0,t6,83f426e4 <__kernel_rem_pio2+0x48c>
    83f42728:	6722                	ld	a4,8(sp)
    83f4272a:	4789                	li	a5,2
    83f4272c:	0ce7cc63          	blt	a5,a4,83f42804 <__kernel_rem_pio2+0x5ac>
    83f42730:	1ce04663          	bgtz	a4,83f428fc <__kernel_rem_pio2+0x6a4>
    83f42734:	e31d                	bnez	a4,83f4275a <__kernel_rem_pio2+0x502>
    83f42736:	f20007d3          	fmv.d.x	fa5,zero
    83f4273a:	0a1c                	addi	a5,sp,272
    83f4273c:	9f3e                	add	t5,t5,a5
    83f4273e:	17e1                	addi	a5,a5,-8
    83f42740:	000f3707          	fld	fa4,0(t5)
    83f42744:	1f61                	addi	t5,t5,-8
    83f42746:	02e7f7d3          	fadd.d	fa5,fa5,fa4
    83f4274a:	ffe79be3          	bne	a5,t5,83f42740 <__kernel_rem_pio2+0x4e8>
    83f4274e:	00088463          	beqz	a7,83f42756 <__kernel_rem_pio2+0x4fe>
    83f42752:	22f797d3          	fneg.d	fa5,fa5
    83f42756:	6782                	ld	a5,0(sp)
    83f42758:	a39c                	fsd	fa5,0(a5)
    83f4275a:	2f813083          	ld	ra,760(sp)
    83f4275e:	2f013403          	ld	s0,752(sp)
    83f42762:	2e813483          	ld	s1,744(sp)
    83f42766:	2e013903          	ld	s2,736(sp)
    83f4276a:	2d813983          	ld	s3,728(sp)
    83f4276e:	2d013a03          	ld	s4,720(sp)
    83f42772:	2c813a83          	ld	s5,712(sp)
    83f42776:	2c013b03          	ld	s6,704(sp)
    83f4277a:	2b013c03          	ld	s8,688(sp)
    83f4277e:	2a813c83          	ld	s9,680(sp)
    83f42782:	2a013d03          	ld	s10,672(sp)
    83f42786:	29813d83          	ld	s11,664(sp)
    83f4278a:	28813407          	fld	fs0,648(sp)
    83f4278e:	28013487          	fld	fs1,640(sp)
    83f42792:	27813907          	fld	fs2,632(sp)
    83f42796:	27013987          	fld	fs3,624(sp)
    83f4279a:	26813a07          	fld	fs4,616(sp)
    83f4279e:	26013a87          	fld	fs5,608(sp)
    83f427a2:	25813b07          	fld	fs6,600(sp)
    83f427a6:	007bf513          	andi	a0,s7,7
    83f427aa:	2b813b83          	ld	s7,696(sp)
    83f427ae:	30010113          	addi	sp,sp,768
    83f427b2:	8082                	ret
    83f427b4:	4505                	li	a0,1
    83f427b6:	4701                	li	a4,0
    83f427b8:	bbc1                	j	83f42588 <__kernel_rem_pio2+0x330>
    83f427ba:	a36987d3          	fle.d	a5,fs3,fs6
    83f427be:	4881                	li	a7,0
    83f427c0:	ca078ee3          	beqz	a5,83f4247c <__kernel_rem_pio2+0x224>
    83f427c4:	00160b9b          	addiw	s7,a2,1
    83f427c8:	4889                	li	a7,2
    83f427ca:	d9504be3          	bgtz	s5,83f42560 <__kernel_rem_pio2+0x308>
    83f427ce:	0b697b53          	fsub.d	fs6,fs2,fs6
    83f427d2:	b16d                	j	83f4247c <__kernel_rem_pio2+0x224>
    83f427d4:	001a851b          	addiw	a0,s5,1
    83f427d8:	88aa                	mv	a7,a0
    83f427da:	b311                	j	83f424de <__kernel_rem_pio2+0x286>
    83f427dc:	00231793          	slli	a5,t1,0x2
    83f427e0:	0c98                	addi	a4,sp,592
    83f427e2:	973e                	add	a4,a4,a5
    83f427e4:	46c2                	lw	a3,16(sp)
    83f427e6:	dd072703          	lw	a4,-560(a4)
    83f427ea:	fe868b1b          	addiw	s6,a3,-24
    83f427ee:	e8071ce3          	bnez	a4,83f42686 <__kernel_rem_pio2+0x42e>
    83f427f2:	17f1                	addi	a5,a5,-4
    83f427f4:	1018                	addi	a4,sp,32
    83f427f6:	97ba                	add	a5,a5,a4
    83f427f8:	4398                	lw	a4,0(a5)
    83f427fa:	337d                	addiw	t1,t1,-1
    83f427fc:	17f1                	addi	a5,a5,-4
    83f427fe:	3b21                	addiw	s6,s6,-24
    83f42800:	df65                	beqz	a4,83f427f8 <__kernel_rem_pio2+0x5a0>
    83f42802:	b551                	j	83f42686 <__kernel_rem_pio2+0x42e>
    83f42804:	6722                	ld	a4,8(sp)
    83f42806:	478d                	li	a5,3
    83f42808:	f4f719e3          	bne	a4,a5,83f4275a <__kernel_rem_pio2+0x502>
    83f4280c:	04030163          	beqz	t1,83f4284e <__kernel_rem_pio2+0x5f6>
    83f42810:	fff3069b          	addiw	a3,t1,-1
    83f42814:	0c9c                	addi	a5,sp,592
    83f42816:	97fa                	add	a5,a5,t5
    83f42818:	02069613          	slli	a2,a3,0x20
    83f4281c:	0218                	addi	a4,sp,256
    83f4281e:	01d65693          	srli	a3,a2,0x1d
    83f42822:	ec07b707          	fld	fa4,-320(a5)
    83f42826:	977a                	add	a4,a4,t5
    83f42828:	ff8f0793          	addi	a5,t5,-8
    83f4282c:	0a10                	addi	a2,sp,272
    83f4282e:	97b2                	add	a5,a5,a2
    83f42830:	8f15                	sub	a4,a4,a3
    83f42832:	239c                	fld	fa5,0(a5)
    83f42834:	22e706d3          	fmv.d	fa3,fa4
    83f42838:	17e1                	addi	a5,a5,-8
    83f4283a:	02f77753          	fadd.d	fa4,fa4,fa5
    83f4283e:	0ae7f7d3          	fsub.d	fa5,fa5,fa4
    83f42842:	a798                	fsd	fa4,8(a5)
    83f42844:	02d7f7d3          	fadd.d	fa5,fa5,fa3
    83f42848:	ab9c                	fsd	fa5,16(a5)
    83f4284a:	fef714e3          	bne	a4,a5,83f42832 <__kernel_rem_pio2+0x5da>
    83f4284e:	4785                	li	a5,1
    83f42850:	f20007d3          	fmv.d.x	fa5,zero
    83f42854:	0467df63          	bge	a5,t1,83f428b2 <__kernel_rem_pio2+0x65a>
    83f42858:	ffe3069b          	addiw	a3,t1,-2
    83f4285c:	02069713          	slli	a4,a3,0x20
    83f42860:	0c9c                	addi	a5,sp,592
    83f42862:	97fa                	add	a5,a5,t5
    83f42864:	01d75693          	srli	a3,a4,0x1d
    83f42868:	0218                	addi	a4,sp,256
    83f4286a:	ec07b707          	fld	fa4,-320(a5)
    83f4286e:	977a                	add	a4,a4,t5
    83f42870:	ff8f0793          	addi	a5,t5,-8
    83f42874:	0a10                	addi	a2,sp,272
    83f42876:	97b2                	add	a5,a5,a2
    83f42878:	8f15                	sub	a4,a4,a3
    83f4287a:	239c                	fld	fa5,0(a5)
    83f4287c:	22e706d3          	fmv.d	fa3,fa4
    83f42880:	17e1                	addi	a5,a5,-8
    83f42882:	02f77753          	fadd.d	fa4,fa4,fa5
    83f42886:	0ae7f7d3          	fsub.d	fa5,fa5,fa4
    83f4288a:	a798                	fsd	fa4,8(a5)
    83f4288c:	02d7f7d3          	fadd.d	fa5,fa5,fa3
    83f42890:	ab9c                	fsd	fa5,16(a5)
    83f42892:	fee794e3          	bne	a5,a4,83f4287a <__kernel_rem_pio2+0x622>
    83f42896:	023c                	addi	a5,sp,264
    83f42898:	f20007d3          	fmv.d.x	fa5,zero
    83f4289c:	97fa                	add	a5,a5,t5
    83f4289e:	0a18                	addi	a4,sp,272
    83f428a0:	9f3a                	add	t5,t5,a4
    83f428a2:	8f95                	sub	a5,a5,a3
    83f428a4:	000f3707          	fld	fa4,0(t5)
    83f428a8:	1f61                	addi	t5,t5,-8
    83f428aa:	02e7f7d3          	fadd.d	fa5,fa5,fa4
    83f428ae:	ffe79be3          	bne	a5,t5,83f428a4 <__kernel_rem_pio2+0x64c>
    83f428b2:	26d2                	fld	fa3,272(sp)
    83f428b4:	2772                	fld	fa4,280(sp)
    83f428b6:	0a089263          	bnez	a7,83f4295a <__kernel_rem_pio2+0x702>
    83f428ba:	6782                	ld	a5,0(sp)
    83f428bc:	a394                	fsd	fa3,0(a5)
    83f428be:	a798                	fsd	fa4,8(a5)
    83f428c0:	ab9c                	fsd	fa5,16(a5)
    83f428c2:	bd61                	j	83f4275a <__kernel_rem_pio2+0x502>
    83f428c4:	fffa871b          	addiw	a4,s5,-1
    83f428c8:	070a                	slli	a4,a4,0x2
    83f428ca:	0c94                	addi	a3,sp,592
    83f428cc:	9736                	add	a4,a4,a3
    83f428ce:	dd072603          	lw	a2,-560(a4)
    83f428d2:	1626                	slli	a2,a2,0x29
    83f428d4:	9225                	srli	a2,a2,0x29
    83f428d6:	dcc72823          	sw	a2,-560(a4)
    83f428da:	b30d                	j	83f425fc <__kernel_rem_pio2+0x3a4>
    83f428dc:	57a1                	li	a5,-24
    83f428de:	4481                	li	s1,0
    83f428e0:	bc01                	j	83f422f0 <__kernel_rem_pio2+0x98>
    83f428e2:	f20007d3          	fmv.d.x	fa5,zero
    83f428e6:	357d                	addiw	a0,a0,-1
    83f428e8:	0e85                	addi	t4,t4,1
    83f428ea:	00f83027          	fsd	fa5,0(a6)
    83f428ee:	15e1                	addi	a1,a1,-8
    83f428f0:	0821                	addi	a6,a6,8
    83f428f2:	dff519e3          	bne	a0,t6,83f426e4 <__kernel_rem_pio2+0x48c>
    83f428f6:	bd0d                	j	83f42728 <__kernel_rem_pio2+0x4d0>
    83f428f8:	4781                	li	a5,0
    83f428fa:	b9f1                	j	83f425d6 <__kernel_rem_pio2+0x37e>
    83f428fc:	f20007d3          	fmv.d.x	fa5,zero
    83f42900:	0a1c                	addi	a5,sp,272
    83f42902:	9f3e                	add	t5,t5,a5
    83f42904:	023c                	addi	a5,sp,264
    83f42906:	000f3707          	fld	fa4,0(t5)
    83f4290a:	1f61                	addi	t5,t5,-8
    83f4290c:	02e7f7d3          	fadd.d	fa5,fa5,fa4
    83f42910:	ffe79be3          	bne	a5,t5,83f42906 <__kernel_rem_pio2+0x6ae>
    83f42914:	04089e63          	bnez	a7,83f42970 <__kernel_rem_pio2+0x718>
    83f42918:	6782                	ld	a5,0(sp)
    83f4291a:	2752                	fld	fa4,272(sp)
    83f4291c:	a39c                	fsd	fa5,0(a5)
    83f4291e:	0af777d3          	fsub.d	fa5,fa4,fa5
    83f42922:	00605f63          	blez	t1,83f42940 <__kernel_rem_pio2+0x6e8>
    83f42926:	0a38                	addi	a4,sp,280
    83f42928:	4785                	li	a5,1
    83f4292a:	2318                	fld	fa4,0(a4)
    83f4292c:	2785                	addiw	a5,a5,1
    83f4292e:	0721                	addi	a4,a4,8
    83f42930:	02e7f7d3          	fadd.d	fa5,fa5,fa4
    83f42934:	fef35be3          	bge	t1,a5,83f4292a <__kernel_rem_pio2+0x6d2>
    83f42938:	00088463          	beqz	a7,83f42940 <__kernel_rem_pio2+0x6e8>
    83f4293c:	22f797d3          	fneg.d	fa5,fa5
    83f42940:	6782                	ld	a5,0(sp)
    83f42942:	a79c                	fsd	fa5,8(a5)
    83f42944:	bd19                	j	83f4275a <__kernel_rem_pio2+0x502>
    83f42946:	c2051753          	fcvt.w.d	a4,fa0,rtz
    83f4294a:	002a9793          	slli	a5,s5,0x2
    83f4294e:	0c94                	addi	a3,sp,592
    83f42950:	97b6                	add	a5,a5,a3
    83f42952:	dce7a823          	sw	a4,-560(a5)
    83f42956:	8356                	mv	t1,s5
    83f42958:	b33d                	j	83f42686 <__kernel_rem_pio2+0x42e>
    83f4295a:	6782                	ld	a5,0(sp)
    83f4295c:	22d696d3          	fneg.d	fa3,fa3
    83f42960:	22e71753          	fneg.d	fa4,fa4
    83f42964:	22f797d3          	fneg.d	fa5,fa5
    83f42968:	a394                	fsd	fa3,0(a5)
    83f4296a:	a798                	fsd	fa4,8(a5)
    83f4296c:	ab9c                	fsd	fa5,16(a5)
    83f4296e:	b3f5                	j	83f4275a <__kernel_rem_pio2+0x502>
    83f42970:	22f79753          	fneg.d	fa4,fa5
    83f42974:	6782                	ld	a5,0(sp)
    83f42976:	a398                	fsd	fa4,0(a5)
    83f42978:	2752                	fld	fa4,272(sp)
    83f4297a:	0af777d3          	fsub.d	fa5,fa4,fa5
    83f4297e:	fa6044e3          	bgtz	t1,83f42926 <__kernel_rem_pio2+0x6ce>
    83f42982:	22f797d3          	fneg.d	fa5,fa5
    83f42986:	bf6d                	j	83f42940 <__kernel_rem_pio2+0x6e8>
    83f42988:	6722                	ld	a4,8(sp)
    83f4298a:	4789                	li	a5,2
    83f4298c:	00e7cb63          	blt	a5,a4,83f429a2 <__kernel_rem_pio2+0x74a>
    83f42990:	f20007d3          	fmv.d.x	fa5,zero
    83f42994:	f8e040e3          	bgtz	a4,83f42914 <__kernel_rem_pio2+0x6bc>
    83f42998:	dc0711e3          	bnez	a4,83f4275a <__kernel_rem_pio2+0x502>
    83f4299c:	da088de3          	beqz	a7,83f42756 <__kernel_rem_pio2+0x4fe>
    83f429a0:	bb4d                	j	83f42752 <__kernel_rem_pio2+0x4fa>
    83f429a2:	6722                	ld	a4,8(sp)
    83f429a4:	478d                	li	a5,3
    83f429a6:	f20007d3          	fmv.d.x	fa5,zero
    83f429aa:	f0f704e3          	beq	a4,a5,83f428b2 <__kernel_rem_pio2+0x65a>
    83f429ae:	b375                	j	83f4275a <__kernel_rem_pio2+0x502>

0000000083f429b0 <__kernel_sin>:
    83f429b0:	e20507d3          	fmv.x.d	a5,fa0
    83f429b4:	3e4006b7          	lui	a3,0x3e400
    83f429b8:	00179713          	slli	a4,a5,0x1
    83f429bc:	9305                	srli	a4,a4,0x21
    83f429be:	00d75663          	bge	a4,a3,83f429ca <__kernel_sin+0x1a>
    83f429c2:	c2051753          	fcvt.w.d	a4,fa0,rtz
    83f429c6:	2701                	sext.w	a4,a4
    83f429c8:	c749                	beqz	a4,83f42a52 <__kernel_sin+0xa2>
    83f429ca:	f20787d3          	fmv.d.x	fa5,a5
    83f429ce:	00010717          	auipc	a4,0x10
    83f429d2:	d6a73507          	fld	fa0,-662(a4) # 83f52738 <xISRStackTop+0x2a8>
    83f429d6:	00010717          	auipc	a4,0x10
    83f429da:	d6a73007          	fld	ft0,-662(a4) # 83f52740 <xISRStackTop+0x2b0>
    83f429de:	12f7f753          	fmul.d	fa4,fa5,fa5
    83f429e2:	00010717          	auipc	a4,0x10
    83f429e6:	d4e73787          	fld	fa5,-690(a4) # 83f52730 <xISRStackTop+0x2a0>
    83f429ea:	00010717          	auipc	a4,0x10
    83f429ee:	d5e73607          	fld	fa2,-674(a4) # 83f52748 <xISRStackTop+0x2b8>
    83f429f2:	00010717          	auipc	a4,0x10
    83f429f6:	d5e73687          	fld	fa3,-674(a4) # 83f52750 <xISRStackTop+0x2c0>
    83f429fa:	52f777c3          	fmadd.d	fa5,fa4,fa5,fa0
    83f429fe:	f2078553          	fmv.d.x	fa0,a5
    83f42a02:	12e57553          	fmul.d	fa0,fa0,fa4
    83f42a06:	02e7f7c3          	fmadd.d	fa5,fa5,fa4,ft0
    83f42a0a:	62e7f7c3          	fmadd.d	fa5,fa5,fa4,fa2
    83f42a0e:	6ae7f7c3          	fmadd.d	fa5,fa5,fa4,fa3
    83f42a12:	ed01                	bnez	a0,83f42a2a <__kernel_sin+0x7a>
    83f42a14:	00010717          	auipc	a4,0x10
    83f42a18:	d4473687          	fld	fa3,-700(a4) # 83f52758 <xISRStackTop+0x2c8>
    83f42a1c:	6af777c3          	fmadd.d	fa5,fa4,fa5,fa3
    83f42a20:	f2078753          	fmv.d.x	fa4,a5
    83f42a24:	72a7f543          	fmadd.d	fa0,fa5,fa0,fa4
    83f42a28:	8082                	ret
    83f42a2a:	12f577d3          	fmul.d	fa5,fa0,fa5
    83f42a2e:	00010717          	auipc	a4,0x10
    83f42a32:	86a73687          	fld	fa3,-1942(a4) # 83f52298 <__func__.1+0xa0>
    83f42a36:	00010717          	auipc	a4,0x10
    83f42a3a:	d2a73607          	fld	fa2,-726(a4) # 83f52760 <xISRStackTop+0x2d0>
    83f42a3e:	7ad5f7c7          	fmsub.d	fa5,fa1,fa3,fa5
    83f42a42:	5ae7f5c7          	fmsub.d	fa1,fa5,fa4,fa1
    83f42a46:	f20787d3          	fmv.d.x	fa5,a5
    83f42a4a:	5ac57543          	fmadd.d	fa0,fa0,fa2,fa1
    83f42a4e:	0aa7f553          	fsub.d	fa0,fa5,fa0
    83f42a52:	8082                	ret

0000000083f42a54 <finite>:
    83f42a54:	e2050553          	fmv.x.d	a0,fa0
    83f42a58:	801007b7          	lui	a5,0x80100
    83f42a5c:	0506                	slli	a0,a0,0x1
    83f42a5e:	9105                	srli	a0,a0,0x21
    83f42a60:	9d3d                	addw	a0,a0,a5
    83f42a62:	01f5551b          	srliw	a0,a0,0x1f
    83f42a66:	8082                	ret

0000000083f42a68 <nan>:
    83f42a68:	00010797          	auipc	a5,0x10
    83f42a6c:	d007b507          	fld	fa0,-768(a5) # 83f52768 <xISRStackTop+0x2d8>
    83f42a70:	8082                	ret

0000000083f42a72 <rint>:
    83f42a72:	e20507d3          	fmv.x.d	a5,fa0
    83f42a76:	454d                	li	a0,19
    83f42a78:	1141                	addi	sp,sp,-16
    83f42a7a:	4347d613          	srai	a2,a5,0x34
    83f42a7e:	7ff67613          	andi	a2,a2,2047
    83f42a82:	c016059b          	addiw	a1,a2,-1023
    83f42a86:	4207d713          	srai	a4,a5,0x20
    83f42a8a:	0007869b          	sext.w	a3,a5
    83f42a8e:	0007a893          	slti	a7,a5,0
    83f42a92:	0eb54d63          	blt	a0,a1,83f42b8c <rint+0x11a>
    83f42a96:	0605cd63          	bltz	a1,83f42b10 <rint+0x9e>
    83f42a9a:	00100637          	lui	a2,0x100
    83f42a9e:	367d                	addiw	a2,a2,-1
    83f42aa0:	40b6563b          	sraw	a2,a2,a1
    83f42aa4:	00c77833          	and	a6,a4,a2
    83f42aa8:	00d86833          	or	a6,a6,a3
    83f42aac:	2801                	sext.w	a6,a6
    83f42aae:	04080d63          	beqz	a6,83f42b08 <rint+0x96>
    83f42ab2:	0016561b          	srliw	a2,a2,0x1
    83f42ab6:	00c777b3          	and	a5,a4,a2
    83f42aba:	8edd                	or	a3,a3,a5
    83f42abc:	2681                	sext.w	a3,a3
    83f42abe:	ce99                	beqz	a3,83f42adc <rint+0x6a>
    83f42ac0:	800006b7          	lui	a3,0x80000
    83f42ac4:	00a58363          	beq	a1,a0,83f42aca <rint+0x58>
    83f42ac8:	4681                	li	a3,0
    83f42aca:	fff64613          	not	a2,a2
    83f42ace:	000407b7          	lui	a5,0x40
    83f42ad2:	8f71                	and	a4,a4,a2
    83f42ad4:	40b7d5bb          	sraw	a1,a5,a1
    83f42ad8:	8f4d                	or	a4,a4,a1
    83f42ada:	2701                	sext.w	a4,a4
    83f42adc:	1682                	slli	a3,a3,0x20
    83f42ade:	00389793          	slli	a5,a7,0x3
    83f42ae2:	0000e617          	auipc	a2,0xe
    83f42ae6:	16e60613          	addi	a2,a2,366 # 83f50c50 <TWO52>
    83f42aea:	9281                	srli	a3,a3,0x20
    83f42aec:	1702                	slli	a4,a4,0x20
    83f42aee:	97b2                	add	a5,a5,a2
    83f42af0:	8f55                	or	a4,a4,a3
    83f42af2:	2398                	fld	fa4,0(a5)
    83f42af4:	f20707d3          	fmv.d.x	fa5,a4
    83f42af8:	02f777d3          	fadd.d	fa5,fa4,fa5
    83f42afc:	a43e                	fsd	fa5,8(sp)
    83f42afe:	27a2                	fld	fa5,8(sp)
    83f42b00:	0ae7f7d3          	fsub.d	fa5,fa5,fa4
    83f42b04:	e20787d3          	fmv.x.d	a5,fa5
    83f42b08:	f2078553          	fmv.d.x	fa0,a5
    83f42b0c:	0141                	addi	sp,sp,16
    83f42b0e:	8082                	ret
    83f42b10:	800005b7          	lui	a1,0x80000
    83f42b14:	fff5c593          	not	a1,a1
    83f42b18:	00b77633          	and	a2,a4,a1
    83f42b1c:	8e55                	or	a2,a2,a3
    83f42b1e:	d66d                	beqz	a2,83f42b08 <rint+0x96>
    83f42b20:	883a                	mv	a6,a4
    83f42b22:	1732                	slli	a4,a4,0x2c
    83f42b24:	9331                	srli	a4,a4,0x2c
    83f42b26:	8ed9                	or	a3,a3,a4
    83f42b28:	40d0073b          	negw	a4,a3
    83f42b2c:	8f55                	or	a4,a4,a3
    83f42b2e:	00c7571b          	srliw	a4,a4,0xc
    83f42b32:	000806b7          	lui	a3,0x80
    83f42b36:	8f75                	and	a4,a4,a3
    83f42b38:	0000e617          	auipc	a2,0xe
    83f42b3c:	11860613          	addi	a2,a2,280 # 83f50c50 <TWO52>
    83f42b40:	088e                	slli	a7,a7,0x3
    83f42b42:	7681                	lui	a3,0xfffe0
    83f42b44:	00d876b3          	and	a3,a6,a3
    83f42b48:	98b2                	add	a7,a7,a2
    83f42b4a:	567d                	li	a2,-1
    83f42b4c:	9201                	srli	a2,a2,0x20
    83f42b4e:	8f55                	or	a4,a4,a3
    83f42b50:	8ff1                	and	a5,a5,a2
    83f42b52:	1702                	slli	a4,a4,0x20
    83f42b54:	8f5d                	or	a4,a4,a5
    83f42b56:	0008b707          	fld	fa4,0(a7) # ffffffffbff00000 <_end+0xffffffff3bf002c0>
    83f42b5a:	f20707d3          	fmv.d.x	fa5,a4
    83f42b5e:	800006b7          	lui	a3,0x80000
    83f42b62:	00d876b3          	and	a3,a6,a3
    83f42b66:	02f777d3          	fadd.d	fa5,fa4,fa5
    83f42b6a:	a43e                	fsd	fa5,8(sp)
    83f42b6c:	27a2                	fld	fa5,8(sp)
    83f42b6e:	0141                	addi	sp,sp,16
    83f42b70:	0ae7f7d3          	fsub.d	fa5,fa5,fa4
    83f42b74:	e2078753          	fmv.x.d	a4,fa5
    83f42b78:	02075793          	srli	a5,a4,0x20
    83f42b7c:	8fed                	and	a5,a5,a1
    83f42b7e:	8fd5                	or	a5,a5,a3
    83f42b80:	1782                	slli	a5,a5,0x20
    83f42b82:	8e79                	and	a2,a2,a4
    83f42b84:	8fd1                	or	a5,a5,a2
    83f42b86:	f2078553          	fmv.d.x	fa0,a5
    83f42b8a:	8082                	ret
    83f42b8c:	03300513          	li	a0,51
    83f42b90:	00b55b63          	bge	a0,a1,83f42ba6 <rint+0x134>
    83f42b94:	40000713          	li	a4,1024
    83f42b98:	f6e598e3          	bne	a1,a4,83f42b08 <rint+0x96>
    83f42b9c:	02a577d3          	fadd.d	fa5,fa0,fa0
    83f42ba0:	e20787d3          	fmv.x.d	a5,fa5
    83f42ba4:	b795                	j	83f42b08 <rint+0x96>
    83f42ba6:	bed6061b          	addiw	a2,a2,-1043
    83f42baa:	55fd                	li	a1,-1
    83f42bac:	00c5d5bb          	srlw	a1,a1,a2
    83f42bb0:	00b6f533          	and	a0,a3,a1
    83f42bb4:	2501                	sext.w	a0,a0
    83f42bb6:	8836                	mv	a6,a3
    83f42bb8:	d921                	beqz	a0,83f42b08 <rint+0x96>
    83f42bba:	0015d59b          	srliw	a1,a1,0x1
    83f42bbe:	00b6f7b3          	and	a5,a3,a1
    83f42bc2:	2781                	sext.w	a5,a5
    83f42bc4:	df81                	beqz	a5,83f42adc <rint+0x6a>
    83f42bc6:	fff5c593          	not	a1,a1
    83f42bca:	400007b7          	lui	a5,0x40000
    83f42bce:	0105f6b3          	and	a3,a1,a6
    83f42bd2:	40c7d63b          	sraw	a2,a5,a2
    83f42bd6:	8ed1                	or	a3,a3,a2
    83f42bd8:	2681                	sext.w	a3,a3
    83f42bda:	b709                	j	83f42adc <rint+0x6a>

0000000083f42bdc <scalbn>:
    83f42bdc:	e20507d3          	fmv.x.d	a5,fa0
    83f42be0:	4347d713          	srai	a4,a5,0x34
    83f42be4:	7ff77713          	andi	a4,a4,2047
    83f42be8:	4207d693          	srai	a3,a5,0x20
    83f42bec:	ef25                	bnez	a4,83f42c64 <scalbn+0x88>
    83f42bee:	1686                	slli	a3,a3,0x21
    83f42bf0:	9285                	srli	a3,a3,0x21
    83f42bf2:	8edd                	or	a3,a3,a5
    83f42bf4:	2681                	sext.w	a3,a3
    83f42bf6:	c6a5                	beqz	a3,83f42c5e <scalbn+0x82>
    83f42bf8:	00010717          	auipc	a4,0x10
    83f42bfc:	9b073787          	fld	fa5,-1616(a4) # 83f525a8 <xISRStackTop+0x118>
    83f42c00:	12f577d3          	fmul.d	fa5,fa0,fa5
    83f42c04:	7751                	lui	a4,0xffff4
    83f42c06:	cb070713          	addi	a4,a4,-848 # ffffffffffff3cb0 <_end+0xffffffff7bff3f70>
    83f42c0a:	e20787d3          	fmv.x.d	a5,fa5
    83f42c0e:	0ce54f63          	blt	a0,a4,83f42cec <scalbn+0x110>
    83f42c12:	4347d713          	srai	a4,a5,0x34
    83f42c16:	7ff77713          	andi	a4,a4,2047
    83f42c1a:	4207d693          	srai	a3,a5,0x20
    83f42c1e:	fca7071b          	addiw	a4,a4,-54
    83f42c22:	00e5063b          	addw	a2,a0,a4
    83f42c26:	7fe00593          	li	a1,2046
    83f42c2a:	8732                	mv	a4,a2
    83f42c2c:	04c5c763          	blt	a1,a2,83f42c7a <scalbn+0x9e>
    83f42c30:	08c04f63          	bgtz	a2,83f42cce <scalbn+0xf2>
    83f42c34:	fcb00593          	li	a1,-53
    83f42c38:	06b65063          	bge	a2,a1,83f42c98 <scalbn+0xbc>
    83f42c3c:	6731                	lui	a4,0xc
    83f42c3e:	35070713          	addi	a4,a4,848 # c350 <_EL1_STACK_SIZE+0xbb50>
    83f42c42:	02a74c63          	blt	a4,a0,83f42c7a <scalbn+0x9e>
    83f42c46:	f20787d3          	fmv.d.x	fa5,a5
    83f42c4a:	00010717          	auipc	a4,0x10
    83f42c4e:	a2673707          	fld	fa4,-1498(a4) # 83f52670 <xISRStackTop+0x1e0>
    83f42c52:	22f707d3          	fsgnj.d	fa5,fa4,fa5
    83f42c56:	12e7f7d3          	fmul.d	fa5,fa5,fa4
    83f42c5a:	e20787d3          	fmv.x.d	a5,fa5
    83f42c5e:	f2078553          	fmv.d.x	fa0,a5
    83f42c62:	8082                	ret
    83f42c64:	7ff00613          	li	a2,2047
    83f42c68:	fac71de3          	bne	a4,a2,83f42c22 <scalbn+0x46>
    83f42c6c:	02a577d3          	fadd.d	fa5,fa0,fa0
    83f42c70:	e20787d3          	fmv.x.d	a5,fa5
    83f42c74:	f2078553          	fmv.d.x	fa0,a5
    83f42c78:	8082                	ret
    83f42c7a:	f20787d3          	fmv.d.x	fa5,a5
    83f42c7e:	00010717          	auipc	a4,0x10
    83f42c82:	82273707          	fld	fa4,-2014(a4) # 83f524a0 <xISRStackTop+0x10>
    83f42c86:	22f707d3          	fsgnj.d	fa5,fa4,fa5
    83f42c8a:	12e7f7d3          	fmul.d	fa5,fa5,fa4
    83f42c8e:	e20787d3          	fmv.x.d	a5,fa5
    83f42c92:	f2078553          	fmv.d.x	fa0,a5
    83f42c96:	8082                	ret
    83f42c98:	0366071b          	addiw	a4,a2,54
    83f42c9c:	80100637          	lui	a2,0x80100
    83f42ca0:	167d                	addi	a2,a2,-1
    83f42ca2:	8ef1                	and	a3,a3,a2
    83f42ca4:	0147171b          	slliw	a4,a4,0x14
    83f42ca8:	8f55                	or	a4,a4,a3
    83f42caa:	56fd                	li	a3,-1
    83f42cac:	9281                	srli	a3,a3,0x20
    83f42cae:	1702                	slli	a4,a4,0x20
    83f42cb0:	8ff5                	and	a5,a5,a3
    83f42cb2:	8fd9                	or	a5,a5,a4
    83f42cb4:	f2078753          	fmv.d.x	fa4,a5
    83f42cb8:	00010717          	auipc	a4,0x10
    83f42cbc:	ab873787          	fld	fa5,-1352(a4) # 83f52770 <xISRStackTop+0x2e0>
    83f42cc0:	12e7f7d3          	fmul.d	fa5,fa5,fa4
    83f42cc4:	e20787d3          	fmv.x.d	a5,fa5
    83f42cc8:	f2078553          	fmv.d.x	fa0,a5
    83f42ccc:	8082                	ret
    83f42cce:	80100637          	lui	a2,0x80100
    83f42cd2:	167d                	addi	a2,a2,-1
    83f42cd4:	8ef1                	and	a3,a3,a2
    83f42cd6:	0147171b          	slliw	a4,a4,0x14
    83f42cda:	8f55                	or	a4,a4,a3
    83f42cdc:	56fd                	li	a3,-1
    83f42cde:	9281                	srli	a3,a3,0x20
    83f42ce0:	1702                	slli	a4,a4,0x20
    83f42ce2:	8ff5                	and	a5,a5,a3
    83f42ce4:	8fd9                	or	a5,a5,a4
    83f42ce6:	f2078553          	fmv.d.x	fa0,a5
    83f42cea:	8082                	ret
    83f42cec:	f2078753          	fmv.d.x	fa4,a5
    83f42cf0:	00010717          	auipc	a4,0x10
    83f42cf4:	98073787          	fld	fa5,-1664(a4) # 83f52670 <xISRStackTop+0x1e0>
    83f42cf8:	12f777d3          	fmul.d	fa5,fa4,fa5
    83f42cfc:	e20787d3          	fmv.x.d	a5,fa5
    83f42d00:	f2078553          	fmv.d.x	fa0,a5
    83f42d04:	8082                	ret

0000000083f42d06 <abs>:
    83f42d06:	41f5579b          	sraiw	a5,a0,0x1f
    83f42d0a:	8d3d                	xor	a0,a0,a5
    83f42d0c:	9d1d                	subw	a0,a0,a5
    83f42d0e:	8082                	ret

0000000083f42d10 <__errno>:
    83f42d10:	00010517          	auipc	a0,0x10
    83f42d14:	4a053503          	ld	a0,1184(a0) # 83f531b0 <_impure_ptr>
    83f42d18:	8082                	ret

0000000083f42d1a <memmove>:
    83f42d1a:	02a5f263          	bgeu	a1,a0,83f42d3e <memmove+0x24>
    83f42d1e:	00c587b3          	add	a5,a1,a2
    83f42d22:	00f57e63          	bgeu	a0,a5,83f42d3e <memmove+0x24>
    83f42d26:	00c50733          	add	a4,a0,a2
    83f42d2a:	ca5d                	beqz	a2,83f42de0 <memmove+0xc6>
    83f42d2c:	fff7c683          	lbu	a3,-1(a5) # 3fffffff <CVIMMAP_DRAM_SIZE+0x3bffffff>
    83f42d30:	17fd                	addi	a5,a5,-1
    83f42d32:	177d                	addi	a4,a4,-1
    83f42d34:	00d70023          	sb	a3,0(a4)
    83f42d38:	fef59ae3          	bne	a1,a5,83f42d2c <memmove+0x12>
    83f42d3c:	8082                	ret
    83f42d3e:	47fd                	li	a5,31
    83f42d40:	02c7e163          	bltu	a5,a2,83f42d62 <memmove+0x48>
    83f42d44:	87aa                	mv	a5,a0
    83f42d46:	fff60693          	addi	a3,a2,-1 # ffffffff800fffff <_end+0xfffffffefc1002bf>
    83f42d4a:	c245                	beqz	a2,83f42dea <memmove+0xd0>
    83f42d4c:	0685                	addi	a3,a3,1
    83f42d4e:	96be                	add	a3,a3,a5
    83f42d50:	0005c703          	lbu	a4,0(a1) # ffffffff80000000 <_end+0xfffffffefc0002c0>
    83f42d54:	0785                	addi	a5,a5,1
    83f42d56:	0585                	addi	a1,a1,1
    83f42d58:	fee78fa3          	sb	a4,-1(a5)
    83f42d5c:	fed79ae3          	bne	a5,a3,83f42d50 <memmove+0x36>
    83f42d60:	8082                	ret
    83f42d62:	00a5e7b3          	or	a5,a1,a0
    83f42d66:	8b9d                	andi	a5,a5,7
    83f42d68:	efad                	bnez	a5,83f42de2 <memmove+0xc8>
    83f42d6a:	fe060893          	addi	a7,a2,-32
    83f42d6e:	fe08f893          	andi	a7,a7,-32
    83f42d72:	02088893          	addi	a7,a7,32
    83f42d76:	01150833          	add	a6,a0,a7
    83f42d7a:	872e                	mv	a4,a1
    83f42d7c:	87aa                	mv	a5,a0
    83f42d7e:	6314                	ld	a3,0(a4)
    83f42d80:	02070713          	addi	a4,a4,32
    83f42d84:	02078793          	addi	a5,a5,32
    83f42d88:	fed7b023          	sd	a3,-32(a5)
    83f42d8c:	fe873683          	ld	a3,-24(a4)
    83f42d90:	fed7b423          	sd	a3,-24(a5)
    83f42d94:	ff073683          	ld	a3,-16(a4)
    83f42d98:	fed7b823          	sd	a3,-16(a5)
    83f42d9c:	ff873683          	ld	a3,-8(a4)
    83f42da0:	fed7bc23          	sd	a3,-8(a5)
    83f42da4:	fcf81de3          	bne	a6,a5,83f42d7e <memmove+0x64>
    83f42da8:	01867713          	andi	a4,a2,24
    83f42dac:	95c6                	add	a1,a1,a7
    83f42dae:	01f67813          	andi	a6,a2,31
    83f42db2:	cf0d                	beqz	a4,83f42dec <memmove+0xd2>
    83f42db4:	872e                	mv	a4,a1
    83f42db6:	88be                	mv	a7,a5
    83f42db8:	4e1d                	li	t3,7
    83f42dba:	00073303          	ld	t1,0(a4)
    83f42dbe:	0721                	addi	a4,a4,8
    83f42dc0:	40e806b3          	sub	a3,a6,a4
    83f42dc4:	0068b023          	sd	t1,0(a7)
    83f42dc8:	96ae                	add	a3,a3,a1
    83f42dca:	08a1                	addi	a7,a7,8
    83f42dcc:	fede67e3          	bltu	t3,a3,83f42dba <memmove+0xa0>
    83f42dd0:	ff880713          	addi	a4,a6,-8
    83f42dd4:	9b61                	andi	a4,a4,-8
    83f42dd6:	0721                	addi	a4,a4,8
    83f42dd8:	8a1d                	andi	a2,a2,7
    83f42dda:	97ba                	add	a5,a5,a4
    83f42ddc:	95ba                	add	a1,a1,a4
    83f42dde:	b7a5                	j	83f42d46 <memmove+0x2c>
    83f42de0:	8082                	ret
    83f42de2:	fff60693          	addi	a3,a2,-1
    83f42de6:	87aa                	mv	a5,a0
    83f42de8:	b795                	j	83f42d4c <memmove+0x32>
    83f42dea:	8082                	ret
    83f42dec:	8642                	mv	a2,a6
    83f42dee:	bfa1                	j	83f42d46 <memmove+0x2c>

0000000083f42df0 <__clzdi2>:
    83f42df0:	03800793          	li	a5,56
    83f42df4:	00f55733          	srl	a4,a0,a5
    83f42df8:	0ff77713          	andi	a4,a4,255
    83f42dfc:	e319                	bnez	a4,83f42e02 <__clzdi2+0x12>
    83f42dfe:	17e1                	addi	a5,a5,-8
    83f42e00:	fbf5                	bnez	a5,83f42df4 <__clzdi2+0x4>
    83f42e02:	04000713          	li	a4,64
    83f42e06:	8f1d                	sub	a4,a4,a5
    83f42e08:	00f55533          	srl	a0,a0,a5
    83f42e0c:	0000e797          	auipc	a5,0xe
    83f42e10:	e5478793          	addi	a5,a5,-428 # 83f50c60 <__clz_tab>
    83f42e14:	953e                	add	a0,a0,a5
    83f42e16:	00054503          	lbu	a0,0(a0)
    83f42e1a:	40a7053b          	subw	a0,a4,a0
    83f42e1e:	8082                	ret

0000000083f42e20 <main>:
uint8_t ucHeap[ configTOTAL_HEAP_SIZE ] __attribute__ ( ( section( ".heap" ) ) );
#endif
/*-----------------------------------------------------------*/

int main(void)
{
    83f42e20:	1141                	addi	sp,sp,-16
    83f42e22:	e406                	sd	ra,8(sp)
	pre_system_init();
    83f42e24:	670090ef          	jal	ra,83f4c494 <pre_system_init>
	printf("CVIRTOS Build Date:%s  (Time :%s) \n", __DATE__, __TIME__);
    83f42e28:	0000e617          	auipc	a2,0xe
    83f42e2c:	f3860613          	addi	a2,a2,-200 # 83f50d60 <__clz_tab+0x100>
    83f42e30:	0000e597          	auipc	a1,0xe
    83f42e34:	f4058593          	addi	a1,a1,-192 # 83f50d70 <__clz_tab+0x110>
    83f42e38:	0000e517          	auipc	a0,0xe
    83f42e3c:	f4850513          	addi	a0,a0,-184 # 83f50d80 <__clz_tab+0x120>
    83f42e40:	154090ef          	jal	ra,83f4bf94 <printf>
	/* Configure the hardware ready to run the demo. */
	prvSetupHardware();
#if ( configUSE_TRACE_FACILITY == 1 )
	vTraceEnable(TRC_START);
#endif
	post_system_init();
    83f42e44:	5d0090ef          	jal	ra,83f4c414 <post_system_init>

#ifdef CVIRTOS
	{
		main_cvirtos();
    83f42e48:	51a000ef          	jal	ra,83f43362 <main_cvirtos>
#error "Not correct running definition"
#endif

	/* Don't expect to reach here. */
	return 0;
}
    83f42e4c:	60a2                	ld	ra,8(sp)
    83f42e4e:	4501                	li	a0,0
    83f42e50:	0141                	addi	sp,sp,16
    83f42e52:	8082                	ret

0000000083f42e54 <vApplicationMallocFailedHook>:
#endif
}
/*-----------------------------------------------------------*/

void vApplicationMallocFailedHook(void)
{
    83f42e54:	1141                	addi	sp,sp,-16
    83f42e56:	e406                	sd	ra,8(sp)
	/* Called if a call to pvPortMalloc() fails because there is insufficient
	free memory available in the FreeRTOS heap.  pvPortMalloc() is called
	internally by FreeRTOS API functions that create tasks, queues, software
	timers, and semaphores.  The size of the FreeRTOS heap is set by the
	configTOTAL_HEAP_SIZE configuration constant in FreeRTOSConfig.h. */
	taskDISABLE_INTERRUPTS();
    83f42e58:	30047073          	csrci	mstatus,8
	dump_uart_disable();
    83f42e5c:	083090ef          	jal	ra,83f4c6de <dump_uart_disable>
	printf("vApplicationMallocFailedHook\n");
    83f42e60:	0000e517          	auipc	a0,0xe
    83f42e64:	f4850513          	addi	a0,a0,-184 # 83f50da8 <__clz_tab+0x148>
    83f42e68:	12c090ef          	jal	ra,83f4bf94 <printf>
	for (;;)
    83f42e6c:	a001                	j	83f42e6c <vApplicationMallocFailedHook+0x18>

0000000083f42e6e <vApplicationStackOverflowHook>:
		;
}
/*-----------------------------------------------------------*/

void vApplicationStackOverflowHook(TaskHandle_t pxTask, char *pcTaskName)
{
    83f42e6e:	1141                	addi	sp,sp,-16
    83f42e70:	e406                	sd	ra,8(sp)
    83f42e72:	e022                	sd	s0,0(sp)
    83f42e74:	842e                	mv	s0,a1
	(void)pcTaskName;
	(void)pxTask;
	dump_uart_disable();
    83f42e76:	069090ef          	jal	ra,83f4c6de <dump_uart_disable>
	printf("%s %s\n", __func__, pcTaskName);
    83f42e7a:	8622                	mv	a2,s0
    83f42e7c:	0000e597          	auipc	a1,0xe
    83f42e80:	f5458593          	addi	a1,a1,-172 # 83f50dd0 <__func__.4>
    83f42e84:	0000e517          	auipc	a0,0xe
    83f42e88:	f4450513          	addi	a0,a0,-188 # 83f50dc8 <__clz_tab+0x168>
    83f42e8c:	108090ef          	jal	ra,83f4bf94 <printf>
	/* Run time stack overflow checking is performed if
	configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2.  This hook
	function is called if a stack overflow is detected. */
	taskDISABLE_INTERRUPTS();
    83f42e90:	30047073          	csrci	mstatus,8
	for (;;)
    83f42e94:	a001                	j	83f42e94 <vApplicationStackOverflowHook+0x26>

0000000083f42e96 <vApplicationTickHook>:
		/* Only the comprehensive demo actually uses the tick hook. */
		extern void vFullDemoTickHook(void);
		vFullDemoTickHook();
	}
#endif
}
    83f42e96:	8082                	ret

0000000083f42e98 <vApplicationGetIdleTaskMemory>:
	static StaticTask_t xIdleTaskTCB;
	static StackType_t uxIdleTaskStack[configMINIMAL_STACK_SIZE];

	/* Pass out a pointer to the StaticTask_t structure in which the Idle task's
	state will be stored. */
	*ppxIdleTaskTCBBuffer = &xIdleTaskTCB;
    83f42e98:	00016797          	auipc	a5,0x16
    83f42e9c:	36878793          	addi	a5,a5,872 # 83f59200 <xIdleTaskTCB.3>
    83f42ea0:	e11c                	sd	a5,0(a0)

	/* Pass out the array that will be used as the Idle task's stack. */
	*ppxIdleTaskStackBuffer = uxIdleTaskStack;
    83f42ea2:	00010797          	auipc	a5,0x10
    83f42ea6:	35e78793          	addi	a5,a5,862 # 83f53200 <__data1_end>
    83f42eaa:	e19c                	sd	a5,0(a1)

	/* Pass out the size of the array pointed to by *ppxIdleTaskStackBuffer.
	Note that, as the array is necessarily of type StackType_t,
	configMINIMAL_STACK_SIZE is specified in words, not bytes. */
	*pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
    83f42eac:	40000793          	li	a5,1024
    83f42eb0:	c21c                	sw	a5,0(a2)
}
    83f42eb2:	8082                	ret

0000000083f42eb4 <vApplicationGetTimerTaskMemory>:
	static StaticTask_t xTimerTaskTCB;
	static StackType_t uxTimerTaskStack[configTIMER_TASK_STACK_DEPTH];

	/* Pass out a pointer to the StaticTask_t structure in which the Timer
	task's state will be stored. */
	*ppxTimerTaskTCBBuffer = &xTimerTaskTCB;
    83f42eb4:	00016797          	auipc	a5,0x16
    83f42eb8:	3f478793          	addi	a5,a5,1012 # 83f592a8 <xTimerTaskTCB.1>
    83f42ebc:	e11c                	sd	a5,0(a0)

	/* Pass out the array that will be used as the Timer task's stack. */
	*ppxTimerTaskStackBuffer = uxTimerTaskStack;
    83f42ebe:	00012797          	auipc	a5,0x12
    83f42ec2:	34278793          	addi	a5,a5,834 # 83f55200 <uxTimerTaskStack.0>
    83f42ec6:	e19c                	sd	a5,0(a1)

	/* Pass out the size of the array pointed to by *ppxTimerTaskStackBuffer.
	Note that, as the array is necessarily of type StackType_t,
	configMINIMAL_STACK_SIZE is specified in words, not bytes. */
	*pulTimerTaskStackSize = configTIMER_TASK_STACK_DEPTH;
    83f42ec8:	6785                	lui	a5,0x1
    83f42eca:	80078793          	addi	a5,a5,-2048 # 800 <_EL1_STACK_SIZE>
    83f42ece:	c21c                	sw	a5,0(a2)
}
    83f42ed0:	8082                	ret

0000000083f42ed2 <prvCmdQuRunTask>:

#ifdef FAST_IMAGE_ENABLE
extern JPEG_PIC encoded_pics[MAX_JPEG_NUM];
#endif
void prvCmdQuRunTask(void *pvParameters)
{
    83f42ed2:	7159                	addi	sp,sp,-112
    83f42ed4:	f45e                	sd	s7,40(sp)
	int send_to_cpu = SEND_TO_CPU1;

	unsigned int reg_base = MAILBOX_REG_BASE;

	/* set mcu_status to type1 running*/
	transfer_config.mcu_status = MCU_STATUS_RTOS_T1_RUNNING;
    83f42ed6:	0001ab97          	auipc	s7,0x1a
    83f42eda:	5aab8b93          	addi	s7,s7,1450 # 83f5d480 <transfer_config>
{
    83f42ede:	e0d2                	sd	s4,64(sp)

	if (transfer_config.conf_magic == C906_MAGIC_HEADER)
		send_to_cpu = SEND_TO_CPU1;
	else if (transfer_config.conf_magic == CA53_MAGIC_HEADER)
    83f42ee0:	000baa03          	lw	s4,0(s7)
    83f42ee4:	a55ad737          	lui	a4,0xa55ad
		send_to_cpu = SEND_TO_CPU0;
	/* to compatible code with linux side */
	cmdq = &rtos_cmdq;
	mbox_reg = (struct mailbox_set_register *) reg_base;
    83f42ee8:	019007b7          	lui	a5,0x1900
	else if (transfer_config.conf_magic == CA53_MAGIC_HEADER)
    83f42eec:	a5370713          	addi	a4,a4,-1453 # ffffffffa55aca53 <_end+0xffffffff215acd13>
    83f42ef0:	40ea0a33          	sub	s4,s4,a4
	mbox_done_reg = (struct mailbox_done_register *) (reg_base + 2);
    83f42ef4:	00278693          	addi	a3,a5,2 # 1900002 <CVIMMAP_FSBL_UNZIP_SIZE+0xa00002>
	mailbox_context = (unsigned long *) (MAILBOX_REG_BUFF);
    83f42ef8:	40078713          	addi	a4,a5,1024
	transfer_config.mcu_status = MCU_STATUS_RTOS_T1_RUNNING;
    83f42efc:	4615                	li	a2,5
{
    83f42efe:	e4ce                	sd	s3,72(sp)
    83f42f00:	f85a                	sd	s6,48(sp)
	mailbox_context = (unsigned long *) (MAILBOX_REG_BUFF);
    83f42f02:	0001d997          	auipc	s3,0x1d
    83f42f06:	ca698993          	addi	s3,s3,-858 # 83f5fba8 <mailbox_context>
	mbox_reg = (struct mailbox_set_register *) reg_base;
    83f42f0a:	0001db17          	auipc	s6,0x1d
    83f42f0e:	caeb0b13          	addi	s6,s6,-850 # 83f5fbb8 <mbox_reg>
    83f42f12:	00fb3023          	sd	a5,0(s6)
{
    83f42f16:	f486                	sd	ra,104(sp)
    83f42f18:	f0a2                	sd	s0,96(sp)
    83f42f1a:	eca6                	sd	s1,88(sp)
    83f42f1c:	e8ca                	sd	s2,80(sp)
    83f42f1e:	fc56                	sd	s5,56(sp)
    83f42f20:	f062                	sd	s8,32(sp)
    83f42f22:	ec66                	sd	s9,24(sp)
		send_to_cpu = SEND_TO_CPU0;
    83f42f24:	01403ab3          	snez	s5,s4
	transfer_config.mcu_status = MCU_STATUS_RTOS_T1_RUNNING;
    83f42f28:	02cb8323          	sb	a2,38(s7)
	mbox_done_reg = (struct mailbox_done_register *) (reg_base + 2);
    83f42f2c:	0001d797          	auipc	a5,0x1d
    83f42f30:	c8d7b223          	sd	a3,-892(a5) # 83f5fbb0 <mbox_done_reg>
	mailbox_context = (unsigned long *) (MAILBOX_REG_BUFF);
    83f42f34:	00e9b023          	sd	a4,0(s3)
{
    83f42f38:	e86a                	sd	s10,16(sp)

	cvi_spinlock_init();
    83f42f3a:	3b5090ef          	jal	ra,83f4caee <cvi_spinlock_init>
	else if (transfer_config.conf_magic == CA53_MAGIC_HEADER)
    83f42f3e:	8a56                	mv	s4,s5
	printf("prvCmdQuRunTask run\n");
    83f42f40:	0000e517          	auipc	a0,0xe
    83f42f44:	eb050513          	addi	a0,a0,-336 # 83f50df0 <__func__.4+0x20>
				break;
			case SYS_CMD_INFO_STOP_ISR_DONE:
				// stop interrupt in order to avoid losing frame
				if (rtos_cmdq.ip_id == IP_VI) {
					stop_ip |= STOP_CMD_DONE_VI;
					rtos_cmdq.ip_id = IP_VCODEC;
    83f42f48:	6c15                	lui	s8,0x5
						debug_printf("rtos_cmdqu_t->cmd_id = %d\n", rtos_cmdqu_t->cmd_id);
						debug_printf("rtos_cmdqu_t->block = %d\n", rtos_cmdqu_t->block);
						debug_printf("rtos_cmdqu_t->param_ptr addr=%x %x\n", &rtos_cmdqu_t->param_ptr, rtos_cmdqu_t->param_ptr);
						debug_printf("*ptr = %x\n", *ptr);
						// clear mailbox
						mbox_reg->cpu_mbox_set[send_to_cpu].cpu_mbox_int_clr.mbox_int_clr = (1 << valid);
    83f42f4a:	0a85                	addi	s5,s5,1
					if (rtos_cmdqu_t->resv.valid.linux_valid == 0 && rtos_cmdqu_t->resv.valid.rtos_valid == 0) {
    83f42f4c:	0ffff437          	lui	s0,0xffff
	printf("prvCmdQuRunTask run\n");
    83f42f50:	044090ef          	jal	ra,83f4bf94 <printf>
    83f42f54:	00010917          	auipc	s2,0x10
    83f42f58:	f7490913          	addi	s2,s2,-140 # 83f52ec8 <gTaskCtx>
					if (rtos_cmdqu_t->resv.valid.linux_valid == 0 && rtos_cmdqu_t->resv.valid.rtos_valid == 0) {
    83f42f5c:	0412                	slli	s0,s0,0x4
				for (valid = 0; valid < MAILBOX_MAX_NUM; valid++) {
    83f42f5e:	44a1                	li	s1,8
						mbox_reg->cpu_mbox_set[send_to_cpu].cpu_mbox_int_clr.mbox_int_clr = (1 << valid);
    83f42f60:	0a92                	slli	s5,s5,0x4
					rtos_cmdq.ip_id = IP_VCODEC;
    83f42f62:	301c0c93          	addi	s9,s8,769 # 5301 <_EL1_STACK_SIZE+0x4b01>
		xQueueReceive(gTaskCtx[E_QUEUE_CMDQU].queHandle, &rtos_cmdq, portMAX_DELAY);
    83f42f66:	1a893503          	ld	a0,424(s2)
    83f42f6a:	567d                	li	a2,-1
    83f42f6c:	002c                	addi	a1,sp,8
    83f42f6e:	4d90b0ef          	jal	ra,83f4ec46 <xQueueReceive>
		switch (rtos_cmdq.cmd_id) {
    83f42f72:	67a2                	ld	a5,8(sp)
    83f42f74:	4729                	li	a4,10
    83f42f76:	83a1                	srli	a5,a5,0x8
    83f42f78:	02f78793          	addi	a5,a5,47
    83f42f7c:	07f7f793          	andi	a5,a5,127
    83f42f80:	02f76063          	bltu	a4,a5,83f42fa0 <prvCmdQuRunTask+0xce>
    83f42f84:	0000e717          	auipc	a4,0xe
    83f42f88:	f1c70713          	addi	a4,a4,-228 # 83f50ea0 <__func__.4+0xd0>
    83f42f8c:	078a                	slli	a5,a5,0x2
    83f42f8e:	97ba                	add	a5,a5,a4
    83f42f90:	439c                	lw	a5,0(a5)
    83f42f92:	97ba                	add	a5,a5,a4
    83f42f94:	8782                	jr	a5
				if (rtos_cmdq.param_ptr >= MAX_JPEG_NUM) {
    83f42f96:	45b2                	lw	a1,12(sp)
    83f42f98:	47bd                	li	a5,15
    83f42f9a:	10b7ed63          	bltu	a5,a1,83f430b4 <prvCmdQuRunTask+0x1e2>
				rtos_cmdq.param_ptr = 0x0;
    83f42f9e:	c602                	sw	zero,12(sp)
				drv_spin_lock_irqsave(&mailbox_lock, flags);
    83f42fa0:	00010517          	auipc	a0,0x10
    83f42fa4:	21850513          	addi	a0,a0,536 # 83f531b8 <mailbox_lock>
				rtos_cmdqu_t = (cmdqu_t *) mailbox_context;
    83f42fa8:	0009bd03          	ld	s10,0(s3)
				drv_spin_lock_irqsave(&mailbox_lock, flags);
    83f42fac:	477090ef          	jal	ra,83f4cc22 <_hw_raw_spin_lock_irqsave>
				if (flags == MAILBOX_LOCK_FAILED) {
    83f42fb0:	57fd                	li	a5,-1
				drv_spin_lock_irqsave(&mailbox_lock, flags);
    83f42fb2:	85aa                	mv	a1,a0
				for (valid = 0; valid < MAILBOX_MAX_NUM; valid++) {
    83f42fb4:	4701                	li	a4,0
				if (flags == MAILBOX_LOCK_FAILED) {
    83f42fb6:	06f50b63          	beq	a0,a5,83f4302c <prvCmdQuRunTask+0x15a>
					if (rtos_cmdqu_t->resv.valid.linux_valid == 0 && rtos_cmdqu_t->resv.valid.rtos_valid == 0) {
    83f42fba:	000d3783          	ld	a5,0(s10)
    83f42fbe:	8fe1                	and	a5,a5,s0
    83f42fc0:	10078263          	beqz	a5,83f430c4 <prvCmdQuRunTask+0x1f2>
				for (valid = 0; valid < MAILBOX_MAX_NUM; valid++) {
    83f42fc4:	2705                	addiw	a4,a4,1
						// trigger mailbox valid to rtos
						mbox_reg->cpu_mbox_en[send_to_cpu].mbox_info |= (1 << valid);
						mbox_reg->mbox_set.mbox_set = (1 << valid);
						break;
					}
					rtos_cmdqu_t++;
    83f42fc6:	0d21                	addi	s10,s10,8
				for (valid = 0; valid < MAILBOX_MAX_NUM; valid++) {
    83f42fc8:	fe9719e3          	bne	a4,s1,83f42fba <prvCmdQuRunTask+0xe8>
				}
				drv_spin_unlock_irqrestore(&mailbox_lock, flags);
    83f42fcc:	00010517          	auipc	a0,0x10
    83f42fd0:	1ec50513          	addi	a0,a0,492 # 83f531b8 <mailbox_lock>
    83f42fd4:	4b5090ef          	jal	ra,83f4cc88 <_hw_raw_spin_unlock_irqrestore>
				if (valid >= MAILBOX_MAX_NUM) {
				    printf("No valid mailbox is available\n");
    83f42fd8:	0000e517          	auipc	a0,0xe
    83f42fdc:	ea850513          	addi	a0,a0,-344 # 83f50e80 <__func__.4+0xb0>
    83f42fe0:	7b5080ef          	jal	ra,83f4bf94 <printf>
				    return -1;
				}
				break;
		}
	}
}
    83f42fe4:	70a6                	ld	ra,104(sp)
    83f42fe6:	7406                	ld	s0,96(sp)
    83f42fe8:	64e6                	ld	s1,88(sp)
    83f42fea:	6946                	ld	s2,80(sp)
    83f42fec:	69a6                	ld	s3,72(sp)
    83f42fee:	6a06                	ld	s4,64(sp)
    83f42ff0:	7ae2                	ld	s5,56(sp)
    83f42ff2:	7b42                	ld	s6,48(sp)
    83f42ff4:	7ba2                	ld	s7,40(sp)
    83f42ff6:	7c02                	ld	s8,32(sp)
    83f42ff8:	6ce2                	ld	s9,24(sp)
    83f42ffa:	6d42                	ld	s10,16(sp)
    83f42ffc:	6165                	addi	sp,sp,112
    83f42ffe:	8082                	ret
				dump_uart_disable();
    83f43000:	6de090ef          	jal	ra,83f4c6de <dump_uart_disable>
				break;
    83f43004:	b78d                	j	83f42f66 <prvCmdQuRunTask+0x94>
				dump_uart_enable();
    83f43006:	6c0090ef          	jal	ra,83f4c6c6 <dump_uart_enable>
				break;
    83f4300a:	bfb1                	j	83f42f66 <prvCmdQuRunTask+0x94>
				rtos_cmdq.param_ptr = (unsigned int) dump_uart_msg();
    83f4300c:	6ea090ef          	jal	ra,83f4c6f6 <dump_uart_msg>
    83f43010:	c62a                	sw	a0,12(sp)
				drv_spin_lock_irqsave(&mailbox_lock, flags);
    83f43012:	00010517          	auipc	a0,0x10
    83f43016:	1a650513          	addi	a0,a0,422 # 83f531b8 <mailbox_lock>
				rtos_cmdqu_t = (cmdqu_t *) mailbox_context;
    83f4301a:	0009bd03          	ld	s10,0(s3)
				drv_spin_lock_irqsave(&mailbox_lock, flags);
    83f4301e:	405090ef          	jal	ra,83f4cc22 <_hw_raw_spin_lock_irqsave>
				if (flags == MAILBOX_LOCK_FAILED) {
    83f43022:	57fd                	li	a5,-1
				drv_spin_lock_irqsave(&mailbox_lock, flags);
    83f43024:	85aa                	mv	a1,a0
				for (valid = 0; valid < MAILBOX_MAX_NUM; valid++) {
    83f43026:	4701                	li	a4,0
				if (flags == MAILBOX_LOCK_FAILED) {
    83f43028:	f8f519e3          	bne	a0,a5,83f42fba <prvCmdQuRunTask+0xe8>
					printf("[%s][%d] drv_spin_lock_irqsave failed! ip_id = %d , cmd_id = %d\n" , cmdq->ip_id , cmdq->cmd_id);
    83f4302c:	6622                	ld	a2,8(sp)
    83f4302e:	00814583          	lbu	a1,8(sp)
    83f43032:	0000e517          	auipc	a0,0xe
    83f43036:	e0650513          	addi	a0,a0,-506 # 83f50e38 <__func__.4+0x68>
    83f4303a:	8221                	srli	a2,a2,0x8
    83f4303c:	07f67613          	andi	a2,a2,127
    83f43040:	755080ef          	jal	ra,83f4bf94 <printf>
					break;
    83f43044:	b70d                	j	83f42f66 <prvCmdQuRunTask+0x94>
				if (rtos_cmdq.ip_id == IP_VI) {
    83f43046:	00814703          	lbu	a4,8(sp)
					stop_ip |= STOP_CMD_DONE_VI;
    83f4304a:	0001d817          	auipc	a6,0x1d
    83f4304e:	b7680813          	addi	a6,a6,-1162 # 83f5fbc0 <stop_ip.0>
				if (rtos_cmdq.ip_id == IP_VI) {
    83f43052:	468d                	li	a3,3
					stop_ip |= STOP_CMD_DONE_VI;
    83f43054:	00082783          	lw	a5,0(a6)
				if (rtos_cmdq.ip_id == IP_VI) {
    83f43058:	0ed70563          	beq	a4,a3,83f43142 <prvCmdQuRunTask+0x270>
				if (rtos_cmdq.ip_id == IP_VCODEC)
    83f4305c:	4685                	li	a3,1
    83f4305e:	00d71663          	bne	a4,a3,83f4306a <prvCmdQuRunTask+0x198>
					stop_ip |= STOP_CMD_DONE_VCODE;
    83f43062:	0047e793          	ori	a5,a5,4
    83f43066:	00f82023          	sw	a5,0(a6)
				if (stop_ip != STOP_CMD_DONE_ALL)
    83f4306a:	4719                	li	a4,6
    83f4306c:	eee79de3          	bne	a5,a4,83f42f66 <prvCmdQuRunTask+0x94>
					rtos_cmdq.ip_id = IP_SYSTEM;
    83f43070:	00f10423          	sb	a5,8(sp)
    83f43074:	b735                	j	83f42fa0 <prvCmdQuRunTask+0xce>
				rtos_cmdq.ip_id = IP_VI;
    83f43076:	00815783          	lhu	a5,8(sp)
    83f4307a:	7761                	lui	a4,0xffff8
				xQueueSend(gTaskCtx[E_QUEUE_VI].queHandle, &rtos_cmdq, 0U);
    83f4307c:	0d093503          	ld	a0,208(s2)
				rtos_cmdq.ip_id = IP_VI;
    83f43080:	8ff9                	and	a5,a5,a4
    83f43082:	303c0713          	addi	a4,s8,771
    83f43086:	8fd9                	or	a5,a5,a4
				xQueueSend(gTaskCtx[E_QUEUE_VI].queHandle, &rtos_cmdq, 0U);
    83f43088:	4681                	li	a3,0
    83f4308a:	4601                	li	a2,0
    83f4308c:	002c                	addi	a1,sp,8
				rtos_cmdq.ip_id = IP_VI;
    83f4308e:	00f11423          	sh	a5,8(sp)
				stop_ip = 0;
    83f43092:	0001d797          	auipc	a5,0x1d
    83f43096:	b207a723          	sw	zero,-1234(a5) # 83f5fbc0 <stop_ip.0>
				xQueueSend(gTaskCtx[E_QUEUE_VI].queHandle, &rtos_cmdq, 0U);
    83f4309a:	1ad0b0ef          	jal	ra,83f4ea46 <xQueueGenericSend>
				break;
    83f4309e:	b5e1                	j	83f42f66 <prvCmdQuRunTask+0x94>
				rtos_cmdq.cmd_id = SYS_CMD_INFO_RTOS_INIT_DONE;
    83f430a0:	00914783          	lbu	a5,9(sp)
				rtos_cmdq.param_ptr = &transfer_config;
    83f430a4:	c65e                	sw	s7,12(sp)
				rtos_cmdq.cmd_id = SYS_CMD_INFO_RTOS_INIT_DONE;
    83f430a6:	f807f793          	andi	a5,a5,-128
    83f430aa:	0527e793          	ori	a5,a5,82
    83f430ae:	00f104a3          	sb	a5,9(sp)
				goto send_label;
    83f430b2:	b5fd                	j	83f42fa0 <prvCmdQuRunTask+0xce>
					printf("SYS_CMD_INFO_DUMP_JPG idx = %d, set idx to 0\n", rtos_cmdq.param_ptr);
    83f430b4:	0000e517          	auipc	a0,0xe
    83f430b8:	d5450513          	addi	a0,a0,-684 # 83f50e08 <__func__.4+0x38>
    83f430bc:	6d9080ef          	jal	ra,83f4bf94 <printf>
				rtos_cmdq.param_ptr = 0x0;
    83f430c0:	c602                	sw	zero,12(sp)
			    goto send_label;
    83f430c2:	bdf9                	j	83f42fa0 <prvCmdQuRunTask+0xce>
						cmdq->resv.valid.rtos_valid = 1;
    83f430c4:	4785                	li	a5,1
    83f430c6:	00f105a3          	sb	a5,11(sp)
						*ptr = ((cmdq->ip_id << 0) | (cmdq->cmd_id << 8) | (cmdq->block << 15) |
    83f430ca:	66a2                	ld	a3,8(sp)
								(cmdq->resv.valid.linux_valid << 16) |
    83f430cc:	00a14603          	lbu	a2,10(sp)
						*ptr = ((cmdq->ip_id << 0) | (cmdq->cmd_id << 8) | (cmdq->block << 15) |
    83f430d0:	00814503          	lbu	a0,8(sp)
    83f430d4:	0086d793          	srli	a5,a3,0x8
    83f430d8:	07f7f793          	andi	a5,a5,127
								(cmdq->resv.valid.linux_valid << 16) |
    83f430dc:	0106161b          	slliw	a2,a2,0x10
						*ptr = ((cmdq->ip_id << 0) | (cmdq->cmd_id << 8) | (cmdq->block << 15) |
    83f430e0:	0087979b          	slliw	a5,a5,0x8
    83f430e4:	82bd                	srli	a3,a3,0xf
    83f430e6:	8fd1                	or	a5,a5,a2
    83f430e8:	8a85                	andi	a3,a3,1
    83f430ea:	8fc9                	or	a5,a5,a0
    83f430ec:	00f6969b          	slliw	a3,a3,0xf
    83f430f0:	8fd5                	or	a5,a5,a3
								(cmdq->resv.valid.linux_valid << 16) |
    83f430f2:	010006b7          	lui	a3,0x1000
    83f430f6:	8fd5                	or	a5,a5,a3
						*ptr = ((cmdq->ip_id << 0) | (cmdq->cmd_id << 8) | (cmdq->block << 15) |
    83f430f8:	00fd2023          	sw	a5,0(s10)
						rtos_cmdqu_t->param_ptr = cmdq->param_ptr;
    83f430fc:	46b2                	lw	a3,12(sp)
						mbox_reg->cpu_mbox_set[send_to_cpu].cpu_mbox_int_clr.mbox_int_clr = (1 << valid);
    83f430fe:	4785                	li	a5,1
    83f43100:	00e7973b          	sllw	a4,a5,a4
						rtos_cmdqu_t->param_ptr = cmdq->param_ptr;
    83f43104:	00dd2223          	sw	a3,4(s10)
						mbox_reg->cpu_mbox_set[send_to_cpu].cpu_mbox_int_clr.mbox_int_clr = (1 << valid);
    83f43108:	000b3683          	ld	a3,0(s6)
    83f4310c:	0ff77613          	andi	a2,a4,255
    83f43110:	002a1793          	slli	a5,s4,0x2
    83f43114:	01568533          	add	a0,a3,s5
    83f43118:	00c50023          	sb	a2,0(a0)
						mbox_reg->cpu_mbox_en[send_to_cpu].mbox_info |= (1 << valid);
    83f4311c:	97b6                	add	a5,a5,a3
    83f4311e:	0007c683          	lbu	a3,0(a5)
				drv_spin_unlock_irqrestore(&mailbox_lock, flags);
    83f43122:	00010517          	auipc	a0,0x10
    83f43126:	09650513          	addi	a0,a0,150 # 83f531b8 <mailbox_lock>
						mbox_reg->cpu_mbox_en[send_to_cpu].mbox_info |= (1 << valid);
    83f4312a:	8f55                	or	a4,a4,a3
    83f4312c:	0ff77713          	andi	a4,a4,255
    83f43130:	00e78023          	sb	a4,0(a5)
						mbox_reg->mbox_set.mbox_set = (1 << valid);
    83f43134:	000b3783          	ld	a5,0(s6)
    83f43138:	06c78023          	sb	a2,96(a5)
				drv_spin_unlock_irqrestore(&mailbox_lock, flags);
    83f4313c:	34d090ef          	jal	ra,83f4cc88 <_hw_raw_spin_unlock_irqrestore>
				if (valid >= MAILBOX_MAX_NUM) {
    83f43140:	b51d                	j	83f42f66 <prvCmdQuRunTask+0x94>
					rtos_cmdq.ip_id = IP_VCODEC;
    83f43142:	00815703          	lhu	a4,8(sp)
    83f43146:	76e1                	lui	a3,0xffff8
					xQueueSend(gTaskCtx[E_QUEUE_VCODEC].queHandle, &rtos_cmdq, 0U);
    83f43148:	08893503          	ld	a0,136(s2)
					rtos_cmdq.ip_id = IP_VCODEC;
    83f4314c:	8f75                	and	a4,a4,a3
					stop_ip |= STOP_CMD_DONE_VI;
    83f4314e:	0027e793          	ori	a5,a5,2
					rtos_cmdq.ip_id = IP_VCODEC;
    83f43152:	01976733          	or	a4,a4,s9
					xQueueSend(gTaskCtx[E_QUEUE_VCODEC].queHandle, &rtos_cmdq, 0U);
    83f43156:	4681                	li	a3,0
    83f43158:	4601                	li	a2,0
    83f4315a:	002c                	addi	a1,sp,8
					stop_ip |= STOP_CMD_DONE_VI;
    83f4315c:	00f82023          	sw	a5,0(a6)
					rtos_cmdq.ip_id = IP_VCODEC;
    83f43160:	00e11423          	sh	a4,8(sp)
					xQueueSend(gTaskCtx[E_QUEUE_VCODEC].queHandle, &rtos_cmdq, 0U);
    83f43164:	0e30b0ef          	jal	ra,83f4ea46 <xQueueGenericSend>
					break;
    83f43168:	bbfd                	j	83f42f66 <prvCmdQuRunTask+0x94>

0000000083f4316a <prvQueueISR>:

void prvQueueISR(void)
{
    83f4316a:	711d                	addi	sp,sp,-96
    83f4316c:	e862                	sd	s8,16(sp)
	unsigned char valid_val;
	int i;
	cmdqu_t *cmdq;
	BaseType_t YieldRequired = pdFALSE;

	set_val = mbox_reg->cpu_mbox_set[RECEIVE_CPU].cpu_mbox_int_int.mbox_int;
    83f4316e:	0001dc17          	auipc	s8,0x1d
    83f43172:	a4ac0c13          	addi	s8,s8,-1462 # 83f5fbb8 <mbox_reg>
    83f43176:	000c3783          	ld	a5,0(s8)
{
    83f4317a:	ec86                	sd	ra,88(sp)
    83f4317c:	e8a2                	sd	s0,80(sp)
    83f4317e:	e4a6                	sd	s1,72(sp)
    83f43180:	e0ca                	sd	s2,64(sp)
    83f43182:	fc4e                	sd	s3,56(sp)
    83f43184:	f852                	sd	s4,48(sp)
    83f43186:	f456                	sd	s5,40(sp)
    83f43188:	f05a                	sd	s6,32(sp)
    83f4318a:	ec5e                	sd	s7,24(sp)
	set_val = mbox_reg->cpu_mbox_set[RECEIVE_CPU].cpu_mbox_int_int.mbox_int;
    83f4318c:	0387c403          	lbu	s0,56(a5)
	BaseType_t YieldRequired = pdFALSE;
    83f43190:	e002                	sd	zero,0(sp)
	set_val = mbox_reg->cpu_mbox_set[RECEIVE_CPU].cpu_mbox_int_int.mbox_int;
    83f43192:	0ff47413          	andi	s0,s0,255
	/* Now, we do not implement info back feature */
	// done_val = mbox_done_reg->cpu_mbox_done[RECEIVE_CPU].cpu_mbox_int_int.mbox_int;

	if (set_val) {
    83f43196:	c455                	beqz	s0,83f43242 <prvQueueISR+0xd8>
		for(i = 0; i < MAILBOX_MAX_NUM; i++) {
			valid_val = set_val  & (1 << i);
    83f43198:	0184141b          	slliw	s0,s0,0x18
    83f4319c:	4184541b          	sraiw	s0,s0,0x18
    83f431a0:	4b81                	li	s7,0
    83f431a2:	4485                	li	s1,1

			if (valid_val) {
				cmdqu_t rtos_cmdq;
				cmdq = (cmdqu_t *)(mailbox_context) + i;
    83f431a4:	0001d997          	auipc	s3,0x1d
    83f431a8:	a0498993          	addi	s3,s3,-1532 # 83f5fba8 <mailbox_context>
				*((unsigned long *) &rtos_cmdq) = *((unsigned long *)cmdq);
				/* need to clear mailbox interrupt before clear mailbox buffer */
				*((unsigned long*) cmdq) = 0;

				/* mailbox buffer context is send from linux*/
				if (rtos_cmdq.resv.valid.linux_valid == 1) {
    83f431ac:	4905                	li	s2,1
						printf("unknown ip_id =%d cmd_id=%d\n", rtos_cmdq.ip_id, rtos_cmdq.cmd_id);
						break;
					}
					portYIELD_FROM_ISR(YieldRequired);
				} else
					printf("rtos cmdq is not valid %d, ip=%d , cmd=%d\n",
    83f431ae:	0000ea97          	auipc	s5,0xe
    83f431b2:	d42a8a93          	addi	s5,s5,-702 # 83f50ef0 <__func__.4+0x120>
    83f431b6:	0000ea17          	auipc	s4,0xe
    83f431ba:	d66a0a13          	addi	s4,s4,-666 # 83f50f1c <__func__.4+0x14c>
						xQueueSendFromISR(gTaskCtx[E_QUEUE_CAMERA].queHandle, &rtos_cmdq, &YieldRequired);
    83f431be:	00010b17          	auipc	s6,0x10
    83f431c2:	d0ab0b13          	addi	s6,s6,-758 # 83f52ec8 <gTaskCtx>
			valid_val = set_val  & (1 << i);
    83f431c6:	017497bb          	sllw	a5,s1,s7
    83f431ca:	8fe1                	and	a5,a5,s0
    83f431cc:	0ff7f693          	andi	a3,a5,255
    83f431d0:	0187979b          	slliw	a5,a5,0x18
    83f431d4:	4187d79b          	sraiw	a5,a5,0x18
			if (valid_val) {
    83f431d8:	c2ad                	beqz	a3,83f4323a <prvQueueISR+0xd0>
				mbox_reg->cpu_mbox_set[RECEIVE_CPU].cpu_mbox_int_clr.mbox_int_clr = valid_val;
    83f431da:	000c3603          	ld	a2,0(s8)
				cmdq = (cmdqu_t *)(mailbox_context) + i;
    83f431de:	0009b703          	ld	a4,0(s3)
				mbox_reg->cpu_mbox_en[RECEIVE_CPU].mbox_info &= ~valid_val;
    83f431e2:	fff7c793          	not	a5,a5
				mbox_reg->cpu_mbox_set[RECEIVE_CPU].cpu_mbox_int_clr.mbox_int_clr = valid_val;
    83f431e6:	02d60823          	sb	a3,48(a2)
				mbox_reg->cpu_mbox_en[RECEIVE_CPU].mbox_info &= ~valid_val;
    83f431ea:	00864683          	lbu	a3,8(a2)
				cmdq = (cmdqu_t *)(mailbox_context) + i;
    83f431ee:	003b9593          	slli	a1,s7,0x3
    83f431f2:	972e                	add	a4,a4,a1
				mbox_reg->cpu_mbox_en[RECEIVE_CPU].mbox_info &= ~valid_val;
    83f431f4:	0ff6f693          	andi	a3,a3,255
    83f431f8:	8ff5                	and	a5,a5,a3
    83f431fa:	00f60423          	sb	a5,8(a2)
				*((unsigned long *) &rtos_cmdq) = *((unsigned long *)cmdq);
    83f431fe:	631c                	ld	a5,0(a4)
    83f43200:	e43e                	sd	a5,8(sp)
				*((unsigned long*) cmdq) = 0;
    83f43202:	00073023          	sd	zero,0(a4) # ffffffffffff8000 <_end+0xffffffff7bff82c0>
				if (rtos_cmdq.resv.valid.linux_valid == 1) {
    83f43206:	00a14783          	lbu	a5,10(sp)
    83f4320a:	01279d63          	bne	a5,s2,83f43224 <prvQueueISR+0xba>
					switch (rtos_cmdq.ip_id) {
    83f4320e:	00814583          	lbu	a1,8(sp)
    83f43212:	479d                	li	a5,7
    83f43214:	0cb7e363          	bltu	a5,a1,83f432da <prvQueueISR+0x170>
    83f43218:	00259793          	slli	a5,a1,0x2
    83f4321c:	97d2                	add	a5,a5,s4
    83f4321e:	439c                	lw	a5,0(a5)
    83f43220:	97d2                	add	a5,a5,s4
    83f43222:	8782                	jr	a5
						rtos_cmdq.resv.valid.rtos_valid, rtos_cmdq.ip_id, rtos_cmdq.cmd_id);
    83f43224:	66a2                	ld	a3,8(sp)
					printf("rtos cmdq is not valid %d, ip=%d , cmd=%d\n",
    83f43226:	00814603          	lbu	a2,8(sp)
    83f4322a:	00b14583          	lbu	a1,11(sp)
						rtos_cmdq.resv.valid.rtos_valid, rtos_cmdq.ip_id, rtos_cmdq.cmd_id);
    83f4322e:	82a1                	srli	a3,a3,0x8
					printf("rtos cmdq is not valid %d, ip=%d , cmd=%d\n",
    83f43230:	07f6f693          	andi	a3,a3,127
    83f43234:	8556                	mv	a0,s5
    83f43236:	55f080ef          	jal	ra,83f4bf94 <printf>
		for(i = 0; i < MAILBOX_MAX_NUM; i++) {
    83f4323a:	0b85                	addi	s7,s7,1
    83f4323c:	47a1                	li	a5,8
    83f4323e:	f8fb94e3          	bne	s7,a5,83f431c6 <prvQueueISR+0x5c>
			}
		}
	}
}
    83f43242:	60e6                	ld	ra,88(sp)
    83f43244:	6446                	ld	s0,80(sp)
    83f43246:	64a6                	ld	s1,72(sp)
    83f43248:	6906                	ld	s2,64(sp)
    83f4324a:	79e2                	ld	s3,56(sp)
    83f4324c:	7a42                	ld	s4,48(sp)
    83f4324e:	7aa2                	ld	s5,40(sp)
    83f43250:	7b02                	ld	s6,32(sp)
    83f43252:	6be2                	ld	s7,24(sp)
    83f43254:	6c42                	ld	s8,16(sp)
    83f43256:	6125                	addi	sp,sp,96
    83f43258:	8082                	ret
						xQueueSendFromISR(gTaskCtx[E_QUEUE_CAMERA].queHandle, &rtos_cmdq, &YieldRequired);
    83f4325a:	118b3503          	ld	a0,280(s6)
    83f4325e:	4681                	li	a3,0
    83f43260:	860a                	mv	a2,sp
    83f43262:	002c                	addi	a1,sp,8
    83f43264:	1030b0ef          	jal	ra,83f4eb66 <xQueueGenericSendFromISR>
					portYIELD_FROM_ISR(YieldRequired);
    83f43268:	6782                	ld	a5,0(sp)
    83f4326a:	dbe1                	beqz	a5,83f4323a <prvQueueISR+0xd0>
    83f4326c:	2100c0ef          	jal	ra,83f4f47c <vTaskSwitchContext>
		for(i = 0; i < MAILBOX_MAX_NUM; i++) {
    83f43270:	0b85                	addi	s7,s7,1
    83f43272:	47a1                	li	a5,8
    83f43274:	f4fb99e3          	bne	s7,a5,83f431c6 <prvQueueISR+0x5c>
    83f43278:	b7e9                	j	83f43242 <prvQueueISR+0xd8>
						xQueueSendFromISR(gTaskCtx[E_QUEUE_ISP].queHandle, &rtos_cmdq, &YieldRequired);
    83f4327a:	040b3503          	ld	a0,64(s6)
    83f4327e:	4681                	li	a3,0
    83f43280:	860a                	mv	a2,sp
    83f43282:	002c                	addi	a1,sp,8
    83f43284:	0e30b0ef          	jal	ra,83f4eb66 <xQueueGenericSendFromISR>
						break;
    83f43288:	b7c5                	j	83f43268 <prvQueueISR+0xfe>
						xQueueSendFromISR(gTaskCtx[E_QUEUE_VCODEC].queHandle, &rtos_cmdq, &YieldRequired);
    83f4328a:	088b3503          	ld	a0,136(s6)
    83f4328e:	4681                	li	a3,0
    83f43290:	860a                	mv	a2,sp
    83f43292:	002c                	addi	a1,sp,8
    83f43294:	0d30b0ef          	jal	ra,83f4eb66 <xQueueGenericSendFromISR>
						break;
    83f43298:	bfc1                	j	83f43268 <prvQueueISR+0xfe>
						xQueueSendFromISR(gTaskCtx[E_QUEUE_VI].queHandle, &rtos_cmdq, &YieldRequired);
    83f4329a:	0d0b3503          	ld	a0,208(s6)
    83f4329e:	4681                	li	a3,0
    83f432a0:	860a                	mv	a2,sp
    83f432a2:	002c                	addi	a1,sp,8
    83f432a4:	0c30b0ef          	jal	ra,83f4eb66 <xQueueGenericSendFromISR>
						break;
    83f432a8:	b7c1                	j	83f43268 <prvQueueISR+0xfe>
						xQueueSendFromISR(gTaskCtx[E_QUEUE_RGN].queHandle, &rtos_cmdq, &YieldRequired);
    83f432aa:	160b3503          	ld	a0,352(s6)
    83f432ae:	4681                	li	a3,0
    83f432b0:	860a                	mv	a2,sp
    83f432b2:	002c                	addi	a1,sp,8
    83f432b4:	0b30b0ef          	jal	ra,83f4eb66 <xQueueGenericSendFromISR>
						break;
    83f432b8:	bf45                	j	83f43268 <prvQueueISR+0xfe>
						xQueueSendFromISR(gTaskCtx[E_QUEUE_AUDIO].queHandle, &rtos_cmdq, &YieldRequired);
    83f432ba:	1f0b3503          	ld	a0,496(s6)
    83f432be:	4681                	li	a3,0
    83f432c0:	860a                	mv	a2,sp
    83f432c2:	002c                	addi	a1,sp,8
    83f432c4:	0a30b0ef          	jal	ra,83f4eb66 <xQueueGenericSendFromISR>
						break;
    83f432c8:	b745                	j	83f43268 <prvQueueISR+0xfe>
						xQueueSendFromISR(gTaskCtx[E_QUEUE_CMDQU].queHandle, &rtos_cmdq, &YieldRequired);
    83f432ca:	1a8b3503          	ld	a0,424(s6)
    83f432ce:	4681                	li	a3,0
    83f432d0:	860a                	mv	a2,sp
    83f432d2:	002c                	addi	a1,sp,8
    83f432d4:	0930b0ef          	jal	ra,83f4eb66 <xQueueGenericSendFromISR>
						break;
    83f432d8:	bf41                	j	83f43268 <prvQueueISR+0xfe>
						printf("unknown ip_id =%d cmd_id=%d\n", rtos_cmdq.ip_id, rtos_cmdq.cmd_id);
    83f432da:	6622                	ld	a2,8(sp)
    83f432dc:	0000e517          	auipc	a0,0xe
    83f432e0:	bf450513          	addi	a0,a0,-1036 # 83f50ed0 <__func__.4+0x100>
    83f432e4:	8221                	srli	a2,a2,0x8
    83f432e6:	07f67613          	andi	a2,a2,127
    83f432ea:	4ab080ef          	jal	ra,83f4bf94 <printf>
						break;
    83f432ee:	bfad                	j	83f43268 <prvQueueISR+0xfe>

0000000083f432f0 <main_GetMODHandle>:
	if (handle_idx >= E_QUEUE_MAX)
    83f432f0:	4799                	li	a5,6
    83f432f2:	00a7ef63          	bltu	a5,a0,83f43310 <main_GetMODHandle+0x20>
	return gTaskCtx[handle_idx].queHandle;
    83f432f6:	1502                	slli	a0,a0,0x20
    83f432f8:	9101                	srli	a0,a0,0x20
    83f432fa:	00351793          	slli	a5,a0,0x3
    83f432fe:	953e                	add	a0,a0,a5
    83f43300:	050e                	slli	a0,a0,0x3
    83f43302:	00010797          	auipc	a5,0x10
    83f43306:	bc678793          	addi	a5,a5,-1082 # 83f52ec8 <gTaskCtx>
    83f4330a:	953e                	add	a0,a0,a5
    83f4330c:	6128                	ld	a0,64(a0)
    83f4330e:	8082                	ret
		return NULL;
    83f43310:	4501                	li	a0,0
}
    83f43312:	8082                	ret

0000000083f43314 <main_create_tasks>:
{
    83f43314:	1101                	addi	sp,sp,-32
    83f43316:	e822                	sd	s0,16(sp)
    83f43318:	e426                	sd	s1,8(sp)
    83f4331a:	ec06                	sd	ra,24(sp)
    83f4331c:	00010417          	auipc	s0,0x10
    83f43320:	bac40413          	addi	s0,s0,-1108 # 83f52ec8 <gTaskCtx>
    83f43324:	00010497          	auipc	s1,0x10
    83f43328:	d9c48493          	addi	s1,s1,-612 # 83f530c0 <nb_notch_coef.1>
		TASK_INIT(i);
    83f4332c:	03844503          	lbu	a0,56(s0)
    83f43330:	4601                	li	a2,0
    83f43332:	45a1                	li	a1,8
    83f43334:	6a60b0ef          	jal	ra,83f4e9da <xQueueGenericCreate>
    83f43338:	e028                	sd	a0,64(s0)
    83f4333a:	c919                	beqz	a0,83f43350 <main_create_tasks+0x3c>
    83f4333c:	7808                	ld	a0,48(s0)
    83f4333e:	85a2                	mv	a1,s0
    83f43340:	4781                	li	a5,0
    83f43342:	4681                	li	a3,0
    83f43344:	c511                	beqz	a0,83f43350 <main_create_tasks+0x3c>
    83f43346:	7418                	ld	a4,40(s0)
    83f43348:	02045603          	lhu	a2,32(s0)
    83f4334c:	56e0c0ef          	jal	ra,83f4f8ba <xTaskCreate>
	for (; i < ARRAY_SIZE(gTaskCtx); i++) {
    83f43350:	04840413          	addi	s0,s0,72
    83f43354:	fc941ce3          	bne	s0,s1,83f4332c <main_create_tasks+0x18>
}
    83f43358:	60e2                	ld	ra,24(sp)
    83f4335a:	6442                	ld	s0,16(sp)
    83f4335c:	64a2                	ld	s1,8(sp)
    83f4335e:	6105                	addi	sp,sp,32
    83f43360:	8082                	ret

0000000083f43362 <main_cvirtos>:
{
    83f43362:	1141                	addi	sp,sp,-16
	printf("create cvi task\n");
    83f43364:	0000e517          	auipc	a0,0xe
    83f43368:	bdc50513          	addi	a0,a0,-1060 # 83f50f40 <__func__.4+0x170>
{
    83f4336c:	e406                	sd	ra,8(sp)
	printf("create cvi task\n");
    83f4336e:	427080ef          	jal	ra,83f4bf94 <printf>
	request_irq(MBOX_INT_C906_2ND, prvQueueISR, 0, "mailbox", (void *)0);
    83f43372:	4701                	li	a4,0
    83f43374:	0000e697          	auipc	a3,0xe
    83f43378:	be468693          	addi	a3,a3,-1052 # 83f50f58 <__func__.4+0x188>
    83f4337c:	4601                	li	a2,0
    83f4337e:	00000597          	auipc	a1,0x0
    83f43382:	dec58593          	addi	a1,a1,-532 # 83f4316a <prvQueueISR>
    83f43386:	03d00513          	li	a0,61
    83f4338a:	12a090ef          	jal	ra,83f4c4b4 <request_irq>
	main_create_tasks();
    83f4338e:	f87ff0ef          	jal	ra,83f43314 <main_create_tasks>
	vTaskStartScheduler();
    83f43392:	5a40c0ef          	jal	ra,83f4f936 <vTaskStartScheduler>
    for (;;)
    83f43396:	a001                	j	83f43396 <main_cvirtos+0x34>

0000000083f43398 <prvRGNRunTask>:
#else
#define rgn_printf(...)
#endif

void prvRGNRunTask(void *pvParameters)
{
    83f43398:	7131                	addi	sp,sp,-192
	OSDC_Canvas_Attr_S canvas;
	OSDC_DRAW_OBJ_S *obj_vec = NULL;
	RGN_LINE_ATTR_S *line_attr = NULL;

	rgn_printf("%s run\n", __func__);
	xQueueRGN = main_GetMODHandle(E_QUEUE_RGN);
    83f4339a:	4511                	li	a0,4
{
    83f4339c:	fd06                	sd	ra,184(sp)
    83f4339e:	fcde                	sd	s7,120(sp)
    83f433a0:	f8e2                	sd	s8,112(sp)
    83f433a2:	f4e6                	sd	s9,104(sp)
    83f433a4:	f922                	sd	s0,176(sp)
    83f433a6:	f526                	sd	s1,168(sp)
    83f433a8:	f14a                	sd	s2,160(sp)
    83f433aa:	ed4e                	sd	s3,152(sp)
    83f433ac:	e952                	sd	s4,144(sp)
    83f433ae:	e556                	sd	s5,136(sp)
    83f433b0:	e15a                	sd	s6,128(sp)
    83f433b2:	f0ea                	sd	s10,96(sp)
    83f433b4:	ecee                	sd	s11,88(sp)
	xQueueRGN = main_GetMODHandle(E_QUEUE_RGN);
    83f433b6:	f3bff0ef          	jal	ra,83f432f0 <main_GetMODHandle>
    83f433ba:	87aa                	mv	a5,a0
    83f433bc:	0001dc97          	auipc	s9,0x1d
    83f433c0:	80cc8c93          	addi	s9,s9,-2036 # 83f5fbc8 <xQueueRGN>
	xQueueRGNCmdqu = main_GetMODHandle(E_QUEUE_CMDQU);
    83f433c4:	4515                	li	a0,5
	xQueueRGN = main_GetMODHandle(E_QUEUE_RGN);
    83f433c6:	00fcb023          	sd	a5,0(s9)
	xQueueRGNCmdqu = main_GetMODHandle(E_QUEUE_CMDQU);
    83f433ca:	f27ff0ef          	jal	ra,83f432f0 <main_GetMODHandle>
    83f433ce:	0001d797          	auipc	a5,0x1d
    83f433d2:	80278793          	addi	a5,a5,-2046 # 83f5fbd0 <xQueueRGNCmdqu>
		}
		vPortFree(line_attr);
		vPortFree(obj_vec);

WRONG_CMD_IP_ID:
		rtos_cmdq.ip_id  = -1;
    83f433d6:	6c21                	lui	s8,0x8
	xQueueRGNCmdqu = main_GetMODHandle(E_QUEUE_CMDQU);
    83f433d8:	e388                	sd	a0,0(a5)
		rtos_cmdq.ip_id  = -1;
    83f433da:	fffc0793          	addi	a5,s8,-1 # 7fff <_EL1_STACK_SIZE+0x77ff>
		if (rtos_cmdq.ip_id != IP_RGN) {
    83f433de:	4b91                	li	s7,4
		rtos_cmdq.ip_id  = -1;
    83f433e0:	ec3e                	sd	a5,24(sp)
    83f433e2:	a025                	j	83f4340a <prvRGNRunTask+0x72>
			xQueueSend(xQueueRGNCmdqu, &rtos_cmdq, 0U);
    83f433e4:	0001c797          	auipc	a5,0x1c
    83f433e8:	7ec78793          	addi	a5,a5,2028 # 83f5fbd0 <xQueueRGNCmdqu>
    83f433ec:	6388                	ld	a0,0(a5)
    83f433ee:	4681                	li	a3,0
    83f433f0:	4601                	li	a2,0
    83f433f2:	182c                	addi	a1,sp,56
    83f433f4:	6520b0ef          	jal	ra,83f4ea46 <xQueueGenericSend>
		rtos_cmdq.ip_id  = -1;
    83f433f8:	03815783          	lhu	a5,56(sp)
    83f433fc:	7761                	lui	a4,0xffff8
		rtos_cmdq.cmd_id = -1;
		rtos_cmdq.param_ptr = 0;
    83f433fe:	de02                	sw	zero,60(sp)
		rtos_cmdq.ip_id  = -1;
    83f43400:	8ff9                	and	a5,a5,a4
    83f43402:	6762                	ld	a4,24(sp)
    83f43404:	8fd9                	or	a5,a5,a4
    83f43406:	02f11c23          	sh	a5,56(sp)
		xQueueReceive(xQueueRGN, &rtos_cmdq, portMAX_DELAY);
    83f4340a:	000cb503          	ld	a0,0(s9)
    83f4340e:	567d                	li	a2,-1
    83f43410:	182c                	addi	a1,sp,56
    83f43412:	0350b0ef          	jal	ra,83f4ec46 <xQueueReceive>
		if (rtos_cmdq.ip_id != IP_RGN) {
    83f43416:	03814783          	lbu	a5,56(sp)
    83f4341a:	fd7795e3          	bne	a5,s7,83f433e4 <prvRGNRunTask+0x4c>
		canvas_cmpr_attr = (RGN_CANVAS_CMPR_ATTR_S *)rtos_cmdq.param_ptr;
    83f4341e:	03c16a83          	lwu	s5,60(sp)
		canvas.width = canvas_cmpr_attr->u32Width;
    83f43422:	000aa703          	lw	a4,0(s5)
		obj_num = canvas_cmpr_attr->u32ObjNum;
    83f43426:	014aa683          	lw	a3,20(s5)
		canvas.height = canvas_cmpr_attr->u32Height;
    83f4342a:	004aa783          	lw	a5,4(s5)
		canvas.width = canvas_cmpr_attr->u32Width;
    83f4342e:	c0ba                	sw	a4,64(sp)
		obj_num = canvas_cmpr_attr->u32ObjNum;
    83f43430:	f036                	sd	a3,32(sp)
		canvas.height = canvas_cmpr_attr->u32Height;
    83f43432:	c2be                	sw	a5,68(sp)
		obj_num = canvas_cmpr_attr->u32ObjNum;
    83f43434:	0ff6fb13          	andi	s6,a3,255
		obj_vec = (OSDC_DRAW_OBJ_S *)pvPortMalloc((obj_num ? obj_num : 1) * sizeof(OSDC_DRAW_OBJ_S));
    83f43438:	020b0563          	beqz	s6,83f43462 <prvRGNRunTask+0xca>
    83f4343c:	006b1513          	slli	a0,s6,0x6
    83f43440:	1440b0ef          	jal	ra,83f4e584 <pvPortMalloc>
    83f43444:	8a2a                	mv	s4,a0
		if (obj_vec == NULL) {
    83f43446:	d94d                	beqz	a0,83f433f8 <prvRGNRunTask+0x60>
		line_attr = (RGN_LINE_ATTR_S *)pvPortMalloc((obj_num ? obj_num : 1) * sizeof(RGN_LINE_ATTR_S));
    83f43448:	001b1513          	slli	a0,s6,0x1
    83f4344c:	955a                	add	a0,a0,s6
    83f4344e:	050e                	slli	a0,a0,0x3
    83f43450:	1340b0ef          	jal	ra,83f4e584 <pvPortMalloc>
    83f43454:	842a                	mv	s0,a0
		if (line_attr == NULL) {
    83f43456:	22051b63          	bnez	a0,83f4368c <prvRGNRunTask+0x2f4>
		vPortFree(obj_vec);
    83f4345a:	8552                	mv	a0,s4
    83f4345c:	28e0b0ef          	jal	ra,83f4e6ea <vPortFree>
    83f43460:	bf61                	j	83f433f8 <prvRGNRunTask+0x60>
		obj_vec = (OSDC_DRAW_OBJ_S *)pvPortMalloc((obj_num ? obj_num : 1) * sizeof(OSDC_DRAW_OBJ_S));
    83f43462:	04000513          	li	a0,64
    83f43466:	11e0b0ef          	jal	ra,83f4e584 <pvPortMalloc>
    83f4346a:	8a2a                	mv	s4,a0
		if (obj_vec == NULL) {
    83f4346c:	d551                	beqz	a0,83f433f8 <prvRGNRunTask+0x60>
		line_attr = (RGN_LINE_ATTR_S *)pvPortMalloc((obj_num ? obj_num : 1) * sizeof(RGN_LINE_ATTR_S));
    83f4346e:	4561                	li	a0,24
    83f43470:	1140b0ef          	jal	ra,83f4e584 <pvPortMalloc>
    83f43474:	842a                	mv	s0,a0
		if (line_attr == NULL) {
    83f43476:	d175                	beqz	a0,83f4345a <prvRGNRunTask+0xc2>
		obj_attr = (RGN_CMPR_OBJ_ATTR_S *)((CVI_U8 *)rtos_cmdq.param_ptr + sizeof(RGN_CANVAS_CMPR_ATTR_S));
    83f43478:	03c16783          	lwu	a5,60(sp)
    83f4347c:	4481                	li	s1,0
    83f4347e:	07e1                	addi	a5,a5,24
    83f43480:	f43e                	sd	a5,40(sp)
			for (i = 0; i < line_num; ++i) {
    83f43482:	4995                	li	s3,5
					if (i < line_num - 1) {
    83f43484:	fff4891b          	addiw	s2,s1,-1
			for (i = 0; i < line_num; ++i) {
    83f43488:	01840d13          	addi	s10,s0,24
    83f4348c:	4d81                	li	s11,0
    83f4348e:	ec85                	bnez	s1,83f434c6 <prvRGNRunTask+0x12e>
    83f43490:	a059                	j	83f43516 <prvRGNRunTask+0x17e>
								= line_attr[i].stPointStart.s32Y;
    83f43492:	fecd2503          	lw	a0,-20(s10)
					if (i < line_num - 1) {
    83f43496:	000d859b          	sext.w	a1,s11
				if (delta_x < line_attr[i].u32Thick) {
    83f4349a:	000c071b          	sext.w	a4,s8
								= line_attr[i].stPointStart.s32Y;
    83f4349e:	fead2a23          	sw	a0,-12(s10)
					if (i < line_num - 1) {
    83f434a2:	1325d163          	bge	a1,s2,83f435c4 <prvRGNRunTask+0x22c>
						line_attr[i + 1].stPointStart.s32Y = line_attr[i].stPointEnd.s32Y
    83f434a6:	00ad2223          	sw	a0,4(s10)
				if (delta_x < line_attr[i].u32Thick) {
    83f434aa:	00c77863          	bgeu	a4,a2,83f434ba <prvRGNRunTask+0x122>
								= line_attr[i].stPointStart.s32X;
    83f434ae:	fe8d2703          	lw	a4,-24(s10)
    83f434b2:	feed2823          	sw	a4,-16(s10)
						line_attr[i + 1].stPointStart.s32X = line_attr[i].stPointEnd.s32X
    83f434b6:	00ed2023          	sw	a4,0(s10)
			for (i = 0; i < line_num; ++i) {
    83f434ba:	0d85                	addi	s11,s11,1
    83f434bc:	000d871b          	sext.w	a4,s11
    83f434c0:	0d61                	addi	s10,s10,24
    83f434c2:	04975a63          	bge	a4,s1,83f43516 <prvRGNRunTask+0x17e>
				delta_x = abs(line_attr[i].stPointStart.s32X - line_attr[i].stPointEnd.s32X);
    83f434c6:	ff0d2703          	lw	a4,-16(s10)
    83f434ca:	fe8d2503          	lw	a0,-24(s10)
    83f434ce:	9d19                	subw	a0,a0,a4
    83f434d0:	837ff0ef          	jal	ra,83f42d06 <abs>
				delta_y = abs(line_attr[i].stPointStart.s32Y - line_attr[i].stPointEnd.s32Y);
    83f434d4:	ff4d2603          	lw	a2,-12(s10)
    83f434d8:	fecd2583          	lw	a1,-20(s10)
				delta_x = abs(line_attr[i].stPointStart.s32X - line_attr[i].stPointEnd.s32X);
    83f434dc:	8c2a                	mv	s8,a0
				delta_y = abs(line_attr[i].stPointStart.s32Y - line_attr[i].stPointEnd.s32Y);
    83f434de:	40c5853b          	subw	a0,a1,a2
    83f434e2:	825ff0ef          	jal	ra,83f42d06 <abs>
				if (delta_y < line_attr[i].u32Thick) {
    83f434e6:	ff8d2603          	lw	a2,-8(s10)
    83f434ea:	2501                	sext.w	a0,a0
    83f434ec:	fac563e3          	bltu	a0,a2,83f43492 <prvRGNRunTask+0xfa>
				if (delta_x < line_attr[i].u32Thick) {
    83f434f0:	000c071b          	sext.w	a4,s8
    83f434f4:	fcc773e3          	bgeu	a4,a2,83f434ba <prvRGNRunTask+0x122>
					if (i < line_num - 1) {
    83f434f8:	000d871b          	sext.w	a4,s11
    83f434fc:	fb2749e3          	blt	a4,s2,83f434ae <prvRGNRunTask+0x116>
								= line_attr[i].stPointStart.s32X;
    83f43500:	fe8d2703          	lw	a4,-24(s10)
			for (i = 0; i < line_num; ++i) {
    83f43504:	0d85                	addi	s11,s11,1
    83f43506:	0d61                	addi	s10,s10,24
								= line_attr[i].stPointStart.s32X;
    83f43508:	fced2c23          	sw	a4,-40(s10)
						line_attr[0].stPointStart.s32X = line_attr[i].stPointEnd.s32X
    83f4350c:	c018                	sw	a4,0(s0)
			for (i = 0; i < line_num; ++i) {
    83f4350e:	000d871b          	sext.w	a4,s11
    83f43512:	fa974ae3          	blt	a4,s1,83f434c6 <prvRGNRunTask+0x12e>
			delta_x = abs(line_attr[0].stPointStart.s32X - line_attr[0].stPointEnd.s32X);
    83f43516:	441c                	lw	a5,8(s0)
    83f43518:	4008                	lw	a0,0(s0)
    83f4351a:	9d1d                	subw	a0,a0,a5
    83f4351c:	feaff0ef          	jal	ra,83f42d06 <abs>
			delta_y = abs(line_attr[0].stPointStart.s32Y - line_attr[0].stPointEnd.s32Y);
    83f43520:	4054                	lw	a3,4(s0)
    83f43522:	4458                	lw	a4,12(s0)
			delta_x = abs(line_attr[0].stPointStart.s32X - line_attr[0].stPointEnd.s32X);
    83f43524:	8d2a                	mv	s10,a0
			delta_y = abs(line_attr[0].stPointStart.s32Y - line_attr[0].stPointEnd.s32Y);
    83f43526:	40e6853b          	subw	a0,a3,a4
    83f4352a:	fdcff0ef          	jal	ra,83f42d06 <abs>
			if ((delta_x > line_attr[0].u32Thick || delta_x == 0) &&
    83f4352e:	4818                	lw	a4,16(s0)
    83f43530:	000d069b          	sext.w	a3,s10
    83f43534:	00d76463          	bltu	a4,a3,83f4353c <prvRGNRunTask+0x1a4>
    83f43538:	000d1763          	bnez	s10,83f43546 <prvRGNRunTask+0x1ae>
    83f4353c:	0005079b          	sext.w	a5,a0
    83f43540:	00f76663          	bltu	a4,a5,83f4354c <prvRGNRunTask+0x1b4>
					(delta_y > line_attr[0].u32Thick || delta_y == 0))
    83f43544:	c501                	beqz	a0,83f4354c <prvRGNRunTask+0x1b4>
		while (j++ < 5) {
    83f43546:	39fd                	addiw	s3,s3,-1
    83f43548:	f40990e3          	bnez	s3,83f43488 <prvRGNRunTask+0xf0>
		if (obj_num) {
    83f4354c:	0a0b1e63          	bnez	s6,83f43608 <prvRGNRunTask+0x270>
		switch (canvas_cmpr_attr->enPixelFormat) {
    83f43550:	00caa783          	lw	a5,12(s5)
    83f43554:	4719                	li	a4,6
    83f43556:	1ae78863          	beq	a5,a4,83f43706 <prvRGNRunTask+0x36e>
    83f4355a:	03000713          	li	a4,48
    83f4355e:	1ae78163          	beq	a5,a4,83f43700 <prvRGNRunTask+0x368>
    83f43562:	4715                	li	a4,5
    83f43564:	18e78c63          	beq	a5,a4,83f436fc <prvRGNRunTask+0x364>
			canvas.format = OSD_ARGB1555;
    83f43568:	4795                	li	a5,5
    83f4356a:	c4be                	sw	a5,72(sp)
		switch (rtos_cmdq.cmd_id) {
    83f4356c:	77e2                	ld	a5,56(sp)
    83f4356e:	83a1                	srli	a5,a5,0x8
    83f43570:	07f7f793          	andi	a5,a5,127
    83f43574:	cfb1                	beqz	a5,83f435d0 <prvRGNRunTask+0x238>
    83f43576:	4705                	li	a4,1
    83f43578:	04e79263          	bne	a5,a4,83f435bc <prvRGNRunTask+0x224>
			bs_size = CVI_OSDC_EstCmprCanvasSize(&canvas, &obj_vec[0], obj_num);
    83f4357c:	02014603          	lbu	a2,32(sp)
			pvAddr = (void *)rtos_cmdq.param_ptr;
    83f43580:	54f2                	lw	s1,60(sp)
			bs_size = CVI_OSDC_EstCmprCanvasSize(&canvas, &obj_vec[0], obj_num);
    83f43582:	85d2                	mv	a1,s4
    83f43584:	0088                	addi	a0,sp,64
    83f43586:	76e090ef          	jal	ra,83f4ccf4 <CVI_OSDC_EstCmprCanvasSize>
    83f4358a:	0005079b          	sext.w	a5,a0
			flush_dcache_range((uintptr_t)pvAddr, ALIGN(sizeof(RGN_CANVAS_CMPR_ATTR_S), 64));
    83f4358e:	02049513          	slli	a0,s1,0x20
			canvas_cmpr_attr->u32BsSize = bs_size;
    83f43592:	00faa823          	sw	a5,16(s5)
			flush_dcache_range((uintptr_t)pvAddr, ALIGN(sizeof(RGN_CANVAS_CMPR_ATTR_S), 64));
    83f43596:	04000593          	li	a1,64
    83f4359a:	9101                	srli	a0,a0,0x20
			bs_size = CVI_OSDC_EstCmprCanvasSize(&canvas, &obj_vec[0], obj_num);
    83f4359c:	da3e                	sw	a5,52(sp)
			flush_dcache_range((uintptr_t)pvAddr, ALIGN(sizeof(RGN_CANVAS_CMPR_ATTR_S), 64));
    83f4359e:	1bb080ef          	jal	ra,83f4bf58 <flush_dcache_range>
			xQueueSend(xQueueRGNCmdqu, &rtos_cmdq, 0U);
    83f435a2:	0001c797          	auipc	a5,0x1c
    83f435a6:	62e78793          	addi	a5,a5,1582 # 83f5fbd0 <xQueueRGNCmdqu>
    83f435aa:	6388                	ld	a0,0(a5)
    83f435ac:	4681                	li	a3,0
    83f435ae:	4601                	li	a2,0
    83f435b0:	182c                	addi	a1,sp,56
			rtos_cmdq.ip_id  = IP_RGN;
    83f435b2:	03710c23          	sb	s7,56(sp)
			rtos_cmdq.param_ptr = 0;
    83f435b6:	de02                	sw	zero,60(sp)
			xQueueSend(xQueueRGNCmdqu, &rtos_cmdq, 0U);
    83f435b8:	48e0b0ef          	jal	ra,83f4ea46 <xQueueGenericSend>
		vPortFree(line_attr);
    83f435bc:	8522                	mv	a0,s0
    83f435be:	12c0b0ef          	jal	ra,83f4e6ea <vPortFree>
    83f435c2:	bd61                	j	83f4345a <prvRGNRunTask+0xc2>
						line_attr[0].stPointStart.s32Y = line_attr[i].stPointEnd.s32Y
    83f435c4:	c048                	sw	a0,4(s0)
				if (delta_x < line_attr[i].u32Thick) {
    83f435c6:	ff8d2603          	lw	a2,-8(s10)
    83f435ca:	f2c76be3          	bltu	a4,a2,83f43500 <prvRGNRunTask+0x168>
    83f435ce:	b5f5                	j	83f434ba <prvRGNRunTask+0x122>
			pvAddr = (void *)rtos_cmdq.param_ptr;
    83f435d0:	03c16483          	lwu	s1,60(sp)
			status = CVI_OSDC_DrawCmprCanvas(&canvas, &obj_vec[0], obj_num ? obj_num : 0, pvAddr,
    83f435d4:	010aa703          	lw	a4,16(s5)
    83f435d8:	02014603          	lbu	a2,32(sp)
    83f435dc:	185c                	addi	a5,sp,52
    83f435de:	86a6                	mv	a3,s1
    83f435e0:	85d2                	mv	a1,s4
    83f435e2:	0088                	addi	a0,sp,64
    83f435e4:	714090ef          	jal	ra,83f4ccf8 <CVI_OSDC_DrawCmprCanvas>
			if (status != 1) {
    83f435e8:	4785                	li	a5,1
    83f435ea:	14f50063          	beq	a0,a5,83f4372a <prvRGNRunTask+0x392>
				*(unsigned int *)pvAddr = 0xffffffff;
    83f435ee:	57fd                	li	a5,-1
    83f435f0:	c09c                	sw	a5,0(s1)
				*((unsigned int *)pvAddr + 1) = bs_size;
    83f435f2:	57d2                	lw	a5,52(sp)
    83f435f4:	c0dc                	sw	a5,4(s1)
			flush_dcache_range((uintptr_t)pvAddr, ALIGN(bs_size, 64));
    83f435f6:	03f7879b          	addiw	a5,a5,63
    83f435fa:	fc07f593          	andi	a1,a5,-64
    83f435fe:	2581                	sext.w	a1,a1
    83f43600:	8526                	mv	a0,s1
    83f43602:	157080ef          	jal	ra,83f4bf58 <flush_dcache_range>
    83f43606:	bf71                	j	83f435a2 <prvRGNRunTask+0x20a>
			for (i = 0, j = 0; i < obj_num; ++i) {
    83f43608:	02014783          	lbu	a5,32(sp)
    83f4360c:	d3b1                	beqz	a5,83f43550 <prvRGNRunTask+0x1b8>
    83f4360e:	79a2                	ld	s3,40(sp)
    83f43610:	0796                	slli	a5,a5,0x5
    83f43612:	8b52                	mv	s6,s4
    83f43614:	00f984b3          	add	s1,s3,a5
    83f43618:	4901                	li	s2,0
    83f4361a:	a811                	j	83f4362e <prvRGNRunTask+0x296>
				} else if (obj_attr[i].enObjType == RGN_CMPR_BIT_MAP) {
    83f4361c:	4705                	li	a4,1
    83f4361e:	0ee78663          	beq	a5,a4,83f4370a <prvRGNRunTask+0x372>
			for (i = 0, j = 0; i < obj_num; ++i) {
    83f43622:	02098993          	addi	s3,s3,32
    83f43626:	040b0b13          	addi	s6,s6,64
    83f4362a:	f33483e3          	beq	s1,s3,83f43550 <prvRGNRunTask+0x1b8>
				if (obj_attr[i].enObjType == RGN_CMPR_LINE) {
    83f4362e:	0009a783          	lw	a5,0(s3)
    83f43632:	4709                	li	a4,2
    83f43634:	02e78963          	beq	a5,a4,83f43666 <prvRGNRunTask+0x2ce>
				} else if (obj_attr[i].enObjType == RGN_CMPR_RECT) {
    83f43638:	f3f5                	bnez	a5,83f4361c <prvRGNRunTask+0x284>
					CVI_OSDC_SetRectObjAttr(
    83f4363a:	01c9a883          	lw	a7,28(s3)
    83f4363e:	0149a583          	lw	a1,20(s3)
    83f43642:	0109a803          	lw	a6,16(s3)
    83f43646:	00c9a783          	lw	a5,12(s3)
    83f4364a:	0089a703          	lw	a4,8(s3)
    83f4364e:	0049a683          	lw	a3,4(s3)
    83f43652:	0189a603          	lw	a2,24(s3)
    83f43656:	011038b3          	snez	a7,a7
    83f4365a:	e02e                	sd	a1,0(sp)
    83f4365c:	0088                	addi	a0,sp,64
    83f4365e:	85da                	mv	a1,s6
    83f43660:	69c090ef          	jal	ra,83f4ccfc <CVI_OSDC_SetRectObjAttr>
    83f43664:	bf7d                	j	83f43622 <prvRGNRunTask+0x28a>
						line_attr[j].u32Color,
    83f43666:	00191613          	slli	a2,s2,0x1
    83f4366a:	964a                	add	a2,a2,s2
    83f4366c:	060e                	slli	a2,a2,0x3
    83f4366e:	9622                	add	a2,a2,s0
					CVI_OSDC_SetLineObjAttr(
    83f43670:	01062883          	lw	a7,16(a2)
    83f43674:	00c62803          	lw	a6,12(a2)
    83f43678:	461c                	lw	a5,8(a2)
    83f4367a:	4258                	lw	a4,4(a2)
    83f4367c:	4214                	lw	a3,0(a2)
    83f4367e:	4a50                	lw	a2,20(a2)
    83f43680:	85da                	mv	a1,s6
    83f43682:	0088                	addi	a0,sp,64
    83f43684:	684090ef          	jal	ra,83f4cd08 <CVI_OSDC_SetLineObjAttr>
					j++;
    83f43688:	2905                	addiw	s2,s2,1
    83f4368a:	bf61                	j	83f43622 <prvRGNRunTask+0x28a>
		obj_attr = (RGN_CMPR_OBJ_ATTR_S *)((CVI_U8 *)rtos_cmdq.param_ptr + sizeof(RGN_CANVAS_CMPR_ATTR_S));
    83f4368c:	03c16603          	lwu	a2,60(sp)
    83f43690:	02014703          	lbu	a4,32(sp)
			for (i = 0; i < obj_num; ++i) {
    83f43694:	4481                	li	s1,0
		obj_attr = (RGN_CMPR_OBJ_ATTR_S *)((CVI_U8 *)rtos_cmdq.param_ptr + sizeof(RGN_CANVAS_CMPR_ATTR_S));
    83f43696:	01860793          	addi	a5,a2,24
    83f4369a:	f43e                	sd	a5,40(sp)
			for (i = 0; i < obj_num; ++i) {
    83f4369c:	de0703e3          	beqz	a4,83f43482 <prvRGNRunTask+0xea>
    83f436a0:	fff7069b          	addiw	a3,a4,-1
    83f436a4:	02069713          	slli	a4,a3,0x20
    83f436a8:	01b75693          	srli	a3,a4,0x1b
    83f436ac:	03860613          	addi	a2,a2,56
    83f436b0:	96b2                	add	a3,a3,a2
		line_num = 0;
    83f436b2:	4481                	li	s1,0
				if (obj_attr[i].enObjType == RGN_CMPR_LINE) {
    83f436b4:	4398                	lw	a4,0(a5)
    83f436b6:	4609                	li	a2,2
    83f436b8:	02c71c63          	bne	a4,a2,83f436f0 <prvRGNRunTask+0x358>
					line_attr[line_num] = obj_attr[i].stLine;
    83f436bc:	00149713          	slli	a4,s1,0x1
    83f436c0:	0047a303          	lw	t1,4(a5)
    83f436c4:	0087a883          	lw	a7,8(a5)
    83f436c8:	00c7a803          	lw	a6,12(a5)
    83f436cc:	4b88                	lw	a0,16(a5)
    83f436ce:	4bcc                	lw	a1,20(a5)
    83f436d0:	4f90                	lw	a2,24(a5)
    83f436d2:	9726                	add	a4,a4,s1
    83f436d4:	070e                	slli	a4,a4,0x3
    83f436d6:	9722                	add	a4,a4,s0
					line_num++;
    83f436d8:	2485                	addiw	s1,s1,1
					line_attr[line_num] = obj_attr[i].stLine;
    83f436da:	00672023          	sw	t1,0(a4) # ffffffffffff8000 <_end+0xffffffff7bff82c0>
    83f436de:	01172223          	sw	a7,4(a4)
    83f436e2:	01072423          	sw	a6,8(a4)
    83f436e6:	c748                	sw	a0,12(a4)
    83f436e8:	cb0c                	sw	a1,16(a4)
    83f436ea:	cb50                	sw	a2,20(a4)
					line_num++;
    83f436ec:	0ff4f493          	andi	s1,s1,255
			for (i = 0; i < obj_num; ++i) {
    83f436f0:	02078793          	addi	a5,a5,32
    83f436f4:	fcd790e3          	bne	a5,a3,83f436b4 <prvRGNRunTask+0x31c>
			for (i = 0; i < line_num; ++i) {
    83f436f8:	2481                	sext.w	s1,s1
    83f436fa:	b361                	j	83f43482 <prvRGNRunTask+0xea>
			canvas.format = OSD_ARGB4444;
    83f436fc:	c4de                	sw	s7,72(sp)
			break;
    83f436fe:	b5bd                	j	83f4356c <prvRGNRunTask+0x1d4>
			canvas.format = OSD_LUT8;
    83f43700:	47a1                	li	a5,8
    83f43702:	c4be                	sw	a5,72(sp)
			break;
    83f43704:	b5a5                	j	83f4356c <prvRGNRunTask+0x1d4>
			canvas.format = OSD_ARGB8888;
    83f43706:	c482                	sw	zero,72(sp)
			break;
    83f43708:	b595                	j	83f4356c <prvRGNRunTask+0x1d4>
					CVI_OSDC_SetBitmapObjAttr(
    83f4370a:	0109a803          	lw	a6,16(s3)
    83f4370e:	00c9a783          	lw	a5,12(s3)
    83f43712:	0089a703          	lw	a4,8(s3)
    83f43716:	0049a683          	lw	a3,4(s3)
    83f4371a:	0149e603          	lwu	a2,20(s3)
    83f4371e:	85da                	mv	a1,s6
    83f43720:	4881                	li	a7,0
    83f43722:	0088                	addi	a0,sp,64
    83f43724:	5e0090ef          	jal	ra,83f4cd04 <CVI_OSDC_SetBitmapObjAttr>
    83f43728:	bded                	j	83f43622 <prvRGNRunTask+0x28a>
				*((unsigned int *)pvAddr + 1) = bs_size;
    83f4372a:	57d2                	lw	a5,52(sp)
    83f4372c:	c0dc                	sw	a5,4(s1)
    83f4372e:	b5e1                	j	83f435f6 <prvRGNRunTask+0x25e>

0000000083f43730 <cvi_audio_init_test>:
		}	\
	} while (0)
#endif
// just to build & compiler venc sdk, do not need run this
__attribute__((optimize("-O0"))) void cvi_audio_init_test(void)
{
    83f43730:	1141                	addi	sp,sp,-16
    83f43732:	e406                	sd	ra,8(sp)
    83f43734:	e022                	sd	s0,0(sp)
    83f43736:	0800                	addi	s0,sp,16

	aud_printf("Enter cvitek audio ssp algorithm test mode\n");
    83f43738:	0000d517          	auipc	a0,0xd
    83f4373c:	a0850513          	addi	a0,a0,-1528 # 83f50140 <__rodata_start>
    83f43740:	055080ef          	jal	ra,83f4bf94 <printf>
	if (unit_test_triggered == 1) {
    83f43744:	0001c797          	auipc	a5,0x1c
    83f43748:	49478793          	addi	a5,a5,1172 # 83f5fbd8 <unit_test_triggered>
    83f4374c:	439c                	lw	a5,0(a5)
    83f4374e:	873e                	mv	a4,a5
    83f43750:	4785                	li	a5,1
    83f43752:	02f70563          	beq	a4,a5,83f4377c <cvi_audio_init_test+0x4c>
		//already trigger
		return;

	} else {
		aud_printf("audio_ssp  first trigger test  begin.....!!!\n");
    83f43756:	0000d517          	auipc	a0,0xd
    83f4375a:	a1a50513          	addi	a0,a0,-1510 # 83f50170 <__rodata_start+0x30>
    83f4375e:	037080ef          	jal	ra,83f4bf94 <printf>
		aud_printf("audio_ssp  first trigger test  end!\n");
    83f43762:	0000d517          	auipc	a0,0xd
    83f43766:	a3e50513          	addi	a0,a0,-1474 # 83f501a0 <__rodata_start+0x60>
    83f4376a:	02b080ef          	jal	ra,83f4bf94 <printf>
		unit_test_triggered = 1;
    83f4376e:	0001c797          	auipc	a5,0x1c
    83f43772:	46a78793          	addi	a5,a5,1130 # 83f5fbd8 <unit_test_triggered>
    83f43776:	4705                	li	a4,1
    83f43778:	c398                	sw	a4,0(a5)
    83f4377a:	a011                	j	83f4377e <cvi_audio_init_test+0x4e>
		return;
    83f4377c:	0001                	nop
	}
}
    83f4377e:	60a2                	ld	ra,8(sp)
    83f43780:	6402                	ld	s0,0(sp)
    83f43782:	0141                	addi	sp,sp,16
    83f43784:	8082                	ret

0000000083f43786 <prvAudioRunTask>:
	}
	return (ret&check_val);

}
void prvAudioRunTask(void *pvParameters)
{
    83f43786:	716d                	addi	sp,sp,-272
    83f43788:	e606                	sd	ra,264(sp)
    83f4378a:	e226                	sd	s1,256(sp)
    83f4378c:	f9ce                	sd	s3,240(sp)
    83f4378e:	f1d6                	sd	s5,224(sp)
    83f43790:	edda                	sd	s6,216(sp)
    83f43792:	e9de                	sd	s7,208(sp)
    83f43794:	e5e2                	sd	s8,200(sp)
    83f43796:	fdca                	sd	s2,248(sp)
    83f43798:	f5d2                	sd	s4,232(sp)
    83f4379a:	e1e6                	sd	s9,192(sp)
    83f4379c:	fd6a                	sd	s10,184(sp)
    83f4379e:	f96e                	sd	s11,176(sp)
	TickType_t xTimer3AProcEnd;
	static int frame_count;
	static int total_diff;
	#endif

	cvi_audio_init_test();
    83f437a0:	f91ff0ef          	jal	ra,83f43730 <cvi_audio_init_test>
	printf("pAudioRunTask run Version:20220519\n");
    83f437a4:	0000d517          	auipc	a0,0xd
    83f437a8:	a2450513          	addi	a0,a0,-1500 # 83f501c8 <__rodata_start+0x88>
    83f437ac:	7e8080ef          	jal	ra,83f4bf94 <printf>

	xQueueAudioCmdqu = main_GetMODHandle(E_QUEUE_CMDQU);
    83f437b0:	4515                	li	a0,5
    83f437b2:	b3fff0ef          	jal	ra,83f432f0 <main_GetMODHandle>
    83f437b6:	87aa                	mv	a5,a0
    83f437b8:	0001cc17          	auipc	s8,0x1c
    83f437bc:	460c0c13          	addi	s8,s8,1120 # 83f5fc18 <xQueueAudioCmdqu>
	xQueueAudio = main_GetMODHandle(E_QUEUE_AUDIO);
    83f437c0:	4519                	li	a0,6
	xQueueAudioCmdqu = main_GetMODHandle(E_QUEUE_CMDQU);
    83f437c2:	00fc3023          	sd	a5,0(s8)
	xQueueAudio = main_GetMODHandle(E_QUEUE_AUDIO);
    83f437c6:	b2bff0ef          	jal	ra,83f432f0 <main_GetMODHandle>
	unsigned int prev_msg_counter = -1;//counter to check the package from cviaudio_core.ko to rtos
    83f437ca:	57fd                	li	a5,-1
    83f437cc:	ec3e                	sd	a5,24(sp)
						if (pindicator->chunks_number >= 5)
							vTaskDelay(pdMS_TO_TICKS(10));
						else if (pindicator->chunks_number >= 3)
							vTaskDelay(pdMS_TO_TICKS(5));
						else
							usleep(3000);
    83f437ce:	6785                	lui	a5,0x1
	xQueueAudio = main_GetMODHandle(E_QUEUE_AUDIO);
    83f437d0:	0001ca97          	auipc	s5,0x1c
    83f437d4:	440a8a93          	addi	s5,s5,1088 # 83f5fc10 <xQueueAudio>
							usleep(3000);
    83f437d8:	bb878793          	addi	a5,a5,-1096 # bb8 <_EL1_STACK_SIZE+0x3b8>
	xQueueAudio = main_GetMODHandle(E_QUEUE_AUDIO);
    83f437dc:	00aab023          	sd	a0,0(s5)
    83f437e0:	0001c497          	auipc	s1,0x1c
    83f437e4:	41848493          	addi	s1,s1,1048 # 83f5fbf8 <pstSspBufTbl>
    83f437e8:	0001cb97          	auipc	s7,0x1c
    83f437ec:	408b8b93          	addi	s7,s7,1032 # 83f5fbf0 <pindicator>
		if (rtos_cmdq.ip_id != IP_AUDIO) {
    83f437f0:	4b15                	li	s6,5
						else if (pindicator->chunks_number >= 3)
    83f437f2:	4989                	li	s3,2
							usleep(3000);
    83f437f4:	f43e                	sd	a5,40(sp)
    83f437f6:	a089                	j	83f43838 <prvAudioRunTask+0xb2>
			aud_error("invalid ip_id[%d] into AudioRunTask\n", rtos_cmdq.ip_id);
    83f437f8:	0b400613          	li	a2,180
    83f437fc:	0000d597          	auipc	a1,0xd
    83f43800:	7c458593          	addi	a1,a1,1988 # 83f50fc0 <__func__.1>
    83f43804:	0000d517          	auipc	a0,0xd
    83f43808:	9ec50513          	addi	a0,a0,-1556 # 83f501f0 <__rodata_start+0xb0>
    83f4380c:	788080ef          	jal	ra,83f4bf94 <printf>
			//printf("CVIAUDIO_RTOS_CMD_SSP_PROC_BLOCK---success[0x%x][0x%x][0x%x]\n", pvincent[0], pvincent[1], pvincent[2]);
			clean_dcache_range((uintptr_t)pstBlockFrm, sizeof(ST_CVIAUDIO_BLOCK_FRAME));
			clean_dcache_range((uintptr_t)pstBlockFrm->mic_in_addr, 1280);
			clean_dcache_range((uintptr_t)pstBlockFrm->output_addr, 1280);
			clean_dcache_range((uintptr_t)pstBlockFrm->ref_in_addr, 1280);
			xQueueSend(xQueueAudioCmdqu, &rtos_cmdq, 0U);
    83f43810:	000c3503          	ld	a0,0(s8)
    83f43814:	4681                	li	a3,0
    83f43816:	4601                	li	a2,0
    83f43818:	180c                	addi	a1,sp,48
    83f4381a:	22c0b0ef          	jal	ra,83f4ea46 <xQueueGenericSend>
	p_cmdqu->ip_id = -1;
    83f4381e:	03015783          	lhu	a5,48(sp)
    83f43822:	7761                	lui	a4,0xffff8
		xQueueReceive(xQueueAudio, &rtos_cmdq, portMAX_DELAY);
    83f43824:	000ab503          	ld	a0,0(s5)
	p_cmdqu->ip_id = -1;
    83f43828:	8ff9                	and	a5,a5,a4
    83f4382a:	6721                	lui	a4,0x8
    83f4382c:	177d                	addi	a4,a4,-1
    83f4382e:	8fd9                	or	a5,a5,a4
    83f43830:	02f11823          	sh	a5,48(sp)
	p_cmdqu->param_ptr = -1;
    83f43834:	57fd                	li	a5,-1
    83f43836:	da3e                	sw	a5,52(sp)
		xQueueReceive(xQueueAudio, &rtos_cmdq, portMAX_DELAY);
    83f43838:	567d                	li	a2,-1
    83f4383a:	180c                	addi	a1,sp,48
    83f4383c:	40a0b0ef          	jal	ra,83f4ec46 <xQueueReceive>
		if (rtos_cmdq.ip_id != IP_AUDIO) {
    83f43840:	03014683          	lbu	a3,48(sp)
    83f43844:	fb669ae3          	bne	a3,s6,83f437f8 <prvAudioRunTask+0x72>
		switch (rtos_cmdq.cmd_id) {
    83f43848:	76c2                	ld	a3,48(sp)
    83f4384a:	47b5                	li	a5,13
    83f4384c:	82a1                	srli	a3,a3,0x8
    83f4384e:	07f6f693          	andi	a3,a3,127
    83f43852:	40d7ee63          	bltu	a5,a3,83f43c6e <prvAudioRunTask+0x4e8>
    83f43856:	0000d717          	auipc	a4,0xd
    83f4385a:	70a70713          	addi	a4,a4,1802 # 83f50f60 <__func__.4+0x190>
    83f4385e:	00269793          	slli	a5,a3,0x2
    83f43862:	97ba                	add	a5,a5,a4
    83f43864:	439c                	lw	a5,0(a5)
    83f43866:	97ba                	add	a5,a5,a4
    83f43868:	8782                	jr	a5
						(ST_CVIAUDIO_MAILBOX_BLOCK *)rtos_cmdq.param_ptr;
    83f4386a:	03416903          	lwu	s2,52(sp)
			inv_dcache_range((uintptr_t)pstAudBlockMailBox, sizeof(ST_CVIAUDIO_MAILBOX_BLOCK));
    83f4386e:	45c1                	li	a1,16
    83f43870:	854a                	mv	a0,s2
    83f43872:	69e080ef          	jal	ra,83f4bf10 <inv_dcache_range>
			if (pstAudBlockMailBox->u64RevMask != CVIAUDIO_RTOS_MAGIC_WORD_USERSPACE_BLOCK_MODE) {
    83f43876:	00093683          	ld	a3,0(s2)
    83f4387a:	0bb00793          	li	a5,187
    83f4387e:	50f68463          	beq	a3,a5,83f43d86 <prvAudioRunTask+0x600>
				aud_error("[CVIAUDIO_RTOS_CMD_SSP_INIT_BLOCK]magic word mismatch[0x%lx]\n",
    83f43882:	0000d597          	auipc	a1,0xd
    83f43886:	73e58593          	addi	a1,a1,1854 # 83f50fc0 <__func__.1>
    83f4388a:	21d00613          	li	a2,541
    83f4388e:	0000d517          	auipc	a0,0xd
    83f43892:	db250513          	addi	a0,a0,-590 # 83f50640 <__rodata_start+0x500>
    83f43896:	6fe080ef          	jal	ra,83f4bf94 <printf>
				rtos_cmdq.param_ptr = CVIAUDIO_RTOS_BLOCK_MODE_FAILURE_FLAG;
    83f4389a:	0fa00793          	li	a5,250
				clean_dcache_range((uintptr_t)pstAudBlockMailBox, sizeof(ST_CVIAUDIO_MAILBOX_BLOCK));
    83f4389e:	854a                	mv	a0,s2
    83f438a0:	45c1                	li	a1,16
				rtos_cmdq.param_ptr = CVIAUDIO_RTOS_BLOCK_MODE_FAILURE_FLAG;
    83f438a2:	da3e                	sw	a5,52(sp)
			clean_dcache_range((uintptr_t)pstBlockFrm->ref_in_addr, 1280);
    83f438a4:	690080ef          	jal	ra,83f4bf34 <clean_dcache_range>
    83f438a8:	b7a5                	j	83f43810 <prvAudioRunTask+0x8a>
			inv_dcache_range((uintptr_t)output_addr, 320);
    83f438aa:	03416503          	lwu	a0,52(sp)
    83f438ae:	14000593          	li	a1,320
    83f438b2:	65e080ef          	jal	ra,83f4bf10 <inv_dcache_range>
			if (ret == 0) {
    83f438b6:	b7a5                	j	83f4381e <prvAudioRunTask+0x98>
			if (!paudio_ssp_block) {
    83f438b8:	0001c797          	auipc	a5,0x1c
    83f438bc:	32878793          	addi	a5,a5,808 # 83f5fbe0 <paudio_ssp_block>
    83f438c0:	639c                	ld	a5,0(a5)
    83f438c2:	66078063          	beqz	a5,83f43f22 <prvAudioRunTask+0x79c>
			ST_CVIAUDIO_BLOCK_FRAME *pstBlockFrm = (ST_CVIAUDIO_BLOCK_FRAME *)rtos_cmdq.param_ptr;
    83f438c6:	03416903          	lwu	s2,52(sp)
			inv_dcache_range((uintptr_t)pstBlockFrm, sizeof(ST_CVIAUDIO_BLOCK_FRAME));
    83f438ca:	02000593          	li	a1,32
    83f438ce:	854a                	mv	a0,s2
    83f438d0:	640080ef          	jal	ra,83f4bf10 <inv_dcache_range>
			inv_dcache_range((uintptr_t)pstBlockFrm->mic_in_addr, 1280);
    83f438d4:	00893503          	ld	a0,8(s2)
    83f438d8:	50000593          	li	a1,1280
    83f438dc:	634080ef          	jal	ra,83f4bf10 <inv_dcache_range>
			inv_dcache_range((uintptr_t)pstBlockFrm->output_addr, 1280);
    83f438e0:	01893503          	ld	a0,24(s2)
    83f438e4:	50000593          	li	a1,1280
    83f438e8:	628080ef          	jal	ra,83f4bf10 <inv_dcache_range>
			inv_dcache_range((uintptr_t)pstBlockFrm->ref_in_addr, 1280);
    83f438ec:	01093503          	ld	a0,16(s2)
    83f438f0:	50000593          	li	a1,1280
    83f438f4:	61c080ef          	jal	ra,83f4bf10 <inv_dcache_range>
			if (pstBlockFrm->u64RevMask != CVIAUDIO_RTOS_MAGIC_WORD_USERSPACE_BLOCK_MODE) {
    83f438f8:	00093683          	ld	a3,0(s2)
    83f438fc:	0bb00793          	li	a5,187
    83f43900:	64f68963          	beq	a3,a5,83f43f52 <prvAudioRunTask+0x7cc>
				aud_error("[CVIAUDIO_RTOS_CMD_SSP_PROC_BLOCK]magic word mismatch[0x%lx]\n",
    83f43904:	0000d597          	auipc	a1,0xd
    83f43908:	6bc58593          	addi	a1,a1,1724 # 83f50fc0 <__func__.1>
    83f4390c:	27700613          	li	a2,631
    83f43910:	0000d517          	auipc	a0,0xd
    83f43914:	fd050513          	addi	a0,a0,-48 # 83f508e0 <__rodata_start+0x7a0>
    83f43918:	67c080ef          	jal	ra,83f4bf94 <printf>
				rtos_cmdq.param_ptr = CVIAUDIO_RTOS_BLOCK_MODE_FAILURE_FLAG;
    83f4391c:	0fa00793          	li	a5,250
				clean_dcache_range((uintptr_t)pstBlockFrm, sizeof(ST_CVIAUDIO_BLOCK_FRAME));
    83f43920:	854a                	mv	a0,s2
    83f43922:	02000593          	li	a1,32
				rtos_cmdq.param_ptr = CVIAUDIO_RTOS_BLOCK_MODE_FAILURE_FLAG;
    83f43926:	da3e                	sw	a5,52(sp)
				clean_dcache_range((uintptr_t)pstBlockFrm, sizeof(ST_CVIAUDIO_BLOCK_FRAME));
    83f43928:	bfb5                	j	83f438a4 <prvAudioRunTask+0x11e>
				ST_SSP_RTOS_INIT *pSspRtosCfg = rtos_cmdq.param_ptr;
    83f4392a:	03416783          	lwu	a5,52(sp)
				pstSspBufTbl = &pSspRtosCfg->buffertbl[0];
    83f4392e:	00878713          	addi	a4,a5,8
    83f43932:	e098                	sd	a4,0(s1)
				pSpkSspRtosData_Ret = (ST_SSP_RTOS_SPK_DATA_RET *)pSspRtosCfg->CbPhyAddr;
    83f43934:	0047e783          	lwu	a5,4(a5)
    83f43938:	f03e                	sd	a5,32(sp)
				aud_debug("[Rtos][Rtos_space]xxxpSspRtosCfg[0x%p]\n", pSspRtosCfg);
    83f4393a:	b5d5                	j	83f4381e <prvAudioRunTask+0x98>
			if (paudio_ssp_handle == NULL || pstSspBufTbl == NULL) {
    83f4393c:	0001c797          	auipc	a5,0x1c
    83f43940:	2ac78793          	addi	a5,a5,684 # 83f5fbe8 <paudio_ssp_handle>
    83f43944:	639c                	ld	a5,0(a5)
    83f43946:	c399                	beqz	a5,83f4394c <prvAudioRunTask+0x1c6>
    83f43948:	609c                	ld	a5,0(s1)
    83f4394a:	ef8d                	bnez	a5,83f43984 <prvAudioRunTask+0x1fe>
				aud_error("Error cannot process with NULL handle[%s][%d]\n", __func__, __LINE__);
    83f4394c:	0000d697          	auipc	a3,0xd
    83f43950:	67468693          	addi	a3,a3,1652 # 83f50fc0 <__func__.1>
    83f43954:	10500713          	li	a4,261
    83f43958:	10500613          	li	a2,261
    83f4395c:	85b6                	mv	a1,a3
    83f4395e:	0000d517          	auipc	a0,0xd
    83f43962:	9da50513          	addi	a0,a0,-1574 # 83f50338 <__rodata_start+0x1f8>
    83f43966:	62e080ef          	jal	ra,83f4bf94 <printf>
				break;
    83f4396a:	bd55                	j	83f4381e <prvAudioRunTask+0x98>
				if (bCheck_input_full) {
    83f4396c:	14091363          	bnez	s2,83f43ab2 <prvAudioRunTask+0x32c>
				} while ((ret_val > 0) && ssp_running);
    83f43970:	ea0807e3          	beqz	a6,83f4381e <prvAudioRunTask+0x98>
    83f43974:	0001c797          	auipc	a5,0x1c
    83f43978:	29478793          	addi	a5,a5,660 # 83f5fc08 <ssp_running>
    83f4397c:	0007c783          	lbu	a5,0(a5)
    83f43980:	e8078fe3          	beqz	a5,83f4381e <prvAudioRunTask+0x98>
				ret_val = _audio_task_check_ssp_proc_data_valid(pindicator);
    83f43984:	000bb903          	ld	s2,0(s7)
	if (!pIndicator) {
    83f43988:	34090c63          	beqz	s2,83f43ce0 <prvAudioRunTask+0x55a>
	if (pIndicator->channel_nums > 2 || pIndicator->channel_nums < 1) {
    83f4398c:	00494683          	lbu	a3,4(s2)
    83f43990:	4705                	li	a4,1
	unsigned char check_val = 1;
    83f43992:	4805                	li	a6,1
	if (pIndicator->channel_nums > 2 || pIndicator->channel_nums < 1) {
    83f43994:	fff6879b          	addiw	a5,a3,-1
    83f43998:	0ff7f793          	andi	a5,a5,255
    83f4399c:	00f77f63          	bgeu	a4,a5,83f439ba <prvAudioRunTask+0x234>
		aud_error("[error][rtos][audio_task]channel numbers[%d] invalid\n",
    83f439a0:	07900613          	li	a2,121
    83f439a4:	0000d597          	auipc	a1,0xd
    83f439a8:	5f458593          	addi	a1,a1,1524 # 83f50f98 <__func__.0>
    83f439ac:	0000d517          	auipc	a0,0xd
    83f439b0:	a3450513          	addi	a0,a0,-1484 # 83f503e0 <__rodata_start+0x2a0>
    83f439b4:	5e0080ef          	jal	ra,83f4bf94 <printf>
		check_val = 0;
    83f439b8:	4801                	li	a6,0
	if (pIndicator->chunks_number <= 0 ||
    83f439ba:	00094683          	lbu	a3,0(s2)
    83f439be:	4761                	li	a4,24
    83f439c0:	fff6879b          	addiw	a5,a3,-1
    83f439c4:	0ff7f793          	andi	a5,a5,255
    83f439c8:	26f76e63          	bltu	a4,a5,83f43c44 <prvAudioRunTask+0x4be>
	if (pIndicator->Wpt_index > CVIAUDIO_SSP_CHUNK_NUMBERS) {
    83f439cc:	00194683          	lbu	a3,1(s2)
    83f439d0:	47e5                	li	a5,25
    83f439d2:	20d7ed63          	bltu	a5,a3,83f43bec <prvAudioRunTask+0x466>
	if (!pIndicator->ssp_on) {
    83f439d6:	00594783          	lbu	a5,5(s2)
    83f439da:	22078863          	beqz	a5,83f43c0a <prvAudioRunTask+0x484>
				if (!ret_val) {
    83f439de:	24080363          	beqz	a6,83f43c24 <prvAudioRunTask+0x49e>
				if ((pindicator->msg_counter == prev_msg_counter)) {
    83f439e2:	000bb503          	ld	a0,0(s7)
    83f439e6:	6762                	ld	a4,24(sp)
    83f439e8:	455c                	lw	a5,12(a0)
    83f439ea:	28f70f63          	beq	a4,a5,83f43c88 <prvAudioRunTask+0x502>
				target_pkt_cnt = pindicator->chunks_number;
    83f439ee:	00054a03          	lbu	s4,0(a0)
				cur_pt = pindicator->Ppt_index;
    83f439f2:	00354d03          	lbu	s10,3(a0)
				while (proc_pkt_cnt < target_pkt_cnt) {
    83f439f6:	5a0a0c63          	beqz	s4,83f43fae <prvAudioRunTask+0x828>
					if (pstSspBufTbl[cur_pt].bBufOccupy != CVIAUDIO_BUF_TBL_INPUT) {
    83f439fa:	608c                	ld	a1,0(s1)
				cur_pt = pindicator->Ppt_index;
    83f439fc:	876a                	mv	a4,s10
				proc_pkt_cnt = 0;
    83f439fe:	4601                	li	a2,0
					if (pstSspBufTbl[cur_pt].bBufOccupy != CVIAUDIO_BUF_TBL_INPUT) {
    83f43a00:	00571693          	slli	a3,a4,0x5
    83f43a04:	96ae                	add	a3,a3,a1
    83f43a06:	0006c903          	lbu	s2,0(a3)
    83f43a0a:	4785                	li	a5,1
    83f43a0c:	1af91c63          	bne	s2,a5,83f43bc4 <prvAudioRunTask+0x43e>
					cur_pt = (cur_pt + 1) % CVIAUDIO_SSP_CHUNK_NUMBERS;
    83f43a10:	2705                	addiw	a4,a4,1
    83f43a12:	47e5                	li	a5,25
    83f43a14:	02f7673b          	remw	a4,a4,a5
					proc_pkt_cnt += 1;
    83f43a18:	2605                	addiw	a2,a2,1
    83f43a1a:	0ff67613          	andi	a2,a2,255
					cur_pt = (cur_pt + 1) % CVIAUDIO_SSP_CHUNK_NUMBERS;
    83f43a1e:	0ff77713          	andi	a4,a4,255
				while (proc_pkt_cnt < target_pkt_cnt) {
    83f43a22:	fcca1fe3          	bne	s4,a2,83f43a00 <prvAudioRunTask+0x27a>
				chn_num = pindicator->channel_nums;
    83f43a26:	00454783          	lbu	a5,4(a0)
				proc_pkt_cnt = 0;
    83f43a2a:	4d81                	li	s11,0
				chn_num = pindicator->channel_nums;
    83f43a2c:	e43e                	sd	a5,8(sp)
				while ((proc_pkt_cnt != target_pkt_cnt) && (bCheck_input_full)) {
    83f43a2e:	f34d8fe3          	beq	s11,s4,83f4396c <prvAudioRunTask+0x1e6>
    83f43a32:	f2090fe3          	beqz	s2,83f43970 <prvAudioRunTask+0x1ea>
						ret_val = CviAud_Algo_Process(paudio_ssp_handle,
    83f43a36:	0001c797          	auipc	a5,0x1c
    83f43a3a:	1b278793          	addi	a5,a5,434 # 83f5fbe8 <paudio_ssp_handle>
								pstSspBufTbl[cur_pt].mic_in_addr,
    83f43a3e:	6098                	ld	a4,0(s1)
						ret_val = CviAud_Algo_Process(paudio_ssp_handle,
    83f43a40:	6388                	ld	a0,0(a5)
					if (chn_num == 2 || pindicator->ssp_with_aec) {
    83f43a42:	67a2                	ld	a5,8(sp)
								pstSspBufTbl[cur_pt].mic_in_addr,
    83f43a44:	005d1c93          	slli	s9,s10,0x5
    83f43a48:	9766                	add	a4,a4,s9
						ret_val = CviAud_Algo_Process(paudio_ssp_handle,
    83f43a4a:	670c                	ld	a1,8(a4)
    83f43a4c:	6f14                	ld	a3,24(a4)
					if (chn_num == 2 || pindicator->ssp_with_aec) {
    83f43a4e:	01378863          	beq	a5,s3,83f43a5e <prvAudioRunTask+0x2d8>
    83f43a52:	000bb603          	ld	a2,0(s7)
    83f43a56:	00664603          	lbu	a2,6(a2)
    83f43a5a:	14060d63          	beqz	a2,83f43bb4 <prvAudioRunTask+0x42e>
						ret_val = CviAud_Algo_Process(paudio_ssp_handle,
    83f43a5e:	6b10                	ld	a2,16(a4)
    83f43a60:	0a000713          	li	a4,160
    83f43a64:	63c000ef          	jal	ra,83f440a0 <CviAud_Algo_Process>
    83f43a68:	0ff57813          	andi	a6,a0,255
					if (ret_val <= 0)
    83f43a6c:	12080563          	beqz	a6,83f43b96 <prvAudioRunTask+0x410>
						pstSspBufTbl[cur_pt].bBufOccupy = CVIAUDIO_BUF_TBL_AFTER_SSP;
    83f43a70:	6098                	ld	a4,0(s1)
    83f43a72:	9766                	add	a4,a4,s9
    83f43a74:	01370023          	sb	s3,0(a4)
					cur_pt = (cur_pt + 1) % CVIAUDIO_SSP_CHUNK_NUMBERS;
    83f43a78:	001d079b          	addiw	a5,s10,1
    83f43a7c:	4765                	li	a4,25
    83f43a7e:	02e7e7bb          	remw	a5,a5,a4
					proc_pkt_cnt += 1;
    83f43a82:	001d889b          	addiw	a7,s11,1
    83f43a86:	0ff8fd93          	andi	s11,a7,255
					cur_pt = (cur_pt + 1) % CVIAUDIO_SSP_CHUNK_NUMBERS;
    83f43a8a:	0ff7fd13          	andi	s10,a5,255
					if (proc_pkt_cnt > (CVIAUDIO_SSP_CHUNK_NUMBERS + 1)) {
    83f43a8e:	47ed                	li	a5,27
    83f43a90:	f8fd9fe3          	bne	s11,a5,83f43a2e <prvAudioRunTask+0x2a8>
						aud_error("[audio_task]proc_pkt_cnt abnormal..[%d]\n",
    83f43a94:	46ed                	li	a3,27
    83f43a96:	14f00613          	li	a2,335
    83f43a9a:	0000d597          	auipc	a1,0xd
    83f43a9e:	52658593          	addi	a1,a1,1318 # 83f50fc0 <__func__.1>
    83f43aa2:	0000d517          	auipc	a0,0xd
    83f43aa6:	b5650513          	addi	a0,a0,-1194 # 83f505f8 <__rodata_start+0x4b8>
    83f43aaa:	e442                	sd	a6,8(sp)
    83f43aac:	4e8080ef          	jal	ra,83f4bf94 <printf>
				if (bCheck_input_full) {
    83f43ab0:	6822                	ld	a6,8(sp)
					pindicator->Ppt_index = cur_pt;
    83f43ab2:	000bb703          	ld	a4,0(s7)
					clean_dcache_range((uintptr_t)pindicator,
    83f43ab6:	45c1                	li	a1,16
    83f43ab8:	e442                	sd	a6,8(sp)
					pindicator->Ppt_index = cur_pt;
    83f43aba:	01a701a3          	sb	s10,3(a4)
					prev_msg_counter = pindicator->msg_counter;
    83f43abe:	000bb503          	ld	a0,0(s7)
    83f43ac2:	455c                	lw	a5,12(a0)
    83f43ac4:	ec3e                	sd	a5,24(sp)
					pindicator->msg_counter += 1;
    83f43ac6:	2785                	addiw	a5,a5,1
    83f43ac8:	c55c                	sw	a5,12(a0)
					clean_dcache_range((uintptr_t)pindicator,
    83f43aca:	46a080ef          	jal	ra,83f4bf34 <clean_dcache_range>
					clean_dcache_range((uintptr_t)pstSspBufTbl,
    83f43ace:	6088                	ld	a0,0(s1)
    83f43ad0:	32000593          	li	a1,800
    83f43ad4:	460080ef          	jal	ra,83f4bf34 <clean_dcache_range>
					xQueueSend(xQueueAudioCmdqu, &rtos_cmdq, 0U);
    83f43ad8:	000c3503          	ld	a0,0(s8)
    83f43adc:	4681                	li	a3,0
    83f43ade:	4601                	li	a2,0
    83f43ae0:	180c                	addi	a1,sp,48
    83f43ae2:	7650a0ef          	jal	ra,83f4ea46 <xQueueGenericSend>
    83f43ae6:	6822                	ld	a6,8(sp)
    83f43ae8:	b561                	j	83f43970 <prvAudioRunTask+0x1ea>
			if (paudio_ssp_handle == NULL) {
    83f43aea:	0001c797          	auipc	a5,0x1c
    83f43aee:	0fe78793          	addi	a5,a5,254 # 83f5fbe8 <paudio_ssp_handle>
    83f43af2:	6388                	ld	a0,0(a5)
    83f43af4:	3e050d63          	beqz	a0,83f43eee <prvAudioRunTask+0x768>
				CviAud_Algo_DeInit(paudio_ssp_handle);
    83f43af8:	614000ef          	jal	ra,83f4410c <CviAud_Algo_DeInit>
				paudio_ssp_handle = NULL;
    83f43afc:	0001c797          	auipc	a5,0x1c
    83f43b00:	0e07b623          	sd	zero,236(a5) # 83f5fbe8 <paudio_ssp_handle>
			rtos_cmdq.ip_id = IP_AUDIO;
    83f43b04:	03015783          	lhu	a5,48(sp)
    83f43b08:	7761                	lui	a4,0xffff8
			xQueueSend(xQueueAudioCmdqu, &rtos_cmdq, 0U);
    83f43b0a:	000c3503          	ld	a0,0(s8)
			rtos_cmdq.ip_id = IP_AUDIO;
    83f43b0e:	8ff9                	and	a5,a5,a4
    83f43b10:	2057e793          	ori	a5,a5,517
			xQueueSend(xQueueAudioCmdqu, &rtos_cmdq, 0U);
    83f43b14:	4681                	li	a3,0
    83f43b16:	4601                	li	a2,0
    83f43b18:	180c                	addi	a1,sp,48
			rtos_cmdq.ip_id = IP_AUDIO;
    83f43b1a:	02f11823          	sh	a5,48(sp)
			ssp_running = 0;
    83f43b1e:	0001c797          	auipc	a5,0x1c
    83f43b22:	0e078523          	sb	zero,234(a5) # 83f5fc08 <ssp_running>
			xQueueSend(xQueueAudioCmdqu, &rtos_cmdq, 0U);
    83f43b26:	7210a0ef          	jal	ra,83f4ea46 <xQueueGenericSend>
			break;
    83f43b2a:	b9d5                	j	83f4381e <prvAudioRunTask+0x98>
			rtos_cmdq.param_ptr = pSpkSspRtosData_Ret;
    83f43b2c:	7782                	ld	a5,32(sp)
			xQueueSend(xQueueAudioCmdqu, &rtos_cmdq, 0U);
    83f43b2e:	000c3503          	ld	a0,0(s8)
    83f43b32:	4681                	li	a3,0
    83f43b34:	4601                	li	a2,0
    83f43b36:	180c                	addi	a1,sp,48
			rtos_cmdq.param_ptr = pSpkSspRtosData_Ret;
    83f43b38:	da3e                	sw	a5,52(sp)
			xQueueSend(xQueueAudioCmdqu, &rtos_cmdq, 0U);
    83f43b3a:	70d0a0ef          	jal	ra,83f4ea46 <xQueueGenericSend>
			break;
    83f43b3e:	b1c5                	j	83f4381e <prvAudioRunTask+0x98>
			if (paudio_ssp_block) {
    83f43b40:	0001c797          	auipc	a5,0x1c
    83f43b44:	0a078793          	addi	a5,a5,160 # 83f5fbe0 <paudio_ssp_block>
    83f43b48:	6388                	ld	a0,0(a5)
    83f43b4a:	3a050f63          	beqz	a0,83f43f08 <prvAudioRunTask+0x782>
				CviAud_Algo_DeInit(paudio_ssp_block);
    83f43b4e:	5be000ef          	jal	ra,83f4410c <CviAud_Algo_DeInit>
				paudio_ssp_block = NULL;
    83f43b52:	0001c797          	auipc	a5,0x1c
    83f43b56:	0807b723          	sd	zero,142(a5) # 83f5fbe0 <paudio_ssp_block>
    83f43b5a:	b95d                	j	83f43810 <prvAudioRunTask+0x8a>
			ST_CVIAUDIO_MAILBOX *gpstCviaudioMailBox= (ST_CVIAUDIO_MAILBOX *)rtos_cmdq.param_ptr;
    83f43b5c:	03416903          	lwu	s2,52(sp)
			inv_dcache_range((uintptr_t)gpstCviaudioMailBox, sizeof(ST_CVIAUDIO_MAILBOX));
    83f43b60:	02000593          	li	a1,32
    83f43b64:	854a                	mv	a0,s2
    83f43b66:	3aa080ef          	jal	ra,83f4bf10 <inv_dcache_range>
			if (gpstCviaudioMailBox->u64RevMask == CVIAUDIO_RTOS_MAGIC_WORD_KERNEL_BIND_MODE) {
    83f43b6a:	00093703          	ld	a4,0(s2)
    83f43b6e:	09900793          	li	a5,153
    83f43b72:	18f70463          	beq	a4,a5,83f43cfa <prvAudioRunTask+0x574>
				aud_error("[SSP]ERROR [%s][%d]...force break\n", __func__, __LINE__);
    83f43b76:	0000d697          	auipc	a3,0xd
    83f43b7a:	44a68693          	addi	a3,a3,1098 # 83f50fc0 <__func__.1>
    83f43b7e:	0d900713          	li	a4,217
    83f43b82:	0d900613          	li	a2,217
    83f43b86:	85b6                	mv	a1,a3
    83f43b88:	0000c517          	auipc	a0,0xc
    83f43b8c:	6b050513          	addi	a0,a0,1712 # 83f50238 <__rodata_start+0xf8>
    83f43b90:	404080ef          	jal	ra,83f4bf94 <printf>
				break;
    83f43b94:	b169                	j	83f4381e <prvAudioRunTask+0x98>
						aud_error("[audio_task]CviAudio_Algo_Process error!!!\n");
    83f43b96:	14900613          	li	a2,329
    83f43b9a:	0000d597          	auipc	a1,0xd
    83f43b9e:	42658593          	addi	a1,a1,1062 # 83f50fc0 <__func__.1>
    83f43ba2:	0000d517          	auipc	a0,0xd
    83f43ba6:	a0e50513          	addi	a0,a0,-1522 # 83f505b0 <__rodata_start+0x470>
    83f43baa:	e842                	sd	a6,16(sp)
    83f43bac:	3e8080ef          	jal	ra,83f4bf94 <printf>
    83f43bb0:	6842                	ld	a6,16(sp)
    83f43bb2:	b5d9                	j	83f43a78 <prvAudioRunTask+0x2f2>
						ret_val = CviAud_Algo_Process(paudio_ssp_handle,
    83f43bb4:	0a000713          	li	a4,160
    83f43bb8:	4601                	li	a2,0
    83f43bba:	4e6000ef          	jal	ra,83f440a0 <CviAud_Algo_Process>
    83f43bbe:	0ff57813          	andi	a6,a0,255
    83f43bc2:	b56d                	j	83f43a6c <prvAudioRunTask+0x2e6>
						inv_dcache_range((uintptr_t)pindicator, sizeof(ST_SSP_RTOS_INDICATOR));
    83f43bc4:	45c1                	li	a1,16
    83f43bc6:	e442                	sd	a6,8(sp)
    83f43bc8:	348080ef          	jal	ra,83f4bf10 <inv_dcache_range>
						inv_dcache_range((uintptr_t)pstSspBufTbl,
    83f43bcc:	6088                	ld	a0,0(s1)
    83f43bce:	32000593          	li	a1,800
						bCheck_input_full = 0;
    83f43bd2:	4901                	li	s2,0
						inv_dcache_range((uintptr_t)pstSspBufTbl,
    83f43bd4:	33c080ef          	jal	ra,83f4bf10 <inv_dcache_range>
				cur_pt = pindicator->Ppt_index;
    83f43bd8:	000bb503          	ld	a0,0(s7)
						break;
    83f43bdc:	6822                	ld	a6,8(sp)
				proc_pkt_cnt = 0;
    83f43bde:	4d81                	li	s11,0
				chn_num = pindicator->channel_nums;
    83f43be0:	00454783          	lbu	a5,4(a0)
				cur_pt = pindicator->Ppt_index;
    83f43be4:	00354d03          	lbu	s10,3(a0)
				chn_num = pindicator->channel_nums;
    83f43be8:	e43e                	sd	a5,8(sp)
				while ((proc_pkt_cnt != target_pkt_cnt) && (bCheck_input_full)) {
    83f43bea:	b591                	j	83f43a2e <prvAudioRunTask+0x2a8>
		aud_error("[error][rtos][audio_task]wpt_index invalid range[%d]\n",
    83f43bec:	08600613          	li	a2,134
    83f43bf0:	0000d597          	auipc	a1,0xd
    83f43bf4:	3a858593          	addi	a1,a1,936 # 83f50f98 <__func__.0>
    83f43bf8:	0000d517          	auipc	a0,0xd
    83f43bfc:	8e050513          	addi	a0,a0,-1824 # 83f504d8 <__rodata_start+0x398>
    83f43c00:	394080ef          	jal	ra,83f4bf94 <printf>
	if (!pIndicator->ssp_on) {
    83f43c04:	00594783          	lbu	a5,5(s2)
    83f43c08:	ef91                	bnez	a5,83f43c24 <prvAudioRunTask+0x49e>
		aud_error("[error][rtos][audio_task]ssp_on invalid[%d]\n",
    83f43c0a:	4681                	li	a3,0
    83f43c0c:	08c00613          	li	a2,140
    83f43c10:	0000d597          	auipc	a1,0xd
    83f43c14:	38858593          	addi	a1,a1,904 # 83f50f98 <__func__.0>
    83f43c18:	0000d517          	auipc	a0,0xd
    83f43c1c:	87050513          	addi	a0,a0,-1936 # 83f50488 <__rodata_start+0x348>
    83f43c20:	374080ef          	jal	ra,83f4bf94 <printf>
					aud_error("Error[%s][%d]..force break!!\n", __func__, __LINE__);
    83f43c24:	0000d697          	auipc	a3,0xd
    83f43c28:	39c68693          	addi	a3,a3,924 # 83f50fc0 <__func__.1>
    83f43c2c:	10c00713          	li	a4,268
    83f43c30:	10c00613          	li	a2,268
    83f43c34:	85b6                	mv	a1,a3
    83f43c36:	0000d517          	auipc	a0,0xd
    83f43c3a:	8fa50513          	addi	a0,a0,-1798 # 83f50530 <__rodata_start+0x3f0>
    83f43c3e:	356080ef          	jal	ra,83f4bf94 <printf>
					break;
    83f43c42:	bef1                	j	83f4381e <prvAudioRunTask+0x98>
		aud_error("[error][rtos][audio_task]invalid chunks_number[%d]\n",
    83f43c44:	08000613          	li	a2,128
    83f43c48:	0000d597          	auipc	a1,0xd
    83f43c4c:	35058593          	addi	a1,a1,848 # 83f50f98 <__func__.0>
    83f43c50:	0000c517          	auipc	a0,0xc
    83f43c54:	7e850513          	addi	a0,a0,2024 # 83f50438 <__rodata_start+0x2f8>
    83f43c58:	33c080ef          	jal	ra,83f4bf94 <printf>
	if (pIndicator->Wpt_index > CVIAUDIO_SSP_CHUNK_NUMBERS) {
    83f43c5c:	00194683          	lbu	a3,1(s2)
    83f43c60:	47e5                	li	a5,25
    83f43c62:	f8d7e5e3          	bltu	a5,a3,83f43bec <prvAudioRunTask+0x466>
	if (!pIndicator->ssp_on) {
    83f43c66:	00594783          	lbu	a5,5(s2)
    83f43c6a:	ffcd                	bnez	a5,83f43c24 <prvAudioRunTask+0x49e>
    83f43c6c:	bf79                	j	83f43c0a <prvAudioRunTask+0x484>
			aud_info("[RTOS]Leaving\n");
			}
			break;
		default:
			aud_error("[error][rtos][audio_task]unrecognized cmd error[%d]\n", rtos_cmdq.cmd_id);
    83f43c6e:	2a500613          	li	a2,677
    83f43c72:	0000d597          	auipc	a1,0xd
    83f43c76:	34e58593          	addi	a1,a1,846 # 83f50fc0 <__func__.1>
    83f43c7a:	0000d517          	auipc	a0,0xd
    83f43c7e:	d0650513          	addi	a0,a0,-762 # 83f50980 <__rodata_start+0x840>
    83f43c82:	312080ef          	jal	ra,83f4bf94 <printf>
			break;
    83f43c86:	be61                	j	83f4381e <prvAudioRunTask+0x98>
					aud_error("[audio_task] counter same[%d][%d]\n",
    83f43c88:	86ba                	mv	a3,a4
    83f43c8a:	11200613          	li	a2,274
    83f43c8e:	0000d597          	auipc	a1,0xd
    83f43c92:	33258593          	addi	a1,a1,818 # 83f50fc0 <__func__.1>
    83f43c96:	0000d517          	auipc	a0,0xd
    83f43c9a:	8da50513          	addi	a0,a0,-1830 # 83f50570 <__rodata_start+0x430>
    83f43c9e:	e442                	sd	a6,8(sp)
    83f43ca0:	2f4080ef          	jal	ra,83f4bf94 <printf>
					inv_dcache_range((uintptr_t)pindicator, sizeof(ST_SSP_RTOS_INDICATOR));
    83f43ca4:	000bb503          	ld	a0,0(s7)
    83f43ca8:	45c1                	li	a1,16
    83f43caa:	266080ef          	jal	ra,83f4bf10 <inv_dcache_range>
					inv_dcache_range((uintptr_t)pstSspBufTbl,
    83f43cae:	6088                	ld	a0,0(s1)
    83f43cb0:	32000593          	li	a1,800
    83f43cb4:	25c080ef          	jal	ra,83f4bf10 <inv_dcache_range>
					if (pindicator) {
    83f43cb8:	000bb503          	ld	a0,0(s7)
    83f43cbc:	6822                	ld	a6,8(sp)
    83f43cbe:	d20508e3          	beqz	a0,83f439ee <prvAudioRunTask+0x268>
						if (pindicator->chunks_number >= 5)
    83f43cc2:	00054783          	lbu	a5,0(a0)
    83f43cc6:	4711                	li	a4,4
    83f43cc8:	2ef76563          	bltu	a4,a5,83f43fb2 <prvAudioRunTask+0x82c>
						else if (pindicator->chunks_number >= 3)
    83f43ccc:	e442                	sd	a6,8(sp)
    83f43cce:	2cf9f963          	bgeu	s3,a5,83f43fa0 <prvAudioRunTask+0x81a>
							vTaskDelay(pdMS_TO_TICKS(5));
    83f43cd2:	4505                	li	a0,1
    83f43cd4:	6b70b0ef          	jal	ra,83f4fb8a <vTaskDelay>
				target_pkt_cnt = pindicator->chunks_number;
    83f43cd8:	000bb503          	ld	a0,0(s7)
    83f43cdc:	6822                	ld	a6,8(sp)
    83f43cde:	bb01                	j	83f439ee <prvAudioRunTask+0x268>
		aud_error("[error][rtos][audio_task]Null pt detect in proc data...\n");
    83f43ce0:	07300613          	li	a2,115
    83f43ce4:	0000d597          	auipc	a1,0xd
    83f43ce8:	2b458593          	addi	a1,a1,692 # 83f50f98 <__func__.0>
    83f43cec:	0000c517          	auipc	a0,0xc
    83f43cf0:	69c50513          	addi	a0,a0,1692 # 83f50388 <__rodata_start+0x248>
    83f43cf4:	2a0080ef          	jal	ra,83f4bf94 <printf>
				if (!ret_val) {
    83f43cf8:	b735                	j	83f43c24 <prvAudioRunTask+0x49e>
				pindicator = (ST_SSP_RTOS_INDICATOR *)gpstCviaudioMailBox->indicatorPhy;
    83f43cfa:	01893783          	ld	a5,24(s2)
				pstSspBufTbl = (ST_SSP_BUFTBL	*)gpstCviaudioMailBox->buffertblPhy;
    83f43cfe:	01093703          	ld	a4,16(s2)
				pstVqeConfig = (AI_TALKVQE_CONFIG_S *)gpstCviaudioMailBox->AinVqeCfgPhy;
    83f43d02:	00893503          	ld	a0,8(s2)
    83f43d06:	0001c697          	auipc	a3,0x1c
    83f43d0a:	efa68693          	addi	a3,a3,-262 # 83f5fc00 <pstVqeConfig>
				inv_dcache_range((uintptr_t)gpstCviaudioMailBox->AinVqeCfgPhy,
    83f43d0e:	07800593          	li	a1,120
				pstVqeConfig = (AI_TALKVQE_CONFIG_S *)gpstCviaudioMailBox->AinVqeCfgPhy;
    83f43d12:	e288                	sd	a0,0(a3)
				pindicator = (ST_SSP_RTOS_INDICATOR *)gpstCviaudioMailBox->indicatorPhy;
    83f43d14:	00fbb023          	sd	a5,0(s7)
				pstSspBufTbl = (ST_SSP_BUFTBL	*)gpstCviaudioMailBox->buffertblPhy;
    83f43d18:	e098                	sd	a4,0(s1)
				inv_dcache_range((uintptr_t)gpstCviaudioMailBox->AinVqeCfgPhy,
    83f43d1a:	1f6080ef          	jal	ra,83f4bf10 <inv_dcache_range>
				inv_dcache_range((uintptr_t)gpstCviaudioMailBox->buffertblPhy,
    83f43d1e:	01093503          	ld	a0,16(s2)
    83f43d22:	02000593          	li	a1,32
    83f43d26:	1ea080ef          	jal	ra,83f4bf10 <inv_dcache_range>
				inv_dcache_range((uintptr_t)gpstCviaudioMailBox->indicatorPhy,
    83f43d2a:	01893503          	ld	a0,24(s2)
    83f43d2e:	45c1                	li	a1,16
    83f43d30:	1e0080ef          	jal	ra,83f4bf10 <inv_dcache_range>
			if (paudio_ssp_handle != NULL) {
    83f43d34:	0001c797          	auipc	a5,0x1c
    83f43d38:	eb478793          	addi	a5,a5,-332 # 83f5fbe8 <paudio_ssp_handle>
    83f43d3c:	639c                	ld	a5,0(a5)
    83f43d3e:	cf89                	beqz	a5,83f43d58 <prvAudioRunTask+0x5d2>
				aud_error("Warning ssp audio handle is not NULL\n");
    83f43d40:	0e700613          	li	a2,231
    83f43d44:	0000d597          	auipc	a1,0xd
    83f43d48:	27c58593          	addi	a1,a1,636 # 83f50fc0 <__func__.1>
    83f43d4c:	0000c517          	auipc	a0,0xc
    83f43d50:	52c50513          	addi	a0,a0,1324 # 83f50278 <__rodata_start+0x138>
    83f43d54:	240080ef          	jal	ra,83f4bf94 <printf>
			paudio_ssp_handle = CviAud_Algo_Init(pstVqeConfig->u32OpenMask, pstVqeConfig);
    83f43d58:	0001c797          	auipc	a5,0x1c
    83f43d5c:	ea878793          	addi	a5,a5,-344 # 83f5fc00 <pstVqeConfig>
    83f43d60:	638c                	ld	a1,0(a5)
    83f43d62:	41c8                	lw	a0,4(a1)
    83f43d64:	298000ef          	jal	ra,83f43ffc <CviAud_Algo_Init>
    83f43d68:	0001c797          	auipc	a5,0x1c
    83f43d6c:	e8078793          	addi	a5,a5,-384 # 83f5fbe8 <paudio_ssp_handle>
    83f43d70:	e388                	sd	a0,0(a5)
			if (paudio_ssp_handle == NULL) {
    83f43d72:	26050763          	beqz	a0,83f43fe0 <prvAudioRunTask+0x85a>
				ssp_running = 1;
    83f43d76:	4785                	li	a5,1
    83f43d78:	0001c717          	auipc	a4,0x1c
    83f43d7c:	e9070713          	addi	a4,a4,-368 # 83f5fc08 <ssp_running>
    83f43d80:	00f70023          	sb	a5,0(a4)
    83f43d84:	b471                	j	83f43810 <prvAudioRunTask+0x8a>
			_pstVqeConfig = (AI_TALKVQE_CONFIG_S_RTOS *)pstAudBlockMailBox->AinVqeCfgPhy;
    83f43d86:	00893a03          	ld	s4,8(s2)
			inv_dcache_range((uintptr_t)_pstVqeConfig, sizeof(AI_TALKVQE_CONFIG_S_RTOS));
    83f43d8a:	02000593          	li	a1,32
    83f43d8e:	8552                	mv	a0,s4
    83f43d90:	180080ef          	jal	ra,83f4bf10 <inv_dcache_range>
			printf("SSP_INIT dump-----------------------------------------------------\n");
    83f43d94:	0000d517          	auipc	a0,0xd
    83f43d98:	90c50513          	addi	a0,a0,-1780 # 83f506a0 <__rodata_start+0x560>
    83f43d9c:	1f8080ef          	jal	ra,83f4bf94 <printf>
			printf("para_client_config[%d]\n", _pstVqeConfig->para_client_config);
    83f43da0:	000a4583          	lbu	a1,0(s4)
    83f43da4:	0000d517          	auipc	a0,0xd
    83f43da8:	94450513          	addi	a0,a0,-1724 # 83f506e8 <__rodata_start+0x5a8>
    83f43dac:	1e8080ef          	jal	ra,83f4bf94 <printf>
			printf("u32OpenMask[0x%x]\n", _pstVqeConfig->u32OpenMask);
    83f43db0:	001a4583          	lbu	a1,1(s4)
    83f43db4:	0000d517          	auipc	a0,0xd
    83f43db8:	94c50513          	addi	a0,a0,-1716 # 83f50700 <__rodata_start+0x5c0>
    83f43dbc:	1d8080ef          	jal	ra,83f4bf94 <printf>
			printf("s32WorkSampleRate[%d]\n", _pstVqeConfig->s32WorkSampleRate);
    83f43dc0:	002a5583          	lhu	a1,2(s4)
    83f43dc4:	0000d517          	auipc	a0,0xd
    83f43dc8:	95450513          	addi	a0,a0,-1708 # 83f50718 <__rodata_start+0x5d8>
    83f43dcc:	1c8080ef          	jal	ra,83f4bf94 <printf>
			printf("stAecCfg.para_aec_filter_len[%d]\n", _pstVqeConfig->stAecCfg.para_aec_filter_len);
    83f43dd0:	004a4583          	lbu	a1,4(s4)
    83f43dd4:	0000d517          	auipc	a0,0xd
    83f43dd8:	95c50513          	addi	a0,a0,-1700 # 83f50730 <__rodata_start+0x5f0>
    83f43ddc:	1b8080ef          	jal	ra,83f4bf94 <printf>
			printf("stAecCfg.para_aes_std_thrd[%d]\n", _pstVqeConfig->stAecCfg.para_aes_std_thrd);
    83f43de0:	005a4583          	lbu	a1,5(s4)
    83f43de4:	0000d517          	auipc	a0,0xd
    83f43de8:	97450513          	addi	a0,a0,-1676 # 83f50758 <__rodata_start+0x618>
    83f43dec:	1a8080ef          	jal	ra,83f4bf94 <printf>
			printf("stAecCfg.para_aes_supp_coeff[%d]\n", _pstVqeConfig->stAecCfg.para_aes_supp_coeff);
    83f43df0:	006a4583          	lbu	a1,6(s4)
    83f43df4:	0000d517          	auipc	a0,0xd
    83f43df8:	98450513          	addi	a0,a0,-1660 # 83f50778 <__rodata_start+0x638>
    83f43dfc:	198080ef          	jal	ra,83f4bf94 <printf>
			printf("SSP_INIT dump-----------------------------------------------------[end]\n");
    83f43e00:	0000d517          	auipc	a0,0xd
    83f43e04:	9a050513          	addi	a0,a0,-1632 # 83f507a0 <__rodata_start+0x660>
    83f43e08:	18c080ef          	jal	ra,83f4bf94 <printf>
			pVqeConfigSsp->para_client_config = _pstVqeConfig->para_client_config;
    83f43e0c:	000a4783          	lbu	a5,0(s4)
    83f43e10:	02f11c23          	sh	a5,56(sp)
			pVqeConfigSsp->u32OpenMask = _pstVqeConfig->u32OpenMask;
    83f43e14:	001a4783          	lbu	a5,1(s4)
    83f43e18:	de3e                	sw	a5,60(sp)
			pVqeConfigSsp->s32WorkSampleRate = _pstVqeConfig->s32WorkSampleRate;
    83f43e1a:	002a5783          	lhu	a5,2(s4)
    83f43e1e:	c0be                	sw	a5,64(sp)
			pVqeConfigSsp->stAecCfg.para_aec_filter_len = _pstVqeConfig->stAecCfg.para_aec_filter_len;
    83f43e20:	004a4783          	lbu	a5,4(s4)
    83f43e24:	04f11423          	sh	a5,72(sp)
			pVqeConfigSsp->stAecCfg.para_aes_std_thrd = _pstVqeConfig->stAecCfg.para_aes_std_thrd;
    83f43e28:	005a4783          	lbu	a5,5(s4)
    83f43e2c:	04f11523          	sh	a5,74(sp)
			pVqeConfigSsp->stAecCfg.para_aes_supp_coeff = _pstVqeConfig->stAecCfg.para_aes_supp_coeff;
    83f43e30:	006a4783          	lbu	a5,6(s4)
    83f43e34:	04f11623          	sh	a5,76(sp)
			pVqeConfigSsp->stAnrCfg.para_nr_snr_coeff = _pstVqeConfig->stAnrCfg.para_nr_snr_coeff;
    83f43e38:	008a4783          	lbu	a5,8(s4)
    83f43e3c:	04f11823          	sh	a5,80(sp)
			pVqeConfigSsp->stAnrCfg.para_nr_init_sile_time = _pstVqeConfig->stAnrCfg.para_nr_init_sile_time;
    83f43e40:	009a4783          	lbu	a5,9(s4)
    83f43e44:	04f11923          	sh	a5,82(sp)
			pVqeConfigSsp->stAgcCfg.para_agc_max_gain = _pstVqeConfig->stAgcCfg.para_agc_max_gain;
    83f43e48:	00ca4783          	lbu	a5,12(s4)
    83f43e4c:	04f10c23          	sb	a5,88(sp)
			pVqeConfigSsp->stAgcCfg.para_agc_target_high = _pstVqeConfig->stAgcCfg.para_agc_target_high;
    83f43e50:	00da4783          	lbu	a5,13(s4)
    83f43e54:	04f10ca3          	sb	a5,89(sp)
			pVqeConfigSsp->stAgcCfg.para_agc_target_low = _pstVqeConfig->stAgcCfg.para_agc_target_low;
    83f43e58:	00ea4783          	lbu	a5,14(s4)
    83f43e5c:	04f10d23          	sb	a5,90(sp)
			pVqeConfigSsp->stAgcCfg.para_agc_vad_ena = _pstVqeConfig->stAgcCfg.para_agc_vad_ena;
    83f43e60:	00fa4783          	lbu	a5,15(s4)
    83f43e64:	00f037b3          	snez	a5,a5
    83f43e68:	04f10da3          	sb	a5,91(sp)
								_pstVqeConfig->stAecDelayCfg.para_aec_init_filter_len;
    83f43e6c:	010a4783          	lbu	a5,16(s4)
    83f43e70:	06f11023          	sh	a5,96(sp)
			pVqeConfigSsp->stAecDelayCfg.para_dg_target = _pstVqeConfig->stAecDelayCfg.para_dg_target;
    83f43e74:	011a4783          	lbu	a5,17(s4)
    83f43e78:	06f11123          	sh	a5,98(sp)
			pVqeConfigSsp->stAecDelayCfg.para_delay_sample = _pstVqeConfig->stAecDelayCfg.para_delay_sample;
    83f43e7c:	012a4783          	lbu	a5,18(s4)
    83f43e80:	06f11223          	sh	a5,100(sp)
			pVqeConfigSsp->s32RevMask = _pstVqeConfig->s32RevMask;
    83f43e84:	014a4783          	lbu	a5,20(s4)
    83f43e88:	d4be                	sw	a5,104(sp)
			pVqeConfigSsp->para_notch_freq = _pstVqeConfig->para_notch_freq;
    83f43e8a:	015a4703          	lbu	a4,21(s4)
			if (paudio_ssp_block != NULL)
    83f43e8e:	0001c797          	auipc	a5,0x1c
    83f43e92:	d5278793          	addi	a5,a5,-686 # 83f5fbe0 <paudio_ssp_block>
    83f43e96:	639c                	ld	a5,0(a5)
			pVqeConfigSsp->para_notch_freq = _pstVqeConfig->para_notch_freq;
    83f43e98:	d6ba                	sw	a4,108(sp)
			if (paudio_ssp_block != NULL)
    83f43e9a:	cf89                	beqz	a5,83f43eb4 <prvAudioRunTask+0x72e>
				aud_error("warning paudio_ssp_blcok not Null..\n");
    83f43e9c:	24900613          	li	a2,585
    83f43ea0:	0000d597          	auipc	a1,0xd
    83f43ea4:	12058593          	addi	a1,a1,288 # 83f50fc0 <__func__.1>
    83f43ea8:	0000d517          	auipc	a0,0xd
    83f43eac:	94850513          	addi	a0,a0,-1720 # 83f507f0 <__rodata_start+0x6b0>
    83f43eb0:	0e4080ef          	jal	ra,83f4bf94 <printf>
			paudio_ssp_block = CviAud_Algo_Init(pVqeConfigSsp->u32OpenMask, pVqeConfigSsp);
    83f43eb4:	5572                	lw	a0,60(sp)
    83f43eb6:	182c                	addi	a1,sp,56
    83f43eb8:	144000ef          	jal	ra,83f43ffc <CviAud_Algo_Init>
    83f43ebc:	0001c797          	auipc	a5,0x1c
    83f43ec0:	d2478793          	addi	a5,a5,-732 # 83f5fbe0 <paudio_ssp_block>
    83f43ec4:	e388                	sd	a0,0(a5)
			if (paudio_ssp_block == NULL) {
    83f43ec6:	940515e3          	bnez	a0,83f43810 <prvAudioRunTask+0x8a>
				aud_error("[CVIAUDIO_RTOS_CMD_SSP_INIT_BLOCK]paudio_ssp_block failure\n");
    83f43eca:	0000d597          	auipc	a1,0xd
    83f43ece:	0f658593          	addi	a1,a1,246 # 83f50fc0 <__func__.1>
    83f43ed2:	24d00613          	li	a2,589
    83f43ed6:	0000d517          	auipc	a0,0xd
    83f43eda:	96250513          	addi	a0,a0,-1694 # 83f50838 <__rodata_start+0x6f8>
    83f43ede:	0b6080ef          	jal	ra,83f4bf94 <printf>
				rtos_cmdq.param_ptr = CVIAUDIO_RTOS_BLOCK_MODE_FAILURE_FLAG;
    83f43ee2:	0fa00793          	li	a5,250
				clean_dcache_range((uintptr_t)pstAudBlockMailBox, sizeof(ST_CVIAUDIO_MAILBOX_BLOCK));
    83f43ee6:	854a                	mv	a0,s2
    83f43ee8:	45c1                	li	a1,16
				rtos_cmdq.param_ptr = CVIAUDIO_RTOS_BLOCK_MODE_FAILURE_FLAG;
    83f43eea:	da3e                	sw	a5,52(sp)
				clean_dcache_range((uintptr_t)pstAudBlockMailBox, sizeof(ST_CVIAUDIO_MAILBOX_BLOCK));
    83f43eec:	ba65                	j	83f438a4 <prvAudioRunTask+0x11e>
				aud_error("Error cannot de-init null pt\n");
    83f43eee:	0f600613          	li	a2,246
    83f43ef2:	0000d597          	auipc	a1,0xd
    83f43ef6:	0ce58593          	addi	a1,a1,206 # 83f50fc0 <__func__.1>
    83f43efa:	0000c517          	auipc	a0,0xc
    83f43efe:	3fe50513          	addi	a0,a0,1022 # 83f502f8 <__rodata_start+0x1b8>
    83f43f02:	092080ef          	jal	ra,83f4bf94 <printf>
    83f43f06:	befd                	j	83f43b04 <prvAudioRunTask+0x37e>
				aud_error("Error cannot de-init null pt\n");
    83f43f08:	25e00613          	li	a2,606
    83f43f0c:	0000d597          	auipc	a1,0xd
    83f43f10:	0b458593          	addi	a1,a1,180 # 83f50fc0 <__func__.1>
    83f43f14:	0000c517          	auipc	a0,0xc
    83f43f18:	3e450513          	addi	a0,a0,996 # 83f502f8 <__rodata_start+0x1b8>
    83f43f1c:	078080ef          	jal	ra,83f4bf94 <printf>
    83f43f20:	b8c5                	j	83f43810 <prvAudioRunTask+0x8a>
				aud_error("Error cannot proc with null paudio_ssp_block\n");
    83f43f22:	26b00613          	li	a2,619
    83f43f26:	0000d597          	auipc	a1,0xd
    83f43f2a:	09a58593          	addi	a1,a1,154 # 83f50fc0 <__func__.1>
    83f43f2e:	0000d517          	auipc	a0,0xd
    83f43f32:	96250513          	addi	a0,a0,-1694 # 83f50890 <__rodata_start+0x750>
    83f43f36:	05e080ef          	jal	ra,83f4bf94 <printf>
				xQueueSend(xQueueAudioCmdqu, &rtos_cmdq, 0U);
    83f43f3a:	000c3503          	ld	a0,0(s8)
				rtos_cmdq.param_ptr = CVIAUDIO_RTOS_BLOCK_MODE_FAILURE_FLAG;
    83f43f3e:	0fa00793          	li	a5,250
				xQueueSend(xQueueAudioCmdqu, &rtos_cmdq, 0U);
    83f43f42:	4681                	li	a3,0
    83f43f44:	4601                	li	a2,0
    83f43f46:	180c                	addi	a1,sp,48
				rtos_cmdq.param_ptr = CVIAUDIO_RTOS_BLOCK_MODE_FAILURE_FLAG;
    83f43f48:	da3e                	sw	a5,52(sp)
				xQueueSend(xQueueAudioCmdqu, &rtos_cmdq, 0U);
    83f43f4a:	2fd0a0ef          	jal	ra,83f4ea46 <xQueueGenericSend>
				break;
    83f43f4e:	8d1ff06f          	j	83f4381e <prvAudioRunTask+0x98>
				ret = CviAud_Algo_Process(paudio_ssp_block,
    83f43f52:	0001c797          	auipc	a5,0x1c
    83f43f56:	c8e78793          	addi	a5,a5,-882 # 83f5fbe0 <paudio_ssp_block>
    83f43f5a:	01893683          	ld	a3,24(s2)
    83f43f5e:	01093603          	ld	a2,16(s2)
    83f43f62:	00893583          	ld	a1,8(s2)
    83f43f66:	6388                	ld	a0,0(a5)
    83f43f68:	0a000713          	li	a4,160
    83f43f6c:	134000ef          	jal	ra,83f440a0 <CviAud_Algo_Process>
				if (ret < 0) {
    83f43f70:	04054863          	bltz	a0,83f43fc0 <prvAudioRunTask+0x83a>
			clean_dcache_range((uintptr_t)pstBlockFrm, sizeof(ST_CVIAUDIO_BLOCK_FRAME));
    83f43f74:	854a                	mv	a0,s2
    83f43f76:	02000593          	li	a1,32
    83f43f7a:	7bb070ef          	jal	ra,83f4bf34 <clean_dcache_range>
			clean_dcache_range((uintptr_t)pstBlockFrm->mic_in_addr, 1280);
    83f43f7e:	00893503          	ld	a0,8(s2)
    83f43f82:	50000593          	li	a1,1280
    83f43f86:	7af070ef          	jal	ra,83f4bf34 <clean_dcache_range>
			clean_dcache_range((uintptr_t)pstBlockFrm->output_addr, 1280);
    83f43f8a:	01893503          	ld	a0,24(s2)
    83f43f8e:	50000593          	li	a1,1280
    83f43f92:	7a3070ef          	jal	ra,83f4bf34 <clean_dcache_range>
			clean_dcache_range((uintptr_t)pstBlockFrm->ref_in_addr, 1280);
    83f43f96:	01093503          	ld	a0,16(s2)
    83f43f9a:	50000593          	li	a1,1280
    83f43f9e:	b219                	j	83f438a4 <prvAudioRunTask+0x11e>
							usleep(3000);
    83f43fa0:	7522                	ld	a0,40(sp)
    83f43fa2:	054080ef          	jal	ra,83f4bff6 <usleep>
				target_pkt_cnt = pindicator->chunks_number;
    83f43fa6:	000bb503          	ld	a0,0(s7)
    83f43faa:	6822                	ld	a6,8(sp)
    83f43fac:	b489                	j	83f439ee <prvAudioRunTask+0x268>
				unsigned char bCheck_input_full = 1;
    83f43fae:	8942                	mv	s2,a6
    83f43fb0:	bc9d                	j	83f43a26 <prvAudioRunTask+0x2a0>
							vTaskDelay(pdMS_TO_TICKS(10));
    83f43fb2:	4509                	li	a0,2
    83f43fb4:	3d70b0ef          	jal	ra,83f4fb8a <vTaskDelay>
				target_pkt_cnt = pindicator->chunks_number;
    83f43fb8:	000bb503          	ld	a0,0(s7)
    83f43fbc:	6822                	ld	a6,8(sp)
    83f43fbe:	bc05                	j	83f439ee <prvAudioRunTask+0x268>
					aud_error("Error in CviAud_Algo_Process\n");
    83f43fc0:	28800613          	li	a2,648
    83f43fc4:	0000d597          	auipc	a1,0xd
    83f43fc8:	ffc58593          	addi	a1,a1,-4 # 83f50fc0 <__func__.1>
    83f43fcc:	0000d517          	auipc	a0,0xd
    83f43fd0:	97450513          	addi	a0,a0,-1676 # 83f50940 <__rodata_start+0x800>
    83f43fd4:	7c1070ef          	jal	ra,83f4bf94 <printf>
					rtos_cmdq.param_ptr = CVIAUDIO_RTOS_BLOCK_MODE_FAILURE_FLAG;
    83f43fd8:	0fa00793          	li	a5,250
    83f43fdc:	da3e                	sw	a5,52(sp)
    83f43fde:	bf59                	j	83f43f74 <prvAudioRunTask+0x7ee>
				aud_error("get null pt in init ssp\n");
    83f43fe0:	0eb00613          	li	a2,235
    83f43fe4:	0000d597          	auipc	a1,0xd
    83f43fe8:	fdc58593          	addi	a1,a1,-36 # 83f50fc0 <__func__.1>
    83f43fec:	0000c517          	auipc	a0,0xc
    83f43ff0:	2d450513          	addi	a0,a0,724 # 83f502c0 <__rodata_start+0x180>
    83f43ff4:	7a1070ef          	jal	ra,83f4bf94 <printf>
    83f43ff8:	819ff06f          	j	83f43810 <prvAudioRunTask+0x8a>

0000000083f43ffc <CviAud_Algo_Init>:
 * Outputs:  none
 *
 * Return: algo handle
 **************************************************************************************/
void *CviAud_Algo_Init(int s32FunctMask, void *param_info)
{
    83f43ffc:	7159                	addi	sp,sp,-112
    83f43ffe:	f0a2                	sd	s0,96(sp)
	const AI_TALKVQE_CONFIG_S *pstVqeConfig = (const AI_TALKVQE_CONFIG_S *)param_info;
	ssp_para_struct ssp_para_info;
	ssp_para_struct *p_ssp_para_info = &ssp_para_info;

	s32FunctMask = s32FunctMask;
	memset(p_ssp_para_info, 0, sizeof(ssp_para_struct));
    83f44000:	05200613          	li	a2,82
{
    83f44004:	842e                	mv	s0,a1
	memset(p_ssp_para_info, 0, sizeof(ssp_para_struct));
    83f44006:	0028                	addi	a0,sp,8
    83f44008:	4581                	li	a1,0
{
    83f4400a:	f486                	sd	ra,104(sp)
	memset(p_ssp_para_info, 0, sizeof(ssp_para_struct));
    83f4400c:	771070ef          	jal	ra,83f4bf7c <memset>
	ssp_para_info.para_agc_target_low = 72;
	ssp_para_info.para_agc_vad_ena = 1;
	ssp_para_info.para_notch_freq = 0;
	ssp_para_info.para_spk_fun_config = 0;
	ssp_para_info.para_spk_agc_max_gain = 0;
	ssp_para_info.para_spk_agc_target_high = 8;
    83f44010:	004807b7          	lui	a5,0x480
    83f44014:	07a1                	addi	a5,a5,8


	//update value from use layer
	//ssp_para_info.para_sample_rate = pstVqeConfig->s32WorkSampleRate;//only support 8k and 16k
	ssp_para_info.para_client_config = pstVqeConfig->para_client_config;
	ssp_para_info.para_fun_config = pstVqeConfig->u32OpenMask;
    83f44016:	00442383          	lw	t2,4(s0)
	//update aec config
	ssp_para_info.para_aec_filter_len = pstVqeConfig->stAecCfg.para_aec_filter_len;
    83f4401a:	01045283          	lhu	t0,16(s0)
	ssp_para_info.para_aes_std_thrd = pstVqeConfig->stAecCfg.para_aes_std_thrd;
    83f4401e:	01245f83          	lhu	t6,18(s0)
	ssp_para_info.para_aes_supp_coeff = pstVqeConfig->stAecCfg.para_aes_supp_coeff;
    83f44022:	01445f03          	lhu	t5,20(s0)
	//update nr config
	ssp_para_info.para_nr_init_sile_time = pstVqeConfig->stAnrCfg.para_nr_init_sile_time;
    83f44026:	01a45e83          	lhu	t4,26(s0)
	ssp_para_info.para_nr_snr_coeff = pstVqeConfig->stAnrCfg.para_nr_snr_coeff;;
    83f4402a:	01845e03          	lhu	t3,24(s0)
	//update agc config
	ssp_para_info.para_agc_max_gain = pstVqeConfig->stAgcCfg.para_agc_max_gain;
    83f4402e:	02040303          	lb	t1,32(s0)
	ssp_para_info.para_agc_target_high = pstVqeConfig->stAgcCfg.para_agc_target_high;;
    83f44032:	02140883          	lb	a7,33(s0)
	ssp_para_info.para_agc_target_low = pstVqeConfig->stAgcCfg.para_agc_target_low;
    83f44036:	02240803          	lb	a6,34(s0)
	ssp_para_info.para_agc_vad_ena =  pstVqeConfig->stAgcCfg.para_agc_vad_ena;
    83f4403a:	02344503          	lbu	a0,35(s0)
	//udpate sw aec config
	ssp_para_info.para_aec_init_filter_len = pstVqeConfig->stAecDelayCfg.para_aec_init_filter_len;
	ssp_para_info.para_dg_target = pstVqeConfig->stAecDelayCfg.para_dg_target;
    83f4403e:	02a45603          	lhu	a2,42(s0)
	ssp_para_info.para_delay_sample = pstVqeConfig->stAecDelayCfg.para_delay_sample;
    83f44042:	02c45683          	lhu	a3,44(s0)
	//update notch filter setting for specific customer
	ssp_para_info.para_notch_freq = pstVqeConfig->para_notch_freq;//only support 8k and 16k
    83f44046:	5858                	lw	a4,52(s0)
	ssp_para_info.para_aec_init_filter_len = pstVqeConfig->stAecDelayCfg.para_aec_init_filter_len;
    83f44048:	02845583          	lhu	a1,40(s0)
	ssp_para_info.para_spk_agc_target_high = 8;
    83f4404c:	d83e                	sw	a5,48(sp)
	ssp_para_info.para_client_config = pstVqeConfig->para_client_config;
    83f4404e:	00045783          	lhu	a5,0(s0)
	ssp_para_info.para_fun_config = pstVqeConfig->u32OpenMask;
    83f44052:	00711523          	sh	t2,10(sp)
	ssp_para_info.para_aec_filter_len = pstVqeConfig->stAecCfg.para_aec_filter_len;
    83f44056:	00511923          	sh	t0,18(sp)
	ssp_para_info.para_client_config = pstVqeConfig->para_client_config;
    83f4405a:	00f11423          	sh	a5,8(sp)
	ssp_para_info.para_aes_std_thrd = pstVqeConfig->stAecCfg.para_aes_std_thrd;
    83f4405e:	01f11a23          	sh	t6,20(sp)
	ssp_para_info.para_aes_supp_coeff = pstVqeConfig->stAecCfg.para_aes_supp_coeff;
    83f44062:	01e11b23          	sh	t5,22(sp)
	ssp_para_info.para_nr_init_sile_time = pstVqeConfig->stAnrCfg.para_nr_init_sile_time;
    83f44066:	01d11c23          	sh	t4,24(sp)
	ssp_para_info.para_nr_snr_coeff = pstVqeConfig->stAnrCfg.para_nr_snr_coeff;;
    83f4406a:	01c11d23          	sh	t3,26(sp)
	ssp_para_info.para_agc_max_gain = pstVqeConfig->stAgcCfg.para_agc_max_gain;
    83f4406e:	00611e23          	sh	t1,28(sp)
	ssp_para_info.para_agc_target_high = pstVqeConfig->stAgcCfg.para_agc_target_high;;
    83f44072:	01111f23          	sh	a7,30(sp)
	ssp_para_info.para_agc_target_low = pstVqeConfig->stAgcCfg.para_agc_target_low;
    83f44076:	03011023          	sh	a6,32(sp)
	ssp_para_info.para_agc_vad_ena =  pstVqeConfig->stAgcCfg.para_agc_vad_ena;
    83f4407a:	02a10123          	sb	a0,34(sp)
	ssp_para_info.para_dg_target = pstVqeConfig->stAecDelayCfg.para_dg_target;
    83f4407e:	00c11723          	sh	a2,14(sp)
	ssp_para_info.para_delay_sample = pstVqeConfig->stAecDelayCfg.para_delay_sample;
    83f44082:	00d11623          	sh	a3,12(sp)
	ssp_para_info.para_notch_freq = pstVqeConfig->para_notch_freq;//only support 8k and 16k
    83f44086:	02e11223          	sh	a4,36(sp)
	ssp_para_info.para_spk_fun_config = 0;
    83f4408a:	d602                	sw	zero,44(sp)
	ssp_para_info.para_aec_init_filter_len = pstVqeConfig->stAecDelayCfg.para_aec_init_filter_len;
    83f4408c:	00b11823          	sh	a1,16(sp)
	ssp_para_info.para_spk_agc_target_high = pstVqeConfig->stSpkCfg.para_spk_agc_target_high;
	ssp_para_info.para_spk_agc_target_low = pstVqeConfig->stSpkCfg.para_spk_agc_target_low;
	#endif


	_handle = (void *)audio_ssp_init((void *)p_ssp_para_info, pstVqeConfig->s32WorkSampleRate);
    83f44090:	440c                	lw	a1,8(s0)
    83f44092:	0028                	addi	a0,sp,8
    83f44094:	0b0000ef          	jal	ra,83f44144 <audio_ssp_init>


	return (void *)_handle;


}
    83f44098:	70a6                	ld	ra,104(sp)
    83f4409a:	7406                	ld	s0,96(sp)
    83f4409c:	6165                	addi	sp,sp,112
    83f4409e:	8082                	ret

0000000083f440a0 <CviAud_Algo_Process>:
 * Return:    output samples
 * Notes:       sure insamps < MAXFRAMESIZE
 **************************************************************************************/
int CviAud_Algo_Process(void *pHandle,  uint64_t mic_in,
			uint64_t ref_in, uint64_t out, int iLength)
{
    83f440a0:	1141                	addi	sp,sp,-16
    83f440a2:	e406                	sd	ra,8(sp)
    83f440a4:	e022                	sd	s0,0(sp)
//TODO: step 3[ok]  implement the function acquired
	SSP_UNUSED_REF(iLength);
	int ret = 0;
	int s32RetTotalSamples = 0;

	if (pHandle == NULL) {
    83f440a6:	c529                	beqz	a0,83f440f0 <CviAud_Algo_Process+0x50>
		printf("Null input [%s][%d]\n", __func__, __LINE__);
		return -1;
	}

	if (iLength != AEC_FRAME_LENGTH) {
    83f440a8:	0a000793          	li	a5,160
    83f440ac:	843a                	mv	s0,a4
    83f440ae:	00f71a63          	bne	a4,a5,83f440c2 <CviAud_Algo_Process+0x22>
		printf("input length only support 160 samples[%s][%d]\n", __func__, __LINE__);
		return -1;
	}

	ret = audio_ssp_process(pHandle, mic_in, ref_in, out, AEC_FRAME_LENGTH);
    83f440b2:	40c000ef          	jal	ra,83f444be <audio_ssp_process>
	if (ret != 0) {
    83f440b6:	e505                	bnez	a0,83f440de <CviAud_Algo_Process+0x3e>
	}
	s32RetTotalSamples = AEC_FRAME_LENGTH;

	return s32RetTotalSamples;

}
    83f440b8:	60a2                	ld	ra,8(sp)
    83f440ba:	8522                	mv	a0,s0
    83f440bc:	6402                	ld	s0,0(sp)
    83f440be:	0141                	addi	sp,sp,16
    83f440c0:	8082                	ret
		printf("input length only support 160 samples[%s][%d]\n", __func__, __LINE__);
    83f440c2:	0c000613          	li	a2,192
    83f440c6:	0000d597          	auipc	a1,0xd
    83f440ca:	fc258593          	addi	a1,a1,-62 # 83f51088 <__func__.3>
    83f440ce:	0000d517          	auipc	a0,0xd
    83f440d2:	f1a50513          	addi	a0,a0,-230 # 83f50fe8 <__func__.1+0x28>
    83f440d6:	6bf070ef          	jal	ra,83f4bf94 <printf>
		return -1;
    83f440da:	547d                	li	s0,-1
    83f440dc:	bff1                	j	83f440b8 <CviAud_Algo_Process+0x18>
		printf("audio_ssp_process error ret(%d).\n", ret);
    83f440de:	85aa                	mv	a1,a0
    83f440e0:	0000d517          	auipc	a0,0xd
    83f440e4:	f3850513          	addi	a0,a0,-200 # 83f51018 <__func__.1+0x58>
    83f440e8:	6ad070ef          	jal	ra,83f4bf94 <printf>
		return -1;
    83f440ec:	547d                	li	s0,-1
    83f440ee:	b7e9                	j	83f440b8 <CviAud_Algo_Process+0x18>
		printf("Null input [%s][%d]\n", __func__, __LINE__);
    83f440f0:	0bb00613          	li	a2,187
    83f440f4:	0000d597          	auipc	a1,0xd
    83f440f8:	f9458593          	addi	a1,a1,-108 # 83f51088 <__func__.3>
    83f440fc:	0000d517          	auipc	a0,0xd
    83f44100:	ed450513          	addi	a0,a0,-300 # 83f50fd0 <__func__.1+0x10>
    83f44104:	691070ef          	jal	ra,83f4bf94 <printf>
		return -1;
    83f44108:	547d                	li	s0,-1
    83f4410a:	b77d                	j	83f440b8 <CviAud_Algo_Process+0x18>

0000000083f4410c <CviAud_Algo_DeInit>:
 * Outputs:	none
 *
 * Return:      CVI_SUCCESS / CVI_FAILURE
 **************************************************************************************/
void CviAud_Algo_DeInit(void *pHandle)
{
    83f4410c:	1141                	addi	sp,sp,-16
    83f4410e:	e406                	sd	ra,8(sp)

	//VQE_UNUSED_REF(pHandle);
	//struct st3AInfo *pst3Ainfo = (struct st3AInfo *)pHandle;

	if (audio_ssp_deinit(pHandle) != 0) {
    83f44110:	093000ef          	jal	ra,83f449a2 <audio_ssp_deinit>
    83f44114:	e501                	bnez	a0,83f4411c <CviAud_Algo_DeInit+0x10>
		CVIAUD_NOTCH_ERR_PRINTF("3a deinit err\n");
		return;
	}

}
    83f44116:	60a2                	ld	ra,8(sp)
    83f44118:	0141                	addi	sp,sp,16
    83f4411a:	8082                	ret
		CVIAUD_NOTCH_ERR_PRINTF("3a deinit err\n");
    83f4411c:	0000f797          	auipc	a5,0xf
    83f44120:	0a07a783          	lw	a5,160(a5) # 83f531bc <notch_dbglevel>
    83f44124:	fef059e3          	blez	a5,83f44116 <CviAud_Algo_DeInit+0xa>
}
    83f44128:	60a2                	ld	ra,8(sp)
		CVIAUD_NOTCH_ERR_PRINTF("3a deinit err\n");
    83f4412a:	0e000613          	li	a2,224
    83f4412e:	0000d597          	auipc	a1,0xd
    83f44132:	f4258593          	addi	a1,a1,-190 # 83f51070 <__func__.2>
    83f44136:	0000d517          	auipc	a0,0xd
    83f4413a:	f0a50513          	addi	a0,a0,-246 # 83f51040 <__func__.1+0x80>
}
    83f4413e:	0141                	addi	sp,sp,16
		CVIAUD_NOTCH_ERR_PRINTF("3a deinit err\n");
    83f44140:	6550706f          	j	83f4bf94 <printf>

0000000083f44144 <audio_ssp_init>:
	return 0;
}
#endif

void *audio_ssp_init(void *para_obj, unsigned int sample_rate)
{
    83f44144:	7179                	addi	sp,sp,-48
    83f44146:	e84a                	sd	s2,16(sp)
      you will experience strange bugs */
#ifndef PLATFORM_RTOS
   return calloc(size,1);
#else
   //return (void *)calloc(size,1);
   uintptr_t *ptr =  pvPortMalloc(size);
    83f44148:	6905                	lui	s2,0x1
    83f4414a:	e44e                	sd	s3,8(sp)
    83f4414c:	89aa                	mv	s3,a0
    83f4414e:	03090513          	addi	a0,s2,48 # 1030 <_EL1_STACK_SIZE+0x830>
    83f44152:	f022                	sd	s0,32(sp)
    83f44154:	ec26                	sd	s1,24(sp)
    83f44156:	f406                	sd	ra,40(sp)
    83f44158:	84ae                	mv	s1,a1
    83f4415a:	42a0a0ef          	jal	ra,83f4e584 <pvPortMalloc>
    83f4415e:	842a                	mv	s0,a0

   memset(ptr, 0, size);
    83f44160:	03090613          	addi	a2,s2,48
    83f44164:	4581                	li	a1,0
    83f44166:	617070ef          	jal	ra,83f4bf7c <memset>
	pst3Ainfo = (struct st3AInfo *)malloc(sizeof(struct st3AInfo));
#else
	//pst3Ainfo = (struct st3AInfo *)pvPortMalloc(sizeof(struct st3AInfo));
	pst3Ainfo = (struct st3AInfo *)mem_alloc(sizeof(struct st3AInfo));
#endif
	if(NULL == pst3Ainfo)
    83f4416a:	30040463          	beqz	s0,83f44472 <audio_ssp_init+0x32e>
	{
	    LOG_ERROR("malloc failed.aec init failed.\n");
	    return NULL;
	}

	memset(pst3Ainfo,0,sizeof(struct st3AInfo));
    83f4416e:	03090613          	addi	a2,s2,48
    83f44172:	4581                	li	a1,0
    83f44174:	8522                	mv	a0,s0
    83f44176:	607070ef          	jal	ra,83f4bf7c <memset>
	memcpy(&pst3Ainfo->para_obj,para_info,sizeof(ssp_para_struct));
    83f4417a:	06440913          	addi	s2,s0,100
    83f4417e:	05200613          	li	a2,82
    83f44182:	85ce                	mv	a1,s3
    83f44184:	854a                	mv	a0,s2
    83f44186:	f7bfb0ef          	jal	ra,83f40100 <memcpy>
	pst3Ainfo->fs = sample_rate;// pst3Ainfo->para_obj.para_sample_rate;
    83f4418a:	d014f7d3          	fcvt.s.wu	fa5,s1

	//printf("[SSP_VER20220128]user setting config param------dump---start\n");
	printf("[SSP_VER20220128]sample_rate:%d.\n", (int)pst3Ainfo->fs);
    83f4418e:	0000d517          	auipc	a0,0xd
    83f44192:	f4250513          	addi	a0,a0,-190 # 83f510d0 <__func__.3+0x48>
    83f44196:	c00795d3          	fcvt.w.s	a1,fa5,rtz
	pst3Ainfo->fs = sample_rate;// pst3Ainfo->para_obj.para_sample_rate;
    83f4419a:	06f42027          	fsw	fa5,96(s0)
	printf("[SSP_VER20220128]sample_rate:%d.\n", (int)pst3Ainfo->fs);
    83f4419e:	2581                	sext.w	a1,a1
    83f441a0:	5f5070ef          	jal	ra,83f4bf94 <printf>
	printf("[SSP_VER20220128]para_client_config:%d.\n",  pst3Ainfo->para_obj.para_client_config);
    83f441a4:	06445583          	lhu	a1,100(s0)
    83f441a8:	0000d517          	auipc	a0,0xd
    83f441ac:	f5050513          	addi	a0,a0,-176 # 83f510f8 <__func__.3+0x70>
    83f441b0:	5e5070ef          	jal	ra,83f4bf94 <printf>
	printf("[SSP_VER20220128]para_fun_config:%d.\n",  pst3Ainfo->para_obj.para_fun_config);
    83f441b4:	06645583          	lhu	a1,102(s0)
    83f441b8:	0000d517          	auipc	a0,0xd
    83f441bc:	f7050513          	addi	a0,a0,-144 # 83f51128 <__func__.3+0xa0>
    83f441c0:	5d5070ef          	jal	ra,83f4bf94 <printf>
	printf("[SSP_VER20220128]para_delay_sample:%d.\n",  pst3Ainfo->para_obj.para_delay_sample);
    83f441c4:	06845583          	lhu	a1,104(s0)
    83f441c8:	0000d517          	auipc	a0,0xd
    83f441cc:	f8850513          	addi	a0,a0,-120 # 83f51150 <__func__.3+0xc8>
    83f441d0:	5c5070ef          	jal	ra,83f4bf94 <printf>
	printf("[SSP_VER20220128]para_dg_target:%d.\n",  pst3Ainfo->para_obj.para_dg_target);
    83f441d4:	06a45583          	lhu	a1,106(s0)
    83f441d8:	0000d517          	auipc	a0,0xd
    83f441dc:	fa050513          	addi	a0,a0,-96 # 83f51178 <__func__.3+0xf0>
    83f441e0:	5b5070ef          	jal	ra,83f4bf94 <printf>
	printf("[SSP_VER20220128]para_aec_init_filter_len:%d.\n",  pst3Ainfo->para_obj.para_aec_init_filter_len);
    83f441e4:	06c45583          	lhu	a1,108(s0)
    83f441e8:	0000d517          	auipc	a0,0xd
    83f441ec:	fb850513          	addi	a0,a0,-72 # 83f511a0 <__func__.3+0x118>
    83f441f0:	5a5070ef          	jal	ra,83f4bf94 <printf>
	printf("[SSP_VER20220128]para_aec_filter_len:%d.\n",  pst3Ainfo->para_obj.para_aec_filter_len);
    83f441f4:	06e45583          	lhu	a1,110(s0)
    83f441f8:	0000d517          	auipc	a0,0xd
    83f441fc:	fd850513          	addi	a0,a0,-40 # 83f511d0 <__func__.3+0x148>
    83f44200:	595070ef          	jal	ra,83f4bf94 <printf>
	printf("[SSP_VER20220128]para_aes_std_thrd:%d.\n",  pst3Ainfo->para_obj.para_aes_std_thrd);
    83f44204:	07045583          	lhu	a1,112(s0)
    83f44208:	0000d517          	auipc	a0,0xd
    83f4420c:	ff850513          	addi	a0,a0,-8 # 83f51200 <__func__.3+0x178>
    83f44210:	585070ef          	jal	ra,83f4bf94 <printf>
	printf("[SSP_VER20220128]para_aes_supp_coeff:%d.\n",  pst3Ainfo->para_obj.para_aes_supp_coeff);
    83f44214:	07245583          	lhu	a1,114(s0)
    83f44218:	0000d517          	auipc	a0,0xd
    83f4421c:	01050513          	addi	a0,a0,16 # 83f51228 <__func__.3+0x1a0>
    83f44220:	575070ef          	jal	ra,83f4bf94 <printf>
	printf("[SSP_VER20220128]para_nr_init_sile_time:%d.\n",  pst3Ainfo->para_obj.para_nr_init_sile_time);
    83f44224:	07445583          	lhu	a1,116(s0)
    83f44228:	0000d517          	auipc	a0,0xd
    83f4422c:	03050513          	addi	a0,a0,48 # 83f51258 <__func__.3+0x1d0>
    83f44230:	565070ef          	jal	ra,83f4bf94 <printf>
	printf("[SSP_VER20220128]para_nr_snr_coeff:%d.\n",  pst3Ainfo->para_obj.para_nr_snr_coeff);
    83f44234:	07645583          	lhu	a1,118(s0)
    83f44238:	0000d517          	auipc	a0,0xd
    83f4423c:	05050513          	addi	a0,a0,80 # 83f51288 <__func__.3+0x200>
    83f44240:	555070ef          	jal	ra,83f4bf94 <printf>
	printf("[SSP_VER20220128]para_agc_max_gain:%d.\n",  pst3Ainfo->para_obj.para_agc_max_gain);
    83f44244:	07845583          	lhu	a1,120(s0)
    83f44248:	0000d517          	auipc	a0,0xd
    83f4424c:	06850513          	addi	a0,a0,104 # 83f512b0 <__func__.3+0x228>
    83f44250:	545070ef          	jal	ra,83f4bf94 <printf>
	printf("[SSP_VER20220128]para_agc_target_high:%d.\n",  pst3Ainfo->para_obj.para_agc_target_high);
    83f44254:	07a45583          	lhu	a1,122(s0)
    83f44258:	0000d517          	auipc	a0,0xd
    83f4425c:	08050513          	addi	a0,a0,128 # 83f512d8 <__func__.3+0x250>
    83f44260:	535070ef          	jal	ra,83f4bf94 <printf>
	printf("[SSP_VER20220128]para_agc_target_low:%d.\n",  pst3Ainfo->para_obj.para_agc_target_low);
    83f44264:	07c45583          	lhu	a1,124(s0)
    83f44268:	0000d517          	auipc	a0,0xd
    83f4426c:	0a050513          	addi	a0,a0,160 # 83f51308 <__func__.3+0x280>
    83f44270:	525070ef          	jal	ra,83f4bf94 <printf>
	printf("[SSP_VER20220128]para_agc_vad_ena:%d.\n",  pst3Ainfo->para_obj.para_agc_vad_ena);
    83f44274:	07e44583          	lbu	a1,126(s0)
    83f44278:	0000d517          	auipc	a0,0xd
    83f4427c:	0c050513          	addi	a0,a0,192 # 83f51338 <__func__.3+0x2b0>
    83f44280:	515070ef          	jal	ra,83f4bf94 <printf>
	printf("[SSP_VER20220128]para_notch_freq:%d.\n",  pst3Ainfo->para_obj.para_notch_freq);
    83f44284:	08045583          	lhu	a1,128(s0)
    83f44288:	0000d517          	auipc	a0,0xd
    83f4428c:	0d850513          	addi	a0,a0,216 # 83f51360 <__func__.3+0x2d8>
    83f44290:	505070ef          	jal	ra,83f4bf94 <printf>
	//printf("[SSP_VER20220128]user setting config param------dump---end\n");

	//TODO: check ssp init with ssp_main.c
	//reference from ssp_main.c
	cond1 = pst3Ainfo->para_obj.para_fun_config & DELAY_ENABLE;
    83f44294:	06641783          	lh	a5,102(s0)
	if (cond1) {
    83f44298:	0807f713          	andi	a4,a5,128
    83f4429c:	1c071163          	bnez	a4,83f4445e <audio_ssp_init+0x31a>
		delay_para(&pst3Ainfo->para_obj);
		pst3Ainfo->delay_state = delay_init(&pst3Ainfo->para_obj);
	}

	cond1 = pst3Ainfo->para_obj.para_fun_config & DG_ENABLE;
	if (cond1) {
    83f442a0:	0407f713          	andi	a4,a5,64
    83f442a4:	1a071563          	bnez	a4,83f4444e <audio_ssp_init+0x30a>
		DG_para(&pst3Ainfo->dg_obj, &pst3Ainfo->para_obj);
	}

	cond1 = pst3Ainfo->para_obj.para_fun_config & DCREMOVER_ENABLE;
	if (cond1) {
    83f442a8:	0207f713          	andi	a4,a5,32
    83f442ac:	18071863          	bnez	a4,83f4443c <audio_ssp_init+0x2f8>
		DC_remover_init(&pst3Ainfo->dc_obj, pst3Ainfo->fs);
	}

	cond1 = pst3Ainfo->para_obj.para_fun_config & NOTCH_ENABLE;
	if (cond1) {
    83f442b0:	0107f713          	andi	a4,a5,16
    83f442b4:	16071463          	bnez	a4,83f4441c <audio_ssp_init+0x2d8>
	}

	cond1 = pst3Ainfo->para_obj.para_fun_config & LP_AEC_ENABLE;
	cond2 = pst3Ainfo->para_obj.para_fun_config & NLP_AES_ENABLE;

	if (cond1 | cond2) {
    83f442b8:	0037f713          	andi	a4,a5,3
	cond2 = pst3Ainfo->para_obj.para_fun_config & NLP_AES_ENABLE;
    83f442bc:	0027f493          	andi	s1,a5,2
	if (cond1 | cond2) {
    83f442c0:	e76d                	bnez	a4,83f443aa <audio_ssp_init+0x266>
		LP_AEC_para(&pst3Ainfo->para_obj, &pst3Ainfo->filter_length, &pst3Ainfo->init_filter_length);
		pst3Ainfo->aec_state = LP_AEC_init(AEC_FRAME_LENGTH, pst3Ainfo->filter_length,
						pst3Ainfo->init_filter_length, pst3Ainfo->fs);
	}
	if (cond2) {
    83f442c2:	10049863          	bnez	s1,83f443d2 <audio_ssp_init+0x28e>
				&pst3Ainfo->aes_supp_coef2);
		pst3Ainfo->aes_state = NLP_AES_init(AEC_FRAME_LENGTH, pst3Ainfo->fs, pst3Ainfo->std_thrd,
							pst3Ainfo->aes_supp_coef1, pst3Ainfo->aes_supp_coef2);
		pst3Ainfo->aes_state->echo_state = pst3Ainfo->aec_state;
	}
	if (!(pst3Ainfo->para_obj.para_fun_config & AGC_ENABLE)) {
    83f442c6:	06645783          	lhu	a5,102(s0)
    83f442ca:	0087f713          	andi	a4,a5,8
    83f442ce:	cf29                	beqz	a4,83f44328 <audio_ssp_init+0x1e4>
		/* add fool-proof design for parameter configuration */
		pst3Ainfo->para_obj.para_agc_vad_ena = 0;
	}
	cond1 = pst3Ainfo->para_obj.para_fun_config & NR_ENABLE;
	cond2 = pst3Ainfo->para_obj.para_fun_config & AGC_ENABLE;
	if (cond1 | (cond2 && pst3Ainfo->para_obj.para_agc_vad_ena)) {
    83f442d0:	0087f713          	andi	a4,a5,8
    83f442d4:	8b91                	andi	a5,a5,4
    83f442d6:	cf29                	beqz	a4,83f44330 <audio_ssp_init+0x1ec>
    83f442d8:	07e44703          	lbu	a4,126(s0)
    83f442dc:	12070463          	beqz	a4,83f44404 <audio_ssp_init+0x2c0>
		NR_para(&pst3Ainfo->para_obj, &pst3Ainfo->aa, &pst3Ainfo->mu);
    83f442e0:	0bc40613          	addi	a2,s0,188
    83f442e4:	0b840593          	addi	a1,s0,184
    83f442e8:	854a                	mv	a0,s2
    83f442ea:	0d8030ef          	jal	ra,83f473c2 <NR_para>
		pst3Ainfo->nr_state = NR_init(AEC_FRAME_LENGTH, pst3Ainfo->fs, pst3Ainfo->aa, pst3Ainfo->mu);
    83f442ee:	0bc42607          	flw	fa2,188(s0)
    83f442f2:	0b842587          	flw	fa1,184(s0)
    83f442f6:	06042507          	flw	fa0,96(s0)
    83f442fa:	0a000513          	li	a0,160
    83f442fe:	1e0030ef          	jal	ra,83f474de <NR_init>
    83f44302:	e068                	sd	a0,192(s0)
	}
	if (cond2) {
		AGC_para(&pst3Ainfo->agc_obj, &pst3Ainfo->para_obj, 1);
    83f44304:	6485                	lui	s1,0x1
    83f44306:	14c1                	addi	s1,s1,-16
    83f44308:	94a2                	add	s1,s1,s0
    83f4430a:	85ca                	mv	a1,s2
    83f4430c:	8526                	mv	a0,s1
    83f4430e:	4605                	li	a2,1
    83f44310:	4ae050ef          	jal	ra,83f497be <AGC_para>
		AGC_init(&pst3Ainfo->agc_obj, &pst3Ainfo->para_obj, pst3Ainfo->fs, AEC_FRAME_LENGTH, 1);
    83f44314:	06042507          	flw	fa0,96(s0)
    83f44318:	4685                	li	a3,1
    83f4431a:	0a000613          	li	a2,160
    83f4431e:	85ca                	mv	a1,s2
    83f44320:	8526                	mv	a0,s1
    83f44322:	40e050ef          	jal	ra,83f49730 <AGC_init>
    83f44326:	a039                	j	83f44334 <audio_ssp_init+0x1f0>
		pst3Ainfo->para_obj.para_agc_vad_ena = 0;
    83f44328:	06040f23          	sb	zero,126(s0)
	if (cond1 | (cond2 && pst3Ainfo->para_obj.para_agc_vad_ena)) {
    83f4432c:	8b91                	andi	a5,a5,4
    83f4432e:	eb79                	bnez	a4,83f44404 <audio_ssp_init+0x2c0>
    83f44330:	16079463          	bnez	a5,83f44498 <audio_ssp_init+0x354>
	pst3Ainfo->speech_vad = true;
	pst3Ainfo->st_vad = false;    /* default */
	pst3Ainfo->frame = 1.0F;
	pst3Ainfo->nenr_silence_cnt = 0;

	pst3Ainfo->para_obj.para_nr_init_sile_time = MIN(MAX(pst3Ainfo->para_obj.para_nr_init_sile_time, 0), 250);
    83f44334:	07445783          	lhu	a5,116(s0)
	pst3Ainfo->frame = 1.0F;
    83f44338:	0000e717          	auipc	a4,0xe
    83f4433c:	f1872787          	flw	fa5,-232(a4) # 83f52250 <__func__.1+0x58>
	pst3Ainfo->speech_vad = true;
    83f44340:	4705                	li	a4,1
	pst3Ainfo->para_obj.para_nr_init_sile_time = MIN(MAX(pst3Ainfo->para_obj.para_nr_init_sile_time, 0), 250);
    83f44342:	03079693          	slli	a3,a5,0x30
	pst3Ainfo->speech_vad = true;
    83f44346:	22e40023          	sb	a4,544(s0)
	pst3Ainfo->st_vad = false;    /* default */
    83f4434a:	0c040823          	sb	zero,208(s0)
	pst3Ainfo->frame = 1.0F;
    83f4434e:	22f42227          	fsw	fa5,548(s0)
	pst3Ainfo->nenr_silence_cnt = 0;
    83f44352:	0c042623          	sw	zero,204(s0)
	pst3Ainfo->para_obj.para_nr_init_sile_time = MIN(MAX(pst3Ainfo->para_obj.para_nr_init_sile_time, 0), 250);
    83f44356:	92c1                	srli	a3,a3,0x30
    83f44358:	0fa00713          	li	a4,250
    83f4435c:	00d77463          	bgeu	a4,a3,83f44364 <audio_ssp_init+0x220>
    83f44360:	0fa00793          	li	a5,250
	if (pst3Ainfo->fs == 16000.0F) {
    83f44364:	06042707          	flw	fa4,96(s0)
    83f44368:	0000e717          	auipc	a4,0xe
    83f4436c:	eec72787          	flw	fa5,-276(a4) # 83f52254 <__func__.1+0x5c>
	pst3Ainfo->para_obj.para_nr_init_sile_time = MIN(MAX(pst3Ainfo->para_obj.para_nr_init_sile_time, 0), 250);
    83f44370:	06f41a23          	sh	a5,116(s0)
	if (pst3Ainfo->fs == 16000.0F) {
    83f44374:	a0f72753          	feq.s	a4,fa4,fa5
		pst3Ainfo->initial_noise_pow_time = 14;
		pst3Ainfo->nenr_silence_time = pst3Ainfo->para_obj.para_nr_init_sile_time*2;
    83f44378:	17c2                	slli	a5,a5,0x30
    83f4437a:	93c1                	srli	a5,a5,0x30
	if (pst3Ainfo->fs == 16000.0F) {
    83f4437c:	c759                	beqz	a4,83f4440a <audio_ssp_init+0x2c6>
		pst3Ainfo->initial_noise_pow_time = 14;
    83f4437e:	0000e717          	auipc	a4,0xe
    83f44382:	eda72787          	flw	fa5,-294(a4) # 83f52258 <__func__.1+0x60>
		pst3Ainfo->nenr_silence_time = pst3Ainfo->para_obj.para_nr_init_sile_time*2;
    83f44386:	0017979b          	slliw	a5,a5,0x1
		pst3Ainfo->initial_noise_pow_time = 14;
    83f4438a:	22f42427          	fsw	fa5,552(s0)
		pst3Ainfo->nenr_silence_time = pst3Ainfo->para_obj.para_nr_init_sile_time*2;
    83f4438e:	0cf42423          	sw	a5,200(s0)
	} else {
		pst3Ainfo->initial_noise_pow_time = 7;
		pst3Ainfo->nenr_silence_time = pst3Ainfo->para_obj.para_nr_init_sile_time;
	}

	pst3Ainfo->bInitOk = true;
    83f44392:	6785                	lui	a5,0x1
    83f44394:	97a2                	add	a5,a5,s0
    83f44396:	4705                	li	a4,1
    83f44398:	d798                	sw	a4,40(a5)

	return (void *)pst3Ainfo;
}
    83f4439a:	70a2                	ld	ra,40(sp)
    83f4439c:	8522                	mv	a0,s0
    83f4439e:	7402                	ld	s0,32(sp)
    83f443a0:	64e2                	ld	s1,24(sp)
    83f443a2:	6942                	ld	s2,16(sp)
    83f443a4:	69a2                	ld	s3,8(sp)
    83f443a6:	6145                	addi	sp,sp,48
    83f443a8:	8082                	ret
		LP_AEC_para(&pst3Ainfo->para_obj, &pst3Ainfo->filter_length, &pst3Ainfo->init_filter_length);
    83f443aa:	05a40613          	addi	a2,s0,90
    83f443ae:	05840593          	addi	a1,s0,88
    83f443b2:	854a                	mv	a0,s2
    83f443b4:	2c9000ef          	jal	ra,83f44e7c <LP_AEC_para>
		pst3Ainfo->aec_state = LP_AEC_init(AEC_FRAME_LENGTH, pst3Ainfo->filter_length,
    83f443b8:	06042507          	flw	fa0,96(s0)
    83f443bc:	05a41603          	lh	a2,90(s0)
    83f443c0:	05841583          	lh	a1,88(s0)
    83f443c4:	0a000513          	li	a0,160
    83f443c8:	2f7000ef          	jal	ra,83f44ebe <LP_AEC_init>
    83f443cc:	e428                	sd	a0,72(s0)
	if (cond2) {
    83f443ce:	ee048ce3          	beqz	s1,83f442c6 <audio_ssp_init+0x182>
		NLP_AES_para(&pst3Ainfo->para_obj, &pst3Ainfo->std_thrd, &pst3Ainfo->aes_supp_coef1,
    83f443d2:	21840693          	addi	a3,s0,536
    83f443d6:	21440613          	addi	a2,s0,532
    83f443da:	21c40593          	addi	a1,s0,540
    83f443de:	854a                	mv	a0,s2
    83f443e0:	43a030ef          	jal	ra,83f4781a <NLP_AES_para>
		pst3Ainfo->aes_state = NLP_AES_init(AEC_FRAME_LENGTH, pst3Ainfo->fs, pst3Ainfo->std_thrd,
    83f443e4:	21842687          	flw	fa3,536(s0)
    83f443e8:	21442607          	flw	fa2,532(s0)
    83f443ec:	21c42587          	flw	fa1,540(s0)
    83f443f0:	06042507          	flw	fa0,96(s0)
    83f443f4:	0a000513          	li	a0,160
    83f443f8:	498030ef          	jal	ra,83f47890 <NLP_AES_init>
		pst3Ainfo->aes_state->echo_state = pst3Ainfo->aec_state;
    83f443fc:	643c                	ld	a5,72(s0)
		pst3Ainfo->aes_state = NLP_AES_init(AEC_FRAME_LENGTH, pst3Ainfo->fs, pst3Ainfo->std_thrd,
    83f443fe:	e828                	sd	a0,80(s0)
		pst3Ainfo->aes_state->echo_state = pst3Ainfo->aec_state;
    83f44400:	ed1c                	sd	a5,24(a0)
    83f44402:	b5d1                	j	83f442c6 <audio_ssp_init+0x182>
	if (cond1 | (cond2 && pst3Ainfo->para_obj.para_agc_vad_ena)) {
    83f44404:	f00780e3          	beqz	a5,83f44304 <audio_ssp_init+0x1c0>
    83f44408:	bde1                	j	83f442e0 <audio_ssp_init+0x19c>
		pst3Ainfo->initial_noise_pow_time = 7;
    83f4440a:	0000e717          	auipc	a4,0xe
    83f4440e:	e5272787          	flw	fa5,-430(a4) # 83f5225c <__func__.1+0x64>
    83f44412:	22f42427          	fsw	fa5,552(s0)
		pst3Ainfo->nenr_silence_time = pst3Ainfo->para_obj.para_nr_init_sile_time;
    83f44416:	0cf42423          	sw	a5,200(s0)
    83f4441a:	bfa5                	j	83f44392 <audio_ssp_init+0x24e>
		notch_para(&pst3Ainfo->notch_obj, &pst3Ainfo->para_obj, pst3Ainfo->fs);
    83f4441c:	06042507          	flw	fa0,96(s0)
    83f44420:	02040493          	addi	s1,s0,32
    83f44424:	85ca                	mv	a1,s2
    83f44426:	8526                	mv	a0,s1
    83f44428:	263040ef          	jal	ra,83f48e8a <notch_para>
		notch_init(&pst3Ainfo->notch_obj, pst3Ainfo->notch_state);
    83f4442c:	03840593          	addi	a1,s0,56
    83f44430:	8526                	mv	a0,s1
    83f44432:	2a1040ef          	jal	ra,83f48ed2 <notch_init>
	cond1 = pst3Ainfo->para_obj.para_fun_config & LP_AEC_ENABLE;
    83f44436:	06641783          	lh	a5,102(s0)
    83f4443a:	bdbd                	j	83f442b8 <audio_ssp_init+0x174>
		DC_remover_init(&pst3Ainfo->dc_obj, pst3Ainfo->fs);
    83f4443c:	06042507          	flw	fa0,96(s0)
    83f44440:	01040513          	addi	a0,s0,16
    83f44444:	63c000ef          	jal	ra,83f44a80 <DC_remover_init>
	cond1 = pst3Ainfo->para_obj.para_fun_config & NOTCH_ENABLE;
    83f44448:	06641783          	lh	a5,102(s0)
    83f4444c:	b595                	j	83f442b0 <audio_ssp_init+0x16c>
		DG_para(&pst3Ainfo->dg_obj, &pst3Ainfo->para_obj);
    83f4444e:	85ca                	mv	a1,s2
    83f44450:	00840513          	addi	a0,s0,8
    83f44454:	08d000ef          	jal	ra,83f44ce0 <DG_para>
	cond1 = pst3Ainfo->para_obj.para_fun_config & DCREMOVER_ENABLE;
    83f44458:	06641783          	lh	a5,102(s0)
    83f4445c:	b5b1                	j	83f442a8 <audio_ssp_init+0x164>
		delay_para(&pst3Ainfo->para_obj);
    83f4445e:	854a                	mv	a0,s2
    83f44460:	76c000ef          	jal	ra,83f44bcc <delay_para>
		pst3Ainfo->delay_state = delay_init(&pst3Ainfo->para_obj);
    83f44464:	854a                	mv	a0,s2
    83f44466:	78c000ef          	jal	ra,83f44bf2 <delay_init>
	cond1 = pst3Ainfo->para_obj.para_fun_config & DG_ENABLE;
    83f4446a:	06641783          	lh	a5,102(s0)
		pst3Ainfo->delay_state = delay_init(&pst3Ainfo->para_obj);
    83f4446e:	e008                	sd	a0,0(s0)
    83f44470:	bd05                	j	83f442a0 <audio_ssp_init+0x15c>
	    LOG_ERROR("malloc failed.aec init failed.\n");
    83f44472:	0000f797          	auipc	a5,0xf
    83f44476:	d4e7a783          	lw	a5,-690(a5) # 83f531c0 <cviaud_dbg>
    83f4447a:	f2f050e3          	blez	a5,83f4439a <audio_ssp_init+0x256>
    83f4447e:	0e500613          	li	a2,229
    83f44482:	0000d597          	auipc	a1,0xd
    83f44486:	03e58593          	addi	a1,a1,62 # 83f514c0 <__func__.4>
    83f4448a:	0000d517          	auipc	a0,0xd
    83f4448e:	c1650513          	addi	a0,a0,-1002 # 83f510a0 <__func__.3+0x18>
    83f44492:	303070ef          	jal	ra,83f4bf94 <printf>
    83f44496:	b711                	j	83f4439a <audio_ssp_init+0x256>
		NR_para(&pst3Ainfo->para_obj, &pst3Ainfo->aa, &pst3Ainfo->mu);
    83f44498:	0bc40613          	addi	a2,s0,188
    83f4449c:	0b840593          	addi	a1,s0,184
    83f444a0:	854a                	mv	a0,s2
    83f444a2:	721020ef          	jal	ra,83f473c2 <NR_para>
		pst3Ainfo->nr_state = NR_init(AEC_FRAME_LENGTH, pst3Ainfo->fs, pst3Ainfo->aa, pst3Ainfo->mu);
    83f444a6:	0bc42607          	flw	fa2,188(s0)
    83f444aa:	0b842587          	flw	fa1,184(s0)
    83f444ae:	06042507          	flw	fa0,96(s0)
    83f444b2:	0a000513          	li	a0,160
    83f444b6:	028030ef          	jal	ra,83f474de <NR_init>
    83f444ba:	e068                	sd	a0,192(s0)
	if (cond2) {
    83f444bc:	bda5                	j	83f44334 <audio_ssp_init+0x1f0>

0000000083f444be <audio_ssp_process>:



int audio_ssp_process(void *handle, short *mic_in, short *ref_in, short *dataout, int iLength)
{
    83f444be:	715d                	addi	sp,sp,-80
    83f444c0:	e486                	sd	ra,72(sp)
    83f444c2:	e0a2                	sd	s0,64(sp)
    83f444c4:	fc26                	sd	s1,56(sp)
    83f444c6:	f84a                	sd	s2,48(sp)
    83f444c8:	f44e                	sd	s3,40(sp)
    83f444ca:	f052                	sd	s4,32(sp)
    83f444cc:	ec56                	sd	s5,24(sp)
	int nFFT = 2*len;
	float alpha, alpha2;
	float tmp1 = 0.0;
	struct st3AInfo *pst3Ainfo = (struct st3AInfo *)handle;

	if (!pst3Ainfo) {
    83f444ce:	4c050263          	beqz	a0,83f44992 <audio_ssp_process+0x4d4>
		printf("[error]audio_ssp_process error.\n");
		return -1;
	}

	if(!(pst3Ainfo && pst3Ainfo->bInitOk))
    83f444d2:	6785                	lui	a5,0x1
    83f444d4:	97aa                	add	a5,a5,a0
    83f444d6:	579c                	lw	a5,40(a5)
    83f444d8:	84aa                	mv	s1,a0
    83f444da:	4a078463          	beqz	a5,83f44982 <audio_ssp_process+0x4c4>
	{
		printf("[error]audio_ssp_process error params.\n");
		return -1;
	}

	if(iLength != 160)
    83f444de:	0a000793          	li	a5,160
    83f444e2:	48f71863          	bne	a4,a5,83f44972 <audio_ssp_process+0x4b4>
    83f444e6:	892e                	mv	s2,a1
    83f444e8:	89b2                	mv	s3,a2
    83f444ea:	8436                	mv	s0,a3
	{
		printf("[error]audio_ssp_process parameter len must be 160 frames.\n");
		return -1;
	}
	if(!(mic_in || dataout))
    83f444ec:	c5f5                	beqz	a1,83f445d8 <audio_ssp_process+0x11a>
	{
		printf("[error]audio_ssp_process NULL parameers.\n");
		return -2;
	}
	if (ref_in == NULL) {
    83f444ee:	18098e63          	beqz	s3,83f4468a <audio_ssp_process+0x1cc>
		//printf("[v]ref_in null\n");
		pst3Ainfo->para_obj.para_fun_config &= (~(LP_AEC_ENABLE | NLP_AES_ENABLE));
	}
	//port from ssp_main.c
	//printf("[v]pst3Ainfo->para_obj.para_fun_config[%x]\n", pst3Ainfo->para_obj.para_fun_config);
	if (pst3Ainfo->para_obj.para_client_config == 2) {
    83f444f2:	0644d703          	lhu	a4,100(s1) # 1064 <_EL1_STACK_SIZE+0x864>
    83f444f6:	4789                	li	a5,2
    83f444f8:	0ef70c63          	beq	a4,a5,83f445f0 <audio_ssp_process+0x132>
			mic_in[i] = ROUND_POS(((float)(mic_in[i])/(float)(32768.0F) * 0.5F)*(short)(32767));
		}
	}


	if(!(pst3Ainfo->para_obj.para_fun_config)) {
    83f444fc:	0664d783          	lhu	a5,102(s1)
    83f44500:	cbdd                	beqz	a5,83f445b6 <audio_ssp_process+0xf8>
		for(i=0;i< hopsize;i++)
			dataout[i]=mic_in[i];
	} else {
		/* Delay ref signal, frame-by-frame processing */
		cond1 = pst3Ainfo->para_obj.para_fun_config & DELAY_ENABLE;
		if (cond1) {
    83f44502:	0807f713          	andi	a4,a5,128
		cond1 = pst3Ainfo->para_obj.para_fun_config & DELAY_ENABLE;
    83f44506:	0107979b          	slliw	a5,a5,0x10
    83f4450a:	4107d79b          	sraiw	a5,a5,0x10
		if (cond1) {
    83f4450e:	38071763          	bnez	a4,83f4489c <audio_ssp_process+0x3de>
			delay_ref(ref_in, pst3Ainfo->delay_state, hopsize);
		}

		/* Apply DG, frame-by-frame processing */
		cond1 = pst3Ainfo->para_obj.para_fun_config & DG_ENABLE;
		if (cond1) {
    83f44512:	0407f713          	andi	a4,a5,64
    83f44516:	36071863          	bnez	a4,83f44886 <audio_ssp_process+0x3c8>
			apply_DG(mic_in, mic_in, &pst3Ainfo->dg_obj, hopsize);
		}

		/* DC filter, frame-by-frame processing */
		cond1 = pst3Ainfo->para_obj.para_fun_config & DCREMOVER_ENABLE;
		if (cond1) {
    83f4451a:	0207f713          	andi	a4,a5,32
    83f4451e:	34071963          	bnez	a4,83f44870 <audio_ssp_process+0x3b2>
			DC_remover(mic_in, mic_in, &pst3Ainfo->dc_obj, hopsize);
		}

		/* Notch filter, frame-by-frame processing */
		cond1 = pst3Ainfo->para_obj.para_fun_config & NOTCH_ENABLE;
		if (cond1) {
    83f44522:	0107f713          	andi	a4,a5,16
    83f44526:	32071a63          	bnez	a4,83f4485a <audio_ssp_process+0x39c>
		}

		/* Linear AEC, frame-by-frame processing */
		cond1 = pst3Ainfo->para_obj.para_fun_config & LP_AEC_ENABLE;
		cond2 = pst3Ainfo->para_obj.para_fun_config & NLP_AES_ENABLE;
		if (cond1 | cond2) {
    83f4452a:	0037f713          	andi	a4,a5,3
		cond2 = pst3Ainfo->para_obj.para_fun_config & NLP_AES_ENABLE;
    83f4452e:	0027fa13          	andi	s4,a5,2
		if (cond1 | cond2) {
    83f44532:	2c071e63          	bnez	a4,83f4480e <audio_ssp_process+0x350>
				mic_in[i] = dataout[i];
		}

		cond3 = pst3Ainfo->para_obj.para_fun_config & NR_ENABLE;
		cond4 = pst3Ainfo->para_obj.para_fun_config & AGC_ENABLE;
		if (!(cond2 | cond3 | cond4)) {
    83f44536:	00c7f713          	andi	a4,a5,12
    83f4453a:	00ea6733          	or	a4,s4,a4
		cond3 = pst3Ainfo->para_obj.para_fun_config & NR_ENABLE;
    83f4453e:	0047fa93          	andi	s5,a5,4
		cond4 = pst3Ainfo->para_obj.para_fun_config & AGC_ENABLE;
    83f44542:	0087f993          	andi	s3,a5,8
		if (!(cond2 | cond3 | cond4)) {
    83f44546:	16071163          	bnez	a4,83f446a8 <audio_ssp_process+0x1ea>
			/* Compensate DG frame-by-frame processing */
			cond1 = pst3Ainfo->para_obj.para_fun_config & DG_ENABLE;
			if (cond1) {
    83f4454a:	0407f793          	andi	a5,a5,64
    83f4454e:	28079263          	bnez	a5,83f447d2 <audio_ssp_process+0x314>
    83f44552:	85ca                	mv	a1,s2
    83f44554:	86a2                	mv	a3,s0
    83f44556:	14090713          	addi	a4,s2,320
				compen_DG(mic_in, mic_in, &pst3Ainfo->dg_obj, hopsize);
			}
			for (i = 0; i < hopsize; i++)
				dataout[i] = mic_in[i];    /* save MCPS if NR+AES+AGC off */
    83f4455a:	00059783          	lh	a5,0(a1)
			for (i = 0; i < hopsize; i++)
    83f4455e:	0589                	addi	a1,a1,2
    83f44560:	0689                	addi	a3,a3,2
				dataout[i] = mic_in[i];    /* save MCPS if NR+AES+AGC off */
    83f44562:	fef69f23          	sh	a5,-2(a3)
			for (i = 0; i < hopsize; i++)
    83f44566:	feb71ae3          	bne	a4,a1,83f4455a <audio_ssp_process+0x9c>
				//printf("[v]AGC_out[0x%x][0x%x]\n", dataout[0], dataout[1]);
			}
		}
    	}

	if (pst3Ainfo->nenr_silence_cnt < pst3Ainfo->nenr_silence_time)
    83f4456a:	0cc4a883          	lw	a7,204(s1)
    83f4456e:	0c84a803          	lw	a6,200(s1)
    83f44572:	0708dc63          	bge	a7,a6,83f445ea <audio_ssp_process+0x12c>
		pst3Ainfo->nenr_silence_cnt += 1;
    83f44576:	0018879b          	addiw	a5,a7,1
    83f4457a:	0cf4a623          	sw	a5,204(s1)
			pst3Ainfo->frame += 1;
		else
			pst3Ainfo->frame = pst3Ainfo->initial_noise_pow_time + 1;
	}

	return 0;
    83f4457e:	4501                	li	a0,0
	if (pst3Ainfo->nenr_silence_cnt > pst3Ainfo->nenr_silence_time) {
    83f44580:	02f85263          	bge	a6,a5,83f445a4 <audio_ssp_process+0xe6>
		if (pst3Ainfo->frame < pst3Ainfo->initial_noise_pow_time)    /* avoid overflow, 140ms */
    83f44584:	2244a707          	flw	fa4,548(s1)
    83f44588:	2284a787          	flw	fa5,552(s1)
    83f4458c:	a0f717d3          	flt.s	a5,fa4,fa5
    83f44590:	10078363          	beqz	a5,83f44696 <audio_ssp_process+0x1d8>
			pst3Ainfo->frame += 1;
    83f44594:	0000e797          	auipc	a5,0xe
    83f44598:	cbc7a787          	flw	fa5,-836(a5) # 83f52250 <__func__.1+0x58>
    83f4459c:	00f77753          	fadd.s	fa4,fa4,fa5
    83f445a0:	22e4a227          	fsw	fa4,548(s1)
}
    83f445a4:	60a6                	ld	ra,72(sp)
    83f445a6:	6406                	ld	s0,64(sp)
    83f445a8:	74e2                	ld	s1,56(sp)
    83f445aa:	7942                	ld	s2,48(sp)
    83f445ac:	79a2                	ld	s3,40(sp)
    83f445ae:	7a02                	ld	s4,32(sp)
    83f445b0:	6ae2                	ld	s5,24(sp)
    83f445b2:	6161                	addi	sp,sp,80
    83f445b4:	8082                	ret
    83f445b6:	85ca                	mv	a1,s2
    83f445b8:	86a2                	mv	a3,s0
    83f445ba:	14090713          	addi	a4,s2,320
			dataout[i]=mic_in[i];
    83f445be:	00059783          	lh	a5,0(a1)
		for(i=0;i< hopsize;i++)
    83f445c2:	0589                	addi	a1,a1,2
    83f445c4:	0689                	addi	a3,a3,2
			dataout[i]=mic_in[i];
    83f445c6:	fef69f23          	sh	a5,-2(a3)
		for(i=0;i< hopsize;i++)
    83f445ca:	feb71ae3          	bne	a4,a1,83f445be <audio_ssp_process+0x100>
	if (pst3Ainfo->nenr_silence_cnt < pst3Ainfo->nenr_silence_time)
    83f445ce:	0cc4a883          	lw	a7,204(s1)
    83f445d2:	0c84a803          	lw	a6,200(s1)
    83f445d6:	bf71                	j	83f44572 <audio_ssp_process+0xb4>
	if(!(mic_in || dataout))
    83f445d8:	fa99                	bnez	a3,83f444ee <audio_ssp_process+0x30>
		printf("[error]audio_ssp_process NULL parameers.\n");
    83f445da:	0000d517          	auipc	a0,0xd
    83f445de:	e3e50513          	addi	a0,a0,-450 # 83f51418 <__func__.3+0x390>
    83f445e2:	1b3070ef          	jal	ra,83f4bf94 <printf>
		return -2;
    83f445e6:	5579                	li	a0,-2
    83f445e8:	bf75                	j	83f445a4 <audio_ssp_process+0xe6>
		pst3Ainfo->nenr_silence_cnt = pst3Ainfo->nenr_silence_time + 1;    /* avoid overflow */
    83f445ea:	0018079b          	addiw	a5,a6,1
    83f445ee:	b771                	j	83f4457a <audio_ssp_process+0xbc>
    83f445f0:	7661                	lui	a2,0xffff8
    83f445f2:	6521                	lui	a0,0x8
    83f445f4:	87ce                	mv	a5,s3
    83f445f6:	874a                	mv	a4,s2
    83f445f8:	14098593          	addi	a1,s3,320
    83f445fc:	0000e697          	auipc	a3,0xe
    83f44600:	c646a687          	flw	fa3,-924(a3) # 83f52260 <__func__.1+0x68>
    83f44604:	0000e697          	auipc	a3,0xe
    83f44608:	c606a507          	flw	fa0,-928(a3) # 83f52264 <__func__.1+0x6c>
    83f4460c:	0000e697          	auipc	a3,0xe
    83f44610:	c5c6a607          	flw	fa2,-932(a3) # 83f52268 <__func__.1+0x70>
    83f44614:	0000e697          	auipc	a3,0xe
    83f44618:	c586a587          	flw	fa1,-936(a3) # 83f5226c <__func__.1+0x74>
    83f4461c:	0000e697          	auipc	a3,0xe
    83f44620:	c546a707          	flw	fa4,-940(a3) # 83f52270 <__func__.1+0x78>
    83f44624:	0609                	addi	a2,a2,2
  			tmp = MIN(MAX(tmp, -1.0F), 1.0F);
    83f44626:	0000e697          	auipc	a3,0xe
    83f4462a:	c2a6a007          	flw	ft0,-982(a3) # 83f52250 <__func__.1+0x58>
    83f4462e:	157d                	addi	a0,a0,-1
			tmp = (float)(ref_in[i])/(float)(32768.0F) * 15.84F;
    83f44630:	00079683          	lh	a3,0(a5)
    83f44634:	8832                	mv	a6,a2
    83f44636:	d006f7d3          	fcvt.s.w	fa5,a3
    83f4463a:	10d7f7d3          	fmul.s	fa5,fa5,fa3
    83f4463e:	10a7f7d3          	fmul.s	fa5,fa5,fa0
  			tmp = MIN(MAX(tmp, -1.0F), 1.0F);
    83f44642:	a0c796d3          	flt.s	a3,fa5,fa2
    83f44646:	ee89                	bnez	a3,83f44660 <audio_ssp_process+0x1a2>
    83f44648:	a0f016d3          	flt.s	a3,ft0,fa5
    83f4464c:	882a                	mv	a6,a0
    83f4464e:	ea89                	bnez	a3,83f44660 <audio_ssp_process+0x1a2>
  			ref_in[i] = ROUND_POS(tmp*(short)(32767));
    83f44650:	70b7f7c3          	fmadd.s	fa5,fa5,fa1,fa4
    83f44654:	c0079853          	fcvt.w.s	a6,fa5,rtz
    83f44658:	0108181b          	slliw	a6,a6,0x10
    83f4465c:	4108581b          	sraiw	a6,a6,0x10
    83f44660:	01079023          	sh	a6,0(a5)
			mic_in[i] = ROUND_POS(((float)(mic_in[i])/(float)(32768.0F) * 0.5F)*(short)(32767));
    83f44664:	00071683          	lh	a3,0(a4)
		for (i = 0; i < hopsize; i++) {
    83f44668:	0709                	addi	a4,a4,2
    83f4466a:	0789                	addi	a5,a5,2
			mic_in[i] = ROUND_POS(((float)(mic_in[i])/(float)(32768.0F) * 0.5F)*(short)(32767));
    83f4466c:	d006f7d3          	fcvt.s.w	fa5,a3
    83f44670:	10d7f7d3          	fmul.s	fa5,fa5,fa3
    83f44674:	10e7f7d3          	fmul.s	fa5,fa5,fa4
    83f44678:	70b7f7c3          	fmadd.s	fa5,fa5,fa1,fa4
    83f4467c:	c00796d3          	fcvt.w.s	a3,fa5,rtz
    83f44680:	fed71f23          	sh	a3,-2(a4)
		for (i = 0; i < hopsize; i++) {
    83f44684:	faf596e3          	bne	a1,a5,83f44630 <audio_ssp_process+0x172>
    83f44688:	bd95                	j	83f444fc <audio_ssp_process+0x3e>
		pst3Ainfo->para_obj.para_fun_config &= (~(LP_AEC_ENABLE | NLP_AES_ENABLE));
    83f4468a:	0664d783          	lhu	a5,102(s1)
    83f4468e:	9bf1                	andi	a5,a5,-4
    83f44690:	06f49323          	sh	a5,102(s1)
    83f44694:	bdb9                	j	83f444f2 <audio_ssp_process+0x34>
			pst3Ainfo->frame = pst3Ainfo->initial_noise_pow_time + 1;
    83f44696:	0000e797          	auipc	a5,0xe
    83f4469a:	bba7a707          	flw	fa4,-1094(a5) # 83f52250 <__func__.1+0x58>
    83f4469e:	00e7f7d3          	fadd.s	fa5,fa5,fa4
    83f446a2:	22f4a227          	fsw	fa5,548(s1)
    83f446a6:	bdfd                	j	83f445a4 <audio_ssp_process+0xe6>
			if (cond3 | pst3Ainfo->para_obj.para_agc_vad_ena) {
    83f446a8:	07e4c783          	lbu	a5,126(s1)
    83f446ac:	00fae7b3          	or	a5,s5,a5
    83f446b0:	10078463          	beqz	a5,83f447b8 <audio_ssp_process+0x2fa>
				if (pst3Ainfo->nenr_silence_cnt >= pst3Ainfo->nenr_silence_time) {
    83f446b4:	0cc4a703          	lw	a4,204(s1)
    83f446b8:	0c84a783          	lw	a5,200(s1)
					NR(mic_in,
    83f446bc:	60f0                	ld	a2,192(s1)
				if (pst3Ainfo->nenr_silence_cnt >= pst3Ainfo->nenr_silence_time) {
    83f446be:	28f75c63          	bge	a4,a5,83f44956 <audio_ssp_process+0x498>
    83f446c2:	6685                	lui	a3,0x1
    83f446c4:	c3068693          	addi	a3,a3,-976 # c30 <_EL1_STACK_SIZE+0x430>
    83f446c8:	96a6                	add	a3,a3,s1
    83f446ca:	4781                	li	a5,0
					for (i = 0; i < hopsize; i++) {
    83f446cc:	14000593          	li	a1,320
    83f446d0:	a011                	j	83f446d4 <audio_ssp_process+0x216>
						pst3Ainfo->nr_state->x_old[i] = mic_in[i];
    83f446d2:	60f0                	ld	a2,192(s1)
						pst3Ainfo->ne_float_out[i] = 0.0F;
    83f446d4:	0006a023          	sw	zero,0(a3)
						pst3Ainfo->nr_state->x_old[i] = mic_in[i];
    83f446d8:	6e18                	ld	a4,24(a2)
    83f446da:	00f90633          	add	a2,s2,a5
    83f446de:	00061603          	lh	a2,0(a2) # ffffffffffff8000 <_end+0xffffffff7bff82c0>
    83f446e2:	973e                	add	a4,a4,a5
					for (i = 0; i < hopsize; i++) {
    83f446e4:	0789                	addi	a5,a5,2
						pst3Ainfo->nr_state->x_old[i] = mic_in[i];
    83f446e6:	00c71023          	sh	a2,0(a4)
					for (i = 0; i < hopsize; i++) {
    83f446ea:	0691                	addi	a3,a3,4
    83f446ec:	feb793e3          	bne	a5,a1,83f446d2 <audio_ssp_process+0x214>
			if (cond3) {
    83f446f0:	0c0a8463          	beqz	s5,83f447b8 <audio_ssp_process+0x2fa>
    83f446f4:	6705                	lui	a4,0x1
    83f446f6:	c3070793          	addi	a5,a4,-976 # c30 <_EL1_STACK_SIZE+0x430>
    83f446fa:	eb070593          	addi	a1,a4,-336
					pst3Ainfo->ne_float_out[i] = MIN(MAX(pst3Ainfo->ne_float_out[i], -1.0F), 1.0F);    /* saturation protection to avoid overflow */
    83f446fe:	6521                	lui	a0,0x8
					if (pst3Ainfo->ne_float_out[i] < 0.0F)
    83f44700:	f00006d3          	fmv.w.x	fa3,zero
    83f44704:	97a6                	add	a5,a5,s1
    83f44706:	8722                	mv	a4,s0
    83f44708:	95a6                	add	a1,a1,s1
    83f4470a:	0000e697          	auipc	a3,0xe
    83f4470e:	b5e6a607          	flw	fa2,-1186(a3) # 83f52268 <__func__.1+0x70>
					pst3Ainfo->ne_float_out[i] = MIN(MAX(pst3Ainfo->ne_float_out[i], -1.0F), 1.0F);    /* saturation protection to avoid overflow */
    83f44712:	0000e697          	auipc	a3,0xe
    83f44716:	b3e6a707          	flw	fa4,-1218(a3) # 83f52250 <__func__.1+0x58>
    83f4471a:	157d                	addi	a0,a0,-1
						dataout[i] = ROUND_POS((pst3Ainfo->ne_float_out[i]*(short)(32767)));
    83f4471c:	0000e697          	auipc	a3,0xe
    83f44720:	b506a507          	flw	fa0,-1200(a3) # 83f5226c <__func__.1+0x74>
    83f44724:	0000e697          	auipc	a3,0xe
    83f44728:	b4c6a587          	flw	fa1,-1204(a3) # 83f52270 <__func__.1+0x78>
						dataout[i] = ROUND_NEG((pst3Ainfo->ne_float_out[i]*(int)(32768)));
    83f4472c:	0000e697          	auipc	a3,0xe
    83f44730:	b486a087          	flw	ft1,-1208(a3) # 83f52274 <__func__.1+0x7c>
    83f44734:	0000e697          	auipc	a3,0xe
    83f44738:	b446a007          	flw	ft0,-1212(a3) # 83f52278 <__func__.1+0x80>
    83f4473c:	a829                	j	83f44756 <audio_ssp_process+0x298>
					pst3Ainfo->ne_float_out[i] = MIN(MAX(pst3Ainfo->ne_float_out[i], -1.0F), 1.0F);    /* saturation protection to avoid overflow */
    83f4473e:	a0f716d3          	flt.s	a3,fa4,fa5
    83f44742:	862a                	mv	a2,a0
    83f44744:	c2c5                	beqz	a3,83f447e4 <audio_ssp_process+0x326>
    83f44746:	00e7a027          	fsw	fa4,0(a5)
						dataout[i] = ROUND_POS((pst3Ainfo->ne_float_out[i]*(short)(32767)));
    83f4474a:	00c71023          	sh	a2,0(a4)
				for (i = 0; i < hopsize; i++) {
    83f4474e:	0791                	addi	a5,a5,4
    83f44750:	0709                	addi	a4,a4,2
    83f44752:	02f58063          	beq	a1,a5,83f44772 <audio_ssp_process+0x2b4>
					pst3Ainfo->ne_float_out[i] = MIN(MAX(pst3Ainfo->ne_float_out[i], -1.0F), 1.0F);    /* saturation protection to avoid overflow */
    83f44756:	0007a787          	flw	fa5,0(a5)
    83f4475a:	7661                	lui	a2,0xffff8
    83f4475c:	a0c796d3          	flt.s	a3,fa5,fa2
    83f44760:	def9                	beqz	a3,83f4473e <audio_ssp_process+0x280>
    83f44762:	00c7a027          	fsw	fa2,0(a5)
						dataout[i] = ROUND_POS((pst3Ainfo->ne_float_out[i]*(short)(32767)));
    83f44766:	00c71023          	sh	a2,0(a4)
				for (i = 0; i < hopsize; i++) {
    83f4476a:	0791                	addi	a5,a5,4
    83f4476c:	0709                	addi	a4,a4,2
    83f4476e:	fef594e3          	bne	a1,a5,83f44756 <audio_ssp_process+0x298>
			if (cond2) {
    83f44772:	1a0a1b63          	bnez	s4,83f44928 <audio_ssp_process+0x46a>
			if (2 == pst3Ainfo->para_obj.para_client_config) {
    83f44776:	0644d703          	lhu	a4,100(s1)
    83f4477a:	4789                	li	a5,2
    83f4477c:	12f70963          	beq	a4,a5,83f448ae <audio_ssp_process+0x3f0>
			cond1 = pst3Ainfo->para_obj.para_fun_config & DG_ENABLE;
    83f44780:	0664d783          	lhu	a5,102(s1)
			if (cond1) {
    83f44784:	0407f793          	andi	a5,a5,64
    83f44788:	1a079e63          	bnez	a5,83f44944 <audio_ssp_process+0x486>
				AGC(dataout,
    83f4478c:	0c84a803          	lw	a6,200(s1)
    83f44790:	0cc4a883          	lw	a7,204(s1)
			if (cond4) {
    83f44794:	dc098fe3          	beqz	s3,83f44572 <audio_ssp_process+0xb4>
				AGC(dataout,
    83f44798:	0d04c783          	lbu	a5,208(s1)
    83f4479c:	2204c703          	lbu	a4,544(s1)
    83f447a0:	6605                	lui	a2,0x1
    83f447a2:	4685                	li	a3,1
    83f447a4:	1641                	addi	a2,a2,-16
    83f447a6:	e036                	sd	a3,0(sp)
    83f447a8:	9626                	add	a2,a2,s1
    83f447aa:	06448693          	addi	a3,s1,100
    83f447ae:	85a2                	mv	a1,s0
    83f447b0:	8522                	mv	a0,s0
    83f447b2:	31d040ef          	jal	ra,83f492ce <AGC>
    83f447b6:	bb55                	j	83f4456a <audio_ssp_process+0xac>
    83f447b8:	85ca                	mv	a1,s2
    83f447ba:	87a2                	mv	a5,s0
    83f447bc:	14090693          	addi	a3,s2,320
					dataout[i] = mic_in[i];
    83f447c0:	00059703          	lh	a4,0(a1)
				for (i = 0; i < hopsize; i++)
    83f447c4:	0589                	addi	a1,a1,2
    83f447c6:	0789                	addi	a5,a5,2
					dataout[i] = mic_in[i];
    83f447c8:	fee79f23          	sh	a4,-2(a5)
				for (i = 0; i < hopsize; i++)
    83f447cc:	feb69ae3          	bne	a3,a1,83f447c0 <audio_ssp_process+0x302>
    83f447d0:	b74d                	j	83f44772 <audio_ssp_process+0x2b4>
				compen_DG(mic_in, mic_in, &pst3Ainfo->dg_obj, hopsize);
    83f447d2:	0a000693          	li	a3,160
    83f447d6:	00848613          	addi	a2,s1,8
    83f447da:	85ca                	mv	a1,s2
    83f447dc:	854a                	mv	a0,s2
    83f447de:	5e2000ef          	jal	ra,83f44dc0 <compen_DG>
    83f447e2:	bb85                	j	83f44552 <audio_ssp_process+0x94>
					if (pst3Ainfo->ne_float_out[i] < 0.0F)
    83f447e4:	a0d796d3          	flt.s	a3,fa5,fa3
    83f447e8:	ea91                	bnez	a3,83f447fc <audio_ssp_process+0x33e>
						dataout[i] = ROUND_POS((pst3Ainfo->ne_float_out[i]*(short)(32767)));
    83f447ea:	58a7f7c3          	fmadd.s	fa5,fa5,fa0,fa1
    83f447ee:	c0079653          	fcvt.w.s	a2,fa5,rtz
    83f447f2:	0106161b          	slliw	a2,a2,0x10
    83f447f6:	4106561b          	sraiw	a2,a2,0x10
    83f447fa:	bf81                	j	83f4474a <audio_ssp_process+0x28c>
						dataout[i] = ROUND_NEG((pst3Ainfo->ne_float_out[i]*(int)(32768)));
    83f447fc:	0017f7c3          	fmadd.s	fa5,fa5,ft1,ft0
    83f44800:	c0079653          	fcvt.w.s	a2,fa5,rtz
    83f44804:	0106161b          	slliw	a2,a2,0x10
    83f44808:	4106561b          	sraiw	a2,a2,0x10
    83f4480c:	bf3d                	j	83f4474a <audio_ssp_process+0x28c>
			LP_AEC(pst3Ainfo->aec_state, mic_in, ref_in, dataout);
    83f4480e:	64a8                	ld	a0,72(s1)
    83f44810:	86a2                	mv	a3,s0
    83f44812:	864e                	mv	a2,s3
    83f44814:	85ca                	mv	a1,s2
    83f44816:	565000ef          	jal	ra,83f4557a <LP_AEC>
			if (cond2) {
    83f4481a:	020a0163          	beqz	s4,83f4483c <audio_ssp_process+0x37e>
    83f4481e:	4781                	li	a5,0
				for (i = 0; i < hopsize; i++)
    83f44820:	14000613          	li	a2,320
					pst3Ainfo->aes_state->aes_std_in[i] = mic_in[i];
    83f44824:	68b8                	ld	a4,80(s1)
    83f44826:	00f906b3          	add	a3,s2,a5
    83f4482a:	00069683          	lh	a3,0(a3)
    83f4482e:	6378                	ld	a4,192(a4)
    83f44830:	973e                	add	a4,a4,a5
    83f44832:	00d71023          	sh	a3,0(a4)
				for (i = 0; i < hopsize; i++)
    83f44836:	0789                	addi	a5,a5,2
    83f44838:	fec796e3          	bne	a5,a2,83f44824 <audio_ssp_process+0x366>
    83f4483c:	87a2                	mv	a5,s0
    83f4483e:	874a                	mv	a4,s2
    83f44840:	14040613          	addi	a2,s0,320
				mic_in[i] = dataout[i];
    83f44844:	00079683          	lh	a3,0(a5)
			for (i = 0; i < hopsize; i++)
    83f44848:	0789                	addi	a5,a5,2
    83f4484a:	0709                	addi	a4,a4,2
				mic_in[i] = dataout[i];
    83f4484c:	fed71f23          	sh	a3,-2(a4)
			for (i = 0; i < hopsize; i++)
    83f44850:	fef61ae3          	bne	a2,a5,83f44844 <audio_ssp_process+0x386>
		cond3 = pst3Ainfo->para_obj.para_fun_config & NR_ENABLE;
    83f44854:	06649783          	lh	a5,102(s1)
    83f44858:	b9f9                	j	83f44536 <audio_ssp_process+0x78>
			notch_filter(mic_in, mic_in, &pst3Ainfo->notch_obj, hopsize);
    83f4485a:	0a000693          	li	a3,160
    83f4485e:	02048613          	addi	a2,s1,32
    83f44862:	85ca                	mv	a1,s2
    83f44864:	854a                	mv	a0,s2
    83f44866:	686040ef          	jal	ra,83f48eec <notch_filter>
		cond1 = pst3Ainfo->para_obj.para_fun_config & LP_AEC_ENABLE;
    83f4486a:	06649783          	lh	a5,102(s1)
    83f4486e:	b975                	j	83f4452a <audio_ssp_process+0x6c>
			DC_remover(mic_in, mic_in, &pst3Ainfo->dc_obj, hopsize);
    83f44870:	0a000693          	li	a3,160
    83f44874:	01048613          	addi	a2,s1,16
    83f44878:	85ca                	mv	a1,s2
    83f4487a:	854a                	mv	a0,s2
    83f4487c:	24a000ef          	jal	ra,83f44ac6 <DC_remover>
		cond1 = pst3Ainfo->para_obj.para_fun_config & NOTCH_ENABLE;
    83f44880:	06649783          	lh	a5,102(s1)
    83f44884:	b979                	j	83f44522 <audio_ssp_process+0x64>
			apply_DG(mic_in, mic_in, &pst3Ainfo->dg_obj, hopsize);
    83f44886:	0a000693          	li	a3,160
    83f4488a:	00848613          	addi	a2,s1,8
    83f4488e:	85ca                	mv	a1,s2
    83f44890:	854a                	mv	a0,s2
    83f44892:	4a6000ef          	jal	ra,83f44d38 <apply_DG>
		cond1 = pst3Ainfo->para_obj.para_fun_config & DCREMOVER_ENABLE;
    83f44896:	06649783          	lh	a5,102(s1)
    83f4489a:	b141                	j	83f4451a <audio_ssp_process+0x5c>
			delay_ref(ref_in, pst3Ainfo->delay_state, hopsize);
    83f4489c:	608c                	ld	a1,0(s1)
    83f4489e:	0a000613          	li	a2,160
    83f448a2:	854e                	mv	a0,s3
    83f448a4:	3ea000ef          	jal	ra,83f44c8e <delay_ref>
		cond1 = pst3Ainfo->para_obj.para_fun_config & DG_ENABLE;
    83f448a8:	06649783          	lh	a5,102(s1)
    83f448ac:	b19d                	j	83f44512 <audio_ssp_process+0x54>
    83f448ae:	7661                	lui	a2,0xffff8
    83f448b0:	6521                	lui	a0,0x8
    83f448b2:	87a2                	mv	a5,s0
    83f448b4:	14040593          	addi	a1,s0,320
    83f448b8:	0000e717          	auipc	a4,0xe
    83f448bc:	9a872687          	flw	fa3,-1624(a4) # 83f52260 <__func__.1+0x68>
    83f448c0:	0000e717          	auipc	a4,0xe
    83f448c4:	9a872607          	flw	fa2,-1624(a4) # 83f52268 <__func__.1+0x70>
    83f448c8:	0000e717          	auipc	a4,0xe
    83f448cc:	9b472707          	flw	fa4,-1612(a4) # 83f5227c <__func__.1+0x84>
    83f448d0:	0609                	addi	a2,a2,2
					tmp = MIN(MAX(tmp, -1.0F), 1.0F);
    83f448d2:	0000e717          	auipc	a4,0xe
    83f448d6:	97e72587          	flw	fa1,-1666(a4) # 83f52250 <__func__.1+0x58>
    83f448da:	157d                	addi	a0,a0,-1
					dataout[i] = ROUND_POS(tmp*(short)(32767));
    83f448dc:	0000e717          	auipc	a4,0xe
    83f448e0:	99072007          	flw	ft0,-1648(a4) # 83f5226c <__func__.1+0x74>
    83f448e4:	0000e717          	auipc	a4,0xe
    83f448e8:	98c72507          	flw	fa0,-1652(a4) # 83f52270 <__func__.1+0x78>
					tmp = (float)(dataout[i])/(float)(32768.0F) * 1.9952F;
    83f448ec:	00079683          	lh	a3,0(a5)
    83f448f0:	8732                	mv	a4,a2
    83f448f2:	d006f7d3          	fcvt.s.w	fa5,a3
    83f448f6:	10d7f7d3          	fmul.s	fa5,fa5,fa3
    83f448fa:	10e7f7d3          	fmul.s	fa5,fa5,fa4
					tmp = MIN(MAX(tmp, -1.0F), 1.0F);
    83f448fe:	a0c796d3          	flt.s	a3,fa5,fa2
    83f44902:	ee89                	bnez	a3,83f4491c <audio_ssp_process+0x45e>
    83f44904:	a0f596d3          	flt.s	a3,fa1,fa5
    83f44908:	872a                	mv	a4,a0
    83f4490a:	ea89                	bnez	a3,83f4491c <audio_ssp_process+0x45e>
					dataout[i] = ROUND_POS(tmp*(short)(32767));
    83f4490c:	5007f7c3          	fmadd.s	fa5,fa5,ft0,fa0
    83f44910:	c0079753          	fcvt.w.s	a4,fa5,rtz
    83f44914:	0107171b          	slliw	a4,a4,0x10
    83f44918:	4107571b          	sraiw	a4,a4,0x10
    83f4491c:	00e79023          	sh	a4,0(a5)
				for (i = 0; i < hopsize; i++) {
    83f44920:	0789                	addi	a5,a5,2
    83f44922:	fcf595e3          	bne	a1,a5,83f448ec <audio_ssp_process+0x42e>
    83f44926:	bda9                	j	83f44780 <audio_ssp_process+0x2c2>
				NLP_AES(pst3Ainfo->aes_state, dataout, pst3Ainfo->frame, pst3Ainfo->speech_vad);
    83f44928:	2204c603          	lbu	a2,544(s1)
    83f4492c:	2244a507          	flw	fa0,548(s1)
    83f44930:	68a8                	ld	a0,80(s1)
    83f44932:	85a2                	mv	a1,s0
    83f44934:	5c4030ef          	jal	ra,83f47ef8 <NLP_AES>
				pst3Ainfo->st_vad = (boolean_T)pst3Ainfo->aes_state->st_vad;
    83f44938:	68bc                	ld	a5,80(s1)
    83f4493a:	0bc7a783          	lw	a5,188(a5)
    83f4493e:	0cf48823          	sb	a5,208(s1)
    83f44942:	bd15                	j	83f44776 <audio_ssp_process+0x2b8>
				compen_DG(dataout, dataout, &pst3Ainfo->dg_obj, hopsize);
    83f44944:	0a000693          	li	a3,160
    83f44948:	00848613          	addi	a2,s1,8
    83f4494c:	85a2                	mv	a1,s0
    83f4494e:	8522                	mv	a0,s0
    83f44950:	470000ef          	jal	ra,83f44dc0 <compen_DG>
    83f44954:	bd25                	j	83f4478c <audio_ssp_process+0x2ce>
					NR(mic_in,
    83f44956:	2284a507          	flw	fa0,552(s1)
						pst3Ainfo->ne_float_out);
    83f4495a:	6705                	lui	a4,0x1
    83f4495c:	c3070713          	addi	a4,a4,-976 # c30 <_EL1_STACK_SIZE+0x430>
					NR(mic_in,
    83f44960:	9726                	add	a4,a4,s1
    83f44962:	22048693          	addi	a3,s1,544
    83f44966:	22448593          	addi	a1,s1,548
    83f4496a:	854a                	mv	a0,s2
    83f4496c:	58b010ef          	jal	ra,83f466f6 <NR>
    83f44970:	b341                	j	83f446f0 <audio_ssp_process+0x232>
		printf("[error]audio_ssp_process parameter len must be 160 frames.\n");
    83f44972:	0000d517          	auipc	a0,0xd
    83f44976:	a6650513          	addi	a0,a0,-1434 # 83f513d8 <__func__.3+0x350>
    83f4497a:	61a070ef          	jal	ra,83f4bf94 <printf>
		return -1;
    83f4497e:	557d                	li	a0,-1
    83f44980:	b115                	j	83f445a4 <audio_ssp_process+0xe6>
		printf("[error]audio_ssp_process error params.\n");
    83f44982:	0000d517          	auipc	a0,0xd
    83f44986:	a2e50513          	addi	a0,a0,-1490 # 83f513b0 <__func__.3+0x328>
    83f4498a:	60a070ef          	jal	ra,83f4bf94 <printf>
		return -1;
    83f4498e:	557d                	li	a0,-1
    83f44990:	b911                	j	83f445a4 <audio_ssp_process+0xe6>
		printf("[error]audio_ssp_process error.\n");
    83f44992:	0000d517          	auipc	a0,0xd
    83f44996:	9f650513          	addi	a0,a0,-1546 # 83f51388 <__func__.3+0x300>
    83f4499a:	5fa070ef          	jal	ra,83f4bf94 <printf>
		return -1;
    83f4499e:	557d                	li	a0,-1
    83f449a0:	b111                	j	83f445a4 <audio_ssp_process+0xe6>

0000000083f449a2 <audio_ssp_deinit>:


int audio_ssp_deinit(void *handle)
{
    83f449a2:	7179                	addi	sp,sp,-48
    83f449a4:	f406                	sd	ra,40(sp)
    83f449a6:	f022                	sd	s0,32(sp)
    83f449a8:	ec26                	sd	s1,24(sp)
    83f449aa:	e84a                	sd	s2,16(sp)
    83f449ac:	e44e                	sd	s3,8(sp)
    83f449ae:	e052                	sd	s4,0(sp)
	struct st3AInfo *pst3Ainfo = (struct st3AInfo *)handle;

	if (!pst3Ainfo) {
    83f449b0:	c545                	beqz	a0,83f44a58 <audio_ssp_deinit+0xb6>
		LOG_ERROR("audio_ssp_deinit NULL handle\n");
		return -1;
	}
	short cond1, cond2, cond3, cond4, cond6;

	if (!pst3Ainfo->bInitOk) {
    83f449b2:	6785                	lui	a5,0x1
    83f449b4:	97aa                	add	a5,a5,a0
    83f449b6:	5798                	lw	a4,40(a5)
    83f449b8:	842a                	mv	s0,a0
    83f449ba:	cb3d                	beqz	a4,83f44a30 <audio_ssp_deinit+0x8e>
		LOG_ERROR("audio_ssp_deinit not init\n");
		return -1;
	}
	pst3Ainfo->bInitOk = 0;
    83f449bc:	0207a423          	sw	zero,40(a5) # 1028 <_EL1_STACK_SIZE+0x828>
	cond1 = pst3Ainfo->para_obj.para_fun_config & LP_AEC_ENABLE;
    83f449c0:	06651783          	lh	a5,102(a0)
	cond2 = pst3Ainfo->para_obj.para_fun_config & NLP_AES_ENABLE;
	cond3 = pst3Ainfo->para_obj.para_fun_config & NR_ENABLE;
	cond4 = pst3Ainfo->para_obj.para_fun_config & AGC_ENABLE;
	cond6 = pst3Ainfo->para_obj.para_fun_config & DELAY_ENABLE;

	if (cond1 | cond2) {
    83f449c4:	0037f713          	andi	a4,a5,3
	cond2 = pst3Ainfo->para_obj.para_fun_config & NLP_AES_ENABLE;
    83f449c8:	0027f993          	andi	s3,a5,2
	cond3 = pst3Ainfo->para_obj.para_fun_config & NR_ENABLE;
    83f449cc:	0047fa13          	andi	s4,a5,4
	cond4 = pst3Ainfo->para_obj.para_fun_config & AGC_ENABLE;
    83f449d0:	0087f913          	andi	s2,a5,8
	cond6 = pst3Ainfo->para_obj.para_fun_config & DELAY_ENABLE;
    83f449d4:	0807f493          	andi	s1,a5,128
	if (cond1 | cond2) {
    83f449d8:	e731                	bnez	a4,83f44a24 <audio_ssp_deinit+0x82>
		LP_AEC_free(pst3Ainfo->aec_state);
	}
	if (cond2) {
    83f449da:	00098763          	beqz	s3,83f449e8 <audio_ssp_deinit+0x46>
		if (pst3Ainfo->aec_state != NULL)
    83f449de:	643c                	ld	a5,72(s0)
    83f449e0:	c781                	beqz	a5,83f449e8 <audio_ssp_deinit+0x46>
			NLP_AES_free(pst3Ainfo->aes_state);
    83f449e2:	6828                	ld	a0,80(s0)
    83f449e4:	166030ef          	jal	ra,83f47b4a <NLP_AES_free>
	}
	if (cond3 | (cond4 && pst3Ainfo->para_obj.para_agc_vad_ena)) {
    83f449e8:	02090763          	beqz	s2,83f44a16 <audio_ssp_deinit+0x74>
    83f449ec:	07e44783          	lbu	a5,126(s0)
    83f449f0:	c39d                	beqz	a5,83f44a16 <audio_ssp_deinit+0x74>
		if (pst3Ainfo->nr_state)
    83f449f2:	6068                	ld	a0,192(s0)
    83f449f4:	c119                	beqz	a0,83f449fa <audio_ssp_deinit+0x58>
			NR_free(pst3Ainfo->nr_state);
    83f449f6:	5c3020ef          	jal	ra,83f477b8 <NR_free>
	}
	if (cond6) {
    83f449fa:	e08d                	bnez	s1,83f44a1c <audio_ssp_deinit+0x7a>
		delay_free(pst3Ainfo->delay_state);
	}
#ifndef PLATFORM_RTOS
	free(pst3Ainfo);
#else
	vPortFree(pst3Ainfo);
    83f449fc:	8522                	mv	a0,s0
    83f449fe:	4ed090ef          	jal	ra,83f4e6ea <vPortFree>
#endif
	//pst3Ainfo = NULL;
	return 0;
    83f44a02:	4401                	li	s0,0
}
    83f44a04:	70a2                	ld	ra,40(sp)
    83f44a06:	8522                	mv	a0,s0
    83f44a08:	7402                	ld	s0,32(sp)
    83f44a0a:	64e2                	ld	s1,24(sp)
    83f44a0c:	6942                	ld	s2,16(sp)
    83f44a0e:	69a2                	ld	s3,8(sp)
    83f44a10:	6a02                	ld	s4,0(sp)
    83f44a12:	6145                	addi	sp,sp,48
    83f44a14:	8082                	ret
	if (cond3 | (cond4 && pst3Ainfo->para_obj.para_agc_vad_ena)) {
    83f44a16:	fc0a1ee3          	bnez	s4,83f449f2 <audio_ssp_deinit+0x50>
	if (cond6) {
    83f44a1a:	d0ed                	beqz	s1,83f449fc <audio_ssp_deinit+0x5a>
		delay_free(pst3Ainfo->delay_state);
    83f44a1c:	6008                	ld	a0,0(s0)
    83f44a1e:	256000ef          	jal	ra,83f44c74 <delay_free>
    83f44a22:	bfe9                	j	83f449fc <audio_ssp_deinit+0x5a>
		LP_AEC_free(pst3Ainfo->aec_state);
    83f44a24:	6528                	ld	a0,72(a0)
    83f44a26:	29d000ef          	jal	ra,83f454c2 <LP_AEC_free>
	if (cond2) {
    83f44a2a:	fa098fe3          	beqz	s3,83f449e8 <audio_ssp_deinit+0x46>
    83f44a2e:	bf45                	j	83f449de <audio_ssp_deinit+0x3c>
		LOG_ERROR("audio_ssp_deinit not init\n");
    83f44a30:	0000e797          	auipc	a5,0xe
    83f44a34:	7907a783          	lw	a5,1936(a5) # 83f531c0 <cviaud_dbg>
		return -1;
    83f44a38:	547d                	li	s0,-1
		LOG_ERROR("audio_ssp_deinit not init\n");
    83f44a3a:	fcf055e3          	blez	a5,83f44a04 <audio_ssp_deinit+0x62>
    83f44a3e:	21700613          	li	a2,535
    83f44a42:	0000d597          	auipc	a1,0xd
    83f44a46:	a6658593          	addi	a1,a1,-1434 # 83f514a8 <__func__.3>
    83f44a4a:	0000d517          	auipc	a0,0xd
    83f44a4e:	a2e50513          	addi	a0,a0,-1490 # 83f51478 <__func__.3+0x3f0>
    83f44a52:	542070ef          	jal	ra,83f4bf94 <printf>
    83f44a56:	b77d                	j	83f44a04 <audio_ssp_deinit+0x62>
		LOG_ERROR("audio_ssp_deinit NULL handle\n");
    83f44a58:	0000e797          	auipc	a5,0xe
    83f44a5c:	7687a783          	lw	a5,1896(a5) # 83f531c0 <cviaud_dbg>
		return -1;
    83f44a60:	547d                	li	s0,-1
		LOG_ERROR("audio_ssp_deinit NULL handle\n");
    83f44a62:	faf051e3          	blez	a5,83f44a04 <audio_ssp_deinit+0x62>
    83f44a66:	21100613          	li	a2,529
    83f44a6a:	0000d597          	auipc	a1,0xd
    83f44a6e:	a3e58593          	addi	a1,a1,-1474 # 83f514a8 <__func__.3>
    83f44a72:	0000d517          	auipc	a0,0xd
    83f44a76:	9d650513          	addi	a0,a0,-1578 # 83f51448 <__func__.3+0x3c0>
    83f44a7a:	51a070ef          	jal	ra,83f4bf94 <printf>
    83f44a7e:	b759                	j	83f44a04 <audio_ssp_deinit+0x62>

0000000083f44a80 <DC_remover_init>:
void DC_remover_init(dcfilter_struct* dc_obj, float Fs)
{
   int i;
   int sampling_rate;

   sampling_rate = (int)Fs;
    83f44a80:	c00517d3          	fcvt.w.s	a5,fa0,rtz

   if (sampling_rate == 8000)
    83f44a84:	6709                	lui	a4,0x2
    83f44a86:	f4070713          	addi	a4,a4,-192 # 1f40 <_EL1_STACK_SIZE+0x1740>
   sampling_rate = (int)Fs;
    83f44a8a:	2781                	sext.w	a5,a5
   if (sampling_rate == 8000)
    83f44a8c:	02e78263          	beq	a5,a4,83f44ab0 <DC_remover_init+0x30>
      dc_obj->dcfilter_radius = .9f;
   if (sampling_rate == 16000)
    83f44a90:	6711                	lui	a4,0x4
    83f44a92:	e8070713          	addi	a4,a4,-384 # 3e80 <_EL1_STACK_SIZE+0x3680>
    83f44a96:	00e79863          	bne	a5,a4,83f44aa6 <DC_remover_init+0x26>
      dc_obj->dcfilter_radius = .982f;
    83f44a9a:	0000d797          	auipc	a5,0xd
    83f44a9e:	7ea7a787          	flw	fa5,2026(a5) # 83f52284 <__func__.1+0x8c>
    83f44aa2:	00f52027          	fsw	fa5,0(a0)
   
   for (i=0;i<2;i++)
      dc_obj->dcfilter_mem[i] = 0;
    83f44aa6:	00052223          	sw	zero,4(a0)
    83f44aaa:	00052423          	sw	zero,8(a0)
   
}
    83f44aae:	8082                	ret
      dc_obj->dcfilter_radius = .9f;
    83f44ab0:	0000d797          	auipc	a5,0xd
    83f44ab4:	7d07a787          	flw	fa5,2000(a5) # 83f52280 <__func__.1+0x88>
    83f44ab8:	00f52027          	fsw	fa5,0(a0)
      dc_obj->dcfilter_mem[i] = 0;
    83f44abc:	00052223          	sw	zero,4(a0)
    83f44ac0:	00052423          	sw	zero,8(a0)
}
    83f44ac4:	8082                	ret

0000000083f44ac6 <DC_remover>:
{
   int i;
   float den2;
   float tmp;

   den2 = dc_obj->dcfilter_radius*dc_obj->dcfilter_radius + .7f*(1-dc_obj->dcfilter_radius)*(1-dc_obj->dcfilter_radius);
    83f44ac6:	00062507          	flw	fa0,0(a2) # ffffffffffff8000 <_end+0xffffffff7bff82c0>
{
    83f44aca:	711d                	addi	sp,sp,-96
    83f44acc:	b422                	fsd	fs0,40(sp)
   den2 = dc_obj->dcfilter_radius*dc_obj->dcfilter_radius + .7f*(1-dc_obj->dcfilter_radius)*(1-dc_obj->dcfilter_radius);
    83f44ace:	0000d797          	auipc	a5,0xd
    83f44ad2:	7827a407          	flw	fs0,1922(a5) # 83f52250 <__func__.1+0x58>
    83f44ad6:	08a47453          	fsub.s	fs0,fs0,fa0
    83f44ada:	0000d797          	auipc	a5,0xd
    83f44ade:	7ae7a787          	flw	fa5,1966(a5) # 83f52288 <__func__.1+0x90>
{
    83f44ae2:	ec86                	sd	ra,88(sp)
    83f44ae4:	e8a2                	sd	s0,80(sp)
    83f44ae6:	e4a6                	sd	s1,72(sp)
   den2 = dc_obj->dcfilter_radius*dc_obj->dcfilter_radius + .7f*(1-dc_obj->dcfilter_radius)*(1-dc_obj->dcfilter_radius);
    83f44ae8:	10f477d3          	fmul.s	fa5,fs0,fa5
{
    83f44aec:	e0ca                	sd	s2,64(sp)
    83f44aee:	fc4e                	sd	s3,56(sp)
    83f44af0:	f852                	sd	s4,48(sp)
    83f44af2:	b026                	fsd	fs1,32(sp)
   den2 = dc_obj->dcfilter_radius*dc_obj->dcfilter_radius + .7f*(1-dc_obj->dcfilter_radius)*(1-dc_obj->dcfilter_radius);
    83f44af4:	1087f453          	fmul.s	fs0,fa5,fs0
{
    83f44af8:	ac4a                	fsd	fs2,24(sp)
    83f44afa:	a84e                	fsd	fs3,16(sp)
    83f44afc:	a452                	fsd	fs4,8(sp)
   den2 = dc_obj->dcfilter_radius*dc_obj->dcfilter_radius + .7f*(1-dc_obj->dcfilter_radius)*(1-dc_obj->dcfilter_radius);
    83f44afe:	40a57443          	fmadd.s	fs0,fa0,fa0,fs0
 
   for (i=0;i<frame_size;i++) {
    83f44b02:	0ad05863          	blez	a3,83f44bb2 <DC_remover+0xec>
    83f44b06:	fff6899b          	addiw	s3,a3,-1
    83f44b0a:	02099793          	slli	a5,s3,0x20
    83f44b0e:	01f7d993          	srli	s3,a5,0x1f
      float vin = in[i];
      float vout = dc_obj->dcfilter_mem[0] + vin;
      dc_obj->dcfilter_mem[0] = dc_obj->dcfilter_mem[1] + 2*(-vin + dc_obj->dcfilter_radius*vout);  /* history state */
      dc_obj->dcfilter_mem[1] = vin - den2 * vout;  /* history state */
      tmp = dc_obj->dcfilter_radius * vout;
      out[i] = (short)WORD2INT(tmp);
    83f44b12:	6a21                	lui	s4,0x8
    83f44b14:	00250793          	addi	a5,a0,2
    83f44b18:	99be                	add	s3,s3,a5
    83f44b1a:	8432                	mv	s0,a2
    83f44b1c:	84aa                	mv	s1,a0
    83f44b1e:	892e                	mv	s2,a1
    83f44b20:	0000d797          	auipc	a5,0xd
    83f44b24:	76c7a907          	flw	fs2,1900(a5) # 83f5228c <__func__.1+0x94>
    83f44b28:	0000d797          	auipc	a5,0xd
    83f44b2c:	7687a487          	flw	fs1,1896(a5) # 83f52290 <__func__.1+0x98>
    83f44b30:	0000d797          	auipc	a5,0xd
    83f44b34:	7647aa07          	flw	fs4,1892(a5) # 83f52294 <__func__.1+0x9c>
    83f44b38:	1a7d                	addi	s4,s4,-1
    83f44b3a:	0000d797          	auipc	a5,0xd
    83f44b3e:	75e7b987          	fld	fs3,1886(a5) # 83f52298 <__func__.1+0xa0>
    83f44b42:	a801                	j	83f44b52 <DC_remover+0x8c>
    83f44b44:	00f91023          	sh	a5,0(s2)
   for (i=0;i<frame_size;i++) {
    83f44b48:	0909                	addi	s2,s2,2
    83f44b4a:	06998463          	beq	s3,s1,83f44bb2 <DC_remover+0xec>
      dc_obj->dcfilter_mem[0] = dc_obj->dcfilter_mem[1] + 2*(-vin + dc_obj->dcfilter_radius*vout);  /* history state */
    83f44b4e:	00042507          	flw	fa0,0(s0)
      float vin = in[i];
    83f44b52:	00049783          	lh	a5,0(s1)
      float vout = dc_obj->dcfilter_mem[0] + vin;
    83f44b56:	00442707          	flw	fa4,4(s0)
      dc_obj->dcfilter_mem[0] = dc_obj->dcfilter_mem[1] + 2*(-vin + dc_obj->dcfilter_radius*vout);  /* history state */
    83f44b5a:	00842687          	flw	fa3,8(s0)
      float vin = in[i];
    83f44b5e:	d007f7d3          	fcvt.s.w	fa5,a5
   for (i=0;i<frame_size;i++) {
    83f44b62:	0489                	addi	s1,s1,2
      out[i] = (short)WORD2INT(tmp);
    83f44b64:	77e1                	lui	a5,0xffff8
      float vout = dc_obj->dcfilter_mem[0] + vin;
    83f44b66:	00e7f753          	fadd.s	fa4,fa5,fa4
      dc_obj->dcfilter_mem[0] = dc_obj->dcfilter_mem[1] + 2*(-vin + dc_obj->dcfilter_radius*vout);  /* history state */
    83f44b6a:	10a77553          	fmul.s	fa0,fa4,fa0
      dc_obj->dcfilter_mem[1] = vin - den2 * vout;  /* history state */
    83f44b6e:	78e4774b          	fnmsub.s	fa4,fs0,fa4,fa5
      dc_obj->dcfilter_mem[0] = dc_obj->dcfilter_mem[1] + 2*(-vin + dc_obj->dcfilter_radius*vout);  /* history state */
    83f44b72:	08f577d3          	fsub.s	fa5,fa0,fa5
      out[i] = (short)WORD2INT(tmp);
    83f44b76:	a0951753          	flt.s	a4,fa0,fs1
      dc_obj->dcfilter_mem[1] = vin - den2 * vout;  /* history state */
    83f44b7a:	00e42427          	fsw	fa4,8(s0)
      dc_obj->dcfilter_mem[0] = dc_obj->dcfilter_mem[1] + 2*(-vin + dc_obj->dcfilter_radius*vout);  /* history state */
    83f44b7e:	6927f7c3          	fmadd.s	fa5,fa5,fs2,fa3
    83f44b82:	00f42227          	fsw	fa5,4(s0)
      out[i] = (short)WORD2INT(tmp);
    83f44b86:	ff5d                	bnez	a4,83f44b44 <DC_remover+0x7e>
    83f44b88:	a0aa1753          	flt.s	a4,fs4,fa0
    83f44b8c:	87d2                	mv	a5,s4
    83f44b8e:	fb5d                	bnez	a4,83f44b44 <DC_remover+0x7e>
    83f44b90:	42050553          	fcvt.d.s	fa0,fa0
   for (i=0;i<frame_size;i++) {
    83f44b94:	0909                	addi	s2,s2,2
      out[i] = (short)WORD2INT(tmp);
    83f44b96:	03357553          	fadd.d	fa0,fa0,fs3
    83f44b9a:	dc9fb0ef          	jal	ra,83f40962 <floor>
    83f44b9e:	c20517d3          	fcvt.w.d	a5,fa0,rtz
    83f44ba2:	0107979b          	slliw	a5,a5,0x10
    83f44ba6:	4107d79b          	sraiw	a5,a5,0x10
    83f44baa:	fef91f23          	sh	a5,-2(s2)
   for (i=0;i<frame_size;i++) {
    83f44bae:	fa9990e3          	bne	s3,s1,83f44b4e <DC_remover+0x88>
   }
   
}
    83f44bb2:	60e6                	ld	ra,88(sp)
    83f44bb4:	6446                	ld	s0,80(sp)
    83f44bb6:	64a6                	ld	s1,72(sp)
    83f44bb8:	6906                	ld	s2,64(sp)
    83f44bba:	79e2                	ld	s3,56(sp)
    83f44bbc:	7a42                	ld	s4,48(sp)
    83f44bbe:	3422                	fld	fs0,40(sp)
    83f44bc0:	3482                	fld	fs1,32(sp)
    83f44bc2:	2962                	fld	fs2,24(sp)
    83f44bc4:	29c2                	fld	fs3,16(sp)
    83f44bc6:	2a22                	fld	fs4,8(sp)
    83f44bc8:	6125                	addi	sp,sp,96
    83f44bca:	8082                	ret

0000000083f44bcc <delay_para>:
{
  ssp_para_struct *ssp_para_obj;

  /* Delay Parameter */
  ssp_para_obj = para;
  ssp_para_obj->para_delay_sample = MIN(MAX(ssp_para_obj->para_delay_sample, 1), 3000);  /* delay in sample, delay 0 sample if disable DELAY_ENABLE */
    83f44bcc:	00455783          	lhu	a5,4(a0)
    83f44bd0:	0107971b          	slliw	a4,a5,0x10
    83f44bd4:	0107569b          	srliw	a3,a4,0x10
    83f44bd8:	8736                	mv	a4,a3
    83f44bda:	e299                	bnez	a3,83f44be0 <delay_para+0x14>
    83f44bdc:	4785                	li	a5,1
    83f44bde:	4705                	li	a4,1
    83f44be0:	6685                	lui	a3,0x1
    83f44be2:	bb868693          	addi	a3,a3,-1096 # bb8 <_EL1_STACK_SIZE+0x3b8>
    83f44be6:	00e6f363          	bgeu	a3,a4,83f44bec <delay_para+0x20>
    83f44bea:	87b6                	mv	a5,a3
    83f44bec:	00f51223          	sh	a5,4(a0)

}
    83f44bf0:	8082                	ret

0000000083f44bf2 <delay_init>:

EXPORT DelayState *delay_init(ssp_para_struct *para)
{
    83f44bf2:	7179                	addi	sp,sp,-48
    83f44bf4:	e84a                	sd	s2,16(sp)
    83f44bf6:	892a                	mv	s2,a0
   uintptr_t *ptr =  pvPortMalloc(size);
    83f44bf8:	02800513          	li	a0,40
    83f44bfc:	f406                	sd	ra,40(sp)
    83f44bfe:	f022                	sd	s0,32(sp)
    83f44c00:	ec26                	sd	s1,24(sp)
    83f44c02:	e44e                	sd	s3,8(sp)
    83f44c04:	181090ef          	jal	ra,83f4e584 <pvPortMalloc>
   memset(ptr, 0, size);
    83f44c08:	02800613          	li	a2,40
    83f44c0c:	4581                	li	a1,0
   uintptr_t *ptr =  pvPortMalloc(size);
    83f44c0e:	84aa                	mv	s1,a0
  int i;
  ssp_para_struct *ssp_para_obj;
  DelayState *st = (DelayState *)mem_alloc(sizeof(DelayState));

  ssp_para_obj = para;
  st->size = 3001;
    83f44c10:	6985                	lui	s3,0x1
   memset(ptr, 0, size);
    83f44c12:	36a070ef          	jal	ra,83f4bf7c <memset>
    83f44c16:	bb998793          	addi	a5,s3,-1095 # bb9 <_EL1_STACK_SIZE+0x3b9>
    83f44c1a:	00f49c23          	sh	a5,24(s1)
   uintptr_t *ptr =  pvPortMalloc(size);
    83f44c1e:	77298513          	addi	a0,s3,1906
    83f44c22:	163090ef          	jal	ra,83f4e584 <pvPortMalloc>
   memset(ptr, 0, size);
    83f44c26:	77298613          	addi	a2,s3,1906
    83f44c2a:	4581                	li	a1,0
   uintptr_t *ptr =  pvPortMalloc(size);
    83f44c2c:	842a                	mv	s0,a0
   memset(ptr, 0, size);
    83f44c2e:	34e070ef          	jal	ra,83f4bf7c <memset>

  st->dly_ref_buf = (short*)mem_alloc(st->size*sizeof(short));

  for (i=0;i<st->size;i++)
    83f44c32:	0184d783          	lhu	a5,24(s1)
  st->dly_ref_buf = (short*)mem_alloc(st->size*sizeof(short));
    83f44c36:	f080                	sd	s0,32(s1)
  for (i=0;i<st->size;i++)
    83f44c38:	cf99                	beqz	a5,83f44c56 <delay_init+0x64>
    83f44c3a:	4781                	li	a5,0
    st->dly_ref_buf[i] = 0;
    83f44c3c:	00179713          	slli	a4,a5,0x1
    83f44c40:	943a                	add	s0,s0,a4
    83f44c42:	00041023          	sh	zero,0(s0)
  for (i=0;i<st->size;i++)
    83f44c46:	0184d683          	lhu	a3,24(s1)
    83f44c4a:	0785                	addi	a5,a5,1
    83f44c4c:	0007871b          	sext.w	a4,a5
    st->dly_ref_buf[i] = 0;
    83f44c50:	7080                	ld	s0,32(s1)
  for (i=0;i<st->size;i++)
    83f44c52:	fed745e3          	blt	a4,a3,83f44c3c <delay_init+0x4a>

  st->addr = st->dly_ref_buf;
    83f44c56:	e080                	sd	s0,0(s1)
  st->rdptr = st->addr;
    83f44c58:	e480                	sd	s0,8(s1)
  st->wrptr = st->addr + ssp_para_obj->para_delay_sample;
    83f44c5a:	00495783          	lhu	a5,4(s2)

  return st;

}
    83f44c5e:	8526                	mv	a0,s1
  st->wrptr = st->addr + ssp_para_obj->para_delay_sample;
    83f44c60:	0786                	slli	a5,a5,0x1
    83f44c62:	943e                	add	s0,s0,a5
    83f44c64:	e880                	sd	s0,16(s1)
}
    83f44c66:	70a2                	ld	ra,40(sp)
    83f44c68:	7402                	ld	s0,32(sp)
    83f44c6a:	64e2                	ld	s1,24(sp)
    83f44c6c:	6942                	ld	s2,16(sp)
    83f44c6e:	69a2                	ld	s3,8(sp)
    83f44c70:	6145                	addi	sp,sp,48
    83f44c72:	8082                	ret

0000000083f44c74 <delay_free>:

EXPORT void delay_free(DelayState *st)
{
    83f44c74:	1141                	addi	sp,sp,-16
    83f44c76:	e022                	sd	s0,0(sp)
    83f44c78:	e406                	sd	ra,8(sp)
    83f44c7a:	842a                	mv	s0,a0
static _inline void mem_free (void *ptr)
{
#ifndef PLATFORM_RTOS
   free(ptr);
#else
   vPortFree(ptr);
    83f44c7c:	7108                	ld	a0,32(a0)
    83f44c7e:	26d090ef          	jal	ra,83f4e6ea <vPortFree>
    83f44c82:	8522                	mv	a0,s0
  mem_free(st->dly_ref_buf);
  mem_free(st);

}
    83f44c84:	6402                	ld	s0,0(sp)
    83f44c86:	60a2                	ld	ra,8(sp)
    83f44c88:	0141                	addi	sp,sp,16
    83f44c8a:	2610906f          	j	83f4e6ea <vPortFree>

0000000083f44c8e <delay_ref>:
  DelayState *st;
  short *ptr1, *ptr2, *ptr3;

  st = delay_state;

  ptr1 = st->wrptr;  /* write pointer in circular butter */
    83f44c8e:	6994                	ld	a3,16(a1)
  ptr2 = pin;
  ptr3 = st->rdptr;  /* read pointer in circular butter */
    83f44c90:	6598                	ld	a4,8(a1)

  for (i=0; i<frame_size; i++) {
    83f44c92:	04c05463          	blez	a2,83f44cda <delay_ref+0x4c>
    83f44c96:	0606                	slli	a2,a2,0x1
    83f44c98:	00c508b3          	add	a7,a0,a2
    *ptr1++ = *ptr2;  /* read from input buffer and write to circular buffer */
    83f44c9c:	00051783          	lh	a5,0(a0)
    83f44ca0:	00268813          	addi	a6,a3,2
    if(ptr1 >= (st->addr + st->size))
      ptr1 = st->addr;
    *ptr2++ = *ptr3++;  /* read from circular buffer and write to input buffer */
    83f44ca4:	0509                	addi	a0,a0,2
    *ptr1++ = *ptr2;  /* read from input buffer and write to circular buffer */
    83f44ca6:	00f69023          	sh	a5,0(a3)
    if(ptr1 >= (st->addr + st->size))
    83f44caa:	0185d783          	lhu	a5,24(a1)
    83f44cae:	6194                	ld	a3,0(a1)
    *ptr2++ = *ptr3++;  /* read from circular buffer and write to input buffer */
    83f44cb0:	00270613          	addi	a2,a4,2
    if(ptr1 >= (st->addr + st->size))
    83f44cb4:	0786                	slli	a5,a5,0x1
    83f44cb6:	97b6                	add	a5,a5,a3
    83f44cb8:	00f87363          	bgeu	a6,a5,83f44cbe <delay_ref+0x30>
    83f44cbc:	86c2                	mv	a3,a6
    *ptr2++ = *ptr3++;  /* read from circular buffer and write to input buffer */
    83f44cbe:	00071783          	lh	a5,0(a4)
    83f44cc2:	fef51f23          	sh	a5,-2(a0)
    if(ptr3 >= (st->addr + st->size))
    83f44cc6:	0185d783          	lhu	a5,24(a1)
    83f44cca:	6198                	ld	a4,0(a1)
    83f44ccc:	0786                	slli	a5,a5,0x1
    83f44cce:	97ba                	add	a5,a5,a4
    83f44cd0:	00f67363          	bgeu	a2,a5,83f44cd6 <delay_ref+0x48>
    83f44cd4:	8732                	mv	a4,a2
  for (i=0; i<frame_size; i++) {
    83f44cd6:	fd1513e3          	bne	a0,a7,83f44c9c <delay_ref+0xe>
      ptr3 = st->addr;
  }

  st->wrptr = ptr1;  /* restore for next frame */
    83f44cda:	e994                	sd	a3,16(a1)
  st->rdptr = ptr3;  /* restore for next frame */
    83f44cdc:	e598                	sd	a4,8(a1)

}
    83f44cde:	8082                	ret

0000000083f44ce0 <DG_para>:
  static float dg_boost_tab[12] = {1.122018F, 1.258925F, 1.412538F, 1.584893F, 1.778279F, 1.995262F,
                                                                  2.238721F, 2.511886F, 2.818383F, 3.162278F, 3.548134F, 3.981072F};

  /* DG Parameter */
  ssp_para_obj = para;
  dg_obj = dg;
    83f44ce0:	0065d703          	lhu	a4,6(a1)
  ssp_para_obj->para_dg_target = MIN(MAX(ssp_para_obj->para_dg_target, 1), 12);  /* target 0dB if disable DG_ENABLE */
    83f44ce4:	0107179b          	slliw	a5,a4,0x10
    83f44ce8:	0107d69b          	srliw	a3,a5,0x10
    83f44cec:	87b6                	mv	a5,a3
    83f44cee:	e299                	bnez	a3,83f44cf4 <DG_para+0x14>
    83f44cf0:	4705                	li	a4,1
    83f44cf2:	4785                	li	a5,1
    83f44cf4:	46b1                	li	a3,12
    83f44cf6:	00f6f363          	bgeu	a3,a5,83f44cfc <DG_para+0x1c>
    83f44cfa:	4731                	li	a4,12
    83f44cfc:	03071793          	slli	a5,a4,0x30
    83f44d00:	93c1                	srli	a5,a5,0x30
  dg_obj->cut_gain = dg_cut_tab[ssp_para_obj->para_dg_target-1];
    83f44d02:	37fd                	addiw	a5,a5,-1
    83f44d04:	078a                	slli	a5,a5,0x2
    83f44d06:	0000c697          	auipc	a3,0xc
    83f44d0a:	7fa68693          	addi	a3,a3,2042 # 83f51500 <dg_cut_tab.1>
    83f44d0e:	97b6                	add	a5,a5,a3
    83f44d10:	0007a787          	flw	fa5,0(a5) # ffffffffffff8000 <_end+0xffffffff7bff82c0>
  ssp_para_obj->para_dg_target = MIN(MAX(ssp_para_obj->para_dg_target, 1), 12);  /* target 0dB if disable DG_ENABLE */
    83f44d14:	00e59323          	sh	a4,6(a1)
  dg_obj->boost_gain = dg_boost_tab[ssp_para_obj->para_dg_target-1];
    83f44d18:	0000c717          	auipc	a4,0xc
    83f44d1c:	7b870713          	addi	a4,a4,1976 # 83f514d0 <dg_boost_tab.0>
  dg_obj->cut_gain = dg_cut_tab[ssp_para_obj->para_dg_target-1];
    83f44d20:	00f52027          	fsw	fa5,0(a0)
  dg_obj->boost_gain = dg_boost_tab[ssp_para_obj->para_dg_target-1];
    83f44d24:	0065d783          	lhu	a5,6(a1)
    83f44d28:	37fd                	addiw	a5,a5,-1
    83f44d2a:	078a                	slli	a5,a5,0x2
    83f44d2c:	97ba                	add	a5,a5,a4
    83f44d2e:	0007a787          	flw	fa5,0(a5)
    83f44d32:	00f52227          	fsw	fa5,4(a0)

}
    83f44d36:	8082                	ret

0000000083f44d38 <apply_DG>:
  int i;
  float tmp;
  dg_struct *dg_obj;

  dg_obj = dg;
  for (i=0;i<frame_size;i++) {
    83f44d38:	08d05363          	blez	a3,83f44dbe <apply_DG+0x86>
    83f44d3c:	fff6879b          	addiw	a5,a3,-1
    83f44d40:	02079713          	slli	a4,a5,0x20
    83f44d44:	01f75793          	srli	a5,a4,0x1f
    83f44d48:	00258713          	addi	a4,a1,2
    83f44d4c:	97ba                	add	a5,a5,a4
    tmp = (float)(pin[i])/(float)(32768.0F)*dg_obj->cut_gain;
    if (tmp < 0.0F) {
    83f44d4e:	f0000653          	fmv.w.x	fa2,zero
    83f44d52:	0000d717          	auipc	a4,0xd
    83f44d56:	50e72687          	flw	fa3,1294(a4) # 83f52260 <__func__.1+0x68>
      pout[i] = ROUND_NEG(tmp*(int)(32768));
    } else {
      pout[i] = ROUND_POS(tmp*(short)(32767));
    83f44d5a:	0000d717          	auipc	a4,0xd
    83f44d5e:	51272507          	flw	fa0,1298(a4) # 83f5226c <__func__.1+0x74>
    83f44d62:	0000d717          	auipc	a4,0xd
    83f44d66:	50e72587          	flw	fa1,1294(a4) # 83f52270 <__func__.1+0x78>
      pout[i] = ROUND_NEG(tmp*(int)(32768));
    83f44d6a:	0000d717          	auipc	a4,0xd
    83f44d6e:	50a72087          	flw	ft1,1290(a4) # 83f52274 <__func__.1+0x7c>
    83f44d72:	0000d717          	auipc	a4,0xd
    83f44d76:	50672007          	flw	ft0,1286(a4) # 83f52278 <__func__.1+0x80>
    83f44d7a:	a819                	j	83f44d90 <apply_DG+0x58>
      pout[i] = ROUND_POS(tmp*(short)(32767));
    83f44d7c:	58a7f7c3          	fmadd.s	fa5,fa5,fa0,fa1
  for (i=0;i<frame_size;i++) {
    83f44d80:	0589                	addi	a1,a1,2
    83f44d82:	0509                	addi	a0,a0,2
      pout[i] = ROUND_POS(tmp*(short)(32767));
    83f44d84:	c0079753          	fcvt.w.s	a4,fa5,rtz
    83f44d88:	fee59f23          	sh	a4,-2(a1)
  for (i=0;i<frame_size;i++) {
    83f44d8c:	02f58963          	beq	a1,a5,83f44dbe <apply_DG+0x86>
    tmp = (float)(pin[i])/(float)(32768.0F)*dg_obj->cut_gain;
    83f44d90:	00051703          	lh	a4,0(a0)
    83f44d94:	00062707          	flw	fa4,0(a2)
    83f44d98:	d00777d3          	fcvt.s.w	fa5,a4
    83f44d9c:	10d7f7d3          	fmul.s	fa5,fa5,fa3
    83f44da0:	10e7f7d3          	fmul.s	fa5,fa5,fa4
    if (tmp < 0.0F) {
    83f44da4:	a0c79753          	flt.s	a4,fa5,fa2
    83f44da8:	db71                	beqz	a4,83f44d7c <apply_DG+0x44>
      pout[i] = ROUND_NEG(tmp*(int)(32768));
    83f44daa:	0017f7c3          	fmadd.s	fa5,fa5,ft1,ft0
  for (i=0;i<frame_size;i++) {
    83f44dae:	0589                	addi	a1,a1,2
    83f44db0:	0509                	addi	a0,a0,2
      pout[i] = ROUND_NEG(tmp*(int)(32768));
    83f44db2:	c0079753          	fcvt.w.s	a4,fa5,rtz
    83f44db6:	fee59f23          	sh	a4,-2(a1)
  for (i=0;i<frame_size;i++) {
    83f44dba:	fcf59be3          	bne	a1,a5,83f44d90 <apply_DG+0x58>
    }
  }

}
    83f44dbe:	8082                	ret

0000000083f44dc0 <compen_DG>:
  int i;
  float tmp;
  dg_struct *dg_obj;

  dg_obj = dg;
  for (i=0;i<frame_size;i++) {
    83f44dc0:	0ad05d63          	blez	a3,83f44e7a <compen_DG+0xba>
    83f44dc4:	fff6871b          	addiw	a4,a3,-1
    83f44dc8:	02071793          	slli	a5,a4,0x20
    83f44dcc:	01f7d713          	srli	a4,a5,0x1f
    83f44dd0:	6821                	lui	a6,0x8
    83f44dd2:	00258793          	addi	a5,a1,2
    83f44dd6:	973e                	add	a4,a4,a5
    tmp = (float)(pin[i])/(float)(32768.0F)*dg_obj->boost_gain;
    tmp = MIN(MAX(tmp, -1.0F), 1.0F);
    if (tmp < 0.0F) {
    83f44dd8:	f0000553          	fmv.w.x	fa0,zero
    83f44ddc:	0000d797          	auipc	a5,0xd
    83f44de0:	4847a607          	flw	fa2,1156(a5) # 83f52260 <__func__.1+0x68>
    83f44de4:	0000d797          	auipc	a5,0xd
    83f44de8:	4847a687          	flw	fa3,1156(a5) # 83f52268 <__func__.1+0x70>
    tmp = MIN(MAX(tmp, -1.0F), 1.0F);
    83f44dec:	0000d797          	auipc	a5,0xd
    83f44df0:	4647a587          	flw	fa1,1124(a5) # 83f52250 <__func__.1+0x58>
    83f44df4:	187d                	addi	a6,a6,-1
      pout[i] = ROUND_NEG(tmp*(int)(32768));
    83f44df6:	0000d797          	auipc	a5,0xd
    83f44dfa:	47e7a187          	flw	ft3,1150(a5) # 83f52274 <__func__.1+0x7c>
    83f44dfe:	0000d797          	auipc	a5,0xd
    83f44e02:	47a7a107          	flw	ft2,1146(a5) # 83f52278 <__func__.1+0x80>
    } else {
      pout[i] = ROUND_POS(tmp*(short)(32767));
    83f44e06:	0000d797          	auipc	a5,0xd
    83f44e0a:	4667a087          	flw	ft1,1126(a5) # 83f5226c <__func__.1+0x74>
    83f44e0e:	0000d797          	auipc	a5,0xd
    83f44e12:	4627a007          	flw	ft0,1122(a5) # 83f52270 <__func__.1+0x78>
    83f44e16:	a839                	j	83f44e34 <compen_DG+0x74>
    83f44e18:	0017f7c3          	fmadd.s	fa5,fa5,ft1,ft0
    83f44e1c:	c00796d3          	fcvt.w.s	a3,fa5,rtz
    83f44e20:	0106969b          	slliw	a3,a3,0x10
    83f44e24:	4106d69b          	sraiw	a3,a3,0x10
    83f44e28:	00d59023          	sh	a3,0(a1)
  for (i=0;i<frame_size;i++) {
    83f44e2c:	0589                	addi	a1,a1,2
    83f44e2e:	0509                	addi	a0,a0,2
    83f44e30:	04b70563          	beq	a4,a1,83f44e7a <compen_DG+0xba>
    tmp = (float)(pin[i])/(float)(32768.0F)*dg_obj->boost_gain;
    83f44e34:	00051783          	lh	a5,0(a0)
    83f44e38:	00462707          	flw	fa4,4(a2)
    83f44e3c:	76e1                	lui	a3,0xffff8
    83f44e3e:	d007f7d3          	fcvt.s.w	fa5,a5
    83f44e42:	10c7f7d3          	fmul.s	fa5,fa5,fa2
    83f44e46:	10e7f7d3          	fmul.s	fa5,fa5,fa4
    tmp = MIN(MAX(tmp, -1.0F), 1.0F);
    83f44e4a:	a0d797d3          	flt.s	a5,fa5,fa3
    83f44e4e:	ffe9                	bnez	a5,83f44e28 <compen_DG+0x68>
    83f44e50:	a0f597d3          	flt.s	a5,fa1,fa5
    83f44e54:	86c2                	mv	a3,a6
    83f44e56:	fbe9                	bnez	a5,83f44e28 <compen_DG+0x68>
    if (tmp < 0.0F) {
    83f44e58:	a0a797d3          	flt.s	a5,fa5,fa0
    83f44e5c:	dfd5                	beqz	a5,83f44e18 <compen_DG+0x58>
      pout[i] = ROUND_NEG(tmp*(int)(32768));
    83f44e5e:	1037f7c3          	fmadd.s	fa5,fa5,ft3,ft2
  for (i=0;i<frame_size;i++) {
    83f44e62:	0589                	addi	a1,a1,2
    83f44e64:	0509                	addi	a0,a0,2
      pout[i] = ROUND_NEG(tmp*(int)(32768));
    83f44e66:	c00796d3          	fcvt.w.s	a3,fa5,rtz
    83f44e6a:	0106969b          	slliw	a3,a3,0x10
    83f44e6e:	4106d69b          	sraiw	a3,a3,0x10
      pout[i] = ROUND_POS(tmp*(short)(32767));
    83f44e72:	fed59f23          	sh	a3,-2(a1)
  for (i=0;i<frame_size;i++) {
    83f44e76:	fab71fe3          	bne	a4,a1,83f44e34 <compen_DG+0x74>
    }
  }

}
    83f44e7a:	8082                	ret

0000000083f44e7c <LP_AEC_para>:

   /* LP AEC Parameters */
   para_obj = para;

   tmp = MIN(MAX(para_obj->para_aec_init_filter_len, 1), 13);    /* 8kHz: [20ms, 260ms], each step 20ms; 16kHz: [10ms, 130ms], each step 10ms */
   *init_filter_length = tmp;
    83f44e7c:	00855783          	lhu	a5,8(a0)
    83f44e80:	0107971b          	slliw	a4,a5,0x10
    83f44e84:	0107569b          	srliw	a3,a4,0x10
    83f44e88:	8736                	mv	a4,a3
    83f44e8a:	e299                	bnez	a3,83f44e90 <LP_AEC_para+0x14>
    83f44e8c:	4785                	li	a5,1
    83f44e8e:	4705                	li	a4,1
    83f44e90:	46b5                	li	a3,13
    83f44e92:	00e6f363          	bgeu	a3,a4,83f44e98 <LP_AEC_para+0x1c>
    83f44e96:	47b5                	li	a5,13
    83f44e98:	00f61023          	sh	a5,0(a2)

   tmp = MIN(MAX(para_obj->para_aec_filter_len, 1), 13);    /* 8kHz: [20ms, 260ms], each step 20ms; 16kHz: [10ms, 130ms], each step 10ms */
   *filter_length = tmp;
    83f44e9c:	00a55783          	lhu	a5,10(a0)
    83f44ea0:	0107971b          	slliw	a4,a5,0x10
    83f44ea4:	0107569b          	srliw	a3,a4,0x10
    83f44ea8:	8736                	mv	a4,a3
    83f44eaa:	e299                	bnez	a3,83f44eb0 <LP_AEC_para+0x34>
    83f44eac:	4785                	li	a5,1
    83f44eae:	4705                	li	a4,1
    83f44eb0:	46b5                	li	a3,13
    83f44eb2:	00e6f363          	bgeu	a3,a4,83f44eb8 <LP_AEC_para+0x3c>
    83f44eb6:	47b5                	li	a5,13
    83f44eb8:	00f59023          	sh	a5,0(a1)

}
    83f44ebc:	8082                	ret

0000000083f44ebe <LP_AEC_init>:

EXPORT LinearEchoState *LP_AEC_init(int frame_size, short filter_length, short init_filter_length, float Fs)
{
    83f44ebe:	7119                	addi	sp,sp,-128
    83f44ec0:	e4d6                	sd	s5,72(sp)
    83f44ec2:	8aaa                	mv	s5,a0
   uintptr_t *ptr =  pvPortMalloc(size);
    83f44ec4:	15800513          	li	a0,344
    83f44ec8:	fc86                	sd	ra,120(sp)
    83f44eca:	f8a2                	sd	s0,112(sp)
    83f44ecc:	f4a6                	sd	s1,104(sp)
    83f44ece:	f0ca                	sd	s2,96(sp)
    83f44ed0:	84ae                	mv	s1,a1
    83f44ed2:	8932                	mv	s2,a2
    83f44ed4:	ecce                	sd	s3,88(sp)
    83f44ed6:	e8d2                	sd	s4,80(sp)
    83f44ed8:	e0da                	sd	s6,64(sp)
    83f44eda:	fc5e                	sd	s7,56(sp)
    83f44edc:	f466                	sd	s9,40(sp)
    83f44ede:	ac22                	fsd	fs0,24(sp)
    83f44ee0:	f862                	sd	s8,48(sp)
    83f44ee2:	20a50453          	fmv.s	fs0,fa0
    83f44ee6:	a826                	fsd	fs1,16(sp)
    83f44ee8:	a44a                	fsd	fs2,8(sp)
    83f44eea:	69a090ef          	jal	ra,83f4e584 <pvPortMalloc>
   memset(ptr, 0, size);
    83f44eee:	15800613          	li	a2,344
    83f44ef2:	4581                	li	a1,0
   uintptr_t *ptr =  pvPortMalloc(size);
    83f44ef4:	842a                	mv	s0,a0
   memset(ptr, 0, size);
    83f44ef6:	086070ef          	jal	ra,83f4bf7c <memset>
   st->sum_adapt = 0;
   st->saturated = 0;
   st->screwed_up = 0;

   st->sampling_rate = (int)Fs;
   st->spec_average = (float)st->frame_size/(float)st->sampling_rate;
    83f44efa:	d00af7d3          	fcvt.s.w	fa5,s5
   st->sampling_rate = (int)Fs;
    83f44efe:	c00417d3          	fcvt.w.s	a5,fs0,rtz
   st->beta0 = (2.0f*st->frame_size)/st->sampling_rate;
   st->beta_max = (.5f*st->frame_size)/st->sampling_rate;
    83f44f02:	0000d717          	auipc	a4,0xd
    83f44f06:	36e72407          	flw	fs0,878(a4) # 83f52270 <__func__.1+0x78>
   st->beta0 = (2.0f*st->frame_size)/st->sampling_rate;
    83f44f0a:	00f7f6d3          	fadd.s	fa3,fa5,fa5
   st->beta_max = (.5f*st->frame_size)/st->sampling_rate;
    83f44f0e:	1087f753          	fmul.s	fa4,fa5,fs0
   st->spec_average = (float)st->frame_size/(float)st->sampling_rate;
    83f44f12:	d007f653          	fcvt.s.w	fa2,a5
   st->ss = .35f;  // fe_smooth_coef;
    83f44f16:	0000d717          	auipc	a4,0xd
    83f44f1a:	38a72587          	flw	fa1,906(a4) # 83f522a0 <__func__.1+0xa8>
   st->window_size = 2*frame_size;
    83f44f1e:	001a9b1b          	slliw	s6,s5,0x1
   st->spec_average = (float)st->frame_size/(float)st->sampling_rate;
    83f44f22:	18c7f7d3          	fdiv.s	fa5,fa5,fa2
   st->ss = .35f;  // fe_smooth_coef;
    83f44f26:	14b42027          	fsw	fa1,320(s0)
   st->sampling_rate = (int)Fs;
    83f44f2a:	cc5c                	sw	a5,28(s0)
   st->leak_estimate = 0;

   st->fft_table = speech_fft_init(N);

   st->e = (float*)mem_alloc(N*sizeof(float));
    83f44f2c:	003a9a1b          	slliw	s4,s5,0x3
   st->frame_size = frame_size;
    83f44f30:	01542023          	sw	s5,0(s0)
   st->M = filter_length;
    83f44f34:	c404                	sw	s1,8(s0)
   st->window_size = 2*frame_size;
    83f44f36:	01642223          	sw	s6,4(s0)
   st->initial_filter_len = init_filter_length;
    83f44f3a:	15241823          	sh	s2,336(s0)
   st->cancel_count = 0;
    83f44f3e:	00042623          	sw	zero,12(s0)
   st->sum_adapt = 0;
    83f44f42:	02042623          	sw	zero,44(s0)
   st->saturated = 0;
    83f44f46:	00042a23          	sw	zero,20(s0)
   st->screwed_up = 0;
    83f44f4a:	00042c23          	sw	zero,24(s0)
   st->leak_estimate = 0;
    83f44f4e:	02042823          	sw	zero,48(s0)
   st->fft_table = speech_fft_init(N);
    83f44f52:	855a                	mv	a0,s6
   uintptr_t *ptr =  pvPortMalloc(size);
    83f44f54:	000a049b          	sext.w	s1,s4
   st->Rf = (float*)mem_alloc((st->frame_size+1)*sizeof(float));
   st->Xf = (float*)mem_alloc((st->frame_size+1)*sizeof(float));
   st->Yh = (float*)mem_alloc((st->frame_size+1)*sizeof(float));
   st->Eh = (float*)mem_alloc((st->frame_size+1)*sizeof(float));

   st->X = (float*)mem_alloc((13+1)*N*sizeof(float));
    83f44f58:	415a0a3b          	subw	s4,s4,s5
    83f44f5c:	004a1a1b          	slliw	s4,s4,0x4
   M = st->initial_filter_len;
    83f44f60:	0009099b          	sext.w	s3,s2
   st->beta0 = (2.0f*st->frame_size)/st->sampling_rate;
    83f44f64:	18c6f6d3          	fdiv.s	fa3,fa3,fa2
   st->spec_average = (float)st->frame_size/(float)st->sampling_rate;
    83f44f68:	02f42027          	fsw	fa5,32(s0)
   st->beta_max = (.5f*st->frame_size)/st->sampling_rate;
    83f44f6c:	18c77753          	fdiv.s	fa4,fa4,fa2
   st->beta0 = (2.0f*st->frame_size)/st->sampling_rate;
    83f44f70:	02d42227          	fsw	fa3,36(s0)
   st->beta_max = (.5f*st->frame_size)/st->sampling_rate;
    83f44f74:	02e42427          	fsw	fa4,40(s0)
   st->fft_table = speech_fft_init(N);
    83f44f78:	0de040ef          	jal	ra,83f49056 <speech_fft_init>
    83f44f7c:	fc68                	sd	a0,248(s0)
    83f44f7e:	8526                	mv	a0,s1
    83f44f80:	604090ef          	jal	ra,83f4e584 <pvPortMalloc>
   memset(ptr, 0, size);
    83f44f84:	8626                	mv	a2,s1
    83f44f86:	4581                	li	a1,0
   uintptr_t *ptr =  pvPortMalloc(size);
    83f44f88:	8baa                	mv	s7,a0
   memset(ptr, 0, size);
    83f44f8a:	7f3060ef          	jal	ra,83f4bf7c <memset>
   uintptr_t *ptr =  pvPortMalloc(size);
    83f44f8e:	8526                	mv	a0,s1
   st->e = (float*)mem_alloc(N*sizeof(float));
    83f44f90:	03743c23          	sd	s7,56(s0)
    83f44f94:	5f0090ef          	jal	ra,83f4e584 <pvPortMalloc>
   memset(ptr, 0, size);
    83f44f98:	8626                	mv	a2,s1
    83f44f9a:	4581                	li	a1,0
   uintptr_t *ptr =  pvPortMalloc(size);
    83f44f9c:	8caa                	mv	s9,a0
   memset(ptr, 0, size);
    83f44f9e:	7df060ef          	jal	ra,83f4bf7c <memset>
   st->input = (float*)mem_alloc(st->frame_size*sizeof(float));
    83f44fa2:	00042b83          	lw	s7,0(s0)
   st->x = (float*)mem_alloc(N*sizeof(float));
    83f44fa6:	05943023          	sd	s9,64(s0)
   st->input = (float*)mem_alloc(st->frame_size*sizeof(float));
    83f44faa:	002b9b9b          	slliw	s7,s7,0x2
   uintptr_t *ptr =  pvPortMalloc(size);
    83f44fae:	855e                	mv	a0,s7
    83f44fb0:	5d4090ef          	jal	ra,83f4e584 <pvPortMalloc>
   memset(ptr, 0, size);
    83f44fb4:	865e                	mv	a2,s7
    83f44fb6:	4581                	li	a1,0
   uintptr_t *ptr =  pvPortMalloc(size);
    83f44fb8:	8baa                	mv	s7,a0
   memset(ptr, 0, size);
    83f44fba:	7c3060ef          	jal	ra,83f4bf7c <memset>
   uintptr_t *ptr =  pvPortMalloc(size);
    83f44fbe:	8526                	mv	a0,s1
    83f44fc0:	05743823          	sd	s7,80(s0)
    83f44fc4:	5c0090ef          	jal	ra,83f4e584 <pvPortMalloc>
   memset(ptr, 0, size);
    83f44fc8:	8626                	mv	a2,s1
    83f44fca:	4581                	li	a1,0
   uintptr_t *ptr =  pvPortMalloc(size);
    83f44fcc:	8baa                	mv	s7,a0
   memset(ptr, 0, size);
    83f44fce:	7af060ef          	jal	ra,83f4bf7c <memset>
   uintptr_t *ptr =  pvPortMalloc(size);
    83f44fd2:	8526                	mv	a0,s1
   st->y = (float*)mem_alloc(N*sizeof(float));
    83f44fd4:	05743c23          	sd	s7,88(s0)
    83f44fd8:	5ac090ef          	jal	ra,83f4e584 <pvPortMalloc>
   memset(ptr, 0, size);
    83f44fdc:	8626                	mv	a2,s1
    83f44fde:	4581                	li	a1,0
   uintptr_t *ptr =  pvPortMalloc(size);
    83f44fe0:	8caa                	mv	s9,a0
   memset(ptr, 0, size);
    83f44fe2:	79b060ef          	jal	ra,83f4bf7c <memset>
   st->Yf = (float*)mem_alloc((st->frame_size+1)*sizeof(float));
    83f44fe6:	00042b83          	lw	s7,0(s0)
   st->last_y = (float*)mem_alloc(N*sizeof(float));
    83f44fea:	07943023          	sd	s9,96(s0)
   st->Yf = (float*)mem_alloc((st->frame_size+1)*sizeof(float));
    83f44fee:	2b85                	addiw	s7,s7,1
   uintptr_t *ptr =  pvPortMalloc(size);
    83f44ff0:	002b9b9b          	slliw	s7,s7,0x2
    83f44ff4:	855e                	mv	a0,s7
    83f44ff6:	58e090ef          	jal	ra,83f4e584 <pvPortMalloc>
   memset(ptr, 0, size);
    83f44ffa:	865e                	mv	a2,s7
    83f44ffc:	4581                	li	a1,0
   uintptr_t *ptr =  pvPortMalloc(size);
    83f44ffe:	8caa                	mv	s9,a0
   memset(ptr, 0, size);
    83f45000:	77d060ef          	jal	ra,83f4bf7c <memset>
   st->Rf = (float*)mem_alloc((st->frame_size+1)*sizeof(float));
    83f45004:	00042b83          	lw	s7,0(s0)
   st->Yf = (float*)mem_alloc((st->frame_size+1)*sizeof(float));
    83f45008:	0d943023          	sd	s9,192(s0)
   st->Rf = (float*)mem_alloc((st->frame_size+1)*sizeof(float));
    83f4500c:	2b85                	addiw	s7,s7,1
   uintptr_t *ptr =  pvPortMalloc(size);
    83f4500e:	002b9b9b          	slliw	s7,s7,0x2
    83f45012:	855e                	mv	a0,s7
    83f45014:	570090ef          	jal	ra,83f4e584 <pvPortMalloc>
   memset(ptr, 0, size);
    83f45018:	865e                	mv	a2,s7
    83f4501a:	4581                	li	a1,0
   uintptr_t *ptr =  pvPortMalloc(size);
    83f4501c:	8caa                	mv	s9,a0
   memset(ptr, 0, size);
    83f4501e:	75f060ef          	jal	ra,83f4bf7c <memset>
   st->Xf = (float*)mem_alloc((st->frame_size+1)*sizeof(float));
    83f45022:	00042b83          	lw	s7,0(s0)
   st->Rf = (float*)mem_alloc((st->frame_size+1)*sizeof(float));
    83f45026:	0b943c23          	sd	s9,184(s0)
   st->Xf = (float*)mem_alloc((st->frame_size+1)*sizeof(float));
    83f4502a:	2b85                	addiw	s7,s7,1
   uintptr_t *ptr =  pvPortMalloc(size);
    83f4502c:	002b9b9b          	slliw	s7,s7,0x2
    83f45030:	855e                	mv	a0,s7
    83f45032:	552090ef          	jal	ra,83f4e584 <pvPortMalloc>
   memset(ptr, 0, size);
    83f45036:	865e                	mv	a2,s7
    83f45038:	4581                	li	a1,0
   uintptr_t *ptr =  pvPortMalloc(size);
    83f4503a:	8caa                	mv	s9,a0
   memset(ptr, 0, size);
    83f4503c:	741060ef          	jal	ra,83f4bf7c <memset>
   st->Yh = (float*)mem_alloc((st->frame_size+1)*sizeof(float));
    83f45040:	00042b83          	lw	s7,0(s0)
   st->Xf = (float*)mem_alloc((st->frame_size+1)*sizeof(float));
    83f45044:	0d943423          	sd	s9,200(s0)
   st->Yh = (float*)mem_alloc((st->frame_size+1)*sizeof(float));
    83f45048:	2b85                	addiw	s7,s7,1
   uintptr_t *ptr =  pvPortMalloc(size);
    83f4504a:	002b9b9b          	slliw	s7,s7,0x2
    83f4504e:	855e                	mv	a0,s7
    83f45050:	534090ef          	jal	ra,83f4e584 <pvPortMalloc>
   memset(ptr, 0, size);
    83f45054:	865e                	mv	a2,s7
    83f45056:	4581                	li	a1,0
   uintptr_t *ptr =  pvPortMalloc(size);
    83f45058:	8caa                	mv	s9,a0
   memset(ptr, 0, size);
    83f4505a:	723060ef          	jal	ra,83f4bf7c <memset>
   st->Eh = (float*)mem_alloc((st->frame_size+1)*sizeof(float));
    83f4505e:	00042b83          	lw	s7,0(s0)
   st->Yh = (float*)mem_alloc((st->frame_size+1)*sizeof(float));
    83f45062:	0d943c23          	sd	s9,216(s0)
   st->Eh = (float*)mem_alloc((st->frame_size+1)*sizeof(float));
    83f45066:	2b85                	addiw	s7,s7,1
   uintptr_t *ptr =  pvPortMalloc(size);
    83f45068:	002b9b9b          	slliw	s7,s7,0x2
    83f4506c:	855e                	mv	a0,s7
    83f4506e:	516090ef          	jal	ra,83f4e584 <pvPortMalloc>
   memset(ptr, 0, size);
    83f45072:	865e                	mv	a2,s7
    83f45074:	4581                	li	a1,0
   uintptr_t *ptr =  pvPortMalloc(size);
    83f45076:	8baa                	mv	s7,a0
   memset(ptr, 0, size);
    83f45078:	705060ef          	jal	ra,83f4bf7c <memset>
   uintptr_t *ptr =  pvPortMalloc(size);
    83f4507c:	8552                	mv	a0,s4
    83f4507e:	0d743823          	sd	s7,208(s0)
    83f45082:	502090ef          	jal	ra,83f4e584 <pvPortMalloc>
   memset(ptr, 0, size);
    83f45086:	8652                	mv	a2,s4
    83f45088:	4581                	li	a1,0
   uintptr_t *ptr =  pvPortMalloc(size);
    83f4508a:	8a2a                	mv	s4,a0
   memset(ptr, 0, size);
    83f4508c:	6f1060ef          	jal	ra,83f4bf7c <memset>
   uintptr_t *ptr =  pvPortMalloc(size);
    83f45090:	8526                	mv	a0,s1
   st->X = (float*)mem_alloc((13+1)*N*sizeof(float));
    83f45092:	05443423          	sd	s4,72(s0)
    83f45096:	4ee090ef          	jal	ra,83f4e584 <pvPortMalloc>
   memset(ptr, 0, size);
    83f4509a:	8626                	mv	a2,s1
    83f4509c:	4581                	li	a1,0
   uintptr_t *ptr =  pvPortMalloc(size);
    83f4509e:	8a2a                	mv	s4,a0
   memset(ptr, 0, size);
    83f450a0:	6dd060ef          	jal	ra,83f4bf7c <memset>
   st->Y = (float*)mem_alloc(N*sizeof(float));
    83f450a4:	07443423          	sd	s4,104(s0)
   st->E = (float*)mem_alloc(N*sizeof(float));
   st->W = (float*)mem_alloc(13*N*sizeof(float));
    83f450a8:	4a69                	li	s4,26
    83f450aa:	035a0a3b          	mulw	s4,s4,s5
   uintptr_t *ptr =  pvPortMalloc(size);
    83f450ae:	8526                	mv	a0,s1
    83f450b0:	4d4090ef          	jal	ra,83f4e584 <pvPortMalloc>
   memset(ptr, 0, size);
    83f450b4:	8626                	mv	a2,s1
    83f450b6:	4581                	li	a1,0
   uintptr_t *ptr =  pvPortMalloc(size);
    83f450b8:	8baa                	mv	s7,a0
   memset(ptr, 0, size);
    83f450ba:	6c3060ef          	jal	ra,83f4bf7c <memset>
   st->E = (float*)mem_alloc(N*sizeof(float));
    83f450be:	07743823          	sd	s7,112(s0)
#ifdef TWO_FILTER
   st->foreground = (float*)mem_alloc(13*N*sizeof(float));
#endif
   st->PHI = (float*)mem_alloc(N*sizeof(float));
   st->power = (float*)mem_alloc((frame_size+1)*sizeof(float));
    83f450c2:	2a85                	addiw	s5,s5,1
   uintptr_t *ptr =  pvPortMalloc(size);
    83f450c4:	002a9a9b          	slliw	s5,s5,0x2
    83f450c8:	002a1b9b          	slliw	s7,s4,0x2
    83f450cc:	855e                	mv	a0,s7
    83f450ce:	4b6090ef          	jal	ra,83f4e584 <pvPortMalloc>
   memset(ptr, 0, size);
    83f450d2:	865e                	mv	a2,s7
    83f450d4:	4581                	li	a1,0
   uintptr_t *ptr =  pvPortMalloc(size);
    83f450d6:	8caa                	mv	s9,a0
   memset(ptr, 0, size);
    83f450d8:	6a5060ef          	jal	ra,83f4bf7c <memset>
   uintptr_t *ptr =  pvPortMalloc(size);
    83f450dc:	855e                	mv	a0,s7
   st->W = (float*)mem_alloc(13*N*sizeof(float));
    83f450de:	09943023          	sd	s9,128(s0)
    83f450e2:	4a2090ef          	jal	ra,83f4e584 <pvPortMalloc>
   memset(ptr, 0, size);
    83f450e6:	865e                	mv	a2,s7
    83f450e8:	4581                	li	a1,0
   uintptr_t *ptr =  pvPortMalloc(size);
    83f450ea:	8baa                	mv	s7,a0
   memset(ptr, 0, size);
    83f450ec:	691060ef          	jal	ra,83f4bf7c <memset>
   uintptr_t *ptr =  pvPortMalloc(size);
    83f450f0:	8526                	mv	a0,s1
   st->foreground = (float*)mem_alloc(13*N*sizeof(float));
    83f450f2:	09743423          	sd	s7,136(s0)
    83f450f6:	48e090ef          	jal	ra,83f4e584 <pvPortMalloc>
   memset(ptr, 0, size);
    83f450fa:	8626                	mv	a2,s1
    83f450fc:	4581                	li	a1,0
   uintptr_t *ptr =  pvPortMalloc(size);
    83f450fe:	8baa                	mv	s7,a0
   memset(ptr, 0, size);
    83f45100:	67d060ef          	jal	ra,83f4bf7c <memset>
   uintptr_t *ptr =  pvPortMalloc(size);
    83f45104:	8556                	mv	a0,s5
   st->PHI = (float*)mem_alloc(N*sizeof(float));
    83f45106:	07743c23          	sd	s7,120(s0)
    83f4510a:	47a090ef          	jal	ra,83f4e584 <pvPortMalloc>
   memset(ptr, 0, size);
    83f4510e:	8656                	mv	a2,s5
    83f45110:	4581                	li	a1,0
   uintptr_t *ptr =  pvPortMalloc(size);
    83f45112:	8baa                	mv	s7,a0
   memset(ptr, 0, size);
    83f45114:	669060ef          	jal	ra,83f4bf7c <memset>
   uintptr_t *ptr =  pvPortMalloc(size);
    83f45118:	8556                	mv	a0,s5
   st->power = (float*)mem_alloc((frame_size+1)*sizeof(float));
    83f4511a:	0b743023          	sd	s7,160(s0)
    83f4511e:	466090ef          	jal	ra,83f4e584 <pvPortMalloc>
   memset(ptr, 0, size);
    83f45122:	8656                	mv	a2,s5
    83f45124:	4581                	li	a1,0
   uintptr_t *ptr =  pvPortMalloc(size);
    83f45126:	8aaa                	mv	s5,a0
   memset(ptr, 0, size);
    83f45128:	655060ef          	jal	ra,83f4bf7c <memset>
   uintptr_t *ptr =  pvPortMalloc(size);
    83f4512c:	8526                	mv	a0,s1
   st->power_1 = (float*)mem_alloc((frame_size+1)*sizeof(float));
    83f4512e:	0b543423          	sd	s5,168(s0)
    83f45132:	452090ef          	jal	ra,83f4e584 <pvPortMalloc>
   memset(ptr, 0, size);
    83f45136:	8626                	mv	a2,s1
    83f45138:	4581                	li	a1,0
   uintptr_t *ptr =  pvPortMalloc(size);
    83f4513a:	8aaa                	mv	s5,a0
   memset(ptr, 0, size);
    83f4513c:	641060ef          	jal	ra,83f4bf7c <memset>
   uintptr_t *ptr =  pvPortMalloc(size);
    83f45140:	03400513          	li	a0,52
   st->window = (float*)mem_alloc(N*sizeof(float));
    83f45144:	0f543423          	sd	s5,232(s0)
    83f45148:	43c090ef          	jal	ra,83f4e584 <pvPortMalloc>
   memset(ptr, 0, size);
    83f4514c:	03400613          	li	a2,52
    83f45150:	4581                	li	a1,0
   uintptr_t *ptr =  pvPortMalloc(size);
    83f45152:	8aaa                	mv	s5,a0
   memset(ptr, 0, size);
    83f45154:	629060ef          	jal	ra,83f4bf7c <memset>
   uintptr_t *ptr =  pvPortMalloc(size);
    83f45158:	8526                	mv	a0,s1
   st->prop = (float*)mem_alloc(13*sizeof(float));
    83f4515a:	0f543823          	sd	s5,240(s0)
    83f4515e:	426090ef          	jal	ra,83f4e584 <pvPortMalloc>
    83f45162:	8aaa                	mv	s5,a0
   memset(ptr, 0, size);
    83f45164:	8626                	mv	a2,s1
    83f45166:	4581                	li	a1,0
    83f45168:	615060ef          	jal	ra,83f4bf7c <memset>
   st->wtmp = (float*)mem_alloc(N*sizeof(float));
    83f4516c:	0b543823          	sd	s5,176(s0)
   st->W = (float*)mem_alloc(13*N*sizeof(float));
    83f45170:	000a0a9b          	sext.w	s5,s4
   for (i=0;i<N;i++)
    83f45174:	05605063          	blez	s6,83f451b4 <LP_AEC_init+0x2f6>
      st->window[i] = .5f-.5f*(float)cos(2*M_PI*i/N);	/* Hanning window */
    83f45178:	d20b0953          	fcvt.d.w	fs2,s6
    83f4517c:	4481                	li	s1,0
    83f4517e:	0000d797          	auipc	a5,0xd
    83f45182:	16a7b487          	fld	fs1,362(a5) # 83f522e8 <__func__.1+0xf0>
    83f45186:	d2048553          	fcvt.d.w	fa0,s1
    83f4518a:	12957553          	fmul.d	fa0,fa0,fs1
    83f4518e:	1b257553          	fdiv.d	fa0,fa0,fs2
    83f45192:	f40fb0ef          	jal	ra,83f408d2 <cos>
    83f45196:	40157553          	fcvt.s.d	fa0,fa0
    83f4519a:	747c                	ld	a5,232(s0)
    83f4519c:	00249713          	slli	a4,s1,0x2
    83f451a0:	4085754b          	fnmsub.s	fa0,fa0,fs0,fs0
    83f451a4:	97ba                	add	a5,a5,a4
   for (i=0;i<N;i++)
    83f451a6:	0485                	addi	s1,s1,1
    83f451a8:	0004871b          	sext.w	a4,s1
      st->window[i] = .5f-.5f*(float)cos(2*M_PI*i/N);	/* Hanning window */
    83f451ac:	00a7a027          	fsw	fa0,0(a5)
   for (i=0;i<N;i++)
    83f451b0:	fd674be3          	blt	a4,s6,83f45186 <LP_AEC_init+0x2c8>
   for (i=0;i<=st->frame_size;i++)
    83f451b4:	4018                	lw	a4,0(s0)
    83f451b6:	4781                	li	a5,0
    83f451b8:	02074263          	bltz	a4,83f451dc <LP_AEC_init+0x31e>
      st->power_1[i] = FLOAT_ONE;
    83f451bc:	0000d717          	auipc	a4,0xd
    83f451c0:	09472787          	flw	fa5,148(a4) # 83f52250 <__func__.1+0x58>
    83f451c4:	7458                	ld	a4,168(s0)
    83f451c6:	00279693          	slli	a3,a5,0x2
   for (i=0;i<=st->frame_size;i++)
    83f451ca:	0785                	addi	a5,a5,1
      st->power_1[i] = FLOAT_ONE;
    83f451cc:	9736                	add	a4,a4,a3
    83f451ce:	00f72027          	fsw	fa5,0(a4)
   for (i=0;i<=st->frame_size;i++)
    83f451d2:	4014                	lw	a3,0(s0)
    83f451d4:	0007871b          	sext.w	a4,a5
    83f451d8:	fee6d6e3          	bge	a3,a4,83f451c4 <LP_AEC_init+0x306>
   for (i=0;i<N*13;i++)
    83f451dc:	03505063          	blez	s5,83f451fc <LP_AEC_init+0x33e>
    83f451e0:	3a7d                	addiw	s4,s4,-1
    83f451e2:	020a1793          	slli	a5,s4,0x20
    83f451e6:	01e7da13          	srli	s4,a5,0x1e
    83f451ea:	0a11                	addi	s4,s4,4
    83f451ec:	4781                	li	a5,0
      st->W[i] = 0;
    83f451ee:	6058                	ld	a4,128(s0)
    83f451f0:	973e                	add	a4,a4,a5
    83f451f2:	00072023          	sw	zero,0(a4)
   for (i=0;i<N*13;i++)
    83f451f6:	0791                	addi	a5,a5,4
    83f451f8:	fefa1be3          	bne	s4,a5,83f451ee <LP_AEC_init+0x330>
   {
      float sum = 0;
      /* Ratio of ~10 between adaptation rate of first and last block */
      float decay = (float)math_exp(-(2.4/M));
    83f451fc:	d2090553          	fcvt.d.w	fa0,s2
    83f45200:	0000d797          	auipc	a5,0xd
    83f45204:	0f07b787          	fld	fa5,240(a5) # 83f522f0 <__func__.1+0xf8>
    83f45208:	1aa7f553          	fdiv.d	fa0,fa5,fa0
    83f4520c:	22a51553          	fneg.d	fa0,fa0
    83f45210:	9d1fb0ef          	jal	ra,83f40be0 <exp>
      st->prop[0] = .7f;
    83f45214:	787c                	ld	a5,240(s0)
    83f45216:	0000d717          	auipc	a4,0xd
    83f4521a:	07272787          	flw	fa5,114(a4) # 83f52288 <__func__.1+0x90>
      sum = st->prop[0];
      for (i=1;i<M;i++) {
    83f4521e:	4705                	li	a4,1
      st->prop[0] = .7f;
    83f45220:	00f7a027          	fsw	fa5,0(a5)
      sum = st->prop[0];
    83f45224:	787c                	ld	a5,240(s0)
      float decay = (float)math_exp(-(2.4/M));
    83f45226:	40157553          	fcvt.s.d	fa0,fa0
         st->prop[i] = st->prop[i-1] * decay;
         sum = sum + st->prop[i];
      }
      for (i=M-1;i>=0;i--) {
    83f4522a:	fff9869b          	addiw	a3,s3,-1
      sum = st->prop[0];
    83f4522e:	0007a787          	flw	fa5,0(a5)
      for (i=1;i<M;i++) {
    83f45232:	15375d63          	bge	a4,s3,83f4538c <LP_AEC_init+0x4ce>
    83f45236:	397d                	addiw	s2,s2,-1
    83f45238:	02091713          	slli	a4,s2,0x20
    83f4523c:	01e75913          	srli	s2,a4,0x1e
      sum = st->prop[0];
    83f45240:	20f78753          	fmv.s	fa4,fa5
      for (i=1;i<M;i++) {
    83f45244:	4711                	li	a4,4
    83f45246:	a011                	j	83f4524a <LP_AEC_init+0x38c>
    83f45248:	0711                	addi	a4,a4,4
         st->prop[i] = st->prop[i-1] * decay;
    83f4524a:	10a7f7d3          	fmul.s	fa5,fa5,fa0
    83f4524e:	97ba                	add	a5,a5,a4
    83f45250:	00f7a027          	fsw	fa5,0(a5)
         sum = sum + st->prop[i];
    83f45254:	787c                	ld	a5,240(s0)
    83f45256:	00e785b3          	add	a1,a5,a4
    83f4525a:	0005a787          	flw	fa5,0(a1)
    83f4525e:	00f77753          	fadd.s	fa4,fa4,fa5
      for (i=1;i<M;i++) {
    83f45262:	fee913e3          	bne	s2,a4,83f45248 <LP_AEC_init+0x38a>
    83f45266:	0000d617          	auipc	a2,0xd
    83f4526a:	03e62687          	flw	fa3,62(a2) # 83f522a4 <__func__.1+0xac>
    83f4526e:	00269713          	slli	a4,a3,0x2
      for (i=M-1;i>=0;i--) {
    83f45272:	567d                	li	a2,-1
    83f45274:	a011                	j	83f45278 <LP_AEC_init+0x3ba>
         st->prop[i] = (.8f * st->prop[i])/sum;
    83f45276:	787c                	ld	a5,240(s0)
    83f45278:	97ba                	add	a5,a5,a4
    83f4527a:	0007a787          	flw	fa5,0(a5)
      for (i=M-1;i>=0;i--) {
    83f4527e:	36fd                	addiw	a3,a3,-1
    83f45280:	1771                	addi	a4,a4,-4
         st->prop[i] = (.8f * st->prop[i])/sum;
    83f45282:	10d7f7d3          	fmul.s	fa5,fa5,fa3
    83f45286:	18e7f7d3          	fdiv.s	fa5,fa5,fa4
    83f4528a:	00f7a027          	fsw	fa5,0(a5)
      for (i=M-1;i>=0;i--) {
    83f4528e:	fec694e3          	bne	a3,a2,83f45276 <LP_AEC_init+0x3b8>
   uintptr_t *ptr =  pvPortMalloc(size);
    83f45292:	4511                	li	a0,4
    83f45294:	2f0090ef          	jal	ra,83f4e584 <pvPortMalloc>
   memset(ptr, 0, size);
    83f45298:	4611                	li	a2,4
    83f4529a:	4581                	li	a1,0
   uintptr_t *ptr =  pvPortMalloc(size);
    83f4529c:	84aa                	mv	s1,a0
   memset(ptr, 0, size);
    83f4529e:	4df060ef          	jal	ra,83f4bf7c <memset>
   uintptr_t *ptr =  pvPortMalloc(size);
    83f452a2:	4511                	li	a0,4
      }
   }

   st->memX = (float*)mem_alloc(sizeof(float));
    83f452a4:	10943023          	sd	s1,256(s0)
    83f452a8:	2dc090ef          	jal	ra,83f4e584 <pvPortMalloc>
   memset(ptr, 0, size);
    83f452ac:	4611                	li	a2,4
    83f452ae:	4581                	li	a1,0
   uintptr_t *ptr =  pvPortMalloc(size);
    83f452b0:	84aa                	mv	s1,a0
   memset(ptr, 0, size);
    83f452b2:	4cb060ef          	jal	ra,83f4bf7c <memset>
   uintptr_t *ptr =  pvPortMalloc(size);
    83f452b6:	4511                	li	a0,4
   st->memD = (float*)mem_alloc(sizeof(float));
    83f452b8:	10943423          	sd	s1,264(s0)
    83f452bc:	2c8090ef          	jal	ra,83f4e584 <pvPortMalloc>
   memset(ptr, 0, size);
    83f452c0:	4611                	li	a2,4
    83f452c2:	4581                	li	a1,0
   uintptr_t *ptr =  pvPortMalloc(size);
    83f452c4:	84aa                	mv	s1,a0
   memset(ptr, 0, size);
    83f452c6:	4b7060ef          	jal	ra,83f4bf7c <memset>
   st->memE = (float*)mem_alloc(sizeof(float));
   st->preemph = .9f;
    83f452ca:	0000d797          	auipc	a5,0xd
    83f452ce:	fb67a787          	flw	fa5,-74(a5) # 83f52280 <__func__.1+0x88>

   if (st->sampling_rate<12000)
    83f452d2:	4c58                	lw	a4,28(s0)
    83f452d4:	678d                	lui	a5,0x3
   st->memE = (float*)mem_alloc(sizeof(float));
    83f452d6:	10943823          	sd	s1,272(s0)
   st->preemph = .9f;
    83f452da:	10f42c27          	fsw	fa5,280(s0)
   if (st->sampling_rate<12000)
    83f452de:	edf78793          	addi	a5,a5,-289 # 2edf <_EL1_STACK_SIZE+0x26df>
    83f452e2:	02e7d263          	bge	a5,a4,83f45306 <LP_AEC_init+0x448>
      st->notch_radius = .9f;
   else if (st->sampling_rate<24000)
    83f452e6:	6799                	lui	a5,0x6
    83f452e8:	dbf78793          	addi	a5,a5,-577 # 5dbf <_EL1_STACK_SIZE+0x55bf>
    83f452ec:	00e7c963          	blt	a5,a4,83f452fe <LP_AEC_init+0x440>
      st->notch_radius = .982f;
    83f452f0:	0000d797          	auipc	a5,0xd
    83f452f4:	f947a787          	flw	fa5,-108(a5) # 83f52284 <__func__.1+0x8c>
    83f452f8:	10f42e27          	fsw	fa5,284(s0)
    83f452fc:	a039                	j	83f4530a <LP_AEC_init+0x44c>
   else
      st->notch_radius = .992f;
    83f452fe:	0000d797          	auipc	a5,0xd
    83f45302:	faa7a787          	flw	fa5,-86(a5) # 83f522a8 <__func__.1+0xb0>
    83f45306:	10f42e27          	fsw	fa5,284(s0)
   uintptr_t *ptr =  pvPortMalloc(size);
    83f4530a:	4521                	li	a0,8
    83f4530c:	278090ef          	jal	ra,83f4e584 <pvPortMalloc>
    83f45310:	84aa                	mv	s1,a0
   memset(ptr, 0, size);
    83f45312:	4621                	li	a2,8
    83f45314:	4581                	li	a1,0
    83f45316:	467060ef          	jal	ra,83f4bf7c <memset>
   st->notch_mem = (float*)mem_alloc(2*sizeof(float));
    83f4531a:	12943023          	sd	s1,288(s0)
   for (i=0;i<2;i++)
      st->notch_mem[i] = 0;
    83f4531e:	0004a023          	sw	zero,0(s1)
    83f45322:	12043683          	ld	a3,288(s0)

   st->adapted = 0;
   st->Pey = st->Pyy = FLOAT_ONE;
    83f45326:	3f800737          	lui	a4,0x3f800
    83f4532a:	02071793          	slli	a5,a4,0x20
      st->notch_mem[i] = 0;
    83f4532e:	0006a223          	sw	zero,4(a3) # ffffffffffff8004 <_end+0xffffffff7bff82c4>
   st->Pey = st->Pyy = FLOAT_ONE;
    83f45332:	97ba                	add	a5,a5,a4
    83f45334:	f07c                	sd	a5,224(s0)
#ifdef TWO_FILTER
   st->Davg1 = st->Davg2 = FLOAT_ZERO;
   st->Dvar1 = st->Dvar2 = FLOAT_ZERO;
#endif

   st->aec_min_leak = .005f;
    83f45336:	0000d797          	auipc	a5,0xd
    83f4533a:	fc27b783          	ld	a5,-62(a5) # 83f522f8 <__func__.1+0x100>
    83f4533e:	12f43423          	sd	a5,296(s0)
   st->aec_var1_smooth = .36f;
   st->aec_var2_smooth = .7225f;
    83f45342:	0000d797          	auipc	a5,0xd
    83f45346:	fbe7b783          	ld	a5,-66(a5) # 83f52300 <__func__.1+0x108>
    83f4534a:	12f43823          	sd	a5,304(s0)
   st->aec_var1_update = .5f;
   st->aec_var2_update = .25f;
    83f4534e:	0000d797          	auipc	a5,0xd
    83f45352:	fba7b783          	ld	a5,-70(a5) # 83f52308 <__func__.1+0x110>
   st->adapted = 0;
    83f45356:	00042823          	sw	zero,16(s0)
   st->Davg1 = st->Davg2 = FLOAT_ZERO;
    83f4535a:	08043823          	sd	zero,144(s0)
   st->Dvar1 = st->Dvar2 = FLOAT_ZERO;
    83f4535e:	08043c23          	sd	zero,152(s0)
   st->aec_var2_update = .25f;
    83f45362:	12f43c23          	sd	a5,312(s0)
   st->aec_var_backtrack = 4.f;

   st->echo_cnt = 0;
    83f45366:	14043423          	sd	zero,328(s0)

   return st;

}
    83f4536a:	70e6                	ld	ra,120(sp)
    83f4536c:	8522                	mv	a0,s0
    83f4536e:	7446                	ld	s0,112(sp)
    83f45370:	74a6                	ld	s1,104(sp)
    83f45372:	7906                	ld	s2,96(sp)
    83f45374:	69e6                	ld	s3,88(sp)
    83f45376:	6a46                	ld	s4,80(sp)
    83f45378:	6aa6                	ld	s5,72(sp)
    83f4537a:	6b06                	ld	s6,64(sp)
    83f4537c:	7be2                	ld	s7,56(sp)
    83f4537e:	7c42                	ld	s8,48(sp)
    83f45380:	7ca2                	ld	s9,40(sp)
    83f45382:	2462                	fld	fs0,24(sp)
    83f45384:	24c2                	fld	fs1,16(sp)
    83f45386:	2922                	fld	fs2,8(sp)
    83f45388:	6109                	addi	sp,sp,128
    83f4538a:	8082                	ret
      for (i=M-1;i>=0;i--) {
    83f4538c:	f006c3e3          	bltz	a3,83f45292 <LP_AEC_init+0x3d4>
      sum = st->prop[0];
    83f45390:	20f78753          	fmv.s	fa4,fa5
    83f45394:	bdc9                	j	83f45266 <LP_AEC_init+0x3a8>

0000000083f45396 <echo_state_reset>:

   int i, M, N;

   st->cancel_count = 0;
   st->screwed_up = 0;
   N = st->window_size;
    83f45396:	4150                	lw	a2,4(a0)
   st->cancel_count = 0;
    83f45398:	00052623          	sw	zero,12(a0)
   st->screwed_up = 0;
    83f4539c:	00052c23          	sw	zero,24(a0)
   M = st->M;

   M = M;
   for (i=0;i<N*13;i++)
    83f453a0:	0016171b          	slliw	a4,a2,0x1
    83f453a4:	9f31                	addw	a4,a4,a2
    83f453a6:	0027171b          	slliw	a4,a4,0x2
    83f453aa:	9f31                	addw	a4,a4,a2
    83f453ac:	00271693          	slli	a3,a4,0x2
    83f453b0:	4781                	li	a5,0
    83f453b2:	02e05163          	blez	a4,83f453d4 <echo_state_reset+0x3e>
      st->W[i] = 0;
    83f453b6:	6158                	ld	a4,128(a0)
    83f453b8:	973e                	add	a4,a4,a5
    83f453ba:	00072023          	sw	zero,0(a4) # 3f800000 <CVIMMAP_DRAM_SIZE+0x3b800000>
   for (i=0;i<N*13;i++)
    83f453be:	0791                	addi	a5,a5,4
    83f453c0:	fef69be3          	bne	a3,a5,83f453b6 <echo_state_reset+0x20>
    83f453c4:	4781                	li	a5,0
#ifdef TWO_FILTER
   for (i=0;i<N*13;i++)
      st->foreground[i] = 0;
    83f453c6:	6558                	ld	a4,136(a0)
    83f453c8:	973e                	add	a4,a4,a5
    83f453ca:	00072023          	sw	zero,0(a4)
   for (i=0;i<N*13;i++)
    83f453ce:	0791                	addi	a5,a5,4
    83f453d0:	fed79be3          	bne	a5,a3,83f453c6 <echo_state_reset+0x30>
#endif
   for (i=0;i<N*(13+1);i++)
    83f453d4:	0036171b          	slliw	a4,a2,0x3
    83f453d8:	9f11                	subw	a4,a4,a2
    83f453da:	0017171b          	slliw	a4,a4,0x1
    83f453de:	00271693          	slli	a3,a4,0x2
    83f453e2:	4781                	li	a5,0
    83f453e4:	00e05963          	blez	a4,83f453f6 <echo_state_reset+0x60>
      st->X[i] = 0;
    83f453e8:	6538                	ld	a4,72(a0)
    83f453ea:	973e                	add	a4,a4,a5
    83f453ec:	00072023          	sw	zero,0(a4)
   for (i=0;i<N*(13+1);i++)
    83f453f0:	0791                	addi	a5,a5,4
    83f453f2:	fef69be3          	bne	a3,a5,83f453e8 <echo_state_reset+0x52>
   for (i=0;i<=st->frame_size;i++) {
    83f453f6:	411c                	lw	a5,0(a0)
    83f453f8:	4701                	li	a4,0
    83f453fa:	0407cd63          	bltz	a5,83f45454 <echo_state_reset+0xbe>
      st->power[i] = 0;
      st->power_1[i] = FLOAT_ONE;
    83f453fe:	0000d797          	auipc	a5,0xd
    83f45402:	e527a787          	flw	fa5,-430(a5) # 83f52250 <__func__.1+0x58>
      st->power[i] = 0;
    83f45406:	7154                	ld	a3,160(a0)
    83f45408:	00271793          	slli	a5,a4,0x2
   for (i=0;i<=st->frame_size;i++) {
    83f4540c:	0705                	addi	a4,a4,1
      st->power[i] = 0;
    83f4540e:	96be                	add	a3,a3,a5
    83f45410:	0006a023          	sw	zero,0(a3)
      st->power_1[i] = FLOAT_ONE;
    83f45414:	7554                	ld	a3,168(a0)
   for (i=0;i<=st->frame_size;i++) {
    83f45416:	0007059b          	sext.w	a1,a4
      st->power_1[i] = FLOAT_ONE;
    83f4541a:	96be                	add	a3,a3,a5
    83f4541c:	00f6a027          	fsw	fa5,0(a3)
      st->Eh[i] = 0;
    83f45420:	6974                	ld	a3,208(a0)
    83f45422:	96be                	add	a3,a3,a5
    83f45424:	0006a023          	sw	zero,0(a3)
      st->Yh[i] = 0;
    83f45428:	6d74                	ld	a3,216(a0)
    83f4542a:	97b6                	add	a5,a5,a3
    83f4542c:	0007a023          	sw	zero,0(a5)
   for (i=0;i<=st->frame_size;i++) {
    83f45430:	4114                	lw	a3,0(a0)
    83f45432:	fcb6dae3          	bge	a3,a1,83f45406 <echo_state_reset+0x70>
   }
   for (i=0;i<st->frame_size;i++) {
    83f45436:	4781                	li	a5,0
    83f45438:	00d05e63          	blez	a3,83f45454 <echo_state_reset+0xbe>
      st->last_y[i] = 0;
    83f4543c:	7138                	ld	a4,96(a0)
    83f4543e:	00279693          	slli	a3,a5,0x2
   for (i=0;i<st->frame_size;i++) {
    83f45442:	0785                	addi	a5,a5,1
      st->last_y[i] = 0;
    83f45444:	9736                	add	a4,a4,a3
    83f45446:	00072023          	sw	zero,0(a4)
   for (i=0;i<st->frame_size;i++) {
    83f4544a:	4114                	lw	a3,0(a0)
    83f4544c:	0007871b          	sext.w	a4,a5
    83f45450:	fed746e3          	blt	a4,a3,83f4543c <echo_state_reset+0xa6>
   }
   for (i=0;i<N;i++) {
    83f45454:	00261693          	slli	a3,a2,0x2
    83f45458:	4781                	li	a5,0
    83f4545a:	02c05163          	blez	a2,83f4547c <echo_state_reset+0xe6>
      st->E[i] = 0;
    83f4545e:	7938                	ld	a4,112(a0)
    83f45460:	973e                	add	a4,a4,a5
    83f45462:	00072023          	sw	zero,0(a4)
   for (i=0;i<N;i++) {
    83f45466:	0791                	addi	a5,a5,4
    83f45468:	fef69be3          	bne	a3,a5,83f4545e <echo_state_reset+0xc8>
    83f4546c:	4781                	li	a5,0
   }
   for (i=0;i<N;i++) {
      st->x[i] = 0;
    83f4546e:	6138                	ld	a4,64(a0)
    83f45470:	973e                	add	a4,a4,a5
    83f45472:	00072023          	sw	zero,0(a4)
   for (i=0;i<N;i++) {
    83f45476:	0791                	addi	a5,a5,4
    83f45478:	fed79be3          	bne	a5,a3,83f4546e <echo_state_reset+0xd8>
   }
   for (i=0;i<2;i++)
      st->notch_mem[i] = 0;
    83f4547c:	12053683          	ld	a3,288(a0)
      st->memX[i] = 0;

   st->saturated = 0;
   st->adapted = 0;
   st->sum_adapt = 0;
   st->Pey = st->Pyy = FLOAT_ONE;
    83f45480:	3f800737          	lui	a4,0x3f800
    83f45484:	02071793          	slli	a5,a4,0x20
      st->notch_mem[i] = 0;
    83f45488:	0006a023          	sw	zero,0(a3)
    83f4548c:	12053683          	ld	a3,288(a0)
   st->Pey = st->Pyy = FLOAT_ONE;
    83f45490:	97ba                	add	a5,a5,a4
      st->notch_mem[i] = 0;
    83f45492:	0006a223          	sw	zero,4(a3)
      st->memD[i] = st->memE[i] = 0;
    83f45496:	11053703          	ld	a4,272(a0)
    83f4549a:	00072023          	sw	zero,0(a4) # 3f800000 <CVIMMAP_DRAM_SIZE+0x3b800000>
    83f4549e:	10853703          	ld	a4,264(a0)
    83f454a2:	00072023          	sw	zero,0(a4)
      st->memX[i] = 0;
    83f454a6:	10053703          	ld	a4,256(a0)
    83f454aa:	00072023          	sw	zero,0(a4)
   st->adapted = 0;
    83f454ae:	00053823          	sd	zero,16(a0)
   st->sum_adapt = 0;
    83f454b2:	02052623          	sw	zero,44(a0)
   st->Pey = st->Pyy = FLOAT_ONE;
    83f454b6:	f17c                	sd	a5,224(a0)
#ifdef TWO_FILTER
   st->Davg1 = st->Davg2 = FLOAT_ZERO;
    83f454b8:	08053823          	sd	zero,144(a0)
   st->Dvar1 = st->Dvar2 = FLOAT_ZERO;
    83f454bc:	08053c23          	sd	zero,152(a0)
#endif

}
    83f454c0:	8082                	ret

0000000083f454c2 <LP_AEC_free>:

EXPORT void LP_AEC_free(LinearEchoState *st)
{
    83f454c2:	1141                	addi	sp,sp,-16
    83f454c4:	e406                	sd	ra,8(sp)
    83f454c6:	e022                	sd	s0,0(sp)
    83f454c8:	842a                	mv	s0,a0

   speech_fft_free(st->fft_table);
    83f454ca:	7d68                	ld	a0,248(a0)
    83f454cc:	3b9030ef          	jal	ra,83f49084 <speech_fft_free>
   vPortFree(ptr);
    83f454d0:	7c08                	ld	a0,56(s0)
    83f454d2:	218090ef          	jal	ra,83f4e6ea <vPortFree>
    83f454d6:	6028                	ld	a0,64(s0)
    83f454d8:	212090ef          	jal	ra,83f4e6ea <vPortFree>
    83f454dc:	6828                	ld	a0,80(s0)
    83f454de:	20c090ef          	jal	ra,83f4e6ea <vPortFree>
    83f454e2:	6c28                	ld	a0,88(s0)
    83f454e4:	206090ef          	jal	ra,83f4e6ea <vPortFree>
    83f454e8:	7028                	ld	a0,96(s0)
    83f454ea:	200090ef          	jal	ra,83f4e6ea <vPortFree>
    83f454ee:	6068                	ld	a0,192(s0)
    83f454f0:	1fa090ef          	jal	ra,83f4e6ea <vPortFree>
    83f454f4:	7c48                	ld	a0,184(s0)
    83f454f6:	1f4090ef          	jal	ra,83f4e6ea <vPortFree>
    83f454fa:	6468                	ld	a0,200(s0)
    83f454fc:	1ee090ef          	jal	ra,83f4e6ea <vPortFree>
    83f45500:	6c68                	ld	a0,216(s0)
    83f45502:	1e8090ef          	jal	ra,83f4e6ea <vPortFree>
    83f45506:	6868                	ld	a0,208(s0)
    83f45508:	1e2090ef          	jal	ra,83f4e6ea <vPortFree>
    83f4550c:	6428                	ld	a0,72(s0)
    83f4550e:	1dc090ef          	jal	ra,83f4e6ea <vPortFree>
    83f45512:	7428                	ld	a0,104(s0)
    83f45514:	1d6090ef          	jal	ra,83f4e6ea <vPortFree>
    83f45518:	7828                	ld	a0,112(s0)
    83f4551a:	1d0090ef          	jal	ra,83f4e6ea <vPortFree>
    83f4551e:	6048                	ld	a0,128(s0)
    83f45520:	1ca090ef          	jal	ra,83f4e6ea <vPortFree>
    83f45524:	6448                	ld	a0,136(s0)
    83f45526:	1c4090ef          	jal	ra,83f4e6ea <vPortFree>
    83f4552a:	7c28                	ld	a0,120(s0)
    83f4552c:	1be090ef          	jal	ra,83f4e6ea <vPortFree>
    83f45530:	7048                	ld	a0,160(s0)
    83f45532:	1b8090ef          	jal	ra,83f4e6ea <vPortFree>
    83f45536:	7448                	ld	a0,168(s0)
    83f45538:	1b2090ef          	jal	ra,83f4e6ea <vPortFree>
    83f4553c:	7468                	ld	a0,232(s0)
    83f4553e:	1ac090ef          	jal	ra,83f4e6ea <vPortFree>
    83f45542:	7868                	ld	a0,240(s0)
    83f45544:	1a6090ef          	jal	ra,83f4e6ea <vPortFree>
    83f45548:	7848                	ld	a0,176(s0)
    83f4554a:	1a0090ef          	jal	ra,83f4e6ea <vPortFree>
    83f4554e:	10043503          	ld	a0,256(s0)
    83f45552:	198090ef          	jal	ra,83f4e6ea <vPortFree>
    83f45556:	10843503          	ld	a0,264(s0)
    83f4555a:	190090ef          	jal	ra,83f4e6ea <vPortFree>
    83f4555e:	11043503          	ld	a0,272(s0)
    83f45562:	188090ef          	jal	ra,83f4e6ea <vPortFree>
    83f45566:	12043503          	ld	a0,288(s0)
    83f4556a:	180090ef          	jal	ra,83f4e6ea <vPortFree>
    83f4556e:	8522                	mv	a0,s0
   mem_free(st->memD);
   mem_free(st->memE);
   mem_free(st->notch_mem);

   mem_free(st);
}
    83f45570:	6402                	ld	s0,0(sp)
    83f45572:	60a2                	ld	ra,8(sp)
    83f45574:	0141                	addi	sp,sp,16
    83f45576:	1740906f          	j	83f4e6ea <vPortFree>

0000000083f4557a <LP_AEC>:

EXPORT void LP_AEC(LinearEchoState *st, const short *in, const short *far_end, short *out)
{
    83f4557a:	7155                	addi	sp,sp,-208
    83f4557c:	e1a2                	sd	s0,192(sp)
    83f4557e:	f54e                	sd	s3,168(sp)
    83f45580:	ed56                	sd	s5,152(sp)
    83f45582:	e586                	sd	ra,200(sp)
    83f45584:	fd26                	sd	s1,184(sp)
    83f45586:	f94a                	sd	s2,176(sp)
    83f45588:	f152                	sd	s4,160(sp)
    83f4558a:	e95a                	sd	s6,144(sp)
    83f4558c:	e55e                	sd	s7,136(sp)
    83f4558e:	e162                	sd	s8,128(sp)
    83f45590:	fce6                	sd	s9,120(sp)
    83f45592:	f8ea                	sd	s10,112(sp)
    83f45594:	f4ee                	sd	s11,104(sp)
    83f45596:	aca2                	fsd	fs0,88(sp)
    83f45598:	a8a6                	fsd	fs1,80(sp)
    83f4559a:	a4ca                	fsd	fs2,72(sp)
    83f4559c:	a0ce                	fsd	fs3,64(sp)
    83f4559e:	bc52                	fsd	fs4,56(sp)
    83f455a0:	b856                	fsd	fs5,48(sp)
    83f455a2:	b45a                	fsd	fs6,40(sp)
    83f455a4:	b05e                	fsd	fs7,32(sp)
    83f455a6:	ac62                	fsd	fs8,24(sp)
    83f455a8:	a866                	fsd	fs9,16(sp)
    83f455aa:	842a                	mv	s0,a0
   float alpha, alpha_1;
   float RER;  /* Residual to Error Ratio */
   float tmp32;


   if (st->echo_cnt > (st->sampling_rate/st->frame_size*3)) {
    83f455ac:	4c5c                	lw	a5,28(s0)
    83f455ae:	4108                	lw	a0,0(a0)
    83f455b0:	14843803          	ld	a6,328(s0)
{
    83f455b4:	e436                	sd	a3,8(sp)
   if (st->echo_cnt > (st->sampling_rate/st->frame_size*3)) {
    83f455b6:	02a7c73b          	divw	a4,a5,a0
{
    83f455ba:	89ae                	mv	s3,a1
    83f455bc:	8ab2                	mv	s5,a2
   if (st->echo_cnt > (st->sampling_rate/st->frame_size*3)) {
    83f455be:	0017179b          	slliw	a5,a4,0x1
    83f455c2:	9f3d                	addw	a4,a4,a5
    83f455c4:	2d075be3          	bge	a4,a6,83f4609a <LP_AEC+0xb20>
      M = st->M;  /* from parameter */
    83f455c8:	00842903          	lw	s2,8(s0)
      st->echo_cnt = (st->sampling_rate/st->frame_size*3)+1;  /* avoid cnt overflow */
    83f455cc:	0017079b          	addiw	a5,a4,1
    83f455d0:	14f43423          	sd	a5,328(s0)
   } else {
      M = st->initial_filter_len;
   }

   N = st->window_size;
   st->cancel_count++;
    83f455d4:	445c                	lw	a5,12(s0)

   /******************************************************************************/
   /*                                                     TX Signal Preprocessing*/
   /******************************************************************************/
   /* Apply DC filter to make sure DC doesn't end up causing problems */
   DC_filter(in, st->notch_radius, st->input, st->frame_size, st->notch_mem);
    83f455d6:	12043683          	ld	a3,288(s0)
    83f455da:	682c                	ld	a1,80(s0)
    83f455dc:	11c42507          	flw	fa0,284(s0)
   st->cancel_count++;
    83f455e0:	2785                	addiw	a5,a5,1
    83f455e2:	c45c                	sw	a5,12(s0)
   DC_filter(in, st->notch_radius, st->input, st->frame_size, st->notch_mem);
    83f455e4:	862a                	mv	a2,a0
    83f455e6:	854e                	mv	a0,s3
   N = st->window_size;
    83f455e8:	4044                	lw	s1,4(s0)
   ss = st->ss / M;
    83f455ea:	14042907          	flw	fs2,320(s0)
   DC_filter(in, st->notch_radius, st->input, st->frame_size, st->notch_mem);
    83f455ee:	465000ef          	jal	ra,83f46252 <DC_filter>

   /* Copy input data to buffer and apply pre-emphasis filter */
   for (i=0;i<st->frame_size;i++) {
    83f455f2:	401c                	lw	a5,0(s0)
   ss = st->ss / M;
    83f455f4:	d00974d3          	fcvt.s.w	fs1,s2
   for (i=0;i<st->frame_size;i++) {
    83f455f8:	4701                	li	a4,0
    83f455fa:	08f05e63          	blez	a5,83f45696 <LP_AEC+0x11c>
      float tmp32;
      /* H = 1-0.9z^(-1), FIR filter */
      /* tmp32 = input(n) - preemph * input(n-1), input(n) is d(n) */
      tmp32 = st->input[i] - st->preemph * st->memD[0];
    83f455fe:	6834                	ld	a3,80(s0)
    83f45600:	10843783          	ld	a5,264(s0)
    83f45604:	00271613          	slli	a2,a4,0x2
    83f45608:	96b2                	add	a3,a3,a2
    83f4560a:	0006a707          	flw	fa4,0(a3)
    83f4560e:	0007a687          	flw	fa3,0(a5)
    83f45612:	11842787          	flw	fa5,280(s0)
      st->memD[0] = st->input[i];
    83f45616:	00e7a027          	fsw	fa4,0(a5)
      st->input[i] = tmp32;
    83f4561a:	683c                	ld	a5,80(s0)
      tmp32 = st->input[i] - st->preemph * st->memD[0];
    83f4561c:	70d7f7cb          	fnmsub.s	fa5,fa5,fa3,fa4
   for (i=0;i<st->frame_size;i++) {
    83f45620:	0705                	addi	a4,a4,1
      st->input[i] = tmp32;
    83f45622:	97b2                	add	a5,a5,a2
   for (i=0;i<st->frame_size;i++) {
    83f45624:	0007069b          	sext.w	a3,a4
      st->input[i] = tmp32;
    83f45628:	00f7a027          	fsw	fa5,0(a5)
   for (i=0;i<st->frame_size;i++) {
    83f4562c:	401c                	lw	a5,0(s0)
    83f4562e:	fcf6c8e3          	blt	a3,a5,83f455fe <LP_AEC+0x84>
   }

   /******************************************************************************/
   /*                                                     RX Signal Preprocessing*/
   /******************************************************************************/
   for (i=0;i<st->frame_size;i++) {
    83f45632:	06f05263          	blez	a5,83f45696 <LP_AEC+0x11c>
    83f45636:	85d6                	mv	a1,s5
    83f45638:	4601                	li	a2,0
    83f4563a:	4681                	li	a3,0
      float tmp32;
      /* x[1:2*frame_size]: |--previous frame--|--current frame--| */
      st->x[i] = st->x[i+st->frame_size];  /* perform pre-emphasis filtering for previous frame */
    83f4563c:	6038                	ld	a4,64(s0)
    83f4563e:	9fb5                	addw	a5,a5,a3
    83f45640:	078a                	slli	a5,a5,0x2
    83f45642:	97ba                	add	a5,a5,a4
    83f45644:	0007a787          	flw	fa5,0(a5)
    83f45648:	00261793          	slli	a5,a2,0x2
    83f4564c:	973e                	add	a4,a4,a5
    83f4564e:	00f72027          	fsw	fa5,0(a4)
      /* tmp32 = far_end(n) - preemph * far_end(n -1) */
      tmp32 = far_end[i] - st->preemph * st->memX[0];
    83f45652:	00059703          	lh	a4,0(a1)
    83f45656:	10043783          	ld	a5,256(s0)
    83f4565a:	11842787          	flw	fa5,280(s0)
    83f4565e:	d0077753          	fcvt.s.w	fa4,a4
    83f45662:	0007a687          	flw	fa3,0(a5)
      st->x[i+st->frame_size] = tmp32;  /* perform pre-emphasis filtering for current frame */
    83f45666:	401c                	lw	a5,0(s0)
    83f45668:	6038                	ld	a4,64(s0)
      tmp32 = far_end[i] - st->preemph * st->memX[0];
    83f4566a:	70d7f7cb          	fnmsub.s	fa5,fa5,fa3,fa4
      st->x[i+st->frame_size] = tmp32;  /* perform pre-emphasis filtering for current frame */
    83f4566e:	9fb5                	addw	a5,a5,a3
    83f45670:	078a                	slli	a5,a5,0x2
    83f45672:	97ba                	add	a5,a5,a4
   for (i=0;i<st->frame_size;i++) {
    83f45674:	0605                	addi	a2,a2,1
      st->x[i+st->frame_size] = tmp32;  /* perform pre-emphasis filtering for current frame */
    83f45676:	00f7a027          	fsw	fa5,0(a5)
      st->memX[0] = far_end[i];
    83f4567a:	00059703          	lh	a4,0(a1)
    83f4567e:	10043783          	ld	a5,256(s0)
   for (i=0;i<st->frame_size;i++) {
    83f45682:	0006069b          	sext.w	a3,a2
      st->memX[0] = far_end[i];
    83f45686:	d00777d3          	fcvt.s.w	fa5,a4
   for (i=0;i<st->frame_size;i++) {
    83f4568a:	0589                	addi	a1,a1,2
      st->memX[0] = far_end[i];
    83f4568c:	00f7a027          	fsw	fa5,0(a5)
   for (i=0;i<st->frame_size;i++) {
    83f45690:	401c                	lw	a5,0(s0)
    83f45692:	faf6c5e3          	blt	a3,a5,83f4563c <LP_AEC+0xc2>
   }

   /* Shift the filter length buffer of far-end in frequency domain */
   for (j=M-1;j>=0;j--) {
    83f45696:	fff90a1b          	addiw	s4,s2,-1
    83f4569a:	000a0a9b          	sext.w	s5,s4
    83f4569e:	040acd63          	bltz	s5,83f456f8 <LP_AEC+0x17e>
    83f456a2:	029a053b          	mulw	a0,s4,s1
    83f456a6:	fff48e1b          	addiw	t3,s1,-1
    83f456aa:	1e02                	slli	t3,t3,0x20
    83f456ac:	020e5e13          	srli	t3,t3,0x20
    83f456b0:	0004831b          	sext.w	t1,s1
    83f456b4:	8856                	mv	a6,s5
    83f456b6:	0e05                	addi	t3,t3,1
    83f456b8:	5efd                	li	t4,-1
    83f456ba:	029908bb          	mulw	a7,s2,s1
      for (i=0;i<N;i++)
    83f456be:	02905663          	blez	s1,83f456ea <LP_AEC+0x170>
    83f456c2:	00ae05b3          	add	a1,t3,a0
    83f456c6:	40a88633          	sub	a2,a7,a0
    83f456ca:	00251713          	slli	a4,a0,0x2
    83f456ce:	058a                	slli	a1,a1,0x2
    83f456d0:	060a                	slli	a2,a2,0x2
         st->X[(j+1)*N+i] = st->X[j*N+i];
    83f456d2:	643c                	ld	a5,72(s0)
    83f456d4:	00e786b3          	add	a3,a5,a4
    83f456d8:	0006a787          	flw	fa5,0(a3)
    83f456dc:	97b2                	add	a5,a5,a2
    83f456de:	97ba                	add	a5,a5,a4
    83f456e0:	00f7a027          	fsw	fa5,0(a5)
      for (i=0;i<N;i++)
    83f456e4:	0711                	addi	a4,a4,4
    83f456e6:	fee596e3          	bne	a1,a4,83f456d2 <LP_AEC+0x158>
   for (j=M-1;j>=0;j--) {
    83f456ea:	387d                	addiw	a6,a6,-1
    83f456ec:	4065053b          	subw	a0,a0,t1
    83f456f0:	406888bb          	subw	a7,a7,t1
    83f456f4:	fdd815e3          	bne	a6,t4,83f456be <LP_AEC+0x144>
   }
   speech_fft(st->fft_table, st->x, &st->X[0]);
    83f456f8:	6430                	ld	a2,72(s0)
    83f456fa:	602c                	ld	a1,64(s0)
    83f456fc:	7c68                	ld	a0,248(s0)
    83f456fe:	19f030ef          	jal	ra,83f4909c <speech_fft>

   Sxx = 0;
   Sxx += inner_prod(st->x+st->frame_size, st->x+st->frame_size, st->frame_size);  /* the variance of x(n) */
    83f45702:	4010                	lw	a2,0(s0)
    83f45704:	602c                	ld	a1,64(s0)
    83f45706:	00261793          	slli	a5,a2,0x2
    83f4570a:	95be                	add	a1,a1,a5
    83f4570c:	852e                	mv	a0,a1
    83f4570e:	3bd000ef          	jal	ra,83f462ca <inner_prod>
   accum_power_spectrum(st->X, st->Xf, N);  /* Xf(k) = pow(X(k)), the power spectrum of X(k) */
    83f45712:	646c                	ld	a1,200(s0)
    83f45714:	6428                	ld	a0,72(s0)
    83f45716:	8626                	mv	a2,s1
   Sxx += inner_prod(st->x+st->frame_size, st->x+st->frame_size, st->frame_size);  /* the variance of x(n) */
    83f45718:	20a50a53          	fmv.s	fs4,fa0
   accum_power_spectrum(st->X, st->Xf, N);  /* Xf(k) = pow(X(k)), the power spectrum of X(k) */
    83f4571c:	473000ef          	jal	ra,83f4638e <accum_power_spectrum>

   Sff = 0;
#ifdef TWO_FILTER
   /* Compute foreground filter */
   /* Y(k) = X(k) * W(k) */
   accum_spectral_mul(st->X, st->foreground, st->Y, N, M);
    83f45720:	7430                	ld	a2,104(s0)
    83f45722:	644c                	ld	a1,136(s0)
    83f45724:	6428                	ld	a0,72(s0)
    83f45726:	874a                	mv	a4,s2
    83f45728:	86a6                	mv	a3,s1
    83f4572a:	4f7000ef          	jal	ra,83f46420 <accum_spectral_mul>
   speech_ifft(st->fft_table, st->Y, st->e);
    83f4572e:	7c10                	ld	a2,56(s0)
    83f45730:	742c                	ld	a1,104(s0)
    83f45732:	7c68                	ld	a0,248(s0)
    83f45734:	1d5030ef          	jal	ra,83f49108 <speech_ifft>
   for (i=0;i<st->frame_size;i++) {
    83f45738:	4010                	lw	a2,0(s0)
    83f4573a:	02c05a63          	blez	a2,83f4576e <LP_AEC+0x1f4>
    83f4573e:	4781                	li	a5,0
	/* e(n) = d(n) - y(n), e(n) use the first part, y(n) use the last part */
	st->e[i] = st->input[i] - st->e[i+st->frame_size];
    83f45740:	7c18                	ld	a4,56(s0)
    83f45742:	6834                	ld	a3,80(s0)
    83f45744:	9e3d                	addw	a2,a2,a5
    83f45746:	00279593          	slli	a1,a5,0x2
    83f4574a:	060a                	slli	a2,a2,0x2
    83f4574c:	963a                	add	a2,a2,a4
    83f4574e:	96ae                	add	a3,a3,a1
    83f45750:	0006a787          	flw	fa5,0(a3)
    83f45754:	00062707          	flw	fa4,0(a2)
    83f45758:	972e                	add	a4,a4,a1
   for (i=0;i<st->frame_size;i++) {
    83f4575a:	0785                	addi	a5,a5,1
	st->e[i] = st->input[i] - st->e[i+st->frame_size];
    83f4575c:	08e7f7d3          	fsub.s	fa5,fa5,fa4
   for (i=0;i<st->frame_size;i++) {
    83f45760:	0007869b          	sext.w	a3,a5
	st->e[i] = st->input[i] - st->e[i+st->frame_size];
    83f45764:	00f72027          	fsw	fa5,0(a4)
   for (i=0;i<st->frame_size;i++) {
    83f45768:	4010                	lw	a2,0(s0)
    83f4576a:	fcc6cbe3          	blt	a3,a2,83f45740 <LP_AEC+0x1c6>
   }
   /* the variance of e(n) */
   Sff += inner_prod(st->e, st->e, st->frame_size);
    83f4576e:	7c0c                	ld	a1,56(s0)
    83f45770:	f00009d3          	fmv.w.x	fs3,zero
    83f45774:	852e                	mv	a0,a1
    83f45776:	355000ef          	jal	ra,83f462ca <inner_prod>
#endif

   /* Adjust proportional adaption rate */
   if (st->adapted)
    83f4577a:	481c                	lw	a5,16(s0)
   Sff += inner_prod(st->e, st->e, st->frame_size);
    83f4577c:	013579d3          	fadd.s	fs3,fa0,fs3
   if (st->adapted)
    83f45780:	180797e3          	bnez	a5,83f4610e <LP_AEC+0xb94>
      aec_adjust_prop (st->W, N, M, st->prop);
   if (st->saturated == 0) {
    83f45784:	485c                	lw	a5,20(s0)
    83f45786:	10079ee3          	bnez	a5,83f460a2 <LP_AEC+0xb28>
      for (j=M-1;j>=0;j--) {
    83f4578a:	080ac563          	bltz	s5,83f45814 <LP_AEC+0x29a>
    83f4578e:	02990dbb          	mulw	s11,s2,s1
    83f45792:	020a1793          	slli	a5,s4,0x20
    83f45796:	fff48c9b          	addiw	s9,s1,-1
    83f4579a:	9381                	srli	a5,a5,0x20
    83f4579c:	40f907b3          	sub	a5,s2,a5
    83f457a0:	020c9713          	slli	a4,s9,0x20
    83f457a4:	40900bbb          	negw	s7,s1
    83f457a8:	078a                	slli	a5,a5,0x2
    83f457aa:	01e75c93          	srli	s9,a4,0x1e
    83f457ae:	002a9d13          	slli	s10,s5,0x2
    83f457b2:	029a0a3b          	mulw	s4,s4,s1
    83f457b6:	0b8a                	slli	s7,s7,0x2
    83f457b8:	00048c1b          	sext.w	s8,s1
    83f457bc:	0d8a                	slli	s11,s11,0x2
    83f457be:	ff878b13          	addi	s6,a5,-8
    83f457c2:	0c91                	addi	s9,s9,4
         /* st->X:                focus on j+1, means the previous X state, X length is (M+1)*N */
         /* st->E:                error in frequency domain */
         /*                             [0] = matlab[1].re (matlab[1].im = 0), [1] = [2].re, [2] = [2].im, [3] = [3].re, [4] = [3].im, ..., */
         /*                             [317] = [160].re, [318] = [160].im, [319] = [161].re (matlab[161].im = 0) */
         /* st->PHI:            length is window size N */
         weighted_gradient_phi(st->power_1, st->prop[j], &st->X[(j+1)*N], st->E, st->PHI, N);
    83f457c4:	787c                	ld	a5,240(s0)
    83f457c6:	642c                	ld	a1,72(s0)
    83f457c8:	7c34                	ld	a3,120(s0)
    83f457ca:	97ea                	add	a5,a5,s10
    83f457cc:	0007a507          	flw	fa0,0(a5)
    83f457d0:	7830                	ld	a2,112(s0)
    83f457d2:	7448                	ld	a0,168(s0)
    83f457d4:	95ee                	add	a1,a1,s11
    83f457d6:	8726                	mv	a4,s1
    83f457d8:	539000ef          	jal	ra,83f46510 <weighted_gradient_phi>
	 /* compute weight gradient */
         for (i=0;i<N;i++)  /* only calculate (N/2+1) frequency bin, two data(re/im) in each bin, so N data in total */
    83f457dc:	002a1593          	slli	a1,s4,0x2
	    /* W(k, m, j) = W(k, m, j-1) + delta_W(k, m, j) */
            st->W[ j*N + i] += st->PHI[i];
    83f457e0:	4781                	li	a5,0
         for (i=0;i<N;i++)  /* only calculate (N/2+1) frequency bin, two data(re/im) in each bin, so N data in total */
    83f457e2:	02905363          	blez	s1,83f45808 <LP_AEC+0x28e>
            st->W[ j*N + i] += st->PHI[i];
    83f457e6:	6058                	ld	a4,128(s0)
    83f457e8:	7c34                	ld	a3,120(s0)
    83f457ea:	00f58633          	add	a2,a1,a5
    83f457ee:	9732                	add	a4,a4,a2
    83f457f0:	96be                	add	a3,a3,a5
    83f457f2:	00072787          	flw	fa5,0(a4)
    83f457f6:	0006a707          	flw	fa4,0(a3)
         for (i=0;i<N;i++)  /* only calculate (N/2+1) frequency bin, two data(re/im) in each bin, so N data in total */
    83f457fa:	0791                	addi	a5,a5,4
            st->W[ j*N + i] += st->PHI[i];
    83f457fc:	00e7f7d3          	fadd.s	fa5,fa5,fa4
    83f45800:	00f72027          	fsw	fa5,0(a4)
         for (i=0;i<N;i++)  /* only calculate (N/2+1) frequency bin, two data(re/im) in each bin, so N data in total */
    83f45804:	fefc91e3          	bne	s9,a5,83f457e6 <LP_AEC+0x26c>
      for (j=M-1;j>=0;j--) {
    83f45808:	1d71                	addi	s10,s10,-4
    83f4580a:	9dde                	add	s11,s11,s7
    83f4580c:	418a0a3b          	subw	s4,s4,s8
    83f45810:	fbab1ae3          	bne	s6,s10,83f457c4 <LP_AEC+0x24a>
   } else {
      st->saturated--;
   }

   /* Overlap-store method to let circular convolution become linear convolution */
   for (j=0;j<M;j++) {
    83f45814:	00048c9b          	sext.w	s9,s1
    83f45818:	4c01                	li	s8,0
    83f4581a:	4b01                	li	s6,0
    83f4581c:	fffc8b9b          	addiw	s7,s9,-1
    83f45820:	03205063          	blez	s2,83f45840 <LP_AEC+0x2c6>
      //if (j==0 || ((2+st->cancel_count)%(M-1)) == j+1) {
      if (j==0 || st->cancel_count%(M-1) == j-1) {  /* better */
    83f45824:	460b0163          	beqz	s6,83f45c86 <LP_AEC+0x70c>
    83f45828:	4458                	lw	a4,12(s0)
    83f4582a:	fffb079b          	addiw	a5,s6,-1
    83f4582e:	0357673b          	remw	a4,a4,s5
    83f45832:	44f70a63          	beq	a4,a5,83f45c86 <LP_AEC+0x70c>
   for (j=0;j<M;j++) {
    83f45836:	2b05                	addiw	s6,s6,1
    83f45838:	018c8c3b          	addw	s8,s9,s8
    83f4583c:	ff6914e3          	bne	s2,s6,83f45824 <LP_AEC+0x2aa>
         speech_fft(st->fft_table, st->wtmp, &st->W[j*N]);
      }
   }

   /* Reset to zeros for accumulation */
   for (i=0;i<=st->frame_size;i++)
    83f45840:	4018                	lw	a4,0(s0)
    83f45842:	4781                	li	a5,0
    83f45844:	02074663          	bltz	a4,83f45870 <LP_AEC+0x2f6>
      st->Rf[i] = st->Yf[i] = st->Xf[i] = 0;
    83f45848:	6478                	ld	a4,200(s0)
    83f4584a:	00279693          	slli	a3,a5,0x2
   for (i=0;i<=st->frame_size;i++)
    83f4584e:	0785                	addi	a5,a5,1
      st->Rf[i] = st->Yf[i] = st->Xf[i] = 0;
    83f45850:	9736                	add	a4,a4,a3
    83f45852:	00072023          	sw	zero,0(a4)
    83f45856:	6078                	ld	a4,192(s0)
   for (i=0;i<=st->frame_size;i++)
    83f45858:	0007861b          	sext.w	a2,a5
      st->Rf[i] = st->Yf[i] = st->Xf[i] = 0;
    83f4585c:	9736                	add	a4,a4,a3
    83f4585e:	00072023          	sw	zero,0(a4)
    83f45862:	7c58                	ld	a4,184(s0)
    83f45864:	9736                	add	a4,a4,a3
    83f45866:	00072023          	sw	zero,0(a4)
   for (i=0;i<=st->frame_size;i++)
    83f4586a:	4018                	lw	a4,0(s0)
    83f4586c:	fcc75ee3          	bge	a4,a2,83f45848 <LP_AEC+0x2ce>
   Dbf = 0;
   See = 0;
#ifdef TWO_FILTER
   /* Difference in response, this is used to estimate the variance of the residual power estimate */
   /* st.Y(:) = st.Y(:) + st.X(:, j) .* st.W(:, j); */
   accum_spectral_mul(st->X, st->W, st->Y, N, M);
    83f45870:	7430                	ld	a2,104(s0)
    83f45872:	604c                	ld	a1,128(s0)
    83f45874:	6428                	ld	a0,72(s0)
    83f45876:	874a                	mv	a4,s2
    83f45878:	86a6                	mv	a3,s1
    83f4587a:	3a7000ef          	jal	ra,83f46420 <accum_spectral_mul>
   /* st.y : [ ~ | leak background ] */
   speech_ifft(st->fft_table, st->Y, st->y);
    83f4587e:	6c30                	ld	a2,88(s0)
    83f45880:	742c                	ld	a1,104(s0)
    83f45882:	7c68                	ld	a0,248(s0)
    83f45884:	085030ef          	jal	ra,83f49108 <speech_ifft>
   for (i=0;i<st->frame_size;i++) {
    83f45888:	4010                	lw	a2,0(s0)
    83f4588a:	4781                	li	a5,0
    83f4588c:	02c05a63          	blez	a2,83f458c0 <LP_AEC+0x346>
      st->e[i] = st->e[i+st->frame_size] - st->y[i+st->frame_size];
    83f45890:	7c18                	ld	a4,56(s0)
    83f45892:	6c34                	ld	a3,88(s0)
    83f45894:	9e3d                	addw	a2,a2,a5
    83f45896:	060a                	slli	a2,a2,0x2
    83f45898:	00c705b3          	add	a1,a4,a2
    83f4589c:	9636                	add	a2,a2,a3
    83f4589e:	00062707          	flw	fa4,0(a2)
    83f458a2:	0005a787          	flw	fa5,0(a1)
    83f458a6:	00279693          	slli	a3,a5,0x2
    83f458aa:	9736                	add	a4,a4,a3
    83f458ac:	08e7f7d3          	fsub.s	fa5,fa5,fa4
   for (i=0;i<st->frame_size;i++) {
    83f458b0:	0785                	addi	a5,a5,1
    83f458b2:	0007869b          	sext.w	a3,a5
      st->e[i] = st->e[i+st->frame_size] - st->y[i+st->frame_size];
    83f458b6:	00f72027          	fsw	fa5,0(a4)
   for (i=0;i<st->frame_size;i++) {
    83f458ba:	4010                	lw	a2,0(s0)
    83f458bc:	fcc6cae3          	blt	a3,a2,83f45890 <LP_AEC+0x316>
   }
   Dbf += 10 + inner_prod(st->e, st->e, st->frame_size);  /* the variance of e(n) */
    83f458c0:	7c0c                	ld	a1,56(s0)
    83f458c2:	852e                	mv	a0,a1
    83f458c4:	207000ef          	jal	ra,83f462ca <inner_prod>
    83f458c8:	0000d797          	auipc	a5,0xd
    83f458cc:	9e87aa87          	flw	fs5,-1560(a5) # 83f522b0 <__func__.1+0xb8>
    83f458d0:	01557453          	fadd.s	fs0,fa0,fs5
    83f458d4:	f00007d3          	fmv.w.x	fa5,zero
   for (i=0;i<st->frame_size;i++)
    83f458d8:	4010                	lw	a2,0(s0)
   Dbf += 10 + inner_prod(st->e, st->e, st->frame_size);  /* the variance of e(n) */
    83f458da:	00f47453          	fadd.s	fs0,fs0,fa5
   for (i=0;i<st->frame_size;i++)
    83f458de:	02c05b63          	blez	a2,83f45914 <LP_AEC+0x39a>
    83f458e2:	4781                	li	a5,0
      st->e[i] = st->input[i] - st->y[i+st->frame_size];
    83f458e4:	6c34                	ld	a3,88(s0)
    83f458e6:	682c                	ld	a1,80(s0)
    83f458e8:	9e3d                	addw	a2,a2,a5
    83f458ea:	00279513          	slli	a0,a5,0x2
    83f458ee:	060a                	slli	a2,a2,0x2
    83f458f0:	9636                	add	a2,a2,a3
    83f458f2:	95aa                	add	a1,a1,a0
    83f458f4:	00062707          	flw	fa4,0(a2)
    83f458f8:	0005a787          	flw	fa5,0(a1)
    83f458fc:	7c18                	ld	a4,56(s0)
   for (i=0;i<st->frame_size;i++)
    83f458fe:	0785                	addi	a5,a5,1
      st->e[i] = st->input[i] - st->y[i+st->frame_size];
    83f45900:	08e7f7d3          	fsub.s	fa5,fa5,fa4
    83f45904:	972a                	add	a4,a4,a0
   for (i=0;i<st->frame_size;i++)
    83f45906:	0007869b          	sext.w	a3,a5
      st->e[i] = st->input[i] - st->y[i+st->frame_size];
    83f4590a:	00f72027          	fsw	fa5,0(a4)
   for (i=0;i<st->frame_size;i++)
    83f4590e:	4010                	lw	a2,0(s0)
    83f45910:	fcc6cae3          	blt	a3,a2,83f458e4 <LP_AEC+0x36a>
   See += inner_prod(st->e, st->e, st->frame_size);  /* the variance of e(n) */
    83f45914:	7c0c                	ld	a1,56(s0)
    83f45916:	852e                	mv	a0,a1
    83f45918:	1b3000ef          	jal	ra,83f462ca <inner_prod>
    83f4591c:	f00001d3          	fmv.w.x	ft3,zero
#ifdef TWO_FILTER
   /* For two time windows, compute the mean of the energy difference, as well as the variance */
   st->Davg1 = .6f * st->Davg1 + .4f * (Sff - See);
   st->Davg2 = .85f * st->Davg2 + .15f * (Sff - See);
   st->Dvar1 = st->aec_var1_smooth * st->Dvar1 + .16f * Sff * Dbf ;
   st->Dvar2 = st->aec_var2_smooth * st->Dvar2 + .0225f * Sff * Dbf ;
    83f45920:	0000d797          	auipc	a5,0xd
    83f45924:	9a87a787          	flw	fa5,-1624(a5) # 83f522c8 <__func__.1+0xd0>
   st->Dvar1 = st->aec_var1_smooth * st->Dvar1 + .16f * Sff * Dbf ;
    83f45928:	0000d797          	auipc	a5,0xd
    83f4592c:	99c7a687          	flw	fa3,-1636(a5) # 83f522c4 <__func__.1+0xcc>
   See += inner_prod(st->e, st->e, st->frame_size);  /* the variance of e(n) */
    83f45930:	00357b53          	fadd.s	fs6,fa0,ft3
   st->Dvar2 = st->aec_var2_smooth * st->Dvar2 + .0225f * Sff * Dbf ;
    83f45934:	10f9f753          	fmul.s	fa4,fs3,fa5
   st->Dvar1 = st->aec_var1_smooth * st->Dvar1 + .16f * Sff * Dbf ;
    83f45938:	10d9f6d3          	fmul.s	fa3,fs3,fa3
   st->Davg1 = .6f * st->Davg1 + .4f * (Sff - See);
    83f4593c:	0000d797          	auipc	a5,0xd
    83f45940:	9787a107          	flw	ft2,-1672(a5) # 83f522b4 <__func__.1+0xbc>
   st->Davg2 = .85f * st->Davg2 + .15f * (Sff - See);
    83f45944:	0000d797          	auipc	a5,0xd
    83f45948:	9787a087          	flw	ft1,-1672(a5) # 83f522bc <__func__.1+0xc4>
   st->Davg1 = .6f * st->Davg1 + .4f * (Sff - See);
    83f4594c:	0969f7d3          	fsub.s	fa5,fs3,fs6
   st->Dvar2 = st->aec_var2_smooth * st->Dvar2 + .0225f * Sff * Dbf ;
    83f45950:	10877753          	fmul.s	fa4,fa4,fs0
   st->Dvar1 = st->aec_var1_smooth * st->Dvar1 + .16f * Sff * Dbf ;
    83f45954:	1086f6d3          	fmul.s	fa3,fa3,fs0
   st->Davg1 = .6f * st->Davg1 + .4f * (Sff - See);
    83f45958:	09042607          	flw	fa2,144(s0)
   st->Davg2 = .85f * st->Davg2 + .15f * (Sff - See);
    83f4595c:	09442587          	flw	fa1,148(s0)
   st->Davg1 = .6f * st->Davg1 + .4f * (Sff - See);
    83f45960:	1027f153          	fmul.s	ft2,fa5,ft2
   st->Davg2 = .85f * st->Davg2 + .15f * (Sff - See);
    83f45964:	1017f0d3          	fmul.s	ft1,fa5,ft1
   st->Dvar1 = st->aec_var1_smooth * st->Dvar1 + .16f * Sff * Dbf ;
    83f45968:	09842287          	flw	ft5,152(s0)
   st->Dvar2 = st->aec_var2_smooth * st->Dvar2 + .0225f * Sff * Dbf ;
    83f4596c:	09c42207          	flw	ft4,156(s0)
   st->Dvar1 = st->aec_var1_smooth * st->Dvar1 + .16f * Sff * Dbf ;
    83f45970:	12c42507          	flw	fa0,300(s0)
   st->Dvar2 = st->aec_var2_smooth * st->Dvar2 + .0225f * Sff * Dbf ;
    83f45974:	13042007          	flw	ft0,304(s0)
   st->Davg1 = .6f * st->Davg1 + .4f * (Sff - See);
    83f45978:	0000d797          	auipc	a5,0xd
    83f4597c:	9407a387          	flw	ft7,-1728(a5) # 83f522b8 <__func__.1+0xc0>
   st->Davg2 = .85f * st->Davg2 + .15f * (Sff - See);
    83f45980:	0000d797          	auipc	a5,0xd
    83f45984:	9407a307          	flw	ft6,-1728(a5) # 83f522c0 <__func__.1+0xc8>
   st->Dvar1 = st->aec_var1_smooth * st->Dvar1 + .16f * Sff * Dbf ;
    83f45988:	685576c3          	fmadd.s	fa3,fa0,ft5,fa3
   st->Davg1 = .6f * st->Davg1 + .4f * (Sff - See);
    83f4598c:	10767643          	fmadd.s	fa2,fa2,ft7,ft2
   st->Dvar2 = st->aec_var2_smooth * st->Dvar2 + .0225f * Sff * Dbf ;
    83f45990:	70407543          	fmadd.s	fa0,ft0,ft4,fa4
   st->Davg2 = .85f * st->Davg2 + .15f * (Sff - See);
    83f45994:	0865f5c3          	fmadd.s	fa1,fa1,ft6,ft1

   update_foreground = 0;
   /* Inspect if there is a statistically significant reduction in the residual echo */
   if (((Sff - See) * ABS(Sff - See)) > (Sff * Dbf))
    83f45998:	a03797d3          	flt.s	a5,fa5,ft3
   st->Dvar1 = st->aec_var1_smooth * st->Dvar1 + .16f * Sff * Dbf ;
    83f4599c:	08d42c27          	fsw	fa3,152(s0)
   st->Davg1 = .6f * st->Davg1 + .4f * (Sff - See);
    83f459a0:	08c42827          	fsw	fa2,144(s0)
   st->Dvar2 = st->aec_var2_smooth * st->Dvar2 + .0225f * Sff * Dbf ;
    83f459a4:	08a42e27          	fsw	fa0,156(s0)
   st->Davg2 = .85f * st->Davg2 + .15f * (Sff - See);
    83f459a8:	08b42a27          	fsw	fa1,148(s0)
   if (((Sff - See) * ABS(Sff - See)) > (Sff * Dbf))
    83f459ac:	20f78053          	fmv.s	ft0,fa5
    83f459b0:	c399                	beqz	a5,83f459b6 <LP_AEC+0x43c>
    83f459b2:	20f79053          	fneg.s	ft0,fa5
    83f459b6:	1007f753          	fmul.s	fa4,fa5,ft0
    83f459ba:	1089f0d3          	fmul.s	ft1,fs3,fs0
    83f459be:	a0e097d3          	flt.s	a5,ft1,fa4
    83f459c2:	e7a1                	bnez	a5,83f45a0a <LP_AEC+0x490>
      update_foreground = 1;
   else if ((st->Davg1 * ABS(st->Davg1)) > (st->aec_var1_update * st->Dvar1))
    83f459c4:	f0000753          	fmv.w.x	fa4,zero
    83f459c8:	20c60153          	fmv.s	ft2,fa2
    83f459cc:	a0e617d3          	flt.s	a5,fa2,fa4
    83f459d0:	66079863          	bnez	a5,83f46040 <LP_AEC+0xac6>
    83f459d4:	13442707          	flw	fa4,308(s0)
    83f459d8:	102670d3          	fmul.s	ft1,fa2,ft2
    83f459dc:	10e6f753          	fmul.s	fa4,fa3,fa4
    83f459e0:	a01717d3          	flt.s	a5,fa4,ft1
    83f459e4:	e39d                	bnez	a5,83f45a0a <LP_AEC+0x490>
      update_foreground = 1;
   else if ((st->Davg2 * ABS(st->Davg2)) > (st->aec_var2_update * st->Dvar2))
    83f459e6:	f0000753          	fmv.w.x	fa4,zero
    83f459ea:	20b581d3          	fmv.s	ft3,fa1
    83f459ee:	a0e597d3          	flt.s	a5,fa1,fa4
    83f459f2:	000797e3          	bnez	a5,83f46200 <LP_AEC+0xc86>
    83f459f6:	13842707          	flw	fa4,312(s0)
    83f459fa:	1035f0d3          	fmul.s	ft1,fa1,ft3
    83f459fe:	10e57753          	fmul.s	fa4,fa0,fa4
    83f45a02:	a01717d3          	flt.s	a5,fa4,ft1
    83f45a06:	74078263          	beqz	a5,83f4614a <LP_AEC+0xbd0>

   if (update_foreground) {  /* update foreground filter */
      st->Davg1 = st->Davg2 = FLOAT_ZERO;
      st->Dvar1 = st->Dvar2 = FLOAT_ZERO;
      /* Copy background filter to foreground filter */
      for (i=0;i<N*M;i++)  /* copy data for (N/2+1) frequency bin */
    83f45a0a:	0299093b          	mulw	s2,s2,s1
      st->Davg1 = st->Davg2 = FLOAT_ZERO;
    83f45a0e:	08043823          	sd	zero,144(s0)
      st->Dvar1 = st->Dvar2 = FLOAT_ZERO;
    83f45a12:	08043c23          	sd	zero,152(s0)
      for (i=0;i<N*M;i++)  /* copy data for (N/2+1) frequency bin */
    83f45a16:	4781                	li	a5,0
    83f45a18:	00291613          	slli	a2,s2,0x2
    83f45a1c:	01205d63          	blez	s2,83f45a36 <LP_AEC+0x4bc>
         st->foreground[i] = st->W[i];
    83f45a20:	6054                	ld	a3,128(s0)
    83f45a22:	6458                	ld	a4,136(s0)
    83f45a24:	96be                	add	a3,a3,a5
    83f45a26:	0006a787          	flw	fa5,0(a3)
    83f45a2a:	973e                	add	a4,a4,a5
      for (i=0;i<N*M;i++)  /* copy data for (N/2+1) frequency bin */
    83f45a2c:	0791                	addi	a5,a5,4
         st->foreground[i] = st->W[i];
    83f45a2e:	00f72027          	fsw	fa5,0(a4)
      for (i=0;i<N*M;i++)  /* copy data for (N/2+1) frequency bin */
    83f45a32:	fef617e3          	bne	a2,a5,83f45a20 <LP_AEC+0x4a6>
      /* Apply a smooth transition to avoid blocking artifacts */
      /* y1(n) = window(n+N/2)y1(n) + window(n)y2(n) */
      for (i=0;i<st->frame_size;i++)
    83f45a36:	4010                	lw	a2,0(s0)
    83f45a38:	4781                	li	a5,0
    83f45a3a:	14c05663          	blez	a2,83f45b86 <LP_AEC+0x60c>
         /* Perform windowing and 50% OLA, output = window first part * leak background(new) + window last part * leak forground(old) */
	 /* st.e last part still be leak(y) foreground */
         st->e[i+st->frame_size] = st->window[i+st->frame_size] * st->e[i+st->frame_size] + st->window[i] * st->y[i+st->frame_size];
    83f45a3e:	7474                	ld	a3,232(s0)
    83f45a40:	6c38                	ld	a4,88(s0)
    83f45a42:	9e3d                	addw	a2,a2,a5
    83f45a44:	060a                	slli	a2,a2,0x2
    83f45a46:	00279593          	slli	a1,a5,0x2
    83f45a4a:	9732                	add	a4,a4,a2
    83f45a4c:	95b6                	add	a1,a1,a3
    83f45a4e:	0005a787          	flw	fa5,0(a1)
    83f45a52:	00072707          	flw	fa4,0(a4)
    83f45a56:	7c18                	ld	a4,56(s0)
    83f45a58:	96b2                	add	a3,a3,a2
    83f45a5a:	10e7f753          	fmul.s	fa4,fa5,fa4
    83f45a5e:	963a                	add	a2,a2,a4
    83f45a60:	00062687          	flw	fa3,0(a2)
    83f45a64:	0006a787          	flw	fa5,0(a3)
      for (i=0;i<st->frame_size;i++)
    83f45a68:	0785                	addi	a5,a5,1
    83f45a6a:	0007871b          	sext.w	a4,a5
         st->e[i+st->frame_size] = st->window[i+st->frame_size] * st->e[i+st->frame_size] + st->window[i] * st->y[i+st->frame_size];
    83f45a6e:	70d7f7c3          	fmadd.s	fa5,fa5,fa3,fa4
    83f45a72:	00f62027          	fsw	fa5,0(a2)
      for (i=0;i<st->frame_size;i++)
    83f45a76:	4010                	lw	a2,0(s0)
    83f45a78:	fcc743e3          	blt	a4,a2,83f45a3e <LP_AEC+0x4c4>
   }
#endif

   Sey = Syy = Sdd = 0;
   /* Compute error signal (for the output with de-emphasis) */
   for (i=0;i<st->frame_size;i++) {
    83f45a7c:	10c05563          	blez	a2,83f45b86 <LP_AEC+0x60c>
      tmp_out = st->input[i] - st->y[i+st->frame_size];
#endif
      /* H = 1/(1-0.9z^(-1)), IIR, de-emphasis filtering */
      tmp_out = tmp_out + st->preemph * st->memE[0];
	/* this is an arbitrary test for saturation in the mic signal */
      if (in[i] <= -32000 || in[i] >= 32000) {
    83f45a80:	6c21                	lui	s8,0x8
    83f45a82:	6bc1                	lui	s7,0x10
         if (st->saturated == 0)
            st->saturated = 1;
      }
      out[i] = (short)WORD2INT(tmp_out);  /* the output data is processed after windowing and OLA cuz e(n) */
    83f45a84:	6ca1                	lui	s9,0x8
    83f45a86:	6aa2                	ld	s5,8(sp)
    83f45a88:	8b4e                	mv	s6,s3
   for (i=0;i<st->frame_size;i++) {
    83f45a8a:	4901                	li	s2,0
    83f45a8c:	0000d797          	auipc	a5,0xd
    83f45a90:	8047ac07          	flw	fs8,-2044(a5) # 83f52290 <__func__.1+0x98>
      if (in[i] <= -32000 || in[i] >= 32000) {
    83f45a94:	cffc0c1b          	addiw	s8,s8,-769
    83f45a98:	9feb8b93          	addi	s7,s7,-1538 # f9fe <_EL1_STACK_SIZE+0xf1fe>
            st->saturated = 1;
    83f45a9c:	4d05                	li	s10,1
      out[i] = (short)WORD2INT(tmp_out);  /* the output data is processed after windowing and OLA cuz e(n) */
    83f45a9e:	0000c797          	auipc	a5,0xc
    83f45aa2:	7f67ac87          	flw	fs9,2038(a5) # 83f52294 <__func__.1+0x9c>
    83f45aa6:	1cfd                	addi	s9,s9,-1
    83f45aa8:	0000c797          	auipc	a5,0xc
    83f45aac:	7f07bb87          	fld	fs7,2032(a5) # 83f52298 <__func__.1+0xa0>
    83f45ab0:	a829                	j	83f45aca <LP_AEC+0x550>
    83f45ab2:	00fa9023          	sh	a5,0(s5)
      st->memE[0] = tmp_out;  /* state out(n-1) */
    83f45ab6:	11043703          	ld	a4,272(s0)
   for (i=0;i<st->frame_size;i++) {
    83f45aba:	0009079b          	sext.w	a5,s2
    83f45abe:	0a89                	addi	s5,s5,2
      st->memE[0] = tmp_out;  /* state out(n-1) */
    83f45ac0:	00872027          	fsw	fs0,0(a4)
   for (i=0;i<st->frame_size;i++) {
    83f45ac4:	4010                	lw	a2,0(s0)
    83f45ac6:	08c7d763          	bge	a5,a2,83f45b54 <LP_AEC+0x5da>
      tmp_out = st->input[i] - st->e[i+st->frame_size];
    83f45aca:	6838                	ld	a4,80(s0)
    83f45acc:	7c1c                	ld	a5,56(s0)
    83f45ace:	00c9063b          	addw	a2,s2,a2
    83f45ad2:	00291693          	slli	a3,s2,0x2
    83f45ad6:	060a                	slli	a2,a2,0x2
    83f45ad8:	9736                	add	a4,a4,a3
    83f45ada:	97b2                	add	a5,a5,a2
    83f45adc:	00072407          	flw	fs0,0(a4)
    83f45ae0:	0007a787          	flw	fa5,0(a5)
      tmp_out = tmp_out + st->preemph * st->memE[0];
    83f45ae4:	11043703          	ld	a4,272(s0)
      if (in[i] <= -32000 || in[i] >= 32000) {
    83f45ae8:	000b5783          	lhu	a5,0(s6)
      tmp_out = st->input[i] - st->e[i+st->frame_size];
    83f45aec:	08f477d3          	fsub.s	fa5,fs0,fa5
      tmp_out = tmp_out + st->preemph * st->memE[0];
    83f45af0:	00072707          	flw	fa4,0(a4)
    83f45af4:	11842407          	flw	fs0,280(s0)
      if (in[i] <= -32000 || in[i] >= 32000) {
    83f45af8:	018787bb          	addw	a5,a5,s8
    83f45afc:	17c2                	slli	a5,a5,0x30
    83f45afe:	93c1                	srli	a5,a5,0x30
      tmp_out = tmp_out + st->preemph * st->memE[0];
    83f45b00:	78e47443          	fmadd.s	fs0,fs0,fa4,fa5
   for (i=0;i<st->frame_size;i++) {
    83f45b04:	0905                	addi	s2,s2,1
      if (in[i] <= -32000 || in[i] >= 32000) {
    83f45b06:	00fbf663          	bgeu	s7,a5,83f45b12 <LP_AEC+0x598>
         if (st->saturated == 0)
    83f45b0a:	485c                	lw	a5,20(s0)
    83f45b0c:	e399                	bnez	a5,83f45b12 <LP_AEC+0x598>
            st->saturated = 1;
    83f45b0e:	01a42a23          	sw	s10,20(s0)
      out[i] = (short)WORD2INT(tmp_out);  /* the output data is processed after windowing and OLA cuz e(n) */
    83f45b12:	a1841753          	flt.s	a4,fs0,fs8
    83f45b16:	77e1                	lui	a5,0xffff8
   for (i=0;i<st->frame_size;i++) {
    83f45b18:	0b09                	addi	s6,s6,2
      out[i] = (short)WORD2INT(tmp_out);  /* the output data is processed after windowing and OLA cuz e(n) */
    83f45b1a:	ff41                	bnez	a4,83f45ab2 <LP_AEC+0x538>
    83f45b1c:	a08c9753          	flt.s	a4,fs9,fs0
    83f45b20:	87e6                	mv	a5,s9
    83f45b22:	fb41                	bnez	a4,83f45ab2 <LP_AEC+0x538>
    83f45b24:	42040553          	fcvt.d.s	fa0,fs0
   for (i=0;i<st->frame_size;i++) {
    83f45b28:	0a89                	addi	s5,s5,2
      out[i] = (short)WORD2INT(tmp_out);  /* the output data is processed after windowing and OLA cuz e(n) */
    83f45b2a:	03757553          	fadd.d	fa0,fa0,fs7
    83f45b2e:	e35fa0ef          	jal	ra,83f40962 <floor>
    83f45b32:	c20517d3          	fcvt.w.d	a5,fa0,rtz
    83f45b36:	0107979b          	slliw	a5,a5,0x10
    83f45b3a:	4107d79b          	sraiw	a5,a5,0x10
    83f45b3e:	fefa9f23          	sh	a5,-2(s5)
      st->memE[0] = tmp_out;  /* state out(n-1) */
    83f45b42:	11043703          	ld	a4,272(s0)
   for (i=0;i<st->frame_size;i++) {
    83f45b46:	0009079b          	sext.w	a5,s2
      st->memE[0] = tmp_out;  /* state out(n-1) */
    83f45b4a:	00872027          	fsw	fs0,0(a4)
   for (i=0;i<st->frame_size;i++) {
    83f45b4e:	4010                	lw	a2,0(s0)
    83f45b50:	f6c7cde3          	blt	a5,a2,83f45aca <LP_AEC+0x550>
   }

   /* Compute error signal */
   for (i=0;i<st->frame_size;i++) {
    83f45b54:	02c05963          	blez	a2,83f45b86 <LP_AEC+0x60c>
    83f45b58:	4781                	li	a5,0
      st->e[i+st->frame_size] = st->e[i];
    83f45b5a:	7c18                	ld	a4,56(s0)
    83f45b5c:	00279693          	slli	a3,a5,0x2
    83f45b60:	9e3d                	addw	a2,a2,a5
    83f45b62:	00d705b3          	add	a1,a4,a3
    83f45b66:	0005a787          	flw	fa5,0(a1)
    83f45b6a:	060a                	slli	a2,a2,0x2
    83f45b6c:	9732                	add	a4,a4,a2
    83f45b6e:	00f72027          	fsw	fa5,0(a4)
      st->e[i] = 0;
    83f45b72:	7c18                	ld	a4,56(s0)
   for (i=0;i<st->frame_size;i++) {
    83f45b74:	0785                	addi	a5,a5,1
    83f45b76:	0007859b          	sext.w	a1,a5
      st->e[i] = 0;
    83f45b7a:	9736                	add	a4,a4,a3
    83f45b7c:	00072023          	sw	zero,0(a4)
   for (i=0;i<st->frame_size;i++) {
    83f45b80:	4010                	lw	a2,0(s0)
    83f45b82:	fcc5cce3          	blt	a1,a2,83f45b5a <LP_AEC+0x5e0>
   }

   /* Compute a bunch of correlations */
   Sey += inner_prod(st->e+st->frame_size, st->y+st->frame_size, st->frame_size);  /* the covariance of e(n) and y(n) */
    83f45b86:	6c2c                	ld	a1,88(s0)
    83f45b88:	7c08                	ld	a0,56(s0)
    83f45b8a:	00261793          	slli	a5,a2,0x2
    83f45b8e:	95be                	add	a1,a1,a5
    83f45b90:	953e                	add	a0,a0,a5
    83f45b92:	738000ef          	jal	ra,83f462ca <inner_prod>
   Syy += inner_prod(st->y+st->frame_size, st->y+st->frame_size, st->frame_size);  /* the variance of y(n) */
    83f45b96:	4010                	lw	a2,0(s0)
    83f45b98:	6c2c                	ld	a1,88(s0)
   Sey += inner_prod(st->e+st->frame_size, st->y+st->frame_size, st->frame_size);  /* the covariance of e(n) and y(n) */
    83f45b9a:	f0000bd3          	fmv.w.x	fs7,zero
   Syy += inner_prod(st->y+st->frame_size, st->y+st->frame_size, st->frame_size);  /* the variance of y(n) */
    83f45b9e:	00261793          	slli	a5,a2,0x2
    83f45ba2:	95be                	add	a1,a1,a5
    83f45ba4:	852e                	mv	a0,a1
   Sey += inner_prod(st->e+st->frame_size, st->y+st->frame_size, st->frame_size);  /* the covariance of e(n) and y(n) */
    83f45ba6:	01757453          	fadd.s	fs0,fa0,fs7
   Syy += inner_prod(st->y+st->frame_size, st->y+st->frame_size, st->frame_size);  /* the variance of y(n) */
    83f45baa:	720000ef          	jal	ra,83f462ca <inner_prod>
   Sdd += inner_prod(st->input, st->input, st->frame_size);  /* the variance of d(n) */
    83f45bae:	682c                	ld	a1,80(s0)
    83f45bb0:	4010                	lw	a2,0(s0)
   Syy += inner_prod(st->y+st->frame_size, st->y+st->frame_size, st->frame_size);  /* the variance of y(n) */
    83f45bb2:	01757bd3          	fadd.s	fs7,fa0,fs7
   Sdd += inner_prod(st->input, st->input, st->frame_size);  /* the variance of d(n) */
    83f45bb6:	852e                	mv	a0,a1
    83f45bb8:	712000ef          	jal	ra,83f462ca <inner_prod>

   speech_fft(st->fft_table, st->e, st->E);
    83f45bbc:	7830                	ld	a2,112(s0)
    83f45bbe:	7c0c                	ld	a1,56(s0)
    83f45bc0:	7c68                	ld	a0,248(s0)
   Sdd += inner_prod(st->input, st->input, st->frame_size);  /* the variance of d(n) */
    83f45bc2:	20a50c53          	fmv.s	fs8,fa0
   speech_fft(st->fft_table, st->e, st->E);
    83f45bc6:	4d6030ef          	jal	ra,83f4909c <speech_fft>
   for (i=0;i<st->frame_size;i++)
    83f45bca:	4018                	lw	a4,0(s0)
    83f45bcc:	4781                	li	a5,0
    83f45bce:	00e05e63          	blez	a4,83f45bea <LP_AEC+0x670>
      st->y[i] = 0;
    83f45bd2:	6c38                	ld	a4,88(s0)
    83f45bd4:	00279693          	slli	a3,a5,0x2
   for (i=0;i<st->frame_size;i++)
    83f45bd8:	0785                	addi	a5,a5,1
      st->y[i] = 0;
    83f45bda:	9736                	add	a4,a4,a3
    83f45bdc:	00072023          	sw	zero,0(a4)
   for (i=0;i<st->frame_size;i++)
    83f45be0:	4014                	lw	a3,0(s0)
    83f45be2:	0007871b          	sext.w	a4,a5
    83f45be6:	fed746e3          	blt	a4,a3,83f45bd2 <LP_AEC+0x658>
   speech_fft(st->fft_table, st->y, st->Y);
    83f45bea:	6c2c                	ld	a1,88(s0)
    83f45bec:	7c68                	ld	a0,248(s0)
    83f45bee:	7430                	ld	a2,104(s0)
    83f45bf0:	4ac030ef          	jal	ra,83f4909c <speech_fft>

   accum_power_spectrum(st->E, st->Rf, N);  /* Rf(k) = the power spectrum of E(k), error power in each frequency bin (N/2+1) */
    83f45bf4:	7c4c                	ld	a1,184(s0)
    83f45bf6:	7828                	ld	a0,112(s0)
    83f45bf8:	8626                	mv	a2,s1
    83f45bfa:	794000ef          	jal	ra,83f4638e <accum_power_spectrum>
   accum_power_spectrum(st->Y, st->Yf, N);  /* Yf(k) = the power spectrum of Y(k) , estimated echo power in each frequency bin (N/2+1) */
    83f45bfe:	606c                	ld	a1,192(s0)
    83f45c00:	7428                	ld	a0,104(s0)
    83f45c02:	8626                	mv	a2,s1
    83f45c04:	78a000ef          	jal	ra,83f4638e <accum_power_spectrum>


   /* Sanity check */
   if (!(Syy>=0 && Sxx>=0 && See >= 0)) {  /* things have gone really bad */
    83f45c08:	f00007d3          	fmv.w.x	fa5,zero
    83f45c0c:	a17787d3          	fle.s	a5,fa5,fs7
    83f45c10:	cfcd                	beqz	a5,83f45cca <LP_AEC+0x750>
   Sxx += inner_prod(st->x+st->frame_size, st->x+st->frame_size, st->frame_size);  /* the variance of x(n) */
    83f45c12:	00fa7a53          	fadd.s	fs4,fs4,fa5
   if (!(Syy>=0 && Sxx>=0 && See >= 0)) {  /* things have gone really bad */
    83f45c16:	a14787d3          	fle.s	a5,fa5,fs4
    83f45c1a:	cbc5                	beqz	a5,83f45cca <LP_AEC+0x750>
    83f45c1c:	a16787d3          	fle.s	a5,fa5,fs6
    83f45c20:	c7cd                	beqz	a5,83f45cca <LP_AEC+0x750>
      st->screwed_up += 50;
      for (i=0;i<st->frame_size;i++)
         out[i] = 0;
   } else if (Sff > (Sdd + (float)(N * 10000))) {  /* if foreground error signal is a lot greater than mic in */
    83f45c22:	6789                	lui	a5,0x2
    83f45c24:	7107879b          	addiw	a5,a5,1808
    83f45c28:	02f487bb          	mulw	a5,s1,a5
   Sdd += inner_prod(st->input, st->input, st->frame_size);  /* the variance of d(n) */
    83f45c2c:	00fc77d3          	fadd.s	fa5,fs8,fa5
   } else if (Sff > (Sdd + (float)(N * 10000))) {  /* if foreground error signal is a lot greater than mic in */
    83f45c30:	d007f753          	fcvt.s.w	fa4,a5
    83f45c34:	00f777d3          	fadd.s	fa5,fa4,fa5
    83f45c38:	a13797d3          	flt.s	a5,fa5,fs3
    83f45c3c:	5c078f63          	beqz	a5,83f4621a <LP_AEC+0xca0>
      st->screwed_up++;
    83f45c40:	4c18                	lw	a4,24(s0)
    83f45c42:	0017079b          	addiw	a5,a4,1
    83f45c46:	cc1c                	sw	a5,24(s0)
   } else {  /* everything is fine */
      st->screwed_up = 0;
   }

   if (st->screwed_up>=50) {
    83f45c48:	03100713          	li	a4,49
    83f45c4c:	0af75463          	bge	a4,a5,83f45cf4 <LP_AEC+0x77a>
      //speech_warning("AEC started behaving unreasonable and need to reset");
      echo_state_reset(st);
    83f45c50:	8522                	mv	a0,s0
      for (i=0;i<N;i++)
         st->last_y[i] = st->x[i];
   }
   #endif

}
    83f45c52:	640e                	ld	s0,192(sp)
    83f45c54:	60ae                	ld	ra,200(sp)
    83f45c56:	74ea                	ld	s1,184(sp)
    83f45c58:	794a                	ld	s2,176(sp)
    83f45c5a:	79aa                	ld	s3,168(sp)
    83f45c5c:	7a0a                	ld	s4,160(sp)
    83f45c5e:	6aea                	ld	s5,152(sp)
    83f45c60:	6b4a                	ld	s6,144(sp)
    83f45c62:	6baa                	ld	s7,136(sp)
    83f45c64:	6c0a                	ld	s8,128(sp)
    83f45c66:	7ce6                	ld	s9,120(sp)
    83f45c68:	7d46                	ld	s10,112(sp)
    83f45c6a:	7da6                	ld	s11,104(sp)
    83f45c6c:	2466                	fld	fs0,88(sp)
    83f45c6e:	24c6                	fld	fs1,80(sp)
    83f45c70:	2926                	fld	fs2,72(sp)
    83f45c72:	2986                	fld	fs3,64(sp)
    83f45c74:	3a62                	fld	fs4,56(sp)
    83f45c76:	3ac2                	fld	fs5,48(sp)
    83f45c78:	3b22                	fld	fs6,40(sp)
    83f45c7a:	3b82                	fld	fs7,32(sp)
    83f45c7c:	2c62                	fld	fs8,24(sp)
    83f45c7e:	2cc2                	fld	fs9,16(sp)
    83f45c80:	6169                	addi	sp,sp,208
      echo_state_reset(st);
    83f45c82:	f14ff06f          	j	83f45396 <echo_state_reset>
         speech_ifft(st->fft_table, &st->W[j*N], st->wtmp);
    83f45c86:	604c                	ld	a1,128(s0)
    83f45c88:	7850                	ld	a2,176(s0)
    83f45c8a:	7c68                	ld	a0,248(s0)
    83f45c8c:	002c1d13          	slli	s10,s8,0x2
    83f45c90:	95ea                	add	a1,a1,s10
    83f45c92:	476030ef          	jal	ra,83f49108 <speech_ifft>
         for (i=st->frame_size;i<N;i++) {
    83f45c96:	401c                	lw	a5,0(s0)
    83f45c98:	0297d263          	bge	a5,s1,83f45cbc <LP_AEC+0x742>
    83f45c9c:	40fb86bb          	subw	a3,s7,a5
    83f45ca0:	1682                	slli	a3,a3,0x20
    83f45ca2:	00178713          	addi	a4,a5,1 # 2001 <_EL1_STACK_SIZE+0x1801>
    83f45ca6:	9281                	srli	a3,a3,0x20
    83f45ca8:	96ba                	add	a3,a3,a4
    83f45caa:	078a                	slli	a5,a5,0x2
    83f45cac:	068a                	slli	a3,a3,0x2
            st->wtmp[i] = 0;  /* set 0 to the last part */
    83f45cae:	7858                	ld	a4,176(s0)
    83f45cb0:	973e                	add	a4,a4,a5
    83f45cb2:	00072023          	sw	zero,0(a4)
         for (i=st->frame_size;i<N;i++) {
    83f45cb6:	0791                	addi	a5,a5,4
    83f45cb8:	fef69be3          	bne	a3,a5,83f45cae <LP_AEC+0x734>
         speech_fft(st->fft_table, st->wtmp, &st->W[j*N]);
    83f45cbc:	6050                	ld	a2,128(s0)
    83f45cbe:	784c                	ld	a1,176(s0)
    83f45cc0:	7c68                	ld	a0,248(s0)
    83f45cc2:	966a                	add	a2,a2,s10
    83f45cc4:	3d8030ef          	jal	ra,83f4909c <speech_fft>
    83f45cc8:	b6bd                	j	83f45836 <LP_AEC+0x2bc>
      st->screwed_up += 50;
    83f45cca:	4c1c                	lw	a5,24(s0)
      for (i=0;i<st->frame_size;i++)
    83f45ccc:	4018                	lw	a4,0(s0)
      st->screwed_up += 50;
    83f45cce:	0327879b          	addiw	a5,a5,50
    83f45cd2:	cc1c                	sw	a5,24(s0)
      for (i=0;i<st->frame_size;i++)
    83f45cd4:	00e05c63          	blez	a4,83f45cec <LP_AEC+0x772>
    83f45cd8:	6722                	ld	a4,8(sp)
    83f45cda:	4781                	li	a5,0
         out[i] = 0;
    83f45cdc:	00071023          	sh	zero,0(a4)
      for (i=0;i<st->frame_size;i++)
    83f45ce0:	4014                	lw	a3,0(s0)
    83f45ce2:	2785                	addiw	a5,a5,1
    83f45ce4:	0709                	addi	a4,a4,2
    83f45ce6:	fed7cbe3          	blt	a5,a3,83f45cdc <LP_AEC+0x762>
   if (st->screwed_up>=50) {
    83f45cea:	4c1c                	lw	a5,24(s0)
    83f45cec:	03100713          	li	a4,49
    83f45cf0:	f6f740e3          	blt	a4,a5,83f45c50 <LP_AEC+0x6d6>
   See = MAX(See, (float)(N * 100));  /* add a small noise floor to make sure not to have problems when dividing */
    83f45cf4:	06400793          	li	a5,100
    83f45cf8:	029787bb          	mulw	a5,a5,s1
    83f45cfc:	d007f7d3          	fcvt.s.w	fa5,a5
    83f45d00:	a0fb17d3          	flt.s	a5,fs6,fa5
    83f45d04:	32079663          	bnez	a5,83f46030 <LP_AEC+0xab6>
   Sxx += inner_prod(st->x+st->frame_size, st->x+st->frame_size, st->frame_size);  /* far-end (TD) current frame power sum */
    83f45d08:	4010                	lw	a2,0(s0)
    83f45d0a:	602c                	ld	a1,64(s0)
    83f45d0c:	f00009d3          	fmv.w.x	fs3,zero
    83f45d10:	00261793          	slli	a5,a2,0x2
    83f45d14:	95be                	add	a1,a1,a5
    83f45d16:	852e                	mv	a0,a1
    83f45d18:	5b2000ef          	jal	ra,83f462ca <inner_prod>
   accum_power_spectrum(st->X, st->Xf, N);  /* Xf(k) = far-end(FD) power in each frequency bin (N/2+1) */
    83f45d1c:	646c                	ld	a1,200(s0)
    83f45d1e:	6428                	ld	a0,72(s0)
    83f45d20:	8626                	mv	a2,s1
   Sxx += inner_prod(st->x+st->frame_size, st->x+st->frame_size, st->frame_size);  /* far-end (TD) current frame power sum */
    83f45d22:	013579d3          	fadd.s	fs3,fa0,fs3
   accum_power_spectrum(st->X, st->Xf, N);  /* Xf(k) = far-end(FD) power in each frequency bin (N/2+1) */
    83f45d26:	668000ef          	jal	ra,83f4638e <accum_power_spectrum>
   for (j=0;j<=st->frame_size;j++)
    83f45d2a:	401c                	lw	a5,0(s0)
    83f45d2c:	4e07ca63          	bltz	a5,83f46220 <LP_AEC+0xca6>
   ss = st->ss / M;
    83f45d30:	18997953          	fdiv.s	fs2,fs2,fs1
   ss_1 = 1 - ss;
    83f45d34:	0000c797          	auipc	a5,0xc
    83f45d38:	51c7aa07          	flw	fs4,1308(a5) # 83f52250 <__func__.1+0x58>
    83f45d3c:	4701                	li	a4,0
    83f45d3e:	092a76d3          	fsub.s	fa3,fs4,fs2
      st->power[j] = ss_1 * st->power[j] + 1 + ss * st->Xf[j];  /* smooth far end power estimate over time */
    83f45d42:	705c                	ld	a5,160(s0)
    83f45d44:	00271613          	slli	a2,a4,0x2
    83f45d48:	6474                	ld	a3,200(s0)
    83f45d4a:	97b2                	add	a5,a5,a2
    83f45d4c:	0007a707          	flw	fa4,0(a5)
    83f45d50:	96b2                	add	a3,a3,a2
    83f45d52:	0006a787          	flw	fa5,0(a3)
    83f45d56:	a0d77743          	fmadd.s	fa4,fa4,fa3,fs4
   for (j=0;j<=st->frame_size;j++)
    83f45d5a:	0705                	addi	a4,a4,1
    83f45d5c:	0007069b          	sext.w	a3,a4
      st->power[j] = ss_1 * st->power[j] + 1 + ss * st->Xf[j];  /* smooth far end power estimate over time */
    83f45d60:	7127f7c3          	fmadd.s	fa5,fa5,fs2,fa4
    83f45d64:	00f7a027          	fsw	fa5,0(a5)
   for (j=0;j<=st->frame_size;j++)
    83f45d68:	401c                	lw	a5,0(s0)
    83f45d6a:	fcd7dce3          	bge	a5,a3,83f45d42 <LP_AEC+0x7c8>
   for (j=st->frame_size;j>=0;j--) {
    83f45d6e:	4a07cd63          	bltz	a5,83f46228 <LP_AEC+0xcae>
   float Pey = FLOAT_ONE, Pyy = FLOAT_ONE;
    83f45d72:	214a05d3          	fmv.s	fa1,fs4
    83f45d76:	214a0953          	fmv.s	fs2,fs4
    83f45d7a:	078a                	slli	a5,a5,0x2
    83f45d7c:	4601                	li	a2,0
      Eh = st->Rf[j] - st->Eh[j];
    83f45d7e:	7c54                	ld	a3,184(s0)
      st->Eh[j] = (1-st->spec_average)*st->Eh[j] + st->spec_average*st->Rf[j];
    83f45d80:	02042707          	flw	fa4,32(s0)
      Eh = st->Rf[j] - st->Eh[j];
    83f45d84:	6878                	ld	a4,208(s0)
    83f45d86:	96be                	add	a3,a3,a5
    83f45d88:	0006a787          	flw	fa5,0(a3)
      st->Eh[j] = (1-st->spec_average)*st->Eh[j] + st->spec_average*st->Rf[j];
    83f45d8c:	08ea7553          	fsub.s	fa0,fs4,fa4
      Eh = st->Rf[j] - st->Eh[j];
    83f45d90:	973e                	add	a4,a4,a5
      st->Eh[j] = (1-st->spec_average)*st->Eh[j] + st->spec_average*st->Rf[j];
    83f45d92:	10e7f653          	fmul.s	fa2,fa5,fa4
      Eh = st->Rf[j] - st->Eh[j];
    83f45d96:	00072687          	flw	fa3,0(a4)
      Yh = st->Yf[j] - st->Yh[j];
    83f45d9a:	606c                	ld	a1,192(s0)
    83f45d9c:	6c74                	ld	a3,216(s0)
      Eh = st->Rf[j] - st->Eh[j];
    83f45d9e:	08d7f753          	fsub.s	fa4,fa5,fa3
      st->Eh[j] = (1-st->spec_average)*st->Eh[j] + st->spec_average*st->Rf[j];
    83f45da2:	60a6f6c3          	fmadd.s	fa3,fa3,fa0,fa2
      Yh = st->Yf[j] - st->Yh[j];
    83f45da6:	96be                	add	a3,a3,a5
    83f45da8:	95be                	add	a1,a1,a5
    83f45daa:	0006a007          	flw	ft0,0(a3)
    83f45dae:	0005a787          	flw	fa5,0(a1)
      st->Eh[j] = (1-st->spec_average)*st->Eh[j] + st->spec_average*st->Rf[j];
    83f45db2:	00d72027          	fsw	fa3,0(a4)
      st->Yh[j] = (1-st->spec_average)*st->Yh[j] + st->spec_average*st->Yf[j];
    83f45db6:	6074                	ld	a3,192(s0)
    83f45db8:	02042687          	flw	fa3,32(s0)
    83f45dbc:	6c78                	ld	a4,216(s0)
    83f45dbe:	96be                	add	a3,a3,a5
    83f45dc0:	0006a507          	flw	fa0,0(a3)
    83f45dc4:	08da7653          	fsub.s	fa2,fs4,fa3
    83f45dc8:	973e                	add	a4,a4,a5
    83f45dca:	10a6f6d3          	fmul.s	fa3,fa3,fa0
    83f45dce:	00072507          	flw	fa0,0(a4)
      Yh = st->Yf[j] - st->Yh[j];
    83f45dd2:	0807f7d3          	fsub.s	fa5,fa5,ft0
      Pey = Pey + Eh * Yh;
    83f45dd6:	86be                	mv	a3,a5
   for (j=st->frame_size;j>=0;j--) {
    83f45dd8:	17f1                	addi	a5,a5,-4
      st->Yh[j] = (1-st->spec_average)*st->Yh[j] + st->spec_average*st->Yf[j];
    83f45dda:	68a676c3          	fmadd.s	fa3,fa2,fa0,fa3
      Pey = Pey + Eh * Yh;
    83f45dde:	90f77943          	fmadd.s	fs2,fa4,fa5,fs2
      Pyy = Pyy + Yh * Yh;
    83f45de2:	58f7f5c3          	fmadd.s	fa1,fa5,fa5,fa1
      st->Yh[j] = (1-st->spec_average)*st->Yh[j] + st->spec_average*st->Yf[j];
    83f45de6:	00d72027          	fsw	fa3,0(a4)
   for (j=st->frame_size;j>=0;j--) {
    83f45dea:	f8d61ae3          	bne	a2,a3,83f45d7e <LP_AEC+0x804>
   Pyy = (float)math_sqrt(Pyy);  /* the standard deviation of Y(k) */
    83f45dee:	42058553          	fcvt.d.s	fa0,fa1
    83f45df2:	800fb0ef          	jal	ra,83f40df2 <sqrt>
   tmp32 = st->beta0 * Syy;
    83f45df6:	02442707          	flw	fa4,36(s0)
   if (tmp32 > (st->beta_max * See))
    83f45dfa:	02842687          	flw	fa3,40(s0)
   Pyy = (float)math_sqrt(Pyy);  /* the standard deviation of Y(k) */
    83f45dfe:	401575d3          	fcvt.s.d	fa1,fa0
   tmp32 = st->beta0 * Syy;
    83f45e02:	10ebf753          	fmul.s	fa4,fs7,fa4
   if (tmp32 > (st->beta_max * See))
    83f45e06:	10db76d3          	fmul.s	fa3,fs6,fa3
   Pey = Pey / Pyy;  /* the correlation coefficient of E(k) and Y(k) */
    83f45e0a:	18b977d3          	fdiv.s	fa5,fs2,fa1
   if (tmp32 > (st->beta_max * See))
    83f45e0e:	a0e697d3          	flt.s	a5,fa3,fa4
    83f45e12:	c399                	beqz	a5,83f45e18 <LP_AEC+0x89e>
      tmp32 = st->beta_max * See;
    83f45e14:	20d68753          	fmv.s	fa4,fa3
   st->Pyy = alpha_1 * st->Pyy + alpha * Pyy;
    83f45e18:	0e442607          	flw	fa2,228(s0)
   st->Pey = alpha_1 * st->Pey + alpha * Pey;
    83f45e1c:	0e042687          	flw	fa3,224(s0)
   alpha = tmp32 / See;
    83f45e20:	19677753          	fdiv.s	fa4,fa4,fs6
   alpha_1 = FLOAT_ONE - alpha;
    83f45e24:	08ea7553          	fsub.s	fa0,fs4,fa4
   st->Pyy = alpha_1 * st->Pyy + alpha * Pyy;
    83f45e28:	10e5f5d3          	fmul.s	fa1,fa1,fa4
   st->Pey = alpha_1 * st->Pey + alpha * Pey;
    83f45e2c:	10e7f7d3          	fmul.s	fa5,fa5,fa4
   st->Pyy = alpha_1 * st->Pyy + alpha * Pyy;
    83f45e30:	58a67643          	fmadd.s	fa2,fa2,fa0,fa1
   st->Pey = alpha_1 * st->Pey + alpha * Pey;
    83f45e34:	78a6f7c3          	fmadd.s	fa5,fa3,fa0,fa5
   if (st->Pyy < FLOAT_ONE)
    83f45e38:	a14617d3          	flt.s	a5,fa2,fs4
   st->Pey = alpha_1 * st->Pey + alpha * Pey;
    83f45e3c:	0ef42027          	fsw	fa5,224(s0)
   if (st->Pyy < FLOAT_ONE)
    83f45e40:	1e079b63          	bnez	a5,83f46036 <LP_AEC+0xabc>
   st->Pyy = alpha_1 * st->Pyy + alpha * Pyy;
    83f45e44:	0ec42227          	fsw	fa2,228(s0)
   if (st->Pey < st->aec_min_leak * st->Pyy)
    83f45e48:	12842687          	flw	fa3,296(s0)
    83f45e4c:	10d676d3          	fmul.s	fa3,fa2,fa3
    83f45e50:	a0d797d3          	flt.s	a5,fa5,fa3
    83f45e54:	c789                	beqz	a5,83f45e5e <LP_AEC+0x8e4>
      st->Pey = st->aec_min_leak * st->Pyy;
    83f45e56:	20d687d3          	fmv.s	fa5,fa3
    83f45e5a:	0ed42027          	fsw	fa3,224(s0)
   if (st->Pey > st->Pyy)
    83f45e5e:	a0f617d3          	flt.s	a5,fa2,fa5
    83f45e62:	c789                	beqz	a5,83f45e6c <LP_AEC+0x8f2>
      st->Pey = st->Pyy;
    83f45e64:	20c607d3          	fmv.s	fa5,fa2
    83f45e68:	0ec42027          	fsw	fa2,224(s0)
   st->leak_estimate = st->Pey / st->Pyy;
    83f45e6c:	18c7f653          	fdiv.s	fa2,fa5,fa2
   if (st->leak_estimate > 16383)
    83f45e70:	0000c797          	auipc	a5,0xc
    83f45e74:	45c7a787          	flw	fa5,1116(a5) # 83f522cc <__func__.1+0xd4>
    83f45e78:	a0c797d3          	flt.s	a5,fa5,fa2
    83f45e7c:	26079c63          	bnez	a5,83f460f4 <LP_AEC+0xb7a>
   RER = (float)((.0001*Sxx + 3*st->leak_estimate*Syy) / See);
    83f45e80:	0000c797          	auipc	a5,0xc
    83f45e84:	4507a687          	flw	fa3,1104(a5) # 83f522d0 <__func__.1+0xd8>
    83f45e88:	10d676d3          	fmul.s	fa3,fa2,fa3
   st->leak_estimate = st->Pey / st->Pyy;
    83f45e8c:	02c42827          	fsw	fa2,48(s0)
   RER = (float)((.0001*Sxx + 3*st->leak_estimate*Syy) / See);
    83f45e90:	10dbf6d3          	fmul.s	fa3,fs7,fa3
    83f45e94:	420987d3          	fcvt.d.s	fa5,fs3
    83f45e98:	0000c797          	auipc	a5,0xc
    83f45e9c:	4807b507          	fld	fa0,1152(a5) # 83f52318 <__func__.1+0x120>
    83f45ea0:	420b05d3          	fcvt.d.s	fa1,fs6
   if (RER < Sey*Sey/(1+See*Syy))
    83f45ea4:	10847453          	fmul.s	fs0,fs0,fs0
   RER = (float)((.0001*Sxx + 3*st->leak_estimate*Syy) / See);
    83f45ea8:	420686d3          	fcvt.d.s	fa3,fa3
   if (RER < Sey*Sey/(1+See*Syy))
    83f45eac:	a17b7743          	fmadd.s	fa4,fs6,fs7,fs4
   RER = (float)((.0001*Sxx + 3*st->leak_estimate*Syy) / See);
    83f45eb0:	6aa7f7c3          	fmadd.d	fa5,fa5,fa0,fa3
   if (RER < Sey*Sey/(1+See*Syy))
    83f45eb4:	18e47753          	fdiv.s	fa4,fs0,fa4
   RER = (float)((.0001*Sxx + 3*st->leak_estimate*Syy) / See);
    83f45eb8:	1ab7f7d3          	fdiv.d	fa5,fa5,fa1
    83f45ebc:	4017f7d3          	fcvt.s.d	fa5,fa5
   if (RER < Sey*Sey/(1+See*Syy))
    83f45ec0:	a0e797d3          	flt.s	a5,fa5,fa4
    83f45ec4:	c399                	beqz	a5,83f45eca <LP_AEC+0x950>
      RER = Sey*Sey/(1+See*Syy);
    83f45ec6:	20e707d3          	fmv.s	fa5,fa4
   if (RER > .5)
    83f45eca:	0000c797          	auipc	a5,0xc
    83f45ece:	3a67a507          	flw	fa0,934(a5) # 83f52270 <__func__.1+0x78>
    83f45ed2:	a0f517d3          	flt.s	a5,fa0,fa5
    83f45ed6:	1e079263          	bnez	a5,83f460ba <LP_AEC+0xb40>
   if (st->RER*32767 > 1000)
    83f45eda:	0000c797          	auipc	a5,0xc
    83f45ede:	3927a707          	flw	fa4,914(a5) # 83f5226c <__func__.1+0x74>
    83f45ee2:	10e7f753          	fmul.s	fa4,fa5,fa4
    83f45ee6:	0000c797          	auipc	a5,0xc
    83f45eea:	3ee7a687          	flw	fa3,1006(a5) # 83f522d4 <__func__.1+0xdc>
   st->RER = RER;
    83f45eee:	14f42227          	fsw	fa5,324(s0)
   if (st->RER*32767 > 1000)
    83f45ef2:	a0e697d3          	flt.s	a5,fa3,fa4
    83f45ef6:	1c079663          	bnez	a5,83f460c2 <LP_AEC+0xb48>
   if (!st->adapted && st->sum_adapt > M && st->leak_estimate*Syy > .03f*Syy) {
    83f45efa:	481c                	lw	a5,16(s0)
    83f45efc:	e78d                	bnez	a5,83f45f26 <LP_AEC+0x9ac>
    83f45efe:	02c42707          	flw	fa4,44(s0)
    83f45f02:	a0e497d3          	flt.s	a5,fs1,fa4
    83f45f06:	14078063          	beqz	a5,83f46046 <LP_AEC+0xacc>
    83f45f0a:	0000c797          	auipc	a5,0xc
    83f45f0e:	3ce7a687          	flw	fa3,974(a5) # 83f522d8 <__func__.1+0xe0>
    83f45f12:	10cbf053          	fmul.s	ft0,fs7,fa2
    83f45f16:	10dbfbd3          	fmul.s	fs7,fs7,fa3
    83f45f1a:	a00b97d3          	flt.s	a5,fs7,ft0
    83f45f1e:	12078463          	beqz	a5,83f46046 <LP_AEC+0xacc>
      st->adapted = 1;
    83f45f22:	4785                	li	a5,1
    83f45f24:	c81c                	sw	a5,16(s0)
      for (i=0;i<=st->frame_size;i++) {
    83f45f26:	401c                	lw	a5,0(s0)
    83f45f28:	1a07c363          	bltz	a5,83f460ce <LP_AEC+0xb54>
         r = .7f * r + .3f * RER * e;
    83f45f2c:	0000c797          	auipc	a5,0xc
    83f45f30:	3b07a587          	flw	fa1,944(a5) # 83f522dc <__func__.1+0xe4>
    83f45f34:	10b7f5d3          	fmul.s	fa1,fa5,fa1
    83f45f38:	4701                	li	a4,0
    83f45f3a:	0000c797          	auipc	a5,0xc
    83f45f3e:	34e7a007          	flw	ft0,846(a5) # 83f52288 <__func__.1+0x90>
    83f45f42:	a019                	j	83f45f48 <LP_AEC+0x9ce>
         r = st->leak_estimate * st->Yf[i];
    83f45f44:	03042607          	flw	fa2,48(s0)
         e = st->Rf[i] + 1;  /* the power spectrum of E(k) */
    83f45f48:	7c50                	ld	a2,184(s0)
    83f45f4a:	00271793          	slli	a5,a4,0x2
         r = st->leak_estimate * st->Yf[i];
    83f45f4e:	6074                	ld	a3,192(s0)
         e = st->Rf[i] + 1;  /* the power spectrum of E(k) */
    83f45f50:	963e                	add	a2,a2,a5
    83f45f52:	00062687          	flw	fa3,0(a2)
         r = st->leak_estimate * st->Yf[i];
    83f45f56:	96be                	add	a3,a3,a5
    83f45f58:	0006a787          	flw	fa5,0(a3)
         e = st->Rf[i] + 1;  /* the power spectrum of E(k) */
    83f45f5c:	0146f6d3          	fadd.s	fa3,fa3,fs4
      for (i=0;i<=st->frame_size;i++) {
    83f45f60:	0705                	addi	a4,a4,1
         r = st->leak_estimate * st->Yf[i];
    83f45f62:	10f677d3          	fmul.s	fa5,fa2,fa5
      for (i=0;i<=st->frame_size;i++) {
    83f45f66:	0007059b          	sext.w	a1,a4
         if (r>.5f*e)
    83f45f6a:	10a6f753          	fmul.s	fa4,fa3,fa0
         r = .7f * r + .3f * RER * e;
    83f45f6e:	10d5f653          	fmul.s	fa2,fa1,fa3
         if (r>.5f*e)
    83f45f72:	a0f716d3          	flt.s	a3,fa4,fa5
    83f45f76:	c299                	beqz	a3,83f45f7c <LP_AEC+0xa02>
            r = .5f*e;
    83f45f78:	20e707d3          	fmv.s	fa5,fa4
         st->power_1[i] = r / (e * (st->power[i] + 10));
    83f45f7c:	7050                	ld	a2,160(s0)
         r = .7f * r + .3f * RER * e;
    83f45f7e:	6007f7c3          	fmadd.s	fa5,fa5,ft0,fa2
         st->power_1[i] = r / (e * (st->power[i] + 10));
    83f45f82:	7454                	ld	a3,168(s0)
    83f45f84:	963e                	add	a2,a2,a5
    83f45f86:	00062707          	flw	fa4,0(a2)
    83f45f8a:	97b6                	add	a5,a5,a3
    83f45f8c:	01577753          	fadd.s	fa4,fa4,fs5
    83f45f90:	10d77753          	fmul.s	fa4,fa4,fa3
    83f45f94:	18e7f7d3          	fdiv.s	fa5,fa5,fa4
    83f45f98:	00f7a027          	fsw	fa5,0(a5)
      for (i=0;i<=st->frame_size;i++) {
    83f45f9c:	401c                	lw	a5,0(s0)
    83f45f9e:	fab7d3e3          	bge	a5,a1,83f45f44 <LP_AEC+0x9ca>
   for (i=0;i<st->frame_size;i++)
    83f45fa2:	4701                	li	a4,0
    83f45fa4:	12f05563          	blez	a5,83f460ce <LP_AEC+0xb54>
      st->last_y[i] = st->last_y[st->frame_size+i];
    83f45fa8:	7034                	ld	a3,96(s0)
    83f45faa:	9fb9                	addw	a5,a5,a4
    83f45fac:	078a                	slli	a5,a5,0x2
    83f45fae:	97b6                	add	a5,a5,a3
    83f45fb0:	0007a787          	flw	fa5,0(a5)
    83f45fb4:	00271793          	slli	a5,a4,0x2
    83f45fb8:	96be                	add	a3,a3,a5
    83f45fba:	00f6a027          	fsw	fa5,0(a3)
   for (i=0;i<st->frame_size;i++)
    83f45fbe:	401c                	lw	a5,0(s0)
    83f45fc0:	0705                	addi	a4,a4,1
    83f45fc2:	0007069b          	sext.w	a3,a4
    83f45fc6:	fef6c1e3          	blt	a3,a5,83f45fa8 <LP_AEC+0xa2e>
   if (st->adapted) {
    83f45fca:	4818                	lw	a4,16(s0)
    83f45fcc:	10070363          	beqz	a4,83f460d2 <LP_AEC+0xb58>
      for (i=0;i<st->frame_size;i++)
    83f45fd0:	02f05763          	blez	a5,83f45ffe <LP_AEC+0xa84>
    83f45fd4:	6a22                	ld	s4,8(sp)
    83f45fd6:	4701                	li	a4,0
         st->last_y[st->frame_size+i] = (float)(in[i]-out[i]);
    83f45fd8:	00099503          	lh	a0,0(s3)
    83f45fdc:	000a1683          	lh	a3,0(s4) # 8000 <_EL1_STACK_SIZE+0x7800>
    83f45fe0:	7030                	ld	a2,96(s0)
    83f45fe2:	9fb9                	addw	a5,a5,a4
    83f45fe4:	9d15                	subw	a0,a0,a3
    83f45fe6:	d00577d3          	fcvt.s.w	fa5,a0
    83f45fea:	078a                	slli	a5,a5,0x2
    83f45fec:	97b2                	add	a5,a5,a2
    83f45fee:	00f7a027          	fsw	fa5,0(a5)
      for (i=0;i<st->frame_size;i++)
    83f45ff2:	401c                	lw	a5,0(s0)
    83f45ff4:	2705                	addiw	a4,a4,1
    83f45ff6:	0989                	addi	s3,s3,2
    83f45ff8:	0a09                	addi	s4,s4,2
    83f45ffa:	fcf74fe3          	blt	a4,a5,83f45fd8 <LP_AEC+0xa5e>
}
    83f45ffe:	60ae                	ld	ra,200(sp)
    83f46000:	640e                	ld	s0,192(sp)
    83f46002:	74ea                	ld	s1,184(sp)
    83f46004:	794a                	ld	s2,176(sp)
    83f46006:	79aa                	ld	s3,168(sp)
    83f46008:	7a0a                	ld	s4,160(sp)
    83f4600a:	6aea                	ld	s5,152(sp)
    83f4600c:	6b4a                	ld	s6,144(sp)
    83f4600e:	6baa                	ld	s7,136(sp)
    83f46010:	6c0a                	ld	s8,128(sp)
    83f46012:	7ce6                	ld	s9,120(sp)
    83f46014:	7d46                	ld	s10,112(sp)
    83f46016:	7da6                	ld	s11,104(sp)
    83f46018:	2466                	fld	fs0,88(sp)
    83f4601a:	24c6                	fld	fs1,80(sp)
    83f4601c:	2926                	fld	fs2,72(sp)
    83f4601e:	2986                	fld	fs3,64(sp)
    83f46020:	3a62                	fld	fs4,56(sp)
    83f46022:	3ac2                	fld	fs5,48(sp)
    83f46024:	3b22                	fld	fs6,40(sp)
    83f46026:	3b82                	fld	fs7,32(sp)
    83f46028:	2c62                	fld	fs8,24(sp)
    83f4602a:	2cc2                	fld	fs9,16(sp)
    83f4602c:	6169                	addi	sp,sp,208
    83f4602e:	8082                	ret
   See = MAX(See, (float)(N * 100));  /* add a small noise floor to make sure not to have problems when dividing */
    83f46030:	20f78b53          	fmv.s	fs6,fa5
    83f46034:	b9d1                	j	83f45d08 <LP_AEC+0x78e>
      st->Pyy = FLOAT_ONE;
    83f46036:	214a0653          	fmv.s	fa2,fs4
    83f4603a:	0f442227          	fsw	fs4,228(s0)
    83f4603e:	b529                	j	83f45e48 <LP_AEC+0x8ce>
   else if ((st->Davg1 * ABS(st->Davg1)) > (st->aec_var1_update * st->Dvar1))
    83f46040:	20c61153          	fneg.s	ft2,fa2
    83f46044:	ba41                	j	83f459d4 <LP_AEC+0x45a>
      if (Sxx > (float)(N * 1000)) {  /* far-end exists a certain level of energy */
    83f46046:	3e800793          	li	a5,1000
    83f4604a:	029787bb          	mulw	a5,a5,s1
    83f4604e:	d007f7d3          	fcvt.s.w	fa5,a5
    83f46052:	a13797d3          	flt.s	a5,fa5,fs3
    83f46056:	e7e1                	bnez	a5,83f4611e <LP_AEC+0xba4>
      float adapt_rate = 0;
    83f46058:	f0000b53          	fmv.w.x	fs6,zero
      for (i=0;i<=st->frame_size;i++)
    83f4605c:	401c                	lw	a5,0(s0)
    83f4605e:	0207c963          	bltz	a5,83f46090 <LP_AEC+0xb16>
    83f46062:	4701                	li	a4,0
         st->power_1[i] = adapt_rate / (st->power[i] + 10);
    83f46064:	7054                	ld	a3,160(s0)
    83f46066:	00271613          	slli	a2,a4,0x2
    83f4606a:	745c                	ld	a5,168(s0)
    83f4606c:	96b2                	add	a3,a3,a2
    83f4606e:	0006a787          	flw	fa5,0(a3)
    83f46072:	97b2                	add	a5,a5,a2
      for (i=0;i<=st->frame_size;i++)
    83f46074:	0705                	addi	a4,a4,1
         st->power_1[i] = adapt_rate / (st->power[i] + 10);
    83f46076:	0157f7d3          	fadd.s	fa5,fa5,fs5
      for (i=0;i<=st->frame_size;i++)
    83f4607a:	0007069b          	sext.w	a3,a4
         st->power_1[i] = adapt_rate / (st->power[i] + 10);
    83f4607e:	18fb77d3          	fdiv.s	fa5,fs6,fa5
    83f46082:	00f7a027          	fsw	fa5,0(a5)
      for (i=0;i<=st->frame_size;i++)
    83f46086:	401c                	lw	a5,0(s0)
    83f46088:	fcd7dee3          	bge	a5,a3,83f46064 <LP_AEC+0xaea>
      st->sum_adapt = st->sum_adapt + adapt_rate;  /* the bigger the value, the bigger the echo */
    83f4608c:	02c42707          	flw	fa4,44(s0)
    83f46090:	00eb7b53          	fadd.s	fs6,fs6,fa4
    83f46094:	03642627          	fsw	fs6,44(s0)
    83f46098:	b729                	j	83f45fa2 <LP_AEC+0xa28>
      M = st->initial_filter_len;
    83f4609a:	15041903          	lh	s2,336(s0)
    83f4609e:	d36ff06f          	j	83f455d4 <LP_AEC+0x5a>
      st->saturated--;
    83f460a2:	37fd                	addiw	a5,a5,-1
    83f460a4:	00048c9b          	sext.w	s9,s1
    83f460a8:	c85c                	sw	a5,20(s0)
   for (j=0;j<M;j++) {
    83f460aa:	4c01                	li	s8,0
    83f460ac:	4b01                	li	s6,0
    83f460ae:	fffc8b9b          	addiw	s7,s9,-1
    83f460b2:	f7204963          	bgtz	s2,83f45824 <LP_AEC+0x2aa>
    83f460b6:	f8aff06f          	j	83f45840 <LP_AEC+0x2c6>
      RER = .5;
    83f460ba:	20a507d3          	fmv.s	fa5,fa0
   st->RER = RER;
    83f460be:	14a42227          	fsw	fa0,324(s0)
      st->echo_cnt++;
    83f460c2:	14843783          	ld	a5,328(s0)
    83f460c6:	0785                	addi	a5,a5,1
    83f460c8:	14f43423          	sd	a5,328(s0)
    83f460cc:	b53d                	j	83f45efa <LP_AEC+0x980>
   if (st->adapted) {
    83f460ce:	481c                	lw	a5,16(s0)
    83f460d0:	f79d                	bnez	a5,83f45ffe <LP_AEC+0xa84>
      for (i=0;i<N;i++)
    83f460d2:	00249613          	slli	a2,s1,0x2
    83f460d6:	4781                	li	a5,0
    83f460d8:	f29053e3          	blez	s1,83f45ffe <LP_AEC+0xa84>
         st->last_y[i] = st->x[i];
    83f460dc:	6034                	ld	a3,64(s0)
    83f460de:	7038                	ld	a4,96(s0)
    83f460e0:	96be                	add	a3,a3,a5
    83f460e2:	0006a787          	flw	fa5,0(a3)
    83f460e6:	973e                	add	a4,a4,a5
      for (i=0;i<N;i++)
    83f460e8:	0791                	addi	a5,a5,4
         st->last_y[i] = st->x[i];
    83f460ea:	00f72027          	fsw	fa5,0(a4)
      for (i=0;i<N;i++)
    83f460ee:	fef617e3          	bne	a2,a5,83f460dc <LP_AEC+0xb62>
    83f460f2:	b731                	j	83f45ffe <LP_AEC+0xa84>
      st->leak_estimate = 32767;
    83f460f4:	0000c797          	auipc	a5,0xc
    83f460f8:	1787a787          	flw	fa5,376(a5) # 83f5226c <__func__.1+0x74>
    83f460fc:	20f78653          	fmv.s	fa2,fa5
    83f46100:	02f42827          	fsw	fa5,48(s0)
    83f46104:	0000c797          	auipc	a5,0xc
    83f46108:	1a87a687          	flw	fa3,424(a5) # 83f522ac <__func__.1+0xb4>
    83f4610c:	b351                	j	83f45e90 <LP_AEC+0x916>
      aec_adjust_prop (st->W, N, M, st->prop);
    83f4610e:	7874                	ld	a3,240(s0)
    83f46110:	6048                	ld	a0,128(s0)
    83f46112:	864a                	mv	a2,s2
    83f46114:	85a6                	mv	a1,s1
    83f46116:	4cc000ef          	jal	ra,83f465e2 <aec_adjust_prop>
    83f4611a:	e6aff06f          	j	83f45784 <LP_AEC+0x20a>
         tmp32 = .25f * Sxx;
    83f4611e:	0000c797          	auipc	a5,0xc
    83f46122:	1c27a787          	flw	fa5,450(a5) # 83f522e0 <__func__.1+0xe8>
         if (tmp32 > .25*See)
    83f46126:	0000c797          	auipc	a5,0xc
    83f4612a:	1fa7b687          	fld	fa3,506(a5) # 83f52320 <__func__.1+0x128>
         tmp32 = .25f * Sxx;
    83f4612e:	10f9f9d3          	fmul.s	fs3,fs3,fa5
         if (tmp32 > .25*See)
    83f46132:	12d5f5d3          	fmul.d	fa1,fa1,fa3
    83f46136:	420986d3          	fcvt.d.s	fa3,fs3
    83f4613a:	a2d597d3          	flt.d	a5,fa1,fa3
    83f4613e:	c399                	beqz	a5,83f46144 <LP_AEC+0xbca>
            tmp32 = (float)(.25*See);
    83f46140:	10fb79d3          	fmul.s	fs3,fs6,fa5
         adapt_rate = tmp32 / See;  /* residual echo/error signal */
    83f46144:	1969fb53          	fdiv.s	fs6,fs3,fs6
    83f46148:	bf11                	j	83f4605c <LP_AEC+0xae2>
      if ((-(Sff - See) * ABS(Sff - See)) > (st->aec_var_backtrack * Sff * Dbf))
    83f4614a:	13c42087          	flw	ft1,316(s0)
      if ((-(st->Davg1) * ABS(st->Davg1)) > (st->aec_var_backtrack * st->Dvar1))
    83f4614e:	20c61753          	fneg.s	fa4,fa2
    83f46152:	1016f6d3          	fmul.s	fa3,fa3,ft1
    83f46156:	10277753          	fmul.s	fa4,fa4,ft2
    83f4615a:	a0e697d3          	flt.s	a5,fa3,fa4
    83f4615e:	eb91                	bnez	a5,83f46172 <LP_AEC+0xbf8>
      if ((-(st->Davg2) * ABS(st->Davg2)) > (st->aec_var_backtrack * st->Dvar2))
    83f46160:	20b59753          	fneg.s	fa4,fa1
    83f46164:	10157553          	fmul.s	fa0,fa0,ft1
    83f46168:	10377753          	fmul.s	fa4,fa4,ft3
    83f4616c:	a0e517d3          	flt.s	a5,fa0,fa4
    83f46170:	c3f9                	beqz	a5,83f46236 <LP_AEC+0xcbc>
         for (i=0;i<N*M;i++)  /* copy data for (N/2+1) frequency bin */
    83f46172:	0299093b          	mulw	s2,s2,s1
    83f46176:	4781                	li	a5,0
    83f46178:	00291613          	slli	a2,s2,0x2
    83f4617c:	01205d63          	blez	s2,83f46196 <LP_AEC+0xc1c>
            st->W[i] = st->foreground[i];
    83f46180:	6454                	ld	a3,136(s0)
    83f46182:	6058                	ld	a4,128(s0)
    83f46184:	96be                	add	a3,a3,a5
    83f46186:	0006a787          	flw	fa5,0(a3)
    83f4618a:	973e                	add	a4,a4,a5
         for (i=0;i<N*M;i++)  /* copy data for (N/2+1) frequency bin */
    83f4618c:	0791                	addi	a5,a5,4
            st->W[i] = st->foreground[i];
    83f4618e:	00f72027          	fsw	fa5,0(a4)
         for (i=0;i<N*M;i++)  /* copy data for (N/2+1) frequency bin */
    83f46192:	fef617e3          	bne	a2,a5,83f46180 <LP_AEC+0xc06>
         for (i=0;i<st->frame_size;i++)
    83f46196:	4010                	lw	a2,0(s0)
    83f46198:	4701                	li	a4,0
    83f4619a:	04c05c63          	blez	a2,83f461f2 <LP_AEC+0xc78>
            st->y[i+st->frame_size] = st->e[i+st->frame_size];
    83f4619e:	7c0c                	ld	a1,56(s0)
    83f461a0:	00c707bb          	addw	a5,a4,a2
    83f461a4:	078a                	slli	a5,a5,0x2
    83f461a6:	6c34                	ld	a3,88(s0)
    83f461a8:	95be                	add	a1,a1,a5
    83f461aa:	0005a787          	flw	fa5,0(a1)
    83f461ae:	97b6                	add	a5,a5,a3
         for (i=0;i<st->frame_size;i++)
    83f461b0:	2705                	addiw	a4,a4,1
            st->y[i+st->frame_size] = st->e[i+st->frame_size];
    83f461b2:	00f7a027          	fsw	fa5,0(a5)
         for (i=0;i<st->frame_size;i++)
    83f461b6:	4010                	lw	a2,0(s0)
    83f461b8:	fec743e3          	blt	a4,a2,83f4619e <LP_AEC+0xc24>
         for (i=0;i<st->frame_size;i++)
    83f461bc:	02c05b63          	blez	a2,83f461f2 <LP_AEC+0xc78>
    83f461c0:	4781                	li	a5,0
            st->e[i] = st->input[i] - st->y[i+st->frame_size];
    83f461c2:	6834                	ld	a3,80(s0)
    83f461c4:	6c38                	ld	a4,88(s0)
    83f461c6:	9e3d                	addw	a2,a2,a5
    83f461c8:	00279593          	slli	a1,a5,0x2
    83f461cc:	060a                	slli	a2,a2,0x2
    83f461ce:	9732                	add	a4,a4,a2
    83f461d0:	96ae                	add	a3,a3,a1
    83f461d2:	0006a787          	flw	fa5,0(a3)
    83f461d6:	00072707          	flw	fa4,0(a4)
    83f461da:	7c18                	ld	a4,56(s0)
         for (i=0;i<st->frame_size;i++)
    83f461dc:	0785                	addi	a5,a5,1
            st->e[i] = st->input[i] - st->y[i+st->frame_size];
    83f461de:	08e7f7d3          	fsub.s	fa5,fa5,fa4
    83f461e2:	972e                	add	a4,a4,a1
         for (i=0;i<st->frame_size;i++)
    83f461e4:	0007869b          	sext.w	a3,a5
            st->e[i] = st->input[i] - st->y[i+st->frame_size];
    83f461e8:	00f72027          	fsw	fa5,0(a4)
         for (i=0;i<st->frame_size;i++)
    83f461ec:	4010                	lw	a2,0(s0)
    83f461ee:	fcc6cae3          	blt	a3,a2,83f461c2 <LP_AEC+0xc48>
         See = Sff;  /* reset error power, copy foreground to background */
    83f461f2:	21398b53          	fmv.s	fs6,fs3
         st->Davg1 = st->Davg2 = FLOAT_ZERO;
    83f461f6:	08043823          	sd	zero,144(s0)
         st->Dvar1 = st->Dvar2 = FLOAT_ZERO;
    83f461fa:	08043c23          	sd	zero,152(s0)
    83f461fe:	b8bd                	j	83f45a7c <LP_AEC+0x502>
   else if ((st->Davg2 * ABS(st->Davg2)) > (st->aec_var2_update * st->Dvar2))
    83f46200:	20b591d3          	fneg.s	ft3,fa1
    83f46204:	13842707          	flw	fa4,312(s0)
    83f46208:	1035f0d3          	fmul.s	ft1,fa1,ft3
    83f4620c:	10e57753          	fmul.s	fa4,fa0,fa4
    83f46210:	a01717d3          	flt.s	a5,fa4,ft1
    83f46214:	fe079b63          	bnez	a5,83f45a0a <LP_AEC+0x490>
    83f46218:	bf0d                	j	83f4614a <LP_AEC+0xbd0>
      st->screwed_up = 0;
    83f4621a:	00042c23          	sw	zero,24(s0)
   if (st->screwed_up>=50) {
    83f4621e:	bcd9                	j	83f45cf4 <LP_AEC+0x77a>
    83f46220:	0000c797          	auipc	a5,0xc
    83f46224:	0307aa07          	flw	fs4,48(a5) # 83f52250 <__func__.1+0x58>
   float Pey = FLOAT_ONE, Pyy = FLOAT_ONE;
    83f46228:	214a0953          	fmv.s	fs2,fs4
    83f4622c:	0000c797          	auipc	a5,0xc
    83f46230:	0e47b507          	fld	fa0,228(a5) # 83f52310 <__func__.1+0x118>
    83f46234:	be7d                	j	83f45df2 <LP_AEC+0x878>
      if ((-(Sff - See) * ABS(Sff - See)) > (st->aec_var_backtrack * Sff * Dbf))
    83f46236:	1130f0d3          	fmul.s	ft1,ft1,fs3
    83f4623a:	20f797d3          	fneg.s	fa5,fa5
    83f4623e:	1007f7d3          	fmul.s	fa5,fa5,ft0
    83f46242:	1080f453          	fmul.s	fs0,ft1,fs0
      if (reset_background) {
    83f46246:	a0f417d3          	flt.s	a5,fs0,fa5
    83f4624a:	f785                	bnez	a5,83f46172 <LP_AEC+0xbf8>
   for (i=0;i<st->frame_size;i++) {
    83f4624c:	4010                	lw	a2,0(s0)
    83f4624e:	82fff06f          	j	83f45a7c <LP_AEC+0x502>

0000000083f46252 <DC_filter>:
#endif
{
   int i;
   float den2;

   den2 = radius*radius + .7f*(1-radius)*(1-radius);
    83f46252:	0000c797          	auipc	a5,0xc
    83f46256:	ffe7a587          	flw	fa1,-2(a5) # 83f52250 <__func__.1+0x58>
    83f4625a:	08a5f5d3          	fsub.s	fa1,fa1,fa0
    83f4625e:	0000c797          	auipc	a5,0xc
    83f46262:	02a7a787          	flw	fa5,42(a5) # 83f52288 <__func__.1+0x90>
    83f46266:	10f5f7d3          	fmul.s	fa5,fa1,fa5
    83f4626a:	10b7f5d3          	fmul.s	fa1,fa5,fa1
    83f4626e:	58a575c3          	fmadd.s	fa1,fa0,fa0,fa1

   for (i=0;i<len;i++) {
    83f46272:	04c05b63          	blez	a2,83f462c8 <DC_filter+0x76>
    83f46276:	fff6079b          	addiw	a5,a2,-1
    83f4627a:	02079713          	slli	a4,a5,0x20
    83f4627e:	01f75793          	srli	a5,a4,0x1f
    83f46282:	00250713          	addi	a4,a0,2
    83f46286:	97ba                	add	a5,a5,a4
    83f46288:	0000c717          	auipc	a4,0xc
    83f4628c:	00472007          	flw	ft0,4(a4) # 83f5228c <__func__.1+0x94>
      float vin = in[i];
    83f46290:	00051703          	lh	a4,0(a0)
      float vout = mem[0] + vin;
    83f46294:	0006a707          	flw	fa4,0(a3)
      mem[0] = mem[1] + 2*(-vin + radius*vout);  /* history buffer */
    83f46298:	0046a607          	flw	fa2,4(a3)
      float vin = in[i];
    83f4629c:	d00777d3          	fcvt.s.w	fa5,a4
   for (i=0;i<len;i++) {
    83f462a0:	0591                	addi	a1,a1,4
    83f462a2:	0509                	addi	a0,a0,2
      float vout = mem[0] + vin;
    83f462a4:	00e7f753          	fadd.s	fa4,fa5,fa4
      mem[0] = mem[1] + 2*(-vin + radius*vout);  /* history buffer */
    83f462a8:	10e576d3          	fmul.s	fa3,fa0,fa4
      mem[1] = vin - den2 * vout;  /* history buffer */
    83f462ac:	78e5f74b          	fnmsub.s	fa4,fa1,fa4,fa5
      mem[0] = mem[1] + 2*(-vin + radius*vout);  /* history buffer */
    83f462b0:	08f6f7d3          	fsub.s	fa5,fa3,fa5
      mem[1] = vin - den2 * vout;  /* history buffer */
    83f462b4:	00e6a227          	fsw	fa4,4(a3)
      mem[0] = mem[1] + 2*(-vin + radius*vout);  /* history buffer */
    83f462b8:	6007f7c3          	fmadd.s	fa5,fa5,ft0,fa2
    83f462bc:	00f6a027          	fsw	fa5,0(a3)
      out[i] = radius * vout;
    83f462c0:	fed5ae27          	fsw	fa3,-4(a1)
   for (i=0;i<len;i++) {
    83f462c4:	fca796e3          	bne	a5,a0,83f46290 <DC_filter+0x3e>
   }
}
    83f462c8:	8082                	ret

0000000083f462ca <inner_prod>:

inline float inner_prod(const float *x, const float *y, int len)
{
   float sum = 0;

   len >>= 1;
    83f462ca:	40165793          	srai	a5,a2,0x1
   float sum = 0;
    83f462ce:	f0000553          	fmv.w.x	fa0,zero
   len >>= 1;
    83f462d2:	4016561b          	sraiw	a2,a2,0x1
   while(len--) {
    83f462d6:	cf85                	beqz	a5,83f4630e <inner_prod+0x44>
    83f462d8:	02061793          	slli	a5,a2,0x20
      float part = 0;
      part = part + (*x++) * (*y++);
    83f462dc:	20a50653          	fmv.s	fa2,fa0
    83f462e0:	01d7d613          	srli	a2,a5,0x1d
    83f462e4:	00c507b3          	add	a5,a0,a2
    83f462e8:	00052707          	flw	fa4,0(a0)
    83f462ec:	0005a687          	flw	fa3,0(a1)
    83f462f0:	0521                	addi	a0,a0,8
      part = part + (*x++) * (*y++);
    83f462f2:	ffc52787          	flw	fa5,-4(a0)
      part = part + (*x++) * (*y++);
    83f462f6:	60d77743          	fmadd.s	fa4,fa4,fa3,fa2
      part = part + (*x++) * (*y++);
    83f462fa:	0045a687          	flw	fa3,4(a1)
    83f462fe:	05a1                	addi	a1,a1,8
    83f46300:	70d7f7c3          	fmadd.s	fa5,fa5,fa3,fa4
      sum = sum + part;
    83f46304:	00f57553          	fadd.s	fa0,fa0,fa5
   while(len--) {
    83f46308:	fef510e3          	bne	a0,a5,83f462e8 <inner_prod+0x1e>
    83f4630c:	8082                	ret
   }
   return sum;
}
    83f4630e:	8082                	ret

0000000083f46310 <bin_power_spectrum>:

inline void bin_power_spectrum(const float *X, float *ps, int N)
{
   int i, j;

   ps[0] = X[0] * X[0];
    83f46310:	00052787          	flw	fa5,0(a0)
   for (i=1,j=1;i<N-1;i+=2,j++) {  /* half-complex vector */
    83f46314:	4789                	li	a5,2
   ps[0] = X[0] * X[0];
    83f46316:	10f7f7d3          	fmul.s	fa5,fa5,fa5
    83f4631a:	00f5a027          	fsw	fa5,0(a1)
   for (i=1,j=1;i<N-1;i+=2,j++) {  /* half-complex vector */
    83f4631e:	04c7dd63          	bge	a5,a2,83f46378 <bin_power_spectrum+0x68>
    83f46322:	3675                	addiw	a2,a2,-3
    83f46324:	0016569b          	srliw	a3,a2,0x1
    83f46328:	00369813          	slli	a6,a3,0x3
    83f4632c:	00c50693          	addi	a3,a0,12
    83f46330:	00450793          	addi	a5,a0,4
    83f46334:	00458713          	addi	a4,a1,4
    83f46338:	0016561b          	srliw	a2,a2,0x1
    83f4633c:	96c2                	add	a3,a3,a6
      ps[j] =  X[i] * X[i] + X[i+1] * X[i+1];
    83f4633e:	0047a707          	flw	fa4,4(a5)
    83f46342:	0007a787          	flw	fa5,0(a5)
   for (i=1,j=1;i<N-1;i+=2,j++) {  /* half-complex vector */
    83f46346:	0711                	addi	a4,a4,4
      ps[j] =  X[i] * X[i] + X[i+1] * X[i+1];
    83f46348:	10e77753          	fmul.s	fa4,fa4,fa4
   for (i=1,j=1;i<N-1;i+=2,j++) {  /* half-complex vector */
    83f4634c:	07a1                	addi	a5,a5,8
      ps[j] =  X[i] * X[i] + X[i+1] * X[i+1];
    83f4634e:	70f7f7c3          	fmadd.s	fa5,fa5,fa5,fa4
    83f46352:	fef72e27          	fsw	fa5,-4(a4)
   for (i=1,j=1;i<N-1;i+=2,j++) {  /* half-complex vector */
    83f46356:	fed794e3          	bne	a5,a3,83f4633e <bin_power_spectrum+0x2e>
    83f4635a:	0016179b          	slliw	a5,a2,0x1
   }
   ps[j] = X[i] * X[i];
    83f4635e:	278d                	addiw	a5,a5,3
    83f46360:	078a                	slli	a5,a5,0x2
    83f46362:	953e                	add	a0,a0,a5
    83f46364:	00052787          	flw	fa5,0(a0)
    83f46368:	2609                	addiw	a2,a2,2
    83f4636a:	060a                	slli	a2,a2,0x2
    83f4636c:	10f7f7d3          	fmul.s	fa5,fa5,fa5
    83f46370:	962e                	add	a2,a2,a1
    83f46372:	00f62027          	fsw	fa5,0(a2)
}
    83f46376:	8082                	ret
   for (i=1,j=1;i<N-1;i+=2,j++) {  /* half-complex vector */
    83f46378:	4791                	li	a5,4
   ps[j] = X[i] * X[i];
    83f4637a:	953e                	add	a0,a0,a5
    83f4637c:	00052787          	flw	fa5,0(a0)
   for (i=1,j=1;i<N-1;i+=2,j++) {  /* half-complex vector */
    83f46380:	4611                	li	a2,4
   ps[j] = X[i] * X[i];
    83f46382:	962e                	add	a2,a2,a1
    83f46384:	10f7f7d3          	fmul.s	fa5,fa5,fa5
    83f46388:	00f62027          	fsw	fa5,0(a2)
}
    83f4638c:	8082                	ret

0000000083f4638e <accum_power_spectrum>:

inline void accum_power_spectrum(const float *X, float *ps, int N)
{
   int i, j;

   ps[0] += (X[0] * X[0]);  /* ps[0] = ps[0] + X[0] * X[0], real part only, the im part in first point is zero */
    83f4638e:	00052787          	flw	fa5,0(a0)
    83f46392:	0005a707          	flw	fa4,0(a1)
   for (i=1,j=1;i<N-1;i+=2,j++) {
    83f46396:	4789                	li	a5,2
   ps[0] += (X[0] * X[0]);  /* ps[0] = ps[0] + X[0] * X[0], real part only, the im part in first point is zero */
    83f46398:	70f7f7c3          	fmadd.s	fa5,fa5,fa5,fa4
    83f4639c:	00f5a027          	fsw	fa5,0(a1)
   for (i=1,j=1;i<N-1;i+=2,j++) {
    83f463a0:	06c7d363          	bge	a5,a2,83f46406 <accum_power_spectrum+0x78>
    83f463a4:	3675                	addiw	a2,a2,-3
    83f463a6:	0016569b          	srliw	a3,a2,0x1
    83f463aa:	00369813          	slli	a6,a3,0x3
    83f463ae:	00c50693          	addi	a3,a0,12
    83f463b2:	00458713          	addi	a4,a1,4
    83f463b6:	00450793          	addi	a5,a0,4
    83f463ba:	0016561b          	srliw	a2,a2,0x1
    83f463be:	96c2                	add	a3,a3,a6
      ps[j] +=  (X[i] * X[i] + X[i+1] * X[i+1]);
    83f463c0:	0047a707          	flw	fa4,4(a5)
    83f463c4:	0007a787          	flw	fa5,0(a5)
    83f463c8:	00072687          	flw	fa3,0(a4)
    83f463cc:	10e77753          	fmul.s	fa4,fa4,fa4
   for (i=1,j=1;i<N-1;i+=2,j++) {
    83f463d0:	0711                	addi	a4,a4,4
    83f463d2:	07a1                	addi	a5,a5,8
      ps[j] +=  (X[i] * X[i] + X[i+1] * X[i+1]);
    83f463d4:	70f7f7c3          	fmadd.s	fa5,fa5,fa5,fa4
    83f463d8:	00f6f7d3          	fadd.s	fa5,fa3,fa5
    83f463dc:	fef72e27          	fsw	fa5,-4(a4)
   for (i=1,j=1;i<N-1;i+=2,j++) {
    83f463e0:	fef690e3          	bne	a3,a5,83f463c0 <accum_power_spectrum+0x32>
    83f463e4:	0016179b          	slliw	a5,a2,0x1
   }
   ps[j] += (X[i] * X[i]);  /* real part only, the im part in (N/2+1)th point is zero */
    83f463e8:	278d                	addiw	a5,a5,3
    83f463ea:	2609                	addiw	a2,a2,2
    83f463ec:	060a                	slli	a2,a2,0x2
    83f463ee:	078a                	slli	a5,a5,0x2
    83f463f0:	962e                	add	a2,a2,a1
    83f463f2:	953e                	add	a0,a0,a5
    83f463f4:	00052787          	flw	fa5,0(a0)
    83f463f8:	00062707          	flw	fa4,0(a2)
    83f463fc:	70f7f7c3          	fmadd.s	fa5,fa5,fa5,fa4
    83f46400:	00f62027          	fsw	fa5,0(a2)
}
    83f46404:	8082                	ret
   for (i=1,j=1;i<N-1;i+=2,j++) {
    83f46406:	4791                	li	a5,4
    83f46408:	4611                	li	a2,4
   ps[j] += (X[i] * X[i]);  /* real part only, the im part in (N/2+1)th point is zero */
    83f4640a:	962e                	add	a2,a2,a1
    83f4640c:	953e                	add	a0,a0,a5
    83f4640e:	00052787          	flw	fa5,0(a0)
    83f46412:	00062707          	flw	fa4,0(a2)
    83f46416:	70f7f7c3          	fmadd.s	fa5,fa5,fa5,fa4
    83f4641a:	00f62027          	fsw	fa5,0(a2)
}
    83f4641e:	8082                	ret

0000000083f46420 <accum_spectral_mul>:

inline void accum_spectral_mul(const float *X, const float *Y, float *acc, int N, int M)
{
   int i,j;

   for (i=0;i<N;i++)
    83f46420:	02d05163          	blez	a3,83f46442 <accum_spectral_mul+0x22>
    83f46424:	fff6881b          	addiw	a6,a3,-1
    83f46428:	02081793          	slli	a5,a6,0x20
    83f4642c:	01e7d893          	srli	a7,a5,0x1e
    83f46430:	00460813          	addi	a6,a2,4
    83f46434:	87b2                	mv	a5,a2
    83f46436:	9846                	add	a6,a6,a7
      acc[i] = 0;
    83f46438:	0007a023          	sw	zero,0(a5)
   for (i=0;i<N;i++)
    83f4643c:	0791                	addi	a5,a5,4
    83f4643e:	ff079de3          	bne	a5,a6,83f46438 <accum_spectral_mul+0x18>
   for (j=0;j<M;j++) {
    83f46442:	0ce05663          	blez	a4,83f4650e <accum_spectral_mul+0xee>
    83f46446:	ffd6879b          	addiw	a5,a3,-3
      acc[0] += (X[0]*Y[0]);  /* real part only for the first point of X and Y */
      for (i=1;i<N-1;i+=2) {  /* X[i] and Y[i] are the real part of X and Y respectively, X[i+1] and Y[i+1] are the imaginary part of X and Y respectively */
    83f4644a:	ffe7ff13          	andi	t5,a5,-2
    83f4644e:	0017d81b          	srliw	a6,a5,0x1
    83f46452:	00c60313          	addi	t1,a2,12
    83f46456:	00381793          	slli	a5,a6,0x3
         acc[i] += (X[i]*Y[i] - X[i+1]*Y[i+1]);  /* real part */
         acc[i+1] += (X[i+1]*Y[i] + X[i]*Y[i+1]);  /* imaginary part */
      }
      acc[i] += (X[i]*Y[i]);  /* real part only for the (N/2+1)th point of X and Y */
    83f4645a:	2f0d                	addiw	t5,t5,3
      X += N;
    83f4645c:	00269e93          	slli	t4,a3,0x2
    83f46460:	933e                	add	t1,t1,a5
      acc[i] += (X[i]*Y[i]);  /* real part only for the (N/2+1)th point of X and Y */
    83f46462:	0f0a                	slli	t5,t5,0x2
   for (j=0;j<M;j++) {
    83f46464:	4e01                	li	t3,0
      for (i=1;i<N-1;i+=2) {  /* X[i] and Y[i] are the real part of X and Y respectively, X[i+1] and Y[i+1] are the imaginary part of X and Y respectively */
    83f46466:	4f89                	li	t6,2
      acc[0] += (X[0]*Y[0]);  /* real part only for the first point of X and Y */
    83f46468:	00052787          	flw	fa5,0(a0)
    83f4646c:	0005a687          	flw	fa3,0(a1)
    83f46470:	00062707          	flw	fa4,0(a2)
    83f46474:	70d7f7c3          	fmadd.s	fa5,fa5,fa3,fa4
    83f46478:	00f62027          	fsw	fa5,0(a2)
      for (i=1;i<N-1;i+=2) {  /* X[i] and Y[i] are the real part of X and Y respectively, X[i+1] and Y[i+1] are the imaginary part of X and Y respectively */
    83f4647c:	08dfd763          	bge	t6,a3,83f4650a <accum_spectral_mul+0xea>
    83f46480:	00460793          	addi	a5,a2,4
    83f46484:	00450893          	addi	a7,a0,4
    83f46488:	00458813          	addi	a6,a1,4
         acc[i] += (X[i]*Y[i] - X[i+1]*Y[i+1]);  /* real part */
    83f4648c:	0048a787          	flw	fa5,4(a7)
    83f46490:	00482607          	flw	fa2,4(a6) # 8004 <_EL1_STACK_SIZE+0x7804>
    83f46494:	0008a687          	flw	fa3,0(a7)
    83f46498:	00082587          	flw	fa1,0(a6)
    83f4649c:	10c7f653          	fmul.s	fa2,fa5,fa2
    83f464a0:	0007a707          	flw	fa4,0(a5)
         acc[i+1] += (X[i+1]*Y[i] + X[i]*Y[i+1]);  /* imaginary part */
    83f464a4:	0047a787          	flw	fa5,4(a5)
      for (i=1;i<N-1;i+=2) {  /* X[i] and Y[i] are the real part of X and Y respectively, X[i+1] and Y[i+1] are the imaginary part of X and Y respectively */
    83f464a8:	07a1                	addi	a5,a5,8
    83f464aa:	08a1                	addi	a7,a7,8
         acc[i] += (X[i]*Y[i] - X[i+1]*Y[i+1]);  /* real part */
    83f464ac:	60b6f6c7          	fmsub.s	fa3,fa3,fa1,fa2
      for (i=1;i<N-1;i+=2) {  /* X[i] and Y[i] are the real part of X and Y respectively, X[i+1] and Y[i+1] are the imaginary part of X and Y respectively */
    83f464b0:	0821                	addi	a6,a6,8
         acc[i] += (X[i]*Y[i] - X[i+1]*Y[i+1]);  /* real part */
    83f464b2:	00d77753          	fadd.s	fa4,fa4,fa3
    83f464b6:	fee7ac27          	fsw	fa4,-8(a5)
         acc[i+1] += (X[i+1]*Y[i] + X[i]*Y[i+1]);  /* imaginary part */
    83f464ba:	ff88a687          	flw	fa3,-8(a7)
    83f464be:	ffc82587          	flw	fa1,-4(a6)
    83f464c2:	ffc8a707          	flw	fa4,-4(a7)
    83f464c6:	ff882607          	flw	fa2,-8(a6)
    83f464ca:	10b6f6d3          	fmul.s	fa3,fa3,fa1
    83f464ce:	68c77743          	fmadd.s	fa4,fa4,fa2,fa3
    83f464d2:	00e7f7d3          	fadd.s	fa5,fa5,fa4
    83f464d6:	fef7ae27          	fsw	fa5,-4(a5)
      for (i=1;i<N-1;i+=2) {  /* X[i] and Y[i] are the real part of X and Y respectively, X[i+1] and Y[i+1] are the imaginary part of X and Y respectively */
    83f464da:	faf319e3          	bne	t1,a5,83f4648c <accum_spectral_mul+0x6c>
    83f464de:	87fa                	mv	a5,t5
      acc[i] += (X[i]*Y[i]);  /* real part only for the (N/2+1)th point of X and Y */
    83f464e0:	00f60833          	add	a6,a2,a5
    83f464e4:	00f508b3          	add	a7,a0,a5
    83f464e8:	97ae                	add	a5,a5,a1
    83f464ea:	0008a787          	flw	fa5,0(a7)
    83f464ee:	0007a687          	flw	fa3,0(a5)
    83f464f2:	00082707          	flw	fa4,0(a6)
   for (j=0;j<M;j++) {
    83f464f6:	2e05                	addiw	t3,t3,1
      X += N;
    83f464f8:	9576                	add	a0,a0,t4
      acc[i] += (X[i]*Y[i]);  /* real part only for the (N/2+1)th point of X and Y */
    83f464fa:	70d7f7c3          	fmadd.s	fa5,fa5,fa3,fa4
      Y += N;
    83f464fe:	95f6                	add	a1,a1,t4
      acc[i] += (X[i]*Y[i]);  /* real part only for the (N/2+1)th point of X and Y */
    83f46500:	00f82027          	fsw	fa5,0(a6)
   for (j=0;j<M;j++) {
    83f46504:	f7c712e3          	bne	a4,t3,83f46468 <accum_spectral_mul+0x48>
   }
}
    83f46508:	8082                	ret
      for (i=1;i<N-1;i+=2) {  /* X[i] and Y[i] are the real part of X and Y respectively, X[i+1] and Y[i+1] are the imaginary part of X and Y respectively */
    83f4650a:	4791                	li	a5,4
    83f4650c:	bfd1                	j	83f464e0 <accum_spectral_mul+0xc0>
    83f4650e:	8082                	ret

0000000083f46510 <weighted_gradient_phi>:
inline void weighted_gradient_phi(const float *w, const float p, const float *X, const float *Y, float *prod, int N)
{
   int i, j;
   float W;

   W = p * w[0];  /* real value */
    83f46510:	00052787          	flw	fa5,0(a0)
   prod[0] = W * X[0] * Y[0];  /* real part only for the first point of X and Y */
    83f46514:	0005a687          	flw	fa3,0(a1)
    83f46518:	00062707          	flw	fa4,0(a2)
   W = p * w[0];  /* real value */
    83f4651c:	10f577d3          	fmul.s	fa5,fa0,fa5
   for (i=1,j=1;i<N-1;i+=2,j++) {
    83f46520:	4789                	li	a5,2
   prod[0] = W * X[0] * Y[0];  /* real part only for the first point of X and Y */
    83f46522:	10d7f7d3          	fmul.s	fa5,fa5,fa3
    83f46526:	10e7f7d3          	fmul.s	fa5,fa5,fa4
    83f4652a:	00f6a027          	fsw	fa5,0(a3)
   for (i=1,j=1;i<N-1;i+=2,j++) {
    83f4652e:	0ae7d763          	bge	a5,a4,83f465dc <weighted_gradient_phi+0xcc>
    83f46532:	ffd7031b          	addiw	t1,a4,-3
    83f46536:	00135e9b          	srliw	t4,t1,0x1
    83f4653a:	00c58e13          	addi	t3,a1,12
    83f4653e:	0e8e                	slli	t4,t4,0x3
    83f46540:	00450893          	addi	a7,a0,4
    83f46544:	00458793          	addi	a5,a1,4
    83f46548:	00460713          	addi	a4,a2,4
    83f4654c:	00468813          	addi	a6,a3,4
    83f46550:	0013531b          	srliw	t1,t1,0x1
    83f46554:	9e76                	add	t3,t3,t4
      W = p * w[j];  /* real value */
      /* perform conj(X)*Y, conjugation of X[i] + X[i+1]j = X[i] - X[i+1]j */
      prod[i] = W * (X[i] * Y[i] + X[i+1] * Y[i+1]);  /* real part */
    83f46556:	0047a687          	flw	fa3,4(a5)
    83f4655a:	00472607          	flw	fa2,4(a4)
    83f4655e:	0007a707          	flw	fa4,0(a5)
    83f46562:	00072587          	flw	fa1,0(a4)
    83f46566:	10c6f653          	fmul.s	fa2,fa3,fa2
      W = p * w[j];  /* real value */
    83f4656a:	0008a787          	flw	fa5,0(a7)
   for (i=1,j=1;i<N-1;i+=2,j++) {
    83f4656e:	0821                	addi	a6,a6,8
    83f46570:	07a1                	addi	a5,a5,8
      W = p * w[j];  /* real value */
    83f46572:	10f576d3          	fmul.s	fa3,fa0,fa5
      prod[i] = W * (X[i] * Y[i] + X[i+1] * Y[i+1]);  /* real part */
    83f46576:	60b77743          	fmadd.s	fa4,fa4,fa1,fa2
   for (i=1,j=1;i<N-1;i+=2,j++) {
    83f4657a:	0721                	addi	a4,a4,8
    83f4657c:	0891                	addi	a7,a7,4
      prod[i] = W * (X[i] * Y[i] + X[i+1] * Y[i+1]);  /* real part */
    83f4657e:	10d77753          	fmul.s	fa4,fa4,fa3
    83f46582:	fee82c27          	fsw	fa4,-8(a6)
      prod[i+1] = W * (-X[i+1] * Y[i] +  X[i] * Y[i+1]);  /* imaginary part */
    83f46586:	ff87a707          	flw	fa4,-8(a5)
    83f4658a:	ffc72587          	flw	fa1,-4(a4)
    83f4658e:	ffc7a787          	flw	fa5,-4(a5)
    83f46592:	ff872607          	flw	fa2,-8(a4)
    83f46596:	10b77753          	fmul.s	fa4,fa4,fa1
    83f4659a:	70c7f7cb          	fnmsub.s	fa5,fa5,fa2,fa4
    83f4659e:	10d7f7d3          	fmul.s	fa5,fa5,fa3
    83f465a2:	fef82e27          	fsw	fa5,-4(a6)
   for (i=1,j=1;i<N-1;i+=2,j++) {
    83f465a6:	fafe18e3          	bne	t3,a5,83f46556 <weighted_gradient_phi+0x46>
    83f465aa:	0013179b          	slliw	a5,t1,0x1
   }
   W = p * w[j];  /* real value */
   prod[i] = W * X[i] * Y[i];  /* real part only for the (N/2+1)th point of X and Y */
    83f465ae:	278d                	addiw	a5,a5,3
   W = p * w[j];  /* real value */
    83f465b0:	2309                	addiw	t1,t1,2
    83f465b2:	030a                	slli	t1,t1,0x2
   prod[i] = W * X[i] * Y[i];  /* real part only for the (N/2+1)th point of X and Y */
    83f465b4:	078a                	slli	a5,a5,0x2
   W = p * w[j];  /* real value */
    83f465b6:	951a                	add	a0,a0,t1
    83f465b8:	00052787          	flw	fa5,0(a0)
   prod[i] = W * X[i] * Y[i];  /* real part only for the (N/2+1)th point of X and Y */
    83f465bc:	95be                	add	a1,a1,a5
    83f465be:	0005a707          	flw	fa4,0(a1)
   W = p * w[j];  /* real value */
    83f465c2:	10f57553          	fmul.s	fa0,fa0,fa5
   prod[i] = W * X[i] * Y[i];  /* real part only for the (N/2+1)th point of X and Y */
    83f465c6:	963e                	add	a2,a2,a5
    83f465c8:	00062787          	flw	fa5,0(a2)
    83f465cc:	96be                	add	a3,a3,a5
    83f465ce:	10e57553          	fmul.s	fa0,fa0,fa4
    83f465d2:	10f57553          	fmul.s	fa0,fa0,fa5
    83f465d6:	00a6a027          	fsw	fa0,0(a3)
}
    83f465da:	8082                	ret
   for (i=1,j=1;i<N-1;i+=2,j++) {
    83f465dc:	4791                	li	a5,4
    83f465de:	4311                	li	t1,4
    83f465e0:	bfd9                	j	83f465b6 <weighted_gradient_phi+0xa6>

0000000083f465e2 <aec_adjust_prop>:
   int i, j;
   float max_sum = 1;
   float prop_sum = 1;
   //float max_sum_matlab[20];

   for (i=0;i<M;i++) {
    83f465e2:	10c05963          	blez	a2,83f466f4 <aec_adjust_prop+0x112>
    83f465e6:	fff6079b          	addiw	a5,a2,-1
{
    83f465ea:	7119                	addi	sp,sp,-128
    83f465ec:	02079713          	slli	a4,a5,0x20
    83f465f0:	01e75793          	srli	a5,a4,0x1e
    83f465f4:	ac22                	fsd	fs0,24(sp)
   float max_sum = 1;
    83f465f6:	0000c717          	auipc	a4,0xc
    83f465fa:	c5a72407          	flw	fs0,-934(a4) # 83f52250 <__func__.1+0x58>
{
    83f465fe:	f0ca                	sd	s2,96(sp)
    83f46600:	a826                	fsd	fs1,16(sp)
    83f46602:	fff5891b          	addiw	s2,a1,-1
   float max_sum = 1;
    83f46606:	208404d3          	fmv.s	fs1,fs0
{
    83f4660a:	fc5e                	sd	s7,56(sp)
    83f4660c:	1902                	slli	s2,s2,0x20
    83f4660e:	00468b93          	addi	s7,a3,4
    83f46612:	f8a2                	sd	s0,112(sp)
    83f46614:	f4a6                	sd	s1,104(sp)
    83f46616:	ecce                	sd	s3,88(sp)
    83f46618:	e8d2                	sd	s4,80(sp)
    83f4661a:	e4d6                	sd	s5,72(sp)
    83f4661c:	e0da                	sd	s6,64(sp)
    83f4661e:	f862                	sd	s8,48(sp)
    83f46620:	f466                	sd	s9,40(sp)
    83f46622:	a44a                	fsd	fs2,8(sp)
    83f46624:	9bbe                	add	s7,s7,a5
    83f46626:	fc86                	sd	ra,120(sp)
    83f46628:	89aa                	mv	s3,a0
    83f4662a:	84ae                	mv	s1,a1
    83f4662c:	8436                	mv	s0,a3
    83f4662e:	8b36                	mv	s6,a3
    83f46630:	00058a1b          	sext.w	s4,a1
   for (i=0;i<M;i++) {
    83f46634:	8c36                	mv	s8,a3
    83f46636:	4c81                	li	s9,0
      float tmp = 1;
      for (j=0;j<N;j++)
    83f46638:	0000c797          	auipc	a5,0xc
    83f4663c:	cd87b907          	fld	fs2,-808(a5) # 83f52310 <__func__.1+0x118>
    83f46640:	02095913          	srli	s2,s2,0x20
    83f46644:	00450a93          	addi	s5,a0,4
    83f46648:	23290553          	fmv.d	fa0,fs2
    83f4664c:	02905463          	blez	s1,83f46674 <aec_adjust_prop+0x92>
    83f46650:	01990733          	add	a4,s2,s9
      float tmp = 1;
    83f46654:	20840553          	fmv.s	fa0,fs0
    83f46658:	002c9793          	slli	a5,s9,0x2
    83f4665c:	070a                	slli	a4,a4,0x2
    83f4665e:	97ce                	add	a5,a5,s3
    83f46660:	9756                	add	a4,a4,s5
         /* tmp(m) = tmp(m) + W(k, m) * W(k, m) */
         tmp += (W[i*N+j] * W[i*N+j]);  /* sum the power of the (N/2+1) frequency bin in each taplen */
    83f46662:	0007a787          	flw	fa5,0(a5)
      for (j=0;j<N;j++)
    83f46666:	0791                	addi	a5,a5,4
         tmp += (W[i*N+j] * W[i*N+j]);  /* sum the power of the (N/2+1) frequency bin in each taplen */
    83f46668:	50f7f543          	fmadd.s	fa0,fa5,fa5,fa0
      for (j=0;j<N;j++)
    83f4666c:	fee79be3          	bne	a5,a4,83f46662 <aec_adjust_prop+0x80>
      prop[i] = (float)math_sqrt(tmp);
    83f46670:	42050553          	fcvt.d.s	fa0,fa0
    83f46674:	f7efa0ef          	jal	ra,83f40df2 <sqrt>
    83f46678:	40157553          	fcvt.s.d	fa0,fa0

      #if (1)  /* better */
      if (prop[i] > max_sum)
    83f4667c:	a0a497d3          	flt.s	a5,fs1,fa0
      prop[i] = (float)math_sqrt(tmp);
    83f46680:	00ac2027          	fsw	fa0,0(s8) # 8000 <_EL1_STACK_SIZE+0x7800>
      if (prop[i] > max_sum)
    83f46684:	c399                	beqz	a5,83f4668a <aec_adjust_prop+0xa8>
         max_sum = prop[i];
    83f46686:	20a504d3          	fmv.s	fs1,fa0
   for (i=0;i<M;i++) {
    83f4668a:	0c11                	addi	s8,s8,4
    83f4668c:	014c8cbb          	addw	s9,s9,s4
    83f46690:	fb7c1ce3          	bne	s8,s7,83f46648 <aec_adjust_prop+0x66>
   }

   for (i=0;i<M;i++) {

      #if (1)  /* better */
      prop[i] += (.1f * max_sum);
    83f46694:	0000c797          	auipc	a5,0xc
    83f46698:	c947a787          	flw	fa5,-876(a5) # 83f52328 <__func__.1+0x130>
    83f4669c:	10f4f4d3          	fmul.s	fs1,fs1,fa5
    83f466a0:	00042787          	flw	fa5,0(s0)
   for (i=0;i<M;i++) {
    83f466a4:	0411                	addi	s0,s0,4
      prop[i] += (.1f * max_sum);
    83f466a6:	00f4f7d3          	fadd.s	fa5,fs1,fa5
    83f466aa:	fef42e27          	fsw	fa5,-4(s0)
      #else
      prop[i] += (.1f * max_sum_matlab[i]);
      #endif

      prop_sum += prop[i];  /* sum(prop(m)) */
    83f466ae:	00f47453          	fadd.s	fs0,fs0,fa5
   for (i=0;i<M;i++) {
    83f466b2:	ff7417e3          	bne	s0,s7,83f466a0 <aec_adjust_prop+0xbe>
    83f466b6:	0000c797          	auipc	a5,0xc
    83f466ba:	c767a687          	flw	fa3,-906(a5) # 83f5232c <__func__.1+0x134>
   }
   for (i=0;i<M;i++) {
      prop[i] = (.99f * prop[i]) / prop_sum;
    83f466be:	000b2787          	flw	fa5,0(s6)
   for (i=0;i<M;i++) {
    83f466c2:	0b11                	addi	s6,s6,4
      prop[i] = (.99f * prop[i]) / prop_sum;
    83f466c4:	10d7f7d3          	fmul.s	fa5,fa5,fa3
    83f466c8:	1887f7d3          	fdiv.s	fa5,fa5,fs0
    83f466cc:	fefb2e27          	fsw	fa5,-4(s6)
   for (i=0;i<M;i++) {
    83f466d0:	ff7b17e3          	bne	s6,s7,83f466be <aec_adjust_prop+0xdc>
   }

}
    83f466d4:	70e6                	ld	ra,120(sp)
    83f466d6:	7446                	ld	s0,112(sp)
    83f466d8:	74a6                	ld	s1,104(sp)
    83f466da:	7906                	ld	s2,96(sp)
    83f466dc:	69e6                	ld	s3,88(sp)
    83f466de:	6a46                	ld	s4,80(sp)
    83f466e0:	6aa6                	ld	s5,72(sp)
    83f466e2:	6b06                	ld	s6,64(sp)
    83f466e4:	7be2                	ld	s7,56(sp)
    83f466e6:	7c42                	ld	s8,48(sp)
    83f466e8:	7ca2                	ld	s9,40(sp)
    83f466ea:	2462                	fld	fs0,24(sp)
    83f466ec:	24c2                	fld	fs1,16(sp)
    83f466ee:	2922                	fld	fs2,8(sp)
    83f466f0:	6109                	addi	sp,sp,128
    83f466f2:	8082                	ret
    83f466f4:	8082                	ret

0000000083f466f6 <NR>:
	} while (0)
#endif

/* Function Definitions */
EXPORT void NR(short *x, float initial_noise_pow_time, float *frame, NRState *st, boolean_T *speech_vad, float *y)
{
    83f466f6:	716d                	addi	sp,sp,-272
    83f466f8:	fda6                	sd	s1,248(sp)
    83f466fa:	f9ca                	sd	s2,240(sp)
    83f466fc:	f1d2                	sd	s4,224(sp)
    83f466fe:	e5de                	sd	s7,200(sp)
    83f46700:	a54a                	fsd	fs2,136(sp)
    83f46702:	e606                	sd	ra,264(sp)
    83f46704:	e222                	sd	s0,256(sp)
    83f46706:	f5ce                	sd	s3,232(sp)
    83f46708:	edd6                	sd	s5,216(sp)
    83f4670a:	e9da                	sd	s6,208(sp)
    83f4670c:	e1e2                	sd	s8,192(sp)
    83f4670e:	fd66                	sd	s9,184(sp)
    83f46710:	f96a                	sd	s10,176(sp)
    83f46712:	f56e                	sd	s11,168(sp)
    83f46714:	ad22                	fsd	fs0,152(sp)
    83f46716:	a926                	fsd	fs1,144(sp)
    83f46718:	a14e                	fsd	fs3,128(sp)
    83f4671a:	bcd2                	fsd	fs4,120(sp)
    83f4671c:	b8d6                	fsd	fs5,112(sp)
    83f4671e:	b4da                	fsd	fs6,104(sp)
    83f46720:	b0de                	fsd	fs7,96(sp)


  /* Preparation */
  c = 0.886226925F;
  qkr = 2.33333333F;
  len = 2*st->frame_size;    /* window size */
    83f46722:	09862783          	lw	a5,152(a2)
{
    83f46726:	8bb2                	mv	s7,a2
    83f46728:	e43a                	sd	a4,8(sp)
  len = 2*st->frame_size;    /* window size */
    83f4672a:	0017961b          	slliw	a2,a5,0x1
    83f4672e:	0006071b          	sext.w	a4,a2
  len1 = st->frame_size;    /* overlap size */
  nFFT = 2*2*st->frame_size;
    83f46732:	0027949b          	slliw	s1,a5,0x2
  len = 2*st->frame_size;    /* window size */
    83f46736:	f83a                	sd	a4,48(sp)
  nFFT = 2*2*st->frame_size;
    83f46738:	0004871b          	sext.w	a4,s1
  len = 2*st->frame_size;    /* window size */
    83f4673c:	f43e                	sd	a5,40(sp)
    83f4673e:	c6b2                	sw	a2,76(sp)
  nFFT = 2*2*st->frame_size;
    83f46740:	e83a                	sd	a4,16(sp)
{
    83f46742:	20a50953          	fmv.s	fs2,fa0
    83f46746:	892e                	mv	s2,a1
    83f46748:	8a36                	mv	s4,a3
  for (i = 0; i < st->frame_size; i++) {
    83f4674a:	08f05963          	blez	a5,83f467dc <NR+0xe6>
    83f4674e:	85aa                	mv	a1,a0
    83f46750:	873e                	mv	a4,a5
    83f46752:	4601                	li	a2,0
    83f46754:	4681                	li	a3,0
    x[i+st->frame_size] = x[i];    /* go first to avoid overwriting by x_old[], applicable for AEC on or AEC off */
    83f46756:	00059803          	lh	a6,0(a1)
    83f4675a:	9f35                	addw	a4,a4,a3
    83f4675c:	0706                	slli	a4,a4,0x1
    83f4675e:	972a                	add	a4,a4,a0
    83f46760:	01071023          	sh	a6,0(a4)
    x[i] = st->x_old[i];
    83f46764:	018bb803          	ld	a6,24(s7)
    83f46768:	00161893          	slli	a7,a2,0x1
  for (i = 0; i < st->frame_size; i++) {
    83f4676c:	0589                	addi	a1,a1,2
    x[i] = st->x_old[i];
    83f4676e:	9846                	add	a6,a6,a7
    83f46770:	00081703          	lh	a4,0(a6)
  for (i = 0; i < st->frame_size; i++) {
    83f46774:	0605                	addi	a2,a2,1
    x[i] = st->x_old[i];
    83f46776:	fee59f23          	sh	a4,-2(a1)
    st->x_old[i] = x[i+st->frame_size];    /* update input overlap data */
    83f4677a:	098ba703          	lw	a4,152(s7)
    83f4677e:	018bb803          	ld	a6,24(s7)
    83f46782:	9f35                	addw	a4,a4,a3
    83f46784:	0706                	slli	a4,a4,0x1
    83f46786:	972a                	add	a4,a4,a0
    83f46788:	00071303          	lh	t1,0(a4)
    83f4678c:	01180733          	add	a4,a6,a7
  for (i = 0; i < st->frame_size; i++) {
    83f46790:	0006069b          	sext.w	a3,a2
    st->x_old[i] = x[i+st->frame_size];    /* update input overlap data */
    83f46794:	00671023          	sh	t1,0(a4)
  for (i = 0; i < st->frame_size; i++) {
    83f46798:	098ba703          	lw	a4,152(s7)
    83f4679c:	fae6cde3          	blt	a3,a4,83f46756 <NR+0x60>
  }
  /* Transform to floating-point with float precision for input signals, input sample have to be 16-bit length */
  for (i = 0; i < 2*st->frame_size; i++) {
    83f467a0:	02e05e63          	blez	a4,83f467dc <NR+0xe6>
    83f467a4:	4701                	li	a4,0
    83f467a6:	0000c797          	auipc	a5,0xc
    83f467aa:	aba7a707          	flw	fa4,-1350(a5) # 83f52260 <__func__.1+0x68>
    st->float_x[i] = (float)(x[i])/(float)(32768.0F);
    83f467ae:	00051583          	lh	a1,0(a0)
    83f467b2:	060bb683          	ld	a3,96(s7)
    83f467b6:	00271613          	slli	a2,a4,0x2
    83f467ba:	d005f7d3          	fcvt.s.w	fa5,a1
    83f467be:	96b2                	add	a3,a3,a2
  for (i = 0; i < 2*st->frame_size; i++) {
    83f467c0:	0705                	addi	a4,a4,1
    st->float_x[i] = (float)(x[i])/(float)(32768.0F);
    83f467c2:	10e7f7d3          	fmul.s	fa5,fa5,fa4
  for (i = 0; i < 2*st->frame_size; i++) {
    83f467c6:	0007061b          	sext.w	a2,a4
    83f467ca:	0509                	addi	a0,a0,2
    st->float_x[i] = (float)(x[i])/(float)(32768.0F);
    83f467cc:	00f6a027          	fsw	fa5,0(a3)
  for (i = 0; i < 2*st->frame_size; i++) {
    83f467d0:	098ba683          	lw	a3,152(s7)
    83f467d4:	0016969b          	slliw	a3,a3,0x1
    83f467d8:	fcd64be3          	blt	a2,a3,83f467ae <NR+0xb8>
  }

  /* Apply analysis window */
  for (i = 0; i < (nFFT/2); i++) {
    83f467dc:	67c2                	ld	a5,16(sp)
    83f467de:	4014d99b          	sraiw	s3,s1,0x1
    83f467e2:	4685                	li	a3,1
    83f467e4:	8ace                	mv	s5,s3
    83f467e6:	00015597          	auipc	a1,0x15
    83f467ea:	e9258593          	addi	a1,a1,-366 # 83f5b678 <tmp_ifft_out>
    83f467ee:	00299813          	slli	a6,s3,0x2
    83f467f2:	4701                	li	a4,0
    83f467f4:	38f6d6e3          	bge	a3,a5,83f47380 <NR+0xc8a>
    tmp_ifft_out[i] = st->ana_win[i] * st->float_x[i];
    83f467f8:	008bb603          	ld	a2,8(s7)
    83f467fc:	060bb683          	ld	a3,96(s7)
    83f46800:	00271513          	slli	a0,a4,0x2
    83f46804:	962a                	add	a2,a2,a0
    83f46806:	96aa                	add	a3,a3,a0
    83f46808:	00062787          	flw	fa5,0(a2)
    83f4680c:	0006a707          	flw	fa4,0(a3)
    tmp_ifft_out[(nFFT/2) + i] = 0.0F;
    83f46810:	01058633          	add	a2,a1,a6
  for (i = 0; i < (nFFT/2); i++) {
    83f46814:	0591                	addi	a1,a1,4
    tmp_ifft_out[i] = st->ana_win[i] * st->float_x[i];
    83f46816:	10e7f7d3          	fmul.s	fa5,fa5,fa4
  for (i = 0; i < (nFFT/2); i++) {
    83f4681a:	0705                	addi	a4,a4,1
    83f4681c:	0007069b          	sext.w	a3,a4
    tmp_ifft_out[i] = st->ana_win[i] * st->float_x[i];
    83f46820:	fef5ae27          	fsw	fa5,-4(a1)
    tmp_ifft_out[(nFFT/2) + i] = 0.0F;
    83f46824:	00062023          	sw	zero,0(a2)
  for (i = 0; i < (nFFT/2); i++) {
    83f46828:	fd36c8e3          	blt	a3,s3,83f467f8 <NR+0x102>
  }

  /* Take fourier transform of one frame */
  speech_fft(st->nr_fft_table, tmp_ifft_out, tmp_fft_out);    /* faster than matlab fft() */
    83f4682c:	000bb503          	ld	a0,0(s7)
    83f46830:	00014617          	auipc	a2,0x14
    83f46834:	44060613          	addi	a2,a2,1088 # 83f5ac70 <tmp_fft_out>
    83f46838:	00015597          	auipc	a1,0x15
    83f4683c:	e4058593          	addi	a1,a1,-448 # 83f5b678 <tmp_ifft_out>
  nr_fd_half[0].re = tmp_fft_out[0] * nFFT;    /* multiply nFFT to get values as in matlab */
    83f46840:	8432                	mv	s0,a2
    83f46842:	ec32                	sd	a2,24(sp)
  speech_fft(st->nr_fft_table, tmp_ifft_out, tmp_fft_out);    /* faster than matlab fft() */
    83f46844:	059020ef          	jal	ra,83f4909c <speech_fft>
  nr_fd_half[0].re = tmp_fft_out[0] * nFFT;    /* multiply nFFT to get values as in matlab */
    83f46848:	00042787          	flw	fa5,0(s0)
    83f4684c:	d004fa53          	fcvt.s.w	fs4,s1
  nr_fd_half[0].im = (float)3.3495873e-008;    /* assign a small value to avoid dividing by zero */
    83f46850:	0000c417          	auipc	s0,0xc
    83f46854:	ae440413          	addi	s0,s0,-1308 # 83f52334 <__func__.1+0x13c>
    83f46858:	00042707          	flw	fa4,0(s0)
  nr_fd_half[0].re = tmp_fft_out[0] * nFFT;    /* multiply nFFT to get values as in matlab */
    83f4685c:	1147f7d3          	fmul.s	fa5,fa5,fs4
    83f46860:	00013797          	auipc	a5,0x13
    83f46864:	50078793          	addi	a5,a5,1280 # 83f59d60 <nr_fd_half>
    83f46868:	f03e                	sd	a5,32(sp)
  nr_fd_half[0].im = (float)3.3495873e-008;    /* assign a small value to avoid dividing by zero */
    83f4686a:	00e7a227          	fsw	fa4,4(a5)
  for (k = 1, j = 1; j < (nFFT/2); k+=2, j++) {
    83f4686e:	470d                	li	a4,3
  nr_fd_half[0].re = tmp_fft_out[0] * nFFT;    /* multiply nFFT to get values as in matlab */
    83f46870:	00f7a027          	fsw	fa5,0(a5)
  for (k = 1, j = 1; j < (nFFT/2); k+=2, j++) {
    83f46874:	67c2                	ld	a5,16(sp)
    83f46876:	02f75c63          	bge	a4,a5,83f468ae <NR+0x1b8>
    83f4687a:	00014697          	auipc	a3,0x14
    83f4687e:	3fa68693          	addi	a3,a3,1018 # 83f5ac74 <tmp_fft_out+0x4>
    83f46882:	00013717          	auipc	a4,0x13
    83f46886:	4e670713          	addi	a4,a4,1254 # 83f59d68 <nr_fd_half+0x8>
    83f4688a:	4605                	li	a2,1
    nr_fd_half[j].re = tmp_fft_out[k] * nFFT;
    83f4688c:	0006a707          	flw	fa4,0(a3)
    nr_fd_half[j].im = tmp_fft_out[k+1] * nFFT;
    83f46890:	0046a787          	flw	fa5,4(a3)
  for (k = 1, j = 1; j < (nFFT/2); k+=2, j++) {
    83f46894:	0721                	addi	a4,a4,8
    nr_fd_half[j].re = tmp_fft_out[k] * nFFT;
    83f46896:	11477753          	fmul.s	fa4,fa4,fs4
    nr_fd_half[j].im = tmp_fft_out[k+1] * nFFT;
    83f4689a:	1147f7d3          	fmul.s	fa5,fa5,fs4
  for (k = 1, j = 1; j < (nFFT/2); k+=2, j++) {
    83f4689e:	2605                	addiw	a2,a2,1
    83f468a0:	06a1                	addi	a3,a3,8
    nr_fd_half[j].re = tmp_fft_out[k] * nFFT;
    83f468a2:	fee72c27          	fsw	fa4,-8(a4)
    nr_fd_half[j].im = tmp_fft_out[k+1] * nFFT;
    83f468a6:	fef72e27          	fsw	fa5,-4(a4)
  for (k = 1, j = 1; j < (nFFT/2); k+=2, j++) {
    83f468aa:	ff3641e3          	blt	a2,s3,83f4688c <NR+0x196>
  }
  nr_fd_half[nFFT/2].re = tmp_fft_out[nFFT-1] * nFFT;
    83f468ae:	6762                	ld	a4,24(sp)
    83f468b0:	34fd                	addiw	s1,s1,-1
    83f468b2:	00249793          	slli	a5,s1,0x2
    83f468b6:	00f70cb3          	add	s9,a4,a5
    83f468ba:	000ca787          	flw	fa5,0(s9) # 8000 <_EL1_STACK_SIZE+0x7800>
    83f468be:	7702                	ld	a4,32(sp)
  nr_fd_half[nFFT/2].im = (float)3.3495873e-008;    /* assign a small value to avoid dividing by zero */
    83f468c0:	00042707          	flw	fa4,0(s0)
  nr_fd_half[nFFT/2].re = tmp_fft_out[nFFT-1] * nFFT;
    83f468c4:	1147f7d3          	fmul.s	fa5,fa5,fs4
    83f468c8:	e0be                	sd	a5,64(sp)
    83f468ca:	00399793          	slli	a5,s3,0x3
    83f468ce:	973e                	add	a4,a4,a5

  a_abs(nr_fd_half, nr_sig, (nFFT/2+1));    /* amplitude */
    83f468d0:	2a85                	addiw	s5,s5,1
  nr_fd_half[nFFT/2].im = (float)3.3495873e-008;    /* assign a small value to avoid dividing by zero */
    83f468d2:	00e72227          	fsw	fa4,4(a4)
  nr_fd_half[nFFT/2].re = tmp_fft_out[nFFT-1] * nFFT;
    83f468d6:	00f72027          	fsw	fa5,0(a4)
  a_abs(nr_fd_half, nr_sig, (nFFT/2+1));    /* amplitude */
    83f468da:	00014597          	auipc	a1,0x14
    83f468de:	e8e58593          	addi	a1,a1,-370 # 83f5a768 <nr_sig>
    83f468e2:	00013517          	auipc	a0,0x13
    83f468e6:	47e50513          	addi	a0,a0,1150 # 83f59d60 <nr_fd_half>
    83f468ea:	8656                	mv	a2,s5
  nr_fd_half[nFFT/2].re = tmp_fft_out[nFFT-1] * nFFT;
    83f468ec:	fc3e                	sd	a5,56(sp)
  a_abs(nr_fd_half, nr_sig, (nFFT/2+1));    /* amplitude */
    83f468ee:	197020ef          	jal	ra,83f49284 <a_abs>
  c_power(nr_sig, tmp_ifft_out, (nFFT/2+1));    /* power */
    83f468f2:	8656                	mv	a2,s5
    83f468f4:	00014517          	auipc	a0,0x14
    83f468f8:	e7450513          	addi	a0,a0,-396 # 83f5a768 <nr_sig>
    83f468fc:	00015597          	auipc	a1,0x15
    83f46900:	d7c58593          	addi	a1,a1,-644 # 83f5b678 <tmp_ifft_out>
    83f46904:	031020ef          	jal	ra,83f49134 <c_power>

  /* Solve the issue of silence segment appeared in the beginning */
 //tmp1 = c_sum(nr_sig, (nFFT/2+1));
 tmp1 = c_sum(nr_sig, (nFFT/2));
    83f46908:	85ce                	mv	a1,s3
    83f4690a:	00014517          	auipc	a0,0x14
    83f4690e:	e5e50513          	addi	a0,a0,-418 # 83f5a768 <nr_sig>
    83f46912:	145020ef          	jal	ra,83f49256 <c_sum>
  if (tmp1/(nFFT/2.0F) < 0.0003F) {    /* small signal segment */
    83f46916:	0000c797          	auipc	a5,0xc
    83f4691a:	95a7a407          	flw	fs0,-1702(a5) # 83f52270 <__func__.1+0x78>
    83f4691e:	108a74d3          	fmul.s	fs1,fs4,fs0
    83f46922:	0000c797          	auipc	a5,0xc
    83f46926:	a167a707          	flw	fa4,-1514(a5) # 83f52338 <__func__.1+0x140>
    83f4692a:	18957553          	fdiv.s	fa0,fa0,fs1
    83f4692e:	a0e51753          	flt.s	a4,fa0,fa4
    83f46932:	c35d                	beqz	a4,83f469d8 <NR+0x2e2>
    *frame = 1.0F;    /* reset initial noise power estimate */
    83f46934:	0000c797          	auipc	a5,0xc
    83f46938:	91c7a787          	flw	fa5,-1764(a5) # 83f52250 <__func__.1+0x58>
    st->vad_dr_cnt = 0.0F;
    st->vad_dr = 0.0F;
    st->vad_mmse = 0.0F;
    st->vad_mmse_cnt = 0.0F;
    xtmp_im = nFFT / 2.0F;
    for (i = 0; i < (int)(xtmp_im + 1.0F); i++) {
    83f4693c:	00f4f753          	fadd.s	fa4,fs1,fa5
    *frame = 1.0F;    /* reset initial noise power estimate */
    83f46940:	00f92027          	fsw	fa5,0(s2)
    st->vad_slope_cnt = 0.0F;
    83f46944:	060bb423          	sd	zero,104(s7)
    st->vad_dr_cnt = 0.0F;
    83f46948:	060bb823          	sd	zero,112(s7)
    st->vad_mmse = 0.0F;
    83f4694c:	060bbc23          	sd	zero,120(s7)
    for (i = 0; i < (int)(xtmp_im + 1.0F); i++) {
    83f46950:	c00716d3          	fcvt.w.s	a3,fa4,rtz
    83f46954:	4701                	li	a4,0
    83f46956:	2681                	sext.w	a3,a3
    83f46958:	00269613          	slli	a2,a3,0x2
    83f4695c:	02d05463          	blez	a3,83f46984 <NR+0x28e>
      st->noise_mean[i] = 0.0F;
    83f46960:	030bb683          	ld	a3,48(s7)
    83f46964:	96ba                	add	a3,a3,a4
    83f46966:	0006a023          	sw	zero,0(a3)
      st->noise_mu2[i] = 0.0F;
    83f4696a:	038bb683          	ld	a3,56(s7)
    83f4696e:	96ba                	add	a3,a3,a4
    83f46970:	0006a023          	sw	zero,0(a3)
      st->Xk_prev[i] = 0.0F;
    83f46974:	028bb683          	ld	a3,40(s7)
    83f46978:	96ba                	add	a3,a3,a4
    83f4697a:	0006a023          	sw	zero,0(a3)
    for (i = 0; i < (int)(xtmp_im + 1.0F); i++) {
    83f4697e:	0711                	addi	a4,a4,4
    83f46980:	fee610e3          	bne	a2,a4,83f46960 <NR+0x26a>
    83f46984:	4701                	li	a4,0
    }
    for (i = 0; i < 5; i++) {
    83f46986:	4651                	li	a2,20
      st->noisy_st_trough[i] = 0.0F;
    83f46988:	048bb683          	ld	a3,72(s7)
    83f4698c:	96ba                	add	a3,a3,a4
    83f4698e:	0006a023          	sw	zero,0(a3)
      st->noisy_st_peak[i] = 0.0F;
    83f46992:	050bb683          	ld	a3,80(s7)
    83f46996:	96ba                	add	a3,a3,a4
    83f46998:	0006a023          	sw	zero,0(a3)
      for (j = 0; j < 3; j++) {
        st->amp_inst_band[i+5*j] = 0.0F;
    83f4699c:	040bb683          	ld	a3,64(s7)
    83f469a0:	96ba                	add	a3,a3,a4
    83f469a2:	0006a023          	sw	zero,0(a3)
    83f469a6:	040bb683          	ld	a3,64(s7)
    83f469aa:	96ba                	add	a3,a3,a4
    83f469ac:	0006aa23          	sw	zero,20(a3)
    83f469b0:	040bb683          	ld	a3,64(s7)
    83f469b4:	96ba                	add	a3,a3,a4
    83f469b6:	0206a423          	sw	zero,40(a3)
    for (i = 0; i < 5; i++) {
    83f469ba:	0711                	addi	a4,a4,4
    83f469bc:	fcc716e3          	bne	a4,a2,83f46988 <NR+0x292>
      }
    }
    for (i = 0; i < 3; i++) {
      st->amp_inst_sum_hist[i] = 0.0F;
    83f469c0:	058bb703          	ld	a4,88(s7)
    83f469c4:	00072023          	sw	zero,0(a4)
    83f469c8:	058bb703          	ld	a4,88(s7)
    83f469cc:	00072223          	sw	zero,4(a4)
    83f469d0:	058bb703          	ld	a4,88(s7)
    83f469d4:	00072423          	sw	zero,8(a4)
    }
  }

  if (*frame <= initial_noise_pow_time) {    /* amplitude of accumulating the first handful of frames */
    83f469d8:	00092787          	flw	fa5,0(s2)
    83f469dc:	a1278753          	fle.s	a4,fa5,fs2
    83f469e0:	c32d                	beqz	a4,83f46a42 <NR+0x34c>
    83f469e2:	00014597          	auipc	a1,0x14
    83f469e6:	d8658593          	addi	a1,a1,-634 # 83f5a768 <nr_sig>
    83f469ea:	00014617          	auipc	a2,0x14
    83f469ee:	28660613          	addi	a2,a2,646 # 83f5ac70 <tmp_fft_out>
    83f469f2:	4701                	li	a4,0
    for (i = 0; i < 321; i++) {
    83f469f4:	50400513          	li	a0,1284
      st->noise_mean[i] += nr_sig[i];
    83f469f8:	030bb683          	ld	a3,48(s7)
    83f469fc:	0005a707          	flw	fa4,0(a1)
    for (i = 0; i < 321; i++) {
    83f46a00:	0611                	addi	a2,a2,4
      st->noise_mean[i] += nr_sig[i];
    83f46a02:	96ba                	add	a3,a3,a4
    83f46a04:	0006a787          	flw	fa5,0(a3)
    for (i = 0; i < 321; i++) {
    83f46a08:	0591                	addi	a1,a1,4
      st->noise_mean[i] += nr_sig[i];
    83f46a0a:	00e7f7d3          	fadd.s	fa5,fa5,fa4
    83f46a0e:	00f6a027          	fsw	fa5,0(a3)
      tmp_fft_out[i] = st->noise_mean[i] / (*frame);
    83f46a12:	030bb683          	ld	a3,48(s7)
    83f46a16:	00092707          	flw	fa4,0(s2)
    83f46a1a:	96ba                	add	a3,a3,a4
    83f46a1c:	0006a787          	flw	fa5,0(a3)
    for (i = 0; i < 321; i++) {
    83f46a20:	0711                	addi	a4,a4,4
      tmp_fft_out[i] = st->noise_mean[i] / (*frame);
    83f46a22:	18e7f7d3          	fdiv.s	fa5,fa5,fa4
    83f46a26:	fef62e27          	fsw	fa5,-4(a2)
    for (i = 0; i < 321; i++) {
    83f46a2a:	fca717e3          	bne	a4,a0,83f469f8 <NR+0x302>
    }
    c_power(tmp_fft_out, st->noise_mu2, 321);	    /* average power for one frame */
    83f46a2e:	038bb583          	ld	a1,56(s7)
    83f46a32:	14100613          	li	a2,321
    83f46a36:	00014517          	auipc	a0,0x14
    83f46a3a:	23a50513          	addi	a0,a0,570 # 83f5ac70 <tmp_fft_out>
    83f46a3e:	6f6020ef          	jal	ra,83f49134 <c_power>
    /*for (i = 0; i < 321; i++)
	fprintf(fp_test, "%f \n", st->noise_mu2[i]);*/
  }

  for (i = 0; i < (nFFT/2+1); i++) {
    83f46a42:	67c2                	ld	a5,16(sp)
    83f46a44:	56fd                	li	a3,-1
    83f46a46:	00015597          	auipc	a1,0x15
    83f46a4a:	c3258593          	addi	a1,a1,-974 # 83f5b678 <tmp_ifft_out>
    83f46a4e:	00013517          	auipc	a0,0x13
    83f46a52:	90250513          	addi	a0,a0,-1790 # 83f59350 <gammak>
    83f46a56:	4701                	li	a4,0
    83f46a58:	06d7c663          	blt	a5,a3,83f46ac4 <NR+0x3ce>
    if (st->noise_mu2[i] == 0.0F) {    /* zero denominator */
    83f46a5c:	f00006d3          	fmv.w.x	fa3,zero
      } else {
        gammak[i] = 40.0F;
      }
    } else {
      absar = tmp_ifft_out[i] / st->noise_mu2[i];
      if (!(absar < 40.0F)) {
    83f46a60:	0000c797          	auipc	a5,0xc
    83f46a64:	8d07a607          	flw	fa2,-1840(a5) # 83f52330 <__func__.1+0x138>
        gammak[i] = 40.0F;
    83f46a68:	0000c817          	auipc	a6,0xc
    83f46a6c:	8c880813          	addi	a6,a6,-1848 # 83f52330 <__func__.1+0x138>
    83f46a70:	a821                	j	83f46a88 <NR+0x392>
      if (tmp_ifft_out[i] == 0.0F) {
    83f46a72:	3c060763          	beqz	a2,83f46e40 <NR+0x74a>
        gammak[i] = 0.0F;
    83f46a76:	00052023          	sw	zero,0(a0)
  for (i = 0; i < (nFFT/2+1); i++) {
    83f46a7a:	0705                	addi	a4,a4,1
    83f46a7c:	0007069b          	sext.w	a3,a4
    83f46a80:	0591                	addi	a1,a1,4
    83f46a82:	0511                	addi	a0,a0,4
    83f46a84:	04d9c063          	blt	s3,a3,83f46ac4 <NR+0x3ce>
    if (st->noise_mu2[i] == 0.0F) {    /* zero denominator */
    83f46a88:	038bb603          	ld	a2,56(s7)
    83f46a8c:	00271693          	slli	a3,a4,0x2
      if (tmp_ifft_out[i] == 0.0F) {
    83f46a90:	0005a787          	flw	fa5,0(a1)
    if (st->noise_mu2[i] == 0.0F) {    /* zero denominator */
    83f46a94:	96b2                	add	a3,a3,a2
    83f46a96:	0006a707          	flw	fa4,0(a3)
      if (tmp_ifft_out[i] == 0.0F) {
    83f46a9a:	a0d7a653          	feq.s	a2,fa5,fa3
    if (st->noise_mu2[i] == 0.0F) {    /* zero denominator */
    83f46a9e:	a0d726d3          	feq.s	a3,fa4,fa3
    83f46aa2:	fae1                	bnez	a3,83f46a72 <NR+0x37c>
      absar = tmp_ifft_out[i] / st->noise_mu2[i];
    83f46aa4:	18e7f7d3          	fdiv.s	fa5,fa5,fa4
      if (!(absar < 40.0F)) {
    83f46aa8:	a0c796d3          	flt.s	a3,fa5,fa2
    83f46aac:	e299                	bnez	a3,83f46ab2 <NR+0x3bc>
        absar = 40.0F;
    83f46aae:	20c607d3          	fmv.s	fa5,fa2
  for (i = 0; i < (nFFT/2+1); i++) {
    83f46ab2:	0705                	addi	a4,a4,1
      }
      gammak[i] = absar;    /* posteriori SNR */
    83f46ab4:	00f52027          	fsw	fa5,0(a0)
  for (i = 0; i < (nFFT/2+1); i++) {
    83f46ab8:	0007069b          	sext.w	a3,a4
    83f46abc:	0591                	addi	a1,a1,4
    83f46abe:	0511                	addi	a0,a0,4
    83f46ac0:	fcd9d4e3          	bge	s3,a3,83f46a88 <NR+0x392>
    }
  }

  if (*frame == 1.0F) {    /* priori SNR for the first frame */
    83f46ac4:	00092787          	flw	fa5,0(s2)
    83f46ac8:	0000b797          	auipc	a5,0xb
    83f46acc:	7887aa87          	flw	fs5,1928(a5) # 83f52250 <__func__.1+0x58>
    83f46ad0:	a157a753          	feq.s	a4,fa5,fs5
    83f46ad4:	78070d63          	beqz	a4,83f4726e <NR+0xb78>
    for (k = 0; k < 321; k++) {
      xtmp_im = gammak[k] - 1.0F;
      xtmp_im = MAX(xtmp_im, 0.0F);
    83f46ad8:	f0000653          	fmv.w.x	fa2,zero
    83f46adc:	00013717          	auipc	a4,0x13
    83f46ae0:	87470713          	addi	a4,a4,-1932 # 83f59350 <gammak>
    83f46ae4:	00013697          	auipc	a3,0x13
    83f46ae8:	d7468693          	addi	a3,a3,-652 # 83f59858 <ksi>
    83f46aec:	00013497          	auipc	s1,0x13
    83f46af0:	d6848493          	addi	s1,s1,-664 # 83f59854 <gammak+0x504>
      xtmp_im = gammak[k] - 1.0F;
    83f46af4:	00072787          	flw	fa5,0(a4)
    for (k = 0; k < 321; k++) {
    83f46af8:	0711                	addi	a4,a4,4
      xtmp_im = gammak[k] - 1.0F;
    83f46afa:	0957f7d3          	fsub.s	fa5,fa5,fs5
      xtmp_im = MAX(xtmp_im, 0.0F);
    83f46afe:	a0c79653          	flt.s	a2,fa5,fa2
    83f46b02:	c219                	beqz	a2,83f46b08 <NR+0x412>
    83f46b04:	f00007d3          	fmv.w.x	fa5,zero
      ksi[k] = st->aa + (1.0F - st->aa) * xtmp_im;
    83f46b08:	088ba687          	flw	fa3,136(s7)
    for (k = 0; k < 321; k++) {
    83f46b0c:	0691                	addi	a3,a3,4
      ksi[k] = st->aa + (1.0F - st->aa) * xtmp_im;
    83f46b0e:	08daf753          	fsub.s	fa4,fs5,fa3
    83f46b12:	68f777c3          	fmadd.s	fa5,fa4,fa5,fa3
    83f46b16:	fef6ae27          	fsw	fa5,-4(a3)
    for (k = 0; k < 321; k++) {
    83f46b1a:	fce49de3          	bne	s1,a4,83f46af4 <NR+0x3fe>
    83f46b1e:	00013c97          	auipc	s9,0x13
    83f46b22:	23ec8c93          	addi	s9,s9,574 # 83f59d5c <ksi+0x504>
      xtmp_im = gammak[k] - 1.0F;
      xtmp_im = MAX(xtmp_im, 0.0F);
      if (0.0F == st->noise_mu2[k])
        st->noise_mu2[k] = (float)3.3495873e-008;    /* assign a small value to avoid dividing by zero */
      ksi[k] = st->aa * st->Xk_prev[k] / st->noise_mu2[k] + (1.0F - st->aa) * xtmp_im;
      ksi[k] = MAX(ksi[k], st->ksi_min);    /* limit ksi greater than -25dB in power */
    83f46b26:	4751                	li	a4,20
    }
  }

  /* slope detection */
  for (i = 0; i < 5; i++) {
    83f46b28:	02800593          	li	a1,40
    st->amp_inst_band[10 + i] = st->amp_inst_band[5 + i];
    83f46b2c:	040bb603          	ld	a2,64(s7)
    83f46b30:	963a                	add	a2,a2,a4
    83f46b32:	00062787          	flw	fa5,0(a2)
    83f46b36:	00f62a27          	fsw	fa5,20(a2)
    st->amp_inst_band[5 + i] = st->amp_inst_band[i];
    83f46b3a:	040bb603          	ld	a2,64(s7)
    83f46b3e:	963a                	add	a2,a2,a4
    83f46b40:	fec62787          	flw	fa5,-20(a2)
  for (i = 0; i < 5; i++) {
    83f46b44:	0711                	addi	a4,a4,4
    st->amp_inst_band[5 + i] = st->amp_inst_band[i];
    83f46b46:	00f62027          	fsw	fa5,0(a2)
  for (i = 0; i < 5; i++) {
    83f46b4a:	feb711e3          	bne	a4,a1,83f46b2c <NR+0x436>
  }

  st->amp_inst_band[0] = c_sum(*(float (*)[20])&nr_sig[4], 20);               /* 20 */
    83f46b4e:	040bb403          	ld	s0,64(s7)
    83f46b52:	45d1                	li	a1,20
    83f46b54:	00014517          	auipc	a0,0x14
    83f46b58:	c2450513          	addi	a0,a0,-988 # 83f5a778 <nr_sig+0x10>
    83f46b5c:	6fa020ef          	jal	ra,83f49256 <c_sum>
    83f46b60:	00a42027          	fsw	fa0,0(s0)
  st->amp_inst_band[1] = c_sum(*(float (*)[20])&nr_sig[24], 20);             /* 20 */
    83f46b64:	040bb403          	ld	s0,64(s7)
    83f46b68:	45d1                	li	a1,20
    83f46b6a:	00014517          	auipc	a0,0x14
    83f46b6e:	c5e50513          	addi	a0,a0,-930 # 83f5a7c8 <nr_sig+0x60>
    83f46b72:	6e4020ef          	jal	ra,83f49256 <c_sum>
    83f46b76:	00a42227          	fsw	fa0,4(s0)
  st->amp_inst_band[2] = c_sum(*(float (*)[40])&nr_sig[44], 40);             /* 40 */
    83f46b7a:	040bb403          	ld	s0,64(s7)
    83f46b7e:	02800593          	li	a1,40
    83f46b82:	00014517          	auipc	a0,0x14
    83f46b86:	c9650513          	addi	a0,a0,-874 # 83f5a818 <nr_sig+0xb0>
    83f46b8a:	6cc020ef          	jal	ra,83f49256 <c_sum>
    83f46b8e:	00a42427          	fsw	fa0,8(s0)
  st->amp_inst_band[3] = c_sum(*(float (*)[80])&nr_sig[84], 80);             /* 80 */
    83f46b92:	040bb403          	ld	s0,64(s7)
    83f46b96:	05000593          	li	a1,80
    83f46b9a:	00014517          	auipc	a0,0x14
    83f46b9e:	d1e50513          	addi	a0,a0,-738 # 83f5a8b8 <nr_sig+0x150>
    83f46ba2:	6b4020ef          	jal	ra,83f49256 <c_sum>
    83f46ba6:	00a42627          	fsw	fa0,12(s0)
  st->amp_inst_band[4] = c_sum(*(float (*)[156])&nr_sig[164], 156);      /* 156 */
    83f46baa:	040bb403          	ld	s0,64(s7)
    83f46bae:	09c00593          	li	a1,156
    83f46bb2:	00014517          	auipc	a0,0x14
    83f46bb6:	e4650513          	addi	a0,a0,-442 # 83f5a9f8 <nr_sig+0x290>
    83f46bba:	69c020ef          	jal	ra,83f49256 <c_sum>
  /*for (i = 0; i < 5; i++)
 	fprintf(fp_test, "%f \n", st->amp_inst_band[i]);*/

  slope_detection(st);
    83f46bbe:	855e                	mv	a0,s7
  st->amp_inst_band[4] = c_sum(*(float (*)[156])&nr_sig[164], 156);      /* 156 */
    83f46bc0:	00a42827          	fsw	fa0,16(s0)
  slope_detection(st);
    83f46bc4:	5d6020ef          	jal	ra,83f4919a <slope_detection>

  /* dynamic range detection */
  dr_detection(st);
    83f46bc8:	855e                	mv	a0,s7
    83f46bca:	7dd020ef          	jal	ra,83f49ba6 <dr_detection>

  if ((st->vad_slope != 0.0F) || (st->vad_dr != 0.0F)) {
    83f46bce:	06cba707          	flw	fa4,108(s7)
    83f46bd2:	f00007d3          	fmv.w.x	fa5,zero
    vad = true;
    83f46bd6:	4a85                	li	s5,1
  if ((st->vad_slope != 0.0F) || (st->vad_dr != 0.0F)) {
    83f46bd8:	a0f72753          	feq.s	a4,fa4,fa5
    83f46bdc:	c719                	beqz	a4,83f46bea <NR+0x4f4>
    83f46bde:	074ba707          	flw	fa4,116(s7)
    83f46be2:	a0f72ad3          	feq.s	s5,fa4,fa5
    vad = true;
    83f46be6:	001aca93          	xori	s5,s5,1
    83f46bea:	00014797          	auipc	a5,0x14
    83f46bee:	08678793          	addi	a5,a5,134 # 83f5ac70 <tmp_fft_out>
    83f46bf2:	00013d97          	auipc	s11,0x13
    83f46bf6:	c66d8d93          	addi	s11,s11,-922 # 83f59858 <ksi>
    83f46bfa:	ec3e                	sd	a5,24(sp)
    83f46bfc:	863e                	mv	a2,a5
    83f46bfe:	876e                	mv	a4,s11
    vad = false;
  }

  /* log_sigma_k calculation for mmse vad */
  for (i = 0; i < 321; i++) {
    tmp_fft_out[i] = 1.0F + ksi[i];
    83f46c00:	00072787          	flw	fa5,0(a4)
  for (i = 0; i < 321; i++) {
    83f46c04:	0611                	addi	a2,a2,4
    83f46c06:	0711                	addi	a4,a4,4
    tmp_fft_out[i] = 1.0F + ksi[i];
    83f46c08:	0157f7d3          	fadd.s	fa5,fa5,fs5
    83f46c0c:	fef62e27          	fsw	fa5,-4(a2)
  for (i = 0; i < 321; i++) {
    83f46c10:	feec98e3          	bne	s9,a4,83f46c00 <NR+0x50a>
  }
  b_log(tmp_fft_out);	/* C = log(1+ksi) */
    83f46c14:	00014517          	auipc	a0,0x14
    83f46c18:	05c50513          	addi	a0,a0,92 # 83f5ac70 <tmp_fft_out>
    83f46c1c:	200050ef          	jal	ra,83f4be1c <b_log>

  for (k = 0; k < 321; k++) {
    83f46c20:	00012417          	auipc	s0,0x12
    83f46c24:	73040413          	addi	s0,s0,1840 # 83f59350 <gammak>
    if (0.0F == (1.0F + ksi[k]))
    83f46c28:	f00005d3          	fmv.w.x	fa1,zero
  b_log(tmp_fft_out);	/* C = log(1+ksi) */
    83f46c2c:	00014597          	auipc	a1,0x14
    83f46c30:	04458593          	addi	a1,a1,68 # 83f5ac70 <tmp_fft_out>
    83f46c34:	8522                	mv	a0,s0
    83f46c36:	00013617          	auipc	a2,0x13
    83f46c3a:	c2260613          	addi	a2,a2,-990 # 83f59858 <ksi>
      tmp_fft_out[k] = gammak[k] * ksi[k] / ((float)3.3495873e-008) - tmp_fft_out[k];    /* assign a small value to avoid dividing by zero */
    83f46c3e:	0000b797          	auipc	a5,0xb
    83f46c42:	6f67a507          	flw	fa0,1782(a5) # 83f52334 <__func__.1+0x13c>
    83f46c46:	a821                	j	83f46c5e <NR+0x568>
    83f46c48:	18a7f7d3          	fdiv.s	fa5,fa5,fa0
  for (k = 0; k < 321; k++) {
    83f46c4c:	0591                	addi	a1,a1,4
    83f46c4e:	0611                	addi	a2,a2,4
    83f46c50:	0511                	addi	a0,a0,4
      tmp_fft_out[k] = gammak[k] * ksi[k] / ((float)3.3495873e-008) - tmp_fft_out[k];    /* assign a small value to avoid dividing by zero */
    83f46c52:	08e7f7d3          	fsub.s	fa5,fa5,fa4
    83f46c56:	fef5ae27          	fsw	fa5,-4(a1)
  for (k = 0; k < 321; k++) {
    83f46c5a:	02cc8b63          	beq	s9,a2,83f46c90 <NR+0x59a>
    if (0.0F == (1.0F + ksi[k]))
    83f46c5e:	00062787          	flw	fa5,0(a2)
      tmp_fft_out[k] = gammak[k] * ksi[k] / ((float)3.3495873e-008) - tmp_fft_out[k];    /* assign a small value to avoid dividing by zero */
    83f46c62:	00052607          	flw	fa2,0(a0)
    83f46c66:	0005a707          	flw	fa4,0(a1)
    if (0.0F == (1.0F + ksi[k]))
    83f46c6a:	0157f6d3          	fadd.s	fa3,fa5,fs5
      tmp_fft_out[k] = gammak[k] * ksi[k] / ((float)3.3495873e-008) - tmp_fft_out[k];    /* assign a small value to avoid dividing by zero */
    83f46c6e:	10c7f7d3          	fmul.s	fa5,fa5,fa2
    if (0.0F == (1.0F + ksi[k]))
    83f46c72:	a0b6a8d3          	feq.s	a7,fa3,fa1
    83f46c76:	fc0899e3          	bnez	a7,83f46c48 <NR+0x552>
    else
      tmp_fft_out[k] = gammak[k] * ksi[k] / (1.0F + ksi[k]) - tmp_fft_out[k];    /* log_sigma_k */
    83f46c7a:	18d7f7d3          	fdiv.s	fa5,fa5,fa3
  for (k = 0; k < 321; k++) {
    83f46c7e:	0591                	addi	a1,a1,4
    83f46c80:	0611                	addi	a2,a2,4
    83f46c82:	0511                	addi	a0,a0,4
      tmp_fft_out[k] = gammak[k] * ksi[k] / (1.0F + ksi[k]) - tmp_fft_out[k];    /* log_sigma_k */
    83f46c84:	08e7f7d3          	fsub.s	fa5,fa5,fa4
    83f46c88:	fef5ae27          	fsw	fa5,-4(a1)
  for (k = 0; k < 321; k++) {
    83f46c8c:	fccc99e3          	bne	s9,a2,83f46c5e <NR+0x568>
  }

  xtmp_im = c_sum(tmp_fft_out, nFFT/2);    /* here only consider log_sigma_k(1:nFFT/2) */
    83f46c90:	85ce                	mv	a1,s3
    83f46c92:	00014517          	auipc	a0,0x14
    83f46c96:	fde50513          	addi	a0,a0,-34 # 83f5ac70 <tmp_fft_out>
    83f46c9a:	5bc020ef          	jal	ra,83f49256 <c_sum>
  xtmp_im = xtmp_im/(nFFT/2.0F);
    83f46c9e:	189574d3          	fdiv.s	fs1,fa0,fs1

  if (xtmp_im <= st->eta) {
    83f46ca2:	080ba787          	flw	fa5,128(s7)
    83f46ca6:	a0f48653          	fle.s	a2,fs1,fa5
    83f46caa:	5a060963          	beqz	a2,83f4725c <NR+0xb66>
    st->vad_mmse_cnt = MAX(0.0F, st->vad_mmse_cnt - 1.0F);
    83f46cae:	07cba787          	flw	fa5,124(s7)
    83f46cb2:	f0000753          	fmv.w.x	fa4,zero
    83f46cb6:	0957f7d3          	fsub.s	fa5,fa5,fs5
    83f46cba:	a0f71653          	flt.s	a2,fa4,fa5
    83f46cbe:	64060763          	beqz	a2,83f4730c <NR+0xc16>
    if (st->vad_mmse_cnt == 0.0F) {
      st->vad_mmse = 0.0F;
    }
  } else {
    st->vad_mmse = 1.0F;
    st->vad_mmse_cnt = st->vad_mmse_cnt_para;
    83f46cc2:	06fbae27          	fsw	fa5,124(s7)
  }

  /* noise power estimate correction when it is too high */
  /* small speech in quiet after big statioanry noise, correct wrong */
  st->amp_inst_sum_hist[2] = st->amp_inst_sum_hist[1];
    83f46cc6:	058bb603          	ld	a2,88(s7)
  st->amp_inst_sum_hist[1] = st->amp_inst_sum_hist[0];
  st->amp_inst_sum_hist[0] = c_sum(st->amp_inst_band, 5);
    83f46cca:	4595                	li	a1,5
  st->amp_inst_sum_hist[2] = st->amp_inst_sum_hist[1];
    83f46ccc:	00462787          	flw	fa5,4(a2)
    83f46cd0:	00f62427          	fsw	fa5,8(a2)
  st->amp_inst_sum_hist[1] = st->amp_inst_sum_hist[0];
    83f46cd4:	058bb603          	ld	a2,88(s7)
    83f46cd8:	00062787          	flw	fa5,0(a2)
    83f46cdc:	00f62227          	fsw	fa5,4(a2)
  st->amp_inst_sum_hist[0] = c_sum(st->amp_inst_band, 5);
    83f46ce0:	040bb503          	ld	a0,64(s7)
    83f46ce4:	058bbb03          	ld	s6,88(s7)
    83f46ce8:	56e020ef          	jal	ra,83f49256 <c_sum>
    83f46cec:	00ab2027          	fsw	fa0,0(s6)
  //fprintf(fp_test, "%f \n", st->amp_inst_sum_hist[0]);

  c_power(st->amp_inst_sum_hist, b_c, 3);    /* power based */
    83f46cf0:	058bb503          	ld	a0,88(s7)
    83f46cf4:	460d                	li	a2,3
    83f46cf6:	088c                	addi	a1,sp,80
    83f46cf8:	43c020ef          	jal	ra,83f49134 <c_power>
  /*for (k = 0; k < 3; k++)
  	fprintf(fp_test, "%f \n", b_c[k]);*/

  for (k = 0; k < 3; k++) {
    b_c[k] *= 0.3333F;    /* average power */
    83f46cfc:	05012607          	flw	fa2,80(sp)
    83f46d00:	05412687          	flw	fa3,84(sp)
    83f46d04:	0000b797          	auipc	a5,0xb
    83f46d08:	6387a787          	flw	fa5,1592(a5) # 83f5233c <__func__.1+0x144>
    83f46d0c:	10f67653          	fmul.s	fa2,fa2,fa5
    83f46d10:	10f6f6d3          	fmul.s	fa3,fa3,fa5
    83f46d14:	05812707          	flw	fa4,88(sp)
  xtmp_im = b_c[0];
  for (k = 0; k < 2; k++) {
    xtmp_im += b_c[k + 1];
  }

  absar = st->noise_mu2[4];
    83f46d18:	038bb503          	ld	a0,56(s7)
    b_c[k] *= 0.3333F;    /* average power */
    83f46d1c:	10f77753          	fmul.s	fa4,fa4,fa5
    xtmp_im += b_c[k + 1];
    83f46d20:	00d675d3          	fadd.s	fa1,fa2,fa3
  absar = st->noise_mu2[4];
    83f46d24:	01052787          	flw	fa5,16(a0)
    b_c[k] *= 0.3333F;    /* average power */
    83f46d28:	04c12827          	fsw	fa2,80(sp)
    83f46d2c:	04d12a27          	fsw	fa3,84(sp)
    83f46d30:	04e12c27          	fsw	fa4,88(sp)
    xtmp_im += b_c[k + 1];
    83f46d34:	00e5f5d3          	fadd.s	fa1,fa1,fa4
  for (k = 0; k < 315; k++) {
    83f46d38:	01450613          	addi	a2,a0,20
    83f46d3c:	50050593          	addi	a1,a0,1280
    absar += st->noise_mu2[k + 5];
    83f46d40:	00062707          	flw	fa4,0(a2)
  for (k = 0; k < 315; k++) {
    83f46d44:	0611                	addi	a2,a2,4
    absar += st->noise_mu2[k + 5];
    83f46d46:	00e7f7d3          	fadd.s	fa5,fa5,fa4
  for (k = 0; k < 315; k++) {
    83f46d4a:	fec59be3          	bne	a1,a2,83f46d40 <NR+0x64a>
  }

  if (absar / 8.0F > xtmp_im) {	/* +/-18dB for statioanry noise variance for the whole signals, assumption */
    83f46d4e:	0000b797          	auipc	a5,0xb
    83f46d52:	5f27a707          	flw	fa4,1522(a5) # 83f52340 <__func__.1+0x148>
    83f46d56:	10e7f7d3          	fmul.s	fa5,fa5,fa4
    83f46d5a:	a0f59653          	flt.s	a2,fa1,fa5
    83f46d5e:	c231                	beqz	a2,83f46da2 <NR+0x6ac>
    83f46d60:	00015597          	auipc	a1,0x15
    83f46d64:	91858593          	addi	a1,a1,-1768 # 83f5b678 <tmp_ifft_out>
    83f46d68:	4601                	li	a2,0
    83f46d6a:	0000b797          	auipc	a5,0xb
    83f46d6e:	5da7a607          	flw	fa2,1498(a5) # 83f52344 <__func__.1+0x14c>
    83f46d72:	0000b797          	auipc	a5,0xb
    83f46d76:	5327a687          	flw	fa3,1330(a5) # 83f522a4 <__func__.1+0xac>
    for (k = 0; k < 321; k++) {
    83f46d7a:	50400893          	li	a7,1284
    83f46d7e:	a019                	j	83f46d84 <NR+0x68e>
      st->noise_mu2[k] = 0.8F * st->noise_mu2[k] + 0.2F * tmp_ifft_out[k];    /* here faster to update noise power */
    83f46d80:	038bb503          	ld	a0,56(s7)
    83f46d84:	0005a707          	flw	fa4,0(a1)
    83f46d88:	9532                	add	a0,a0,a2
    83f46d8a:	00052787          	flw	fa5,0(a0)
    83f46d8e:	10c77753          	fmul.s	fa4,fa4,fa2
    for (k = 0; k < 321; k++) {
    83f46d92:	0611                	addi	a2,a2,4
    83f46d94:	0591                	addi	a1,a1,4
      st->noise_mu2[k] = 0.8F * st->noise_mu2[k] + 0.2F * tmp_ifft_out[k];    /* here faster to update noise power */
    83f46d96:	70d7f7c3          	fmadd.s	fa5,fa5,fa3,fa4
    83f46d9a:	00f52027          	fsw	fa5,0(a0)
    for (k = 0; k < 321; k++) {
    83f46d9e:	ff1611e3          	bne	a2,a7,83f46d80 <NR+0x68a>
    }
  }

  /* %% keep better speech quality, not too easy to update noise power %% */
  *speech_vad = true;
    83f46da2:	4605                	li	a2,1
    83f46da4:	00ca0023          	sb	a2,0(s4)
  if ((st->vad_mmse == 0.0F) || (!vad)) {
    83f46da8:	078ba707          	flw	fa4,120(s7)
    83f46dac:	f00007d3          	fmv.w.x	fa5,zero
    83f46db0:	a0f72653          	feq.s	a2,fa4,fa5
    83f46db4:	ea59                	bnez	a2,83f46e4a <NR+0x754>
    83f46db6:	080a8a63          	beqz	s5,83f46e4a <NR+0x754>
    83f46dba:	00015a17          	auipc	s4,0x15
    83f46dbe:	8bea0a13          	addi	s4,s4,-1858 # 83f5b678 <tmp_ifft_out>
  /*  === end of vad ===  */


  /* v(k) calculation */
  for (k = 0; k < 321; k++) {
    if (0.0F == (1.0F + ksi[k]))
    83f46dc2:	f0000953          	fmv.w.x	fs2,zero
  if (absar / 8.0F > xtmp_im) {	/* +/-18dB for statioanry noise variance for the whole signals, assumption */
    83f46dc6:	00014d17          	auipc	s10,0x14
    83f46dca:	eaad0d13          	addi	s10,s10,-342 # 83f5ac70 <tmp_fft_out>
    83f46dce:	8c52                	mv	s8,s4
    83f46dd0:	00012b17          	auipc	s6,0x12
    83f46dd4:	580b0b13          	addi	s6,s6,1408 # 83f59350 <gammak>
    83f46dd8:	00013a97          	auipc	s5,0x13
    83f46ddc:	a80a8a93          	addi	s5,s5,-1408 # 83f59858 <ksi>
    83f46de0:	0000b797          	auipc	a5,0xb
    83f46de4:	4987a487          	flw	fs1,1176(a5) # 83f52278 <__func__.1+0x80>
      xtmp_im = ksi[k] * gammak[k] / ((float)3.3495873e-008);    /* assign a small value to avoid dividing by zero */
    83f46de8:	0000b797          	auipc	a5,0xb
    83f46dec:	54c7a987          	flw	fs3,1356(a5) # 83f52334 <__func__.1+0x13c>
    83f46df0:	a80d                	j	83f46e22 <NR+0x72c>
    83f46df2:	1937f7d3          	fdiv.s	fa5,fa5,fs3
    else
      xtmp_im = ksi[k] * gammak[k] / (1.0F + ksi[k]);    /* v(k) */
    tmp_ifft_out[k] = xtmp_im;
    tmp_fft_out[321+k] = xtmp_im / 2.0F;
    tmp_fft_out[k] = (float)exp(-0.5F * xtmp_im);    /* C = exp(-0.5*vk) */
    83f46df6:	1097f553          	fmul.s	fa0,fa5,fs1
    tmp_fft_out[321+k] = xtmp_im / 2.0F;
    83f46dfa:	1087f753          	fmul.s	fa4,fa5,fs0
    tmp_ifft_out[k] = xtmp_im;
    83f46dfe:	00fc2027          	fsw	fa5,0(s8)
  for (k = 0; k < 321; k++) {
    83f46e02:	0a91                	addi	s5,s5,4
    83f46e04:	0d11                	addi	s10,s10,4
    tmp_fft_out[k] = (float)exp(-0.5F * xtmp_im);    /* C = exp(-0.5*vk) */
    83f46e06:	42050553          	fcvt.d.s	fa0,fa0
    tmp_fft_out[321+k] = xtmp_im / 2.0F;
    83f46e0a:	50ed2027          	fsw	fa4,1280(s10)
  for (k = 0; k < 321; k++) {
    83f46e0e:	0c11                	addi	s8,s8,4
    tmp_fft_out[k] = (float)exp(-0.5F * xtmp_im);    /* C = exp(-0.5*vk) */
    83f46e10:	dd1f90ef          	jal	ra,83f40be0 <exp>
    83f46e14:	40157553          	fcvt.s.d	fa0,fa0
  for (k = 0; k < 321; k++) {
    83f46e18:	0b11                	addi	s6,s6,4
    tmp_fft_out[k] = (float)exp(-0.5F * xtmp_im);    /* C = exp(-0.5*vk) */
    83f46e1a:	fead2e27          	fsw	fa0,-4(s10)
  for (k = 0; k < 321; k++) {
    83f46e1e:	075c8563          	beq	s9,s5,83f46e88 <NR+0x792>
    if (0.0F == (1.0F + ksi[k]))
    83f46e22:	000aa787          	flw	fa5,0(s5)
      xtmp_im = ksi[k] * gammak[k] / ((float)3.3495873e-008);    /* assign a small value to avoid dividing by zero */
    83f46e26:	000b2687          	flw	fa3,0(s6)
    if (0.0F == (1.0F + ksi[k]))
    83f46e2a:	0157f753          	fadd.s	fa4,fa5,fs5
      xtmp_im = ksi[k] * gammak[k] / ((float)3.3495873e-008);    /* assign a small value to avoid dividing by zero */
    83f46e2e:	10d7f7d3          	fmul.s	fa5,fa5,fa3
    if (0.0F == (1.0F + ksi[k]))
    83f46e32:	a12728d3          	feq.s	a7,fa4,fs2
    83f46e36:	fa089ee3          	bnez	a7,83f46df2 <NR+0x6fc>
      xtmp_im = ksi[k] * gammak[k] / (1.0F + ksi[k]);    /* v(k) */
    83f46e3a:	18e7f7d3          	fdiv.s	fa5,fa5,fa4
    83f46e3e:	bf65                	j	83f46df6 <NR+0x700>
        gammak[i] = 40.0F;
    83f46e40:	00082787          	flw	fa5,0(a6)
    83f46e44:	00f52027          	fsw	fa5,0(a0)
    83f46e48:	b90d                	j	83f46a7a <NR+0x384>
    83f46e4a:	00015517          	auipc	a0,0x15
    83f46e4e:	82e50513          	addi	a0,a0,-2002 # 83f5b678 <tmp_ifft_out>
  if (absar / 8.0F > xtmp_im) {	/* +/-18dB for statioanry noise variance for the whole signals, assumption */
    83f46e52:	4581                	li	a1,0
    for (k = 0; k < 321; k++) {
    83f46e54:	50400893          	li	a7,1284
      st->noise_mu2[k] = st->mu * st->noise_mu2[k] + (1.0F - st->mu) * tmp_ifft_out[k];    /* update noise power */
    83f46e58:	08cba787          	flw	fa5,140(s7)
    83f46e5c:	00052607          	flw	fa2,0(a0)
    83f46e60:	038bb603          	ld	a2,56(s7)
    83f46e64:	08faf753          	fsub.s	fa4,fs5,fa5
    for (k = 0; k < 321; k++) {
    83f46e68:	0511                	addi	a0,a0,4
      st->noise_mu2[k] = st->mu * st->noise_mu2[k] + (1.0F - st->mu) * tmp_ifft_out[k];    /* update noise power */
    83f46e6a:	962e                	add	a2,a2,a1
    83f46e6c:	00062687          	flw	fa3,0(a2)
    for (k = 0; k < 321; k++) {
    83f46e70:	0591                	addi	a1,a1,4
      st->noise_mu2[k] = st->mu * st->noise_mu2[k] + (1.0F - st->mu) * tmp_ifft_out[k];    /* update noise power */
    83f46e72:	10c77753          	fmul.s	fa4,fa4,fa2
    83f46e76:	70d7f7c3          	fmadd.s	fa5,fa5,fa3,fa4
    83f46e7a:	00f62027          	fsw	fa5,0(a2)
    for (k = 0; k < 321; k++) {
    83f46e7e:	fd159de3          	bne	a1,a7,83f46e58 <NR+0x762>
    *speech_vad = false;
    83f46e82:	000a0023          	sb	zero,0(s4)
    83f46e86:	bf15                	j	83f46dba <NR+0x6c4>
  }

  d_power(tmp_ifft_out, &tmp_ifft_out[321]);    /* vk.^0.5 */
    83f46e88:	00015597          	auipc	a1,0x15
    83f46e8c:	cf458593          	addi	a1,a1,-780 # 83f5bb7c <tmp_ifft_out+0x504>
    83f46e90:	00014517          	auipc	a0,0x14
    83f46e94:	7e850513          	addi	a0,a0,2024 # 83f5b678 <tmp_ifft_out>
    83f46e98:	2c8020ef          	jal	ra,83f49160 <d_power>
  for (i = 0; i < 321; i++) {
    83f46e9c:	00015c97          	auipc	s9,0x15
    83f46ea0:	ce0c8c93          	addi	s9,s9,-800 # 83f5bb7c <tmp_ifft_out+0x504>
      //if ((tmp_ifft_out[321+i] == 0.0F) && (gammak[i] == 0.0F)) {    /* bug fixed to avoid zero denominator */
      if ((gammak[i] == 0.0F)) {
    83f46ea4:	f00006d3          	fmv.w.x	fa3,zero
  d_power(tmp_ifft_out, &tmp_ifft_out[321]);    /* vk.^0.5 */
    83f46ea8:	00014597          	auipc	a1,0x14
    83f46eac:	dc858593          	addi	a1,a1,-568 # 83f5ac70 <tmp_fft_out>
    83f46eb0:	86e6                	mv	a3,s9
        tmp_ifft_out[321+i] = 0.0F;
      } else {
        tmp_ifft_out[321+i] = (c * tmp_ifft_out[321+i] * tmp_fft_out[i]) / gammak[i];
    83f46eb2:	0000b797          	auipc	a5,0xb
    83f46eb6:	4967a587          	flw	fa1,1174(a5) # 83f52348 <__func__.1+0x150>
    83f46eba:	a801                	j	83f46eca <NR+0x7d4>
        tmp_ifft_out[321+i] = 0.0F;
    83f46ebc:	0006a023          	sw	zero,0(a3)
  for (i = 0; i < 321; i++) {
    83f46ec0:	0411                	addi	s0,s0,4
    83f46ec2:	0691                	addi	a3,a3,4
    83f46ec4:	0591                	addi	a1,a1,4
    83f46ec6:	02848863          	beq	s1,s0,83f46ef6 <NR+0x800>
      if ((gammak[i] == 0.0F)) {
    83f46eca:	00042707          	flw	fa4,0(s0)
    83f46ece:	a0d72553          	feq.s	a0,fa4,fa3
    83f46ed2:	f56d                	bnez	a0,83f46ebc <NR+0x7c6>
        tmp_ifft_out[321+i] = (c * tmp_ifft_out[321+i] * tmp_fft_out[i]) / gammak[i];
    83f46ed4:	0006a787          	flw	fa5,0(a3)
    83f46ed8:	0005a607          	flw	fa2,0(a1)
  for (i = 0; i < 321; i++) {
    83f46edc:	0411                	addi	s0,s0,4
        tmp_ifft_out[321+i] = (c * tmp_ifft_out[321+i] * tmp_fft_out[i]) / gammak[i];
    83f46ede:	10b7f7d3          	fmul.s	fa5,fa5,fa1
  for (i = 0; i < 321; i++) {
    83f46ee2:	0691                	addi	a3,a3,4
    83f46ee4:	0591                	addi	a1,a1,4
        tmp_ifft_out[321+i] = (c * tmp_ifft_out[321+i] * tmp_fft_out[i]) / gammak[i];
    83f46ee6:	10c7f7d3          	fmul.s	fa5,fa5,fa2
    83f46eea:	18e7f7d3          	fdiv.s	fa5,fa5,fa4
    83f46eee:	fef6ae27          	fsw	fa5,-4(a3)
  for (i = 0; i < 321; i++) {
    83f46ef2:	fc849ce3          	bne	s1,s0,83f46eca <NR+0x7d4>
      }
  }

  bessel_function(0.0F, &tmp_fft_out[321], tmp_fft_out);    /* zero order modified Bessel function */
    83f46ef6:	f0000553          	fmv.w.x	fa0,zero
    83f46efa:	00014597          	auipc	a1,0x14
    83f46efe:	d7658593          	addi	a1,a1,-650 # 83f5ac70 <tmp_fft_out>
    83f46f02:	00014517          	auipc	a0,0x14
    83f46f06:	27250513          	addi	a0,a0,626 # 83f5b174 <tmp_fft_out+0x504>
    83f46f0a:	341020ef          	jal	ra,83f49a4a <bessel_function>
  bessel_function(1.0F, &tmp_fft_out[321], &tmp_fft_out[321]);    /* first order modified Bessel function */
    83f46f0e:	215a8553          	fmv.s	fa0,fs5
    83f46f12:	00014597          	auipc	a1,0x14
    83f46f16:	26258593          	addi	a1,a1,610 # 83f5b174 <tmp_fft_out+0x504>
    83f46f1a:	852e                	mv	a0,a1
    83f46f1c:	32f020ef          	jal	ra,83f49a4a <bessel_function>

  /* G(ksi, gammak) estimation */
  for (k = 0; k < 321; k++) {
    83f46f20:	0000b797          	auipc	a5,0xb
    83f46f24:	42c7a987          	flw	fs3,1068(a5) # 83f5234c <__func__.1+0x154>
    tmp = tmp_ifft_out[321+k];
    xtmp_re = tmp_fft_out[k] * (1.0F + tmp_ifft_out[k]);
    tmp1 = tmp_fft_out[321+k] * tmp_ifft_out[k];
    if (0.0F == (1.0F + ksi[k]))
      lambda = qkr * (float)exp(tmp_ifft_out[k]) / ((float)3.3495873e-008);    /* assign a small value to avoid dividing by zero */
    83f46f28:	0000b797          	auipc	a5,0xb
    83f46f2c:	40c7a907          	flw	fs2,1036(a5) # 83f52334 <__func__.1+0x13c>
    83f46f30:	00014a97          	auipc	s5,0x14
    83f46f34:	838a8a93          	addi	s5,s5,-1992 # 83f5a768 <nr_sig>
    else
      tmp = lambda / (1.0F + lambda) * xtmp_re;    /* estimated amplitude of clean speech */

    //Xk_prev[k].re = c_sig[k].re * c_sig[k].re - c_sig[k].im * c_sig[k].im;    /* use for updating ksi in next frame */
    //Xk_prev[k].im = c_sig[k].re * c_sig[k].im + c_sig[k].im * c_sig[k].re;    /* use for updating ksi in next frame */
    st->Xk_prev[k] = tmp * tmp;    /* use for updating ksi in next frame */
    83f46f38:	afc00513          	li	a0,-1284
    83f46f3c:	00014797          	auipc	a5,0x14
    83f46f40:	d3478793          	addi	a5,a5,-716 # 83f5ac70 <tmp_fft_out>
    if (0.0F == (1.0F + ksi[k]))
    83f46f44:	f00004d3          	fmv.w.x	fs1,zero
    83f46f48:	00014b17          	auipc	s6,0x14
    83f46f4c:	22cb0b13          	addi	s6,s6,556 # 83f5b174 <tmp_fft_out+0x504>
    83f46f50:	00014497          	auipc	s1,0x14
    83f46f54:	72848493          	addi	s1,s1,1832 # 83f5b678 <tmp_ifft_out>
  bessel_function(1.0F, &tmp_fft_out[321], &tmp_fft_out[321]);    /* first order modified Bessel function */
    83f46f58:	00015c17          	auipc	s8,0x15
    83f46f5c:	c24c0c13          	addi	s8,s8,-988 # 83f5bb7c <tmp_ifft_out+0x504>
    83f46f60:	8d56                	mv	s10,s5
    st->Xk_prev[k] = tmp * tmp;    /* use for updating ksi in next frame */
    83f46f62:	40f50433          	sub	s0,a0,a5
    83f46f66:	a891                	j	83f46fba <NR+0x8c4>
      lambda = qkr * (float)exp(tmp_ifft_out[k]) / ((float)3.3495873e-008);    /* assign a small value to avoid dividing by zero */
    83f46f68:	c79f90ef          	jal	ra,83f40be0 <exp>
    83f46f6c:	40157553          	fcvt.s.d	fa0,fa0
    xtmp_re = nr_sig[k] * (tmp * (xtmp_re + tmp1));
    83f46f70:	01647453          	fadd.s	fs0,fs0,fs6
    83f46f74:	000d2707          	flw	fa4,0(s10)
      lambda = qkr * (float)exp(tmp_ifft_out[k]) / ((float)3.3495873e-008);    /* assign a small value to avoid dividing by zero */
    83f46f78:	11357553          	fmul.s	fa0,fa0,fs3
    xtmp_re = nr_sig[k] * (tmp * (xtmp_re + tmp1));
    83f46f7c:	117477d3          	fmul.s	fa5,fs0,fs7
      lambda = qkr * (float)exp(tmp_ifft_out[k]) / ((float)3.3495873e-008);    /* assign a small value to avoid dividing by zero */
    83f46f80:	19257553          	fdiv.s	fa0,fa0,fs2
    xtmp_re = nr_sig[k] * (tmp * (xtmp_re + tmp1));
    83f46f84:	10e7f7d3          	fmul.s	fa5,fa5,fa4
    if (0.0F == (1.0F + lambda))
    83f46f88:	01557753          	fadd.s	fa4,fa0,fs5
    83f46f8c:	a0972553          	feq.s	a0,fa4,fs1
    83f46f90:	c549                	beqz	a0,83f4701a <NR+0x924>
      tmp = lambda / ((float)3.3495873e-008) * xtmp_re;    /* assign a small value to avoid dividing by zero */
    83f46f92:	19257553          	fdiv.s	fa0,fa0,fs2
    83f46f96:	10f577d3          	fmul.s	fa5,fa0,fa5
    st->Xk_prev[k] = tmp * tmp;    /* use for updating ksi in next frame */
    83f46f9a:	028bb503          	ld	a0,40(s7)
    83f46f9e:	10f7f753          	fmul.s	fa4,fa5,fa5
    tmp_ifft_out[321+k] = tmp;
    83f46fa2:	00fc2027          	fsw	fa5,0(s8)
    st->Xk_prev[k] = tmp * tmp;    /* use for updating ksi in next frame */
    83f46fa6:	955a                	add	a0,a0,s6
    83f46fa8:	9522                	add	a0,a0,s0
  for (k = 0; k < 321; k++) {
    83f46faa:	0b11                	addi	s6,s6,4
    st->Xk_prev[k] = tmp * tmp;    /* use for updating ksi in next frame */
    83f46fac:	00e52027          	fsw	fa4,0(a0)
  for (k = 0; k < 321; k++) {
    83f46fb0:	0d91                	addi	s11,s11,4
    83f46fb2:	0d11                	addi	s10,s10,4
    83f46fb4:	0c11                	addi	s8,s8,4
    83f46fb6:	07648763          	beq	s1,s6,83f47024 <NR+0x92e>
    if (0.0F == (1.0F + ksi[k]))
    83f46fba:	000da787          	flw	fa5,0(s11)
    xtmp_re = tmp_fft_out[k] * (1.0F + tmp_ifft_out[k]);
    83f46fbe:	afcc2707          	flw	fa4,-1284(s8)
    83f46fc2:	afcb2687          	flw	fa3,-1284(s6)
    if (0.0F == (1.0F + ksi[k]))
    83f46fc6:	0157f7d3          	fadd.s	fa5,fa5,fs5
    xtmp_re = tmp_fft_out[k] * (1.0F + tmp_ifft_out[k]);
    83f46fca:	01577453          	fadd.s	fs0,fa4,fs5
    tmp1 = tmp_fft_out[321+k] * tmp_ifft_out[k];
    83f46fce:	000b2b07          	flw	fs6,0(s6)
    tmp = tmp_ifft_out[321+k];
    83f46fd2:	000c2b87          	flw	fs7,0(s8)
      lambda = qkr * (float)exp(tmp_ifft_out[k]) / ((float)3.3495873e-008);    /* assign a small value to avoid dividing by zero */
    83f46fd6:	42070553          	fcvt.d.s	fa0,fa4
    if (0.0F == (1.0F + ksi[k]))
    83f46fda:	a097a553          	feq.s	a0,fa5,fs1
    xtmp_re = tmp_fft_out[k] * (1.0F + tmp_ifft_out[k]);
    83f46fde:	10d47453          	fmul.s	fs0,fs0,fa3
    tmp1 = tmp_fft_out[321+k] * tmp_ifft_out[k];
    83f46fe2:	11677b53          	fmul.s	fs6,fa4,fs6
    if (0.0F == (1.0F + ksi[k]))
    83f46fe6:	f149                	bnez	a0,83f46f68 <NR+0x872>
      lambda = qkr * (float)exp(tmp_ifft_out[k]) / (1.0F + ksi[k]);
    83f46fe8:	bf9f90ef          	jal	ra,83f40be0 <exp>
    83f46fec:	000da787          	flw	fa5,0(s11)
    83f46ff0:	40157553          	fcvt.s.d	fa0,fa0
    xtmp_re = nr_sig[k] * (tmp * (xtmp_re + tmp1));
    83f46ff4:	01647453          	fadd.s	fs0,fs0,fs6
      lambda = qkr * (float)exp(tmp_ifft_out[k]) / (1.0F + ksi[k]);
    83f46ff8:	0157f7d3          	fadd.s	fa5,fa5,fs5
    83f46ffc:	11357553          	fmul.s	fa0,fa0,fs3
    xtmp_re = nr_sig[k] * (tmp * (xtmp_re + tmp1));
    83f47000:	000d2707          	flw	fa4,0(s10)
      lambda = qkr * (float)exp(tmp_ifft_out[k]) / (1.0F + ksi[k]);
    83f47004:	18f57553          	fdiv.s	fa0,fa0,fa5
    xtmp_re = nr_sig[k] * (tmp * (xtmp_re + tmp1));
    83f47008:	117477d3          	fmul.s	fa5,fs0,fs7
    83f4700c:	10e7f7d3          	fmul.s	fa5,fa5,fa4
    if (0.0F == (1.0F + lambda))
    83f47010:	01557753          	fadd.s	fa4,fa0,fs5
    83f47014:	a0972553          	feq.s	a0,fa4,fs1
    83f47018:	fd2d                	bnez	a0,83f46f92 <NR+0x89c>
      tmp = lambda / (1.0F + lambda) * xtmp_re;    /* estimated amplitude of clean speech */
    83f4701a:	18e57553          	fdiv.s	fa0,fa0,fa4
    83f4701e:	10f577d3          	fmul.s	fa5,fa0,fa5
    83f47022:	bfa5                	j	83f46f9a <NR+0x8a4>
  }

  for (k = 0; k < (nFFT/2+1); k++) {
    83f47024:	67c2                	ld	a5,16(sp)
    83f47026:	577d                	li	a4,-1
    83f47028:	08e7cc63          	blt	a5,a4,83f470c0 <NR+0x9ca>
    83f4702c:	00013417          	auipc	s0,0x13
    83f47030:	d3440413          	addi	s0,s0,-716 # 83f59d60 <nr_fd_half>
    83f47034:	84a2                	mv	s1,s0
    83f47036:	f022                	sd	s0,32(sp)
    83f47038:	00013d17          	auipc	s10,0x13
    83f4703c:	730d0d13          	addi	s10,s10,1840 # 83f5a768 <nr_sig>
    83f47040:	4d81                	li	s11,0
    nr_sig[k] = (float)atan2(nr_fd_half[k].im, nr_fd_half[k].re);    /* theta */
    83f47042:	0004a587          	flw	fa1,0(s1)
    83f47046:	0044a507          	flw	fa0,4(s1)
  for (k = 0; k < (nFFT/2+1); k++) {
    83f4704a:	0d11                	addi	s10,s10,4
    nr_sig[k] = (float)atan2(nr_fd_half[k].im, nr_fd_half[k].re);    /* theta */
    83f4704c:	420585d3          	fcvt.d.s	fa1,fa1
    83f47050:	42050553          	fcvt.d.s	fa0,fa0
  for (k = 0; k < (nFFT/2+1); k++) {
    83f47054:	2d85                	addiw	s11,s11,1
    83f47056:	04a1                	addi	s1,s1,8
    nr_sig[k] = (float)atan2(nr_fd_half[k].im, nr_fd_half[k].re);    /* theta */
    83f47058:	b87f90ef          	jal	ra,83f40bde <atan2>
    83f4705c:	40157553          	fcvt.s.d	fa0,fa0
    83f47060:	fead2e27          	fsw	fa0,-4(s10)
  for (k = 0; k < (nFFT/2+1); k++) {
    83f47064:	fdb9dfe3          	bge	s3,s11,83f47042 <NR+0x94c>
  }

  for (k = 0; k < (nFFT/2+1); k++) {
    if (nr_sig[k] == 0.0F) {
    83f47068:	f00004d3          	fmv.w.x	fs1,zero
    83f4706c:	4481                	li	s1,0
    83f4706e:	a809                	j	83f47080 <NR+0x98a>
      xtmp_im = 0.0F;
    } else {
      xtmp_re = (float)cos(nr_sig[k]);    /* Euler's formula */
      xtmp_im = (float)sin(nr_sig[k]);    /* Euler's formula */
    }
    nr_fd_half[k].re = xtmp_re;    /* phase part */
    83f47070:	00842027          	fsw	fs0,0(s0)
    nr_fd_half[k].im = xtmp_im;    /* phase part */
    83f47074:	00f42227          	fsw	fa5,4(s0)
  for (k = 0; k < (nFFT/2+1); k++) {
    83f47078:	0a91                	addi	s5,s5,4
    83f4707a:	0421                	addi	s0,s0,8
    83f4707c:	0499c263          	blt	s3,s1,83f470c0 <NR+0x9ca>
    if (nr_sig[k] == 0.0F) {
    83f47080:	000aa507          	flw	fa0,0(s5)
      xtmp_im = 0.0F;
    83f47084:	f00007d3          	fmv.w.x	fa5,zero
      xtmp_re = 1.0F;
    83f47088:	215a8453          	fmv.s	fs0,fs5
    if (nr_sig[k] == 0.0F) {
    83f4708c:	a0952753          	feq.s	a4,fa0,fs1
  for (k = 0; k < (nFFT/2+1); k++) {
    83f47090:	2485                	addiw	s1,s1,1
    if (nr_sig[k] == 0.0F) {
    83f47092:	ff79                	bnez	a4,83f47070 <NR+0x97a>
      xtmp_re = (float)cos(nr_sig[k]);    /* Euler's formula */
    83f47094:	42050553          	fcvt.d.s	fa0,fa0
  for (k = 0; k < (nFFT/2+1); k++) {
    83f47098:	0a91                	addi	s5,s5,4
    83f4709a:	0421                	addi	s0,s0,8
      xtmp_re = (float)cos(nr_sig[k]);    /* Euler's formula */
    83f4709c:	837f90ef          	jal	ra,83f408d2 <cos>
      xtmp_im = (float)sin(nr_sig[k]);    /* Euler's formula */
    83f470a0:	ffcaa787          	flw	fa5,-4(s5)
      xtmp_re = (float)cos(nr_sig[k]);    /* Euler's formula */
    83f470a4:	40157453          	fcvt.s.d	fs0,fa0
      xtmp_im = (float)sin(nr_sig[k]);    /* Euler's formula */
    83f470a8:	42078553          	fcvt.d.s	fa0,fa5
    83f470ac:	abbf90ef          	jal	ra,83f40b66 <sin>
    83f470b0:	401577d3          	fcvt.s.d	fa5,fa0
    nr_fd_half[k].re = xtmp_re;    /* phase part */
    83f470b4:	fe842c27          	fsw	fs0,-8(s0)
    nr_fd_half[k].im = xtmp_im;    /* phase part */
    83f470b8:	fef42e27          	fsw	fa5,-4(s0)
  for (k = 0; k < (nFFT/2+1); k++) {
    83f470bc:	fc99d2e3          	bge	s3,s1,83f47080 <NR+0x98a>
    83f470c0:	00013717          	auipc	a4,0x13
    83f470c4:	ca070713          	addi	a4,a4,-864 # 83f59d60 <nr_fd_half>
    83f470c8:	00013697          	auipc	a3,0x13
    83f470cc:	6a068693          	addi	a3,a3,1696 # 83f5a768 <nr_sig>
  for (k = 0; k < 321; k++) {
    //tmp1 = c_sig[k].re;
    //c_sig[k].re = c_sig[k].re * nr_fd_half[k].re - c_sig[k].im * nr_fd_half[k].im;    /* estimated clean speech signal */
    //c_sig[k].im = tmp1 * nr_fd_half[k].im + c_sig[k].im * nr_fd_half[k].re;    /* estimated clean speech signal */
    tmp = tmp_ifft_out[321+k];
    nr_fd_half[k].re = tmp * nr_fd_half[k].re;    /* estimated clean speech signal */
    83f470d0:	00072707          	flw	fa4,0(a4)
    nr_fd_half[k].im = tmp * nr_fd_half[k].im;    /* estimated clean speech signal */
    83f470d4:	00472787          	flw	fa5,4(a4)
    tmp = tmp_ifft_out[321+k];
    83f470d8:	000ca687          	flw	fa3,0(s9)
  for (k = 0; k < 321; k++) {
    83f470dc:	0721                	addi	a4,a4,8
    83f470de:	0c91                	addi	s9,s9,4
    nr_fd_half[k].re = tmp * nr_fd_half[k].re;    /* estimated clean speech signal */
    83f470e0:	10d77753          	fmul.s	fa4,fa4,fa3
    nr_fd_half[k].im = tmp * nr_fd_half[k].im;    /* estimated clean speech signal */
    83f470e4:	10d7f7d3          	fmul.s	fa5,fa5,fa3
    nr_fd_half[k].re = tmp * nr_fd_half[k].re;    /* estimated clean speech signal */
    83f470e8:	fee72c27          	fsw	fa4,-8(a4)
    nr_fd_half[k].im = tmp * nr_fd_half[k].im;    /* estimated clean speech signal */
    83f470ec:	fef72e27          	fsw	fa5,-4(a4)
  for (k = 0; k < 321; k++) {
    83f470f0:	fee690e3          	bne	a3,a4,83f470d0 <NR+0x9da>
  }

  tmp_fft_out[0] = nr_fd_half[0].re;
    83f470f4:	7782                	ld	a5,32(sp)
  for (k = 1, j = 1; j < (nFFT/2); k+=2, j++) {
    83f470f6:	458d                	li	a1,3
    83f470f8:	00013697          	auipc	a3,0x13
    83f470fc:	c7068693          	addi	a3,a3,-912 # 83f59d68 <nr_fd_half+0x8>
  tmp_fft_out[0] = nr_fd_half[0].re;
    83f47100:	0007a787          	flw	fa5,0(a5)
    83f47104:	67e2                	ld	a5,24(sp)
    83f47106:	00014717          	auipc	a4,0x14
    83f4710a:	b6e70713          	addi	a4,a4,-1170 # 83f5ac74 <tmp_fft_out+0x4>
  for (k = 1, j = 1; j < (nFFT/2); k+=2, j++) {
    83f4710e:	4605                	li	a2,1
  tmp_fft_out[0] = nr_fd_half[0].re;
    83f47110:	00f7a027          	fsw	fa5,0(a5)
  for (k = 1, j = 1; j < (nFFT/2); k+=2, j++) {
    83f47114:	67c2                	ld	a5,16(sp)
    83f47116:	00f5df63          	bge	a1,a5,83f47134 <NR+0xa3e>
    tmp_fft_out[k] = nr_fd_half[j].re;
    83f4711a:	0006a707          	flw	fa4,0(a3)
    tmp_fft_out[k+1] = nr_fd_half[j].im;
    83f4711e:	0046a787          	flw	fa5,4(a3)
  for (k = 1, j = 1; j < (nFFT/2); k+=2, j++) {
    83f47122:	2605                	addiw	a2,a2,1
    tmp_fft_out[k] = nr_fd_half[j].re;
    83f47124:	00e72027          	fsw	fa4,0(a4)
    tmp_fft_out[k+1] = nr_fd_half[j].im;
    83f47128:	00f72227          	fsw	fa5,4(a4)
  for (k = 1, j = 1; j < (nFFT/2); k+=2, j++) {
    83f4712c:	06a1                	addi	a3,a3,8
    83f4712e:	0721                	addi	a4,a4,8
    83f47130:	ff3645e3          	blt	a2,s3,83f4711a <NR+0xa24>
  }
  tmp_fft_out[nFFT-1] = nr_fd_half[nFFT/2].re;
    83f47134:	7782                	ld	a5,32(sp)
    83f47136:	7762                	ld	a4,56(sp)

  /* restore nFFT points before doing inverse FFT, do conjugate symmetric for the lower half points inside speech_ifft() */
  speech_ifft(st->nr_fft_table, tmp_fft_out, tmp_ifft_out);    /* faster than matlab ifft(), in/out not use the same buffer */
    83f47138:	00014617          	auipc	a2,0x14
    83f4713c:	54060613          	addi	a2,a2,1344 # 83f5b678 <tmp_ifft_out>
    83f47140:	00014597          	auipc	a1,0x14
    83f47144:	b3058593          	addi	a1,a1,-1232 # 83f5ac70 <tmp_fft_out>
  tmp_fft_out[nFFT-1] = nr_fd_half[nFFT/2].re;
    83f47148:	00e78c33          	add	s8,a5,a4
    83f4714c:	67e2                	ld	a5,24(sp)
    83f4714e:	6706                	ld	a4,64(sp)
    83f47150:	000c2787          	flw	fa5,0(s8)
    83f47154:	97ba                	add	a5,a5,a4
    83f47156:	00f7a027          	fsw	fa5,0(a5)
  speech_ifft(st->nr_fft_table, tmp_fft_out, tmp_ifft_out);    /* faster than matlab ifft(), in/out not use the same buffer */
    83f4715a:	000bb503          	ld	a0,0(s7)
    83f4715e:	7ab010ef          	jal	ra,83f49108 <speech_ifft>
  for (k = 0; k < len; k++) {    /* ignore output samples from (len+1) to (2*len) */
    83f47162:	77c2                	ld	a5,48(sp)
    83f47164:	02f05b63          	blez	a5,83f4719a <NR+0xaa4>
    83f47168:	47b6                	lw	a5,76(sp)
    83f4716a:	00014717          	auipc	a4,0x14
    83f4716e:	51270713          	addi	a4,a4,1298 # 83f5b67c <tmp_ifft_out+0x4>
    83f47172:	fff7869b          	addiw	a3,a5,-1
    83f47176:	02069793          	slli	a5,a3,0x20
    83f4717a:	01e7d693          	srli	a3,a5,0x1e
    83f4717e:	96ba                	add	a3,a3,a4
    83f47180:	00014717          	auipc	a4,0x14
    83f47184:	4f870713          	addi	a4,a4,1272 # 83f5b678 <tmp_ifft_out>
    tmp_ifft_out[k] /= nFFT;    /* divide by nFFT to get values as in matlab */
    83f47188:	00072787          	flw	fa5,0(a4)
  for (k = 0; k < len; k++) {    /* ignore output samples from (len+1) to (2*len) */
    83f4718c:	0711                	addi	a4,a4,4
    tmp_ifft_out[k] /= nFFT;    /* divide by nFFT to get values as in matlab */
    83f4718e:	1947f7d3          	fdiv.s	fa5,fa5,fs4
    83f47192:	fef72e27          	fsw	fa5,-4(a4)
  for (k = 0; k < len; k++) {    /* ignore output samples from (len+1) to (2*len) */
    83f47196:	fee699e3          	bne	a3,a4,83f47188 <NR+0xa92>
  }

  for (k = 0; k < len1; k++) {
    83f4719a:	77a2                	ld	a5,40(sp)
    83f4719c:	4701                	li	a4,0
    83f4719e:	00279593          	slli	a1,a5,0x2
    83f471a2:	04f05b63          	blez	a5,83f471f8 <NR+0xb02>
    y[k] = st->y_old[k] + (tmp_ifft_out[k] * st->syn_win[k]);    /* apply synthesis window and 50% OLA for output */
    83f471a6:	010bb603          	ld	a2,16(s7)
    83f471aa:	020bb683          	ld	a3,32(s7)
    83f471ae:	000a2787          	flw	fa5,0(s4)
    83f471b2:	963a                	add	a2,a2,a4
    83f471b4:	96ba                	add	a3,a3,a4
    83f471b6:	0006a707          	flw	fa4,0(a3)
    83f471ba:	00062687          	flw	fa3,0(a2)
    83f471be:	67a2                	ld	a5,8(sp)
    st->y_old[k] = tmp_ifft_out[len1 + k] * st->syn_win[len1 + k];    /* apply synthesis window and update output OLA buffer */
    83f471c0:	00ba0633          	add	a2,s4,a1
    y[k] = st->y_old[k] + (tmp_ifft_out[k] * st->syn_win[k]);    /* apply synthesis window and 50% OLA for output */
    83f471c4:	70d7f7c3          	fmadd.s	fa5,fa5,fa3,fa4
    83f471c8:	00e786b3          	add	a3,a5,a4
    st->y_old[k] = tmp_ifft_out[len1 + k] * st->syn_win[len1 + k];    /* apply synthesis window and update output OLA buffer */
    83f471cc:	0a11                	addi	s4,s4,4
    y[k] = st->y_old[k] + (tmp_ifft_out[k] * st->syn_win[k]);    /* apply synthesis window and 50% OLA for output */
    83f471ce:	00f6a027          	fsw	fa5,0(a3)
    st->y_old[k] = tmp_ifft_out[len1 + k] * st->syn_win[len1 + k];    /* apply synthesis window and update output OLA buffer */
    83f471d2:	010bb683          	ld	a3,16(s7)
    83f471d6:	00062707          	flw	fa4,0(a2)
    83f471da:	020bb603          	ld	a2,32(s7)
    83f471de:	96ae                	add	a3,a3,a1
    83f471e0:	96ba                	add	a3,a3,a4
    83f471e2:	0006a787          	flw	fa5,0(a3)
    83f471e6:	00e606b3          	add	a3,a2,a4
  for (k = 0; k < len1; k++) {
    83f471ea:	0711                	addi	a4,a4,4
    st->y_old[k] = tmp_ifft_out[len1 + k] * st->syn_win[len1 + k];    /* apply synthesis window and update output OLA buffer */
    83f471ec:	10e7f7d3          	fmul.s	fa5,fa5,fa4
    83f471f0:	00f6a027          	fsw	fa5,0(a3)
  for (k = 0; k < len1; k++) {
    83f471f4:	fae599e3          	bne	a1,a4,83f471a6 <NR+0xab0>
  }

  if (1 == (unsigned short)*frame)
    83f471f8:	00092787          	flw	fa5,0(s2)
    83f471fc:	4685                	li	a3,1
    83f471fe:	c0179753          	fcvt.wu.s	a4,fa5,rtz
    83f47202:	1742                	slli	a4,a4,0x30
    83f47204:	9341                	srli	a4,a4,0x30
    83f47206:	02d71163          	bne	a4,a3,83f47228 <NR+0xb32>
    st->nr_frame1_last_sample = y[st->frame_size-1];
    83f4720a:	098ba703          	lw	a4,152(s7)
    83f4720e:	67a2                	ld	a5,8(sp)
    83f47210:	070a                	slli	a4,a4,0x2
    83f47212:	973e                	add	a4,a4,a5
    83f47214:	ffc72787          	flw	fa5,-4(a4)
    83f47218:	08fbaa27          	fsw	fa5,148(s7)
  if (2 == (unsigned short)*frame) {
    83f4721c:	00092787          	flw	fa5,0(s2)
    83f47220:	c0179753          	fcvt.wu.s	a4,fa5,rtz
    83f47224:	1742                	slli	a4,a4,0x30
    83f47226:	9341                	srli	a4,a4,0x30
    83f47228:	4689                	li	a3,2
    83f4722a:	0ed70463          	beq	a4,a3,83f47312 <NR+0xc1c>
  SSP_SAFE_FREE_BUF(tmp_fft_out);
  SSP_SAFE_FREE_BUF(tmp_ifft_out);
  SSP_SAFE_FREE_BUF(nr_sig);
  SSP_SAFE_FREE_BUF(nr_fd_half);
#endif
}
    83f4722e:	60b2                	ld	ra,264(sp)
    83f47230:	6412                	ld	s0,256(sp)
    83f47232:	74ee                	ld	s1,248(sp)
    83f47234:	794e                	ld	s2,240(sp)
    83f47236:	79ae                	ld	s3,232(sp)
    83f47238:	7a0e                	ld	s4,224(sp)
    83f4723a:	6aee                	ld	s5,216(sp)
    83f4723c:	6b4e                	ld	s6,208(sp)
    83f4723e:	6bae                	ld	s7,200(sp)
    83f47240:	6c0e                	ld	s8,192(sp)
    83f47242:	7cea                	ld	s9,184(sp)
    83f47244:	7d4a                	ld	s10,176(sp)
    83f47246:	7daa                	ld	s11,168(sp)
    83f47248:	246a                	fld	fs0,152(sp)
    83f4724a:	24ca                	fld	fs1,144(sp)
    83f4724c:	292a                	fld	fs2,136(sp)
    83f4724e:	298a                	fld	fs3,128(sp)
    83f47250:	3a66                	fld	fs4,120(sp)
    83f47252:	3ac6                	fld	fs5,112(sp)
    83f47254:	3b26                	fld	fs6,104(sp)
    83f47256:	3b86                	fld	fs7,96(sp)
    83f47258:	6151                	addi	sp,sp,272
    83f4725a:	8082                	ret
    st->vad_mmse = 1.0F;
    83f4725c:	0000b797          	auipc	a5,0xb
    83f47260:	ff47a707          	flw	fa4,-12(a5) # 83f52250 <__func__.1+0x58>
    st->vad_mmse_cnt = st->vad_mmse_cnt_para;
    83f47264:	090ba787          	flw	fa5,144(s7)
    st->vad_mmse = 1.0F;
    83f47268:	06ebac27          	fsw	fa4,120(s7)
    83f4726c:	bc99                	j	83f46cc2 <NR+0x5cc>
      xtmp_im = MAX(xtmp_im, 0.0F);
    83f4726e:	f00005d3          	fmv.w.x	fa1,zero
    83f47272:	00012517          	auipc	a0,0x12
    83f47276:	0de50513          	addi	a0,a0,222 # 83f59350 <gammak>
    83f4727a:	00012717          	auipc	a4,0x12
    83f4727e:	5de70713          	addi	a4,a4,1502 # 83f59858 <ksi>
    83f47282:	00013c97          	auipc	s9,0x13
    83f47286:	adac8c93          	addi	s9,s9,-1318 # 83f59d5c <ksi+0x504>
  if (*frame == 1.0F) {    /* priori SNR for the first frame */
    83f4728a:	4601                	li	a2,0
      xtmp_im = gammak[k] - 1.0F;
    83f4728c:	00052687          	flw	fa3,0(a0)
    for (k = 0; k < 321; k++) {
    83f47290:	0511                	addi	a0,a0,4
      xtmp_im = gammak[k] - 1.0F;
    83f47292:	0956f6d3          	fsub.s	fa3,fa3,fs5
      xtmp_im = MAX(xtmp_im, 0.0F);
    83f47296:	a0b695d3          	flt.s	a1,fa3,fa1
    83f4729a:	c199                	beqz	a1,83f472a0 <NR+0xbaa>
    83f4729c:	f00006d3          	fmv.w.x	fa3,zero
      if (0.0F == st->noise_mu2[k])
    83f472a0:	038bb583          	ld	a1,56(s7)
    83f472a4:	95b2                	add	a1,a1,a2
    83f472a6:	0005a607          	flw	fa2,0(a1)
    83f472aa:	a0b62853          	feq.s	a6,fa2,fa1
    83f472ae:	00080b63          	beqz	a6,83f472c4 <NR+0xbce>
        st->noise_mu2[k] = (float)3.3495873e-008;    /* assign a small value to avoid dividing by zero */
    83f472b2:	00042787          	flw	fa5,0(s0)
    83f472b6:	00f5a027          	fsw	fa5,0(a1)
      ksi[k] = st->aa * st->Xk_prev[k] / st->noise_mu2[k] + (1.0F - st->aa) * xtmp_im;
    83f472ba:	038bb583          	ld	a1,56(s7)
    83f472be:	95b2                	add	a1,a1,a2
    83f472c0:	0005a607          	flw	fa2,0(a1)
    83f472c4:	028bb583          	ld	a1,40(s7)
    83f472c8:	088ba787          	flw	fa5,136(s7)
    83f472cc:	95b2                	add	a1,a1,a2
    83f472ce:	0005a507          	flw	fa0,0(a1)
    83f472d2:	08faf753          	fsub.s	fa4,fs5,fa5
    for (k = 0; k < 321; k++) {
    83f472d6:	0611                	addi	a2,a2,4
      ksi[k] = st->aa * st->Xk_prev[k] / st->noise_mu2[k] + (1.0F - st->aa) * xtmp_im;
    83f472d8:	10a7f7d3          	fmul.s	fa5,fa5,fa0
    83f472dc:	18c7f7d3          	fdiv.s	fa5,fa5,fa2
    83f472e0:	78d777c3          	fmadd.s	fa5,fa4,fa3,fa5
    83f472e4:	00f72027          	fsw	fa5,0(a4)
      ksi[k] = MAX(ksi[k], st->ksi_min);    /* limit ksi greater than -25dB in power */
    83f472e8:	084ba707          	flw	fa4,132(s7)
    83f472ec:	a0e795d3          	flt.s	a1,fa5,fa4
    83f472f0:	e199                	bnez	a1,83f472f6 <NR+0xc00>
    83f472f2:	20f78753          	fmv.s	fa4,fa5
    for (k = 0; k < 321; k++) {
    83f472f6:	0711                	addi	a4,a4,4
      ksi[k] = MAX(ksi[k], st->ksi_min);    /* limit ksi greater than -25dB in power */
    83f472f8:	fee72e27          	fsw	fa4,-4(a4)
    for (k = 0; k < 321; k++) {
    83f472fc:	f8ec98e3          	bne	s9,a4,83f4728c <NR+0xb96>
    83f47300:	00012497          	auipc	s1,0x12
    83f47304:	55448493          	addi	s1,s1,1364 # 83f59854 <gammak+0x504>
    83f47308:	81fff06f          	j	83f46b26 <NR+0x430>
      st->vad_mmse = 0.0F;
    83f4730c:	060bbc23          	sd	zero,120(s7)
    83f47310:	ba5d                	j	83f46cc6 <NR+0x5d0>
    y[0] = alpha * st->nr_frame1_last_sample + alpha2 * y[0];
    83f47312:	67a2                	ld	a5,8(sp)
    83f47314:	0000b717          	auipc	a4,0xb
    83f47318:	03c72687          	flw	fa3,60(a4) # 83f52350 <__func__.1+0x158>
    83f4731c:	094ba707          	flw	fa4,148(s7)
    83f47320:	0007a787          	flw	fa5,0(a5)
    83f47324:	10d7f7d3          	fmul.s	fa5,fa5,fa3
    83f47328:	0000b717          	auipc	a4,0xb
    83f4732c:	02c72687          	flw	fa3,44(a4) # 83f52354 <__func__.1+0x15c>
    for (i = 0; i < st->frame_size-1; i++) {
    83f47330:	4705                	li	a4,1
    y[0] = alpha * st->nr_frame1_last_sample + alpha2 * y[0];
    83f47332:	78d77743          	fmadd.s	fa4,fa4,fa3,fa5
    83f47336:	00e7a027          	fsw	fa4,0(a5)
    for (i = 0; i < st->frame_size-1; i++) {
    83f4733a:	098ba683          	lw	a3,152(s7)
    83f4733e:	eed758e3          	bge	a4,a3,83f4722e <NR+0xb38>
    83f47342:	00478b13          	addi	s6,a5,4
    83f47346:	4701                	li	a4,0
    83f47348:	0000b797          	auipc	a5,0xb
    83f4734c:	0107a587          	flw	fa1,16(a5) # 83f52358 <__func__.1+0x160>
      alpha2 = (float)(1.0F + i)/160.0F;
    83f47350:	d00777d3          	fcvt.s.w	fa5,a4
      y[i+1] = alpha * y[i] + alpha2 * y[i+1];
    83f47354:	000b2607          	flw	fa2,0(s6)
    for (i = 0; i < st->frame_size-1; i++) {
    83f47358:	0b11                	addi	s6,s6,4
      alpha2 = (float)(1.0F + i)/160.0F;
    83f4735a:	0157f7d3          	fadd.s	fa5,fa5,fs5
    83f4735e:	2705                	addiw	a4,a4,1
    83f47360:	18b7f7d3          	fdiv.s	fa5,fa5,fa1
      alpha = 1 - alpha2;
    83f47364:	08faf6d3          	fsub.s	fa3,fs5,fa5
      y[i+1] = alpha * y[i] + alpha2 * y[i+1];
    83f47368:	10c7f7d3          	fmul.s	fa5,fa5,fa2
    83f4736c:	78e6f743          	fmadd.s	fa4,fa3,fa4,fa5
    83f47370:	feeb2e27          	fsw	fa4,-4(s6)
    for (i = 0; i < st->frame_size-1; i++) {
    83f47374:	098ba683          	lw	a3,152(s7)
    83f47378:	36fd                	addiw	a3,a3,-1
    83f4737a:	fcd74be3          	blt	a4,a3,83f47350 <NR+0xc5a>
    83f4737e:	bd45                	j	83f4722e <NR+0xb38>
  speech_fft(st->nr_fft_table, tmp_ifft_out, tmp_fft_out);    /* faster than matlab fft() */
    83f47380:	000bb503          	ld	a0,0(s7)
    83f47384:	00014617          	auipc	a2,0x14
    83f47388:	8ec60613          	addi	a2,a2,-1812 # 83f5ac70 <tmp_fft_out>
  nr_fd_half[0].re = tmp_fft_out[0] * nFFT;    /* multiply nFFT to get values as in matlab */
    83f4738c:	8432                	mv	s0,a2
    83f4738e:	ec32                	sd	a2,24(sp)
  speech_fft(st->nr_fft_table, tmp_ifft_out, tmp_fft_out);    /* faster than matlab fft() */
    83f47390:	50d010ef          	jal	ra,83f4909c <speech_fft>
  nr_fd_half[0].re = tmp_fft_out[0] * nFFT;    /* multiply nFFT to get values as in matlab */
    83f47394:	00042787          	flw	fa5,0(s0)
    83f47398:	d004fa53          	fcvt.s.w	fs4,s1
  nr_fd_half[0].im = (float)3.3495873e-008;    /* assign a small value to avoid dividing by zero */
    83f4739c:	0000b417          	auipc	s0,0xb
    83f473a0:	f9840413          	addi	s0,s0,-104 # 83f52334 <__func__.1+0x13c>
    83f473a4:	00042707          	flw	fa4,0(s0)
  nr_fd_half[0].re = tmp_fft_out[0] * nFFT;    /* multiply nFFT to get values as in matlab */
    83f473a8:	1147f7d3          	fmul.s	fa5,fa5,fs4
    83f473ac:	00013797          	auipc	a5,0x13
    83f473b0:	9b478793          	addi	a5,a5,-1612 # 83f59d60 <nr_fd_half>
    83f473b4:	f03e                	sd	a5,32(sp)
  nr_fd_half[0].im = (float)3.3495873e-008;    /* assign a small value to avoid dividing by zero */
    83f473b6:	00e7a227          	fsw	fa4,4(a5)
  nr_fd_half[0].re = tmp_fft_out[0] * nFFT;    /* multiply nFFT to get values as in matlab */
    83f473ba:	00f7a027          	fsw	fa5,0(a5)
  for (k = 1, j = 1; j < (nFFT/2); k+=2, j++) {
    83f473be:	cf0ff06f          	j	83f468ae <NR+0x1b8>

0000000083f473c2 <NR_para>:
    //*nenr_silence_time = para_obj->para_nr_init_sile_time*2;
  //} else {
    //*nenr_silence_time = para_obj->para_nr_init_sile_time;
  //}

  temp = MIN(MAX(para_obj->para_nr_snr_coeff, 0), 25);
    83f473c2:	01255703          	lhu	a4,18(a0)
  para_obj->para_nr_noise_coeff = 2;
    83f473c6:	4789                	li	a5,2
    83f473c8:	00f51f23          	sh	a5,30(a0)
  temp = MIN(MAX(para_obj->para_nr_snr_coeff, 0), 25);
    83f473cc:	46e5                	li	a3,25
    83f473ce:	87ba                	mv	a5,a4
    83f473d0:	0007081b          	sext.w	a6,a4
    83f473d4:	00e6f363          	bgeu	a3,a4,83f473da <NR_para+0x18>
    83f473d8:	47e5                	li	a5,25
    83f473da:	17c2                	slli	a5,a5,0x30
    83f473dc:	93c1                	srli	a5,a5,0x30
  //if (temp >= 0 && temp <= 3) {    /* for low SNR, [0, 3] = > [0.6, 0.9] */
  if (temp <= 3) {    /* for low SNR, [0, 3] = > [0.6, 0.9] */
    83f473de:	468d                	li	a3,3
      *aa = (float)(0.60 + temp * 0.1);    /* the speed of priori SNR tracking */
    83f473e0:	0007871b          	sext.w	a4,a5
  if (temp <= 3) {    /* for low SNR, [0, 3] = > [0.6, 0.9] */
    83f473e4:	0506ea63          	bltu	a3,a6,83f47438 <NR_para+0x76>
      *aa = (float)(0.60 + temp * 0.1);    /* the speed of priori SNR tracking */
    83f473e8:	d2070753          	fcvt.d.w	fa4,a4
    83f473ec:	0000b797          	auipc	a5,0xb
    83f473f0:	f747b687          	fld	fa3,-140(a5) # 83f52360 <__func__.1+0x168>
    83f473f4:	0000b797          	auipc	a5,0xb
    83f473f8:	f747b787          	fld	fa5,-140(a5) # 83f52368 <__func__.1+0x170>
    83f473fc:	7ad77743          	fmadd.d	fa4,fa4,fa3,fa5
    83f47400:	0000b797          	auipc	a5,0xb
    83f47404:	f987b607          	fld	fa2,-104(a5) # 83f52398 <__func__.1+0x1a0>
    83f47408:	0000b797          	auipc	a5,0xb
    83f4740c:	f687b687          	fld	fa3,-152(a5) # 83f52370 <__func__.1+0x178>
    83f47410:	40177753          	fcvt.s.d	fa4,fa4
    83f47414:	00e5a027          	fsw	fa4,0(a1)
  }
  else {    /* for higher SNR, [21, 25] => [0.991, 0.995] */
      *aa = (float)(0.99 + (temp - 20) * 0.001);    /* the speed of priori SNR tracking */
  }

  temp = MIN(MAX(para_obj->para_nr_noise_coeff, 0), 14);
    83f47418:	01e55683          	lhu	a3,30(a0)
    83f4741c:	4739                	li	a4,14
    83f4741e:	87b6                	mv	a5,a3
    83f47420:	00d77363          	bgeu	a4,a3,83f47426 <NR_para+0x64>
    83f47424:	47b9                	li	a5,14
  *mu = (float)(0.99 - temp * 0.01);
    83f47426:	d20787d3          	fcvt.d.w	fa5,a5
    83f4742a:	62d7f7cb          	fnmsub.d	fa5,fa5,fa3,fa2
    83f4742e:	4017f7d3          	fcvt.s.d	fa5,fa5
    83f47432:	00f62027          	fsw	fa5,0(a2)

}
    83f47436:	8082                	ret
  else if (temp > 3 && temp <= 10) {    /* for middle SNR, [4, 10] => [0.91, 0.97] */
    83f47438:	ffc7869b          	addiw	a3,a5,-4
    83f4743c:	16c2                	slli	a3,a3,0x30
    83f4743e:	92c1                	srli	a3,a3,0x30
    83f47440:	4819                	li	a6,6
    83f47442:	02d86863          	bltu	a6,a3,83f47472 <NR_para+0xb0>
      *aa = (float)(0.90 + (temp - 3) * 0.01);    /* the speed of priori SNR tracking */
    83f47446:	3775                	addiw	a4,a4,-3
    83f47448:	d20707d3          	fcvt.d.w	fa5,a4
    83f4744c:	0000b797          	auipc	a5,0xb
    83f47450:	f247b687          	fld	fa3,-220(a5) # 83f52370 <__func__.1+0x178>
    83f47454:	0000b797          	auipc	a5,0xb
    83f47458:	f247b707          	fld	fa4,-220(a5) # 83f52378 <__func__.1+0x180>
    83f4745c:	72d7f7c3          	fmadd.d	fa5,fa5,fa3,fa4
    83f47460:	0000b797          	auipc	a5,0xb
    83f47464:	f387b607          	fld	fa2,-200(a5) # 83f52398 <__func__.1+0x1a0>
    83f47468:	4017f7d3          	fcvt.s.d	fa5,fa5
    83f4746c:	00f5a027          	fsw	fa5,0(a1)
    83f47470:	b765                	j	83f47418 <NR_para+0x56>
  else if (temp > 10 && temp <= 20) {    /* for high SNR, [11, 20] => [0.972, 0.99] */
    83f47472:	37d5                	addiw	a5,a5,-11
    83f47474:	17c2                	slli	a5,a5,0x30
    83f47476:	93c1                	srli	a5,a5,0x30
    83f47478:	46a5                	li	a3,9
    83f4747a:	02f6ec63          	bltu	a3,a5,83f474b2 <NR_para+0xf0>
      *aa = (float)(0.97 + (temp - 10) * 0.002);    /* the speed of priori SNR tracking */
    83f4747e:	3759                	addiw	a4,a4,-10
    83f47480:	d20707d3          	fcvt.d.w	fa5,a4
    83f47484:	0000b797          	auipc	a5,0xb
    83f47488:	efc7b687          	fld	fa3,-260(a5) # 83f52380 <__func__.1+0x188>
    83f4748c:	0000b797          	auipc	a5,0xb
    83f47490:	efc7b707          	fld	fa4,-260(a5) # 83f52388 <__func__.1+0x190>
    83f47494:	72d7f7c3          	fmadd.d	fa5,fa5,fa3,fa4
    83f47498:	0000b797          	auipc	a5,0xb
    83f4749c:	f007b607          	fld	fa2,-256(a5) # 83f52398 <__func__.1+0x1a0>
    83f474a0:	0000b797          	auipc	a5,0xb
    83f474a4:	ed07b687          	fld	fa3,-304(a5) # 83f52370 <__func__.1+0x178>
    83f474a8:	4017f7d3          	fcvt.s.d	fa5,fa5
    83f474ac:	00f5a027          	fsw	fa5,0(a1)
    83f474b0:	b7a5                	j	83f47418 <NR_para+0x56>
      *aa = (float)(0.99 + (temp - 20) * 0.001);    /* the speed of priori SNR tracking */
    83f474b2:	3731                	addiw	a4,a4,-20
    83f474b4:	d20707d3          	fcvt.d.w	fa5,a4
    83f474b8:	0000b797          	auipc	a5,0xb
    83f474bc:	ed87b707          	fld	fa4,-296(a5) # 83f52390 <__func__.1+0x198>
    83f474c0:	0000b797          	auipc	a5,0xb
    83f474c4:	ed87b607          	fld	fa2,-296(a5) # 83f52398 <__func__.1+0x1a0>
    83f474c8:	62e7f7c3          	fmadd.d	fa5,fa5,fa4,fa2
    83f474cc:	0000b797          	auipc	a5,0xb
    83f474d0:	ea47b687          	fld	fa3,-348(a5) # 83f52370 <__func__.1+0x178>
    83f474d4:	4017f7d3          	fcvt.s.d	fa5,fa5
    83f474d8:	00f5a027          	fsw	fa5,0(a1)
    83f474dc:	bf35                	j	83f47418 <NR_para+0x56>

0000000083f474de <NR_init>:

EXPORT NRState *NR_init(int frame_size, float fs, float aa, float mu)
{
    83f474de:	7139                	addi	sp,sp,-64
    83f474e0:	f426                	sd	s1,40(sp)
    83f474e2:	84aa                	mv	s1,a0
   uintptr_t *ptr =  pvPortMalloc(size);
    83f474e4:	0a000513          	li	a0,160
    83f474e8:	fc06                	sd	ra,56(sp)
    83f474ea:	f822                	sd	s0,48(sp)
    83f474ec:	f04a                	sd	s2,32(sp)
    83f474ee:	ac22                	fsd	fs0,24(sp)
    83f474f0:	a826                	fsd	fs1,16(sp)
    83f474f2:	20a50453          	fmv.s	fs0,fa0
    83f474f6:	20c604d3          	fmv.s	fs1,fa2
    83f474fa:	a44a                	fsd	fs2,8(sp)
    83f474fc:	20b58953          	fmv.s	fs2,fa1
    83f47500:	084070ef          	jal	ra,83f4e584 <pvPortMalloc>
   memset(ptr, 0, size);
    83f47504:	0a000613          	li	a2,160
    83f47508:	4581                	li	a1,0
   uintptr_t *ptr =  pvPortMalloc(size);
    83f4750a:	842a                	mv	s0,a0
   memset(ptr, 0, size);
    83f4750c:	271040ef          	jal	ra,83f4bf7c <memset>
  st->Fs = fs;
  st->frame_size = frame_size;
  st->aa = aa;
  st->mu = mu;

  st->nr_fft_table = speech_fft_init(2*2*st->frame_size);
    83f47510:	0024951b          	slliw	a0,s1,0x2
  st->frame_size = frame_size;
    83f47514:	08942c23          	sw	s1,152(s0)
  st->Fs = fs;
    83f47518:	08842e27          	fsw	fs0,156(s0)
  st->aa = aa;
    83f4751c:	09242427          	fsw	fs2,136(s0)
  st->mu = mu;
    83f47520:	08942627          	fsw	fs1,140(s0)
  st->nr_fft_table = speech_fft_init(2*2*st->frame_size);
    83f47524:	333010ef          	jal	ra,83f49056 <speech_fft_init>
  st->ana_win = (float*)mem_alloc(2*st->frame_size*sizeof(float));
    83f47528:	09842483          	lw	s1,152(s0)
  st->nr_fft_table = speech_fft_init(2*2*st->frame_size);
    83f4752c:	e008                	sd	a0,0(s0)
   uintptr_t *ptr =  pvPortMalloc(size);
    83f4752e:	0034949b          	slliw	s1,s1,0x3
    83f47532:	8526                	mv	a0,s1
    83f47534:	050070ef          	jal	ra,83f4e584 <pvPortMalloc>
   memset(ptr, 0, size);
    83f47538:	8626                	mv	a2,s1
    83f4753a:	4581                	li	a1,0
   uintptr_t *ptr =  pvPortMalloc(size);
    83f4753c:	892a                	mv	s2,a0
   memset(ptr, 0, size);
    83f4753e:	23f040ef          	jal	ra,83f4bf7c <memset>
  st->syn_win = (float*)mem_alloc(2*st->frame_size*sizeof(float));
    83f47542:	09842483          	lw	s1,152(s0)
  st->ana_win = (float*)mem_alloc(2*st->frame_size*sizeof(float));
    83f47546:	01243423          	sd	s2,8(s0)
   uintptr_t *ptr =  pvPortMalloc(size);
    83f4754a:	0034949b          	slliw	s1,s1,0x3
    83f4754e:	8526                	mv	a0,s1
    83f47550:	034070ef          	jal	ra,83f4e584 <pvPortMalloc>
   memset(ptr, 0, size);
    83f47554:	8626                	mv	a2,s1
    83f47556:	4581                	li	a1,0
   uintptr_t *ptr =  pvPortMalloc(size);
    83f47558:	892a                	mv	s2,a0
   memset(ptr, 0, size);
    83f4755a:	223040ef          	jal	ra,83f4bf7c <memset>
  st->x_old = (short*)mem_alloc(st->frame_size*sizeof(short));
    83f4755e:	09842483          	lw	s1,152(s0)
  st->syn_win = (float*)mem_alloc(2*st->frame_size*sizeof(float));
    83f47562:	01243823          	sd	s2,16(s0)
  st->x_old = (short*)mem_alloc(st->frame_size*sizeof(short));
    83f47566:	0014949b          	slliw	s1,s1,0x1
   uintptr_t *ptr =  pvPortMalloc(size);
    83f4756a:	8526                	mv	a0,s1
    83f4756c:	018070ef          	jal	ra,83f4e584 <pvPortMalloc>
   memset(ptr, 0, size);
    83f47570:	8626                	mv	a2,s1
    83f47572:	4581                	li	a1,0
   uintptr_t *ptr =  pvPortMalloc(size);
    83f47574:	892a                	mv	s2,a0
   memset(ptr, 0, size);
    83f47576:	207040ef          	jal	ra,83f4bf7c <memset>
  st->y_old = (float*)mem_alloc(st->frame_size*sizeof(float));
    83f4757a:	09842483          	lw	s1,152(s0)
  st->x_old = (short*)mem_alloc(st->frame_size*sizeof(short));
    83f4757e:	01243c23          	sd	s2,24(s0)
  st->y_old = (float*)mem_alloc(st->frame_size*sizeof(float));
    83f47582:	0024949b          	slliw	s1,s1,0x2
   uintptr_t *ptr =  pvPortMalloc(size);
    83f47586:	8526                	mv	a0,s1
    83f47588:	7fd060ef          	jal	ra,83f4e584 <pvPortMalloc>
   memset(ptr, 0, size);
    83f4758c:	8626                	mv	a2,s1
    83f4758e:	4581                	li	a1,0
   uintptr_t *ptr =  pvPortMalloc(size);
    83f47590:	892a                	mv	s2,a0
   memset(ptr, 0, size);
    83f47592:	1eb040ef          	jal	ra,83f4bf7c <memset>
  st->Xk_prev = (float*)mem_alloc((2*st->frame_size+1)*sizeof(float));
    83f47596:	09842483          	lw	s1,152(s0)
  st->y_old = (float*)mem_alloc(st->frame_size*sizeof(float));
    83f4759a:	03243023          	sd	s2,32(s0)
  st->Xk_prev = (float*)mem_alloc((2*st->frame_size+1)*sizeof(float));
    83f4759e:	0034949b          	slliw	s1,s1,0x3
   uintptr_t *ptr =  pvPortMalloc(size);
    83f475a2:	2491                	addiw	s1,s1,4
    83f475a4:	8526                	mv	a0,s1
    83f475a6:	7df060ef          	jal	ra,83f4e584 <pvPortMalloc>
   memset(ptr, 0, size);
    83f475aa:	8626                	mv	a2,s1
    83f475ac:	4581                	li	a1,0
   uintptr_t *ptr =  pvPortMalloc(size);
    83f475ae:	892a                	mv	s2,a0
   memset(ptr, 0, size);
    83f475b0:	1cd040ef          	jal	ra,83f4bf7c <memset>
  st->noise_mean = (float*)mem_alloc((2*st->frame_size+1)*sizeof(float));
    83f475b4:	09842483          	lw	s1,152(s0)
  st->Xk_prev = (float*)mem_alloc((2*st->frame_size+1)*sizeof(float));
    83f475b8:	03243423          	sd	s2,40(s0)
  st->noise_mean = (float*)mem_alloc((2*st->frame_size+1)*sizeof(float));
    83f475bc:	0034949b          	slliw	s1,s1,0x3
   uintptr_t *ptr =  pvPortMalloc(size);
    83f475c0:	2491                	addiw	s1,s1,4
    83f475c2:	8526                	mv	a0,s1
    83f475c4:	7c1060ef          	jal	ra,83f4e584 <pvPortMalloc>
   memset(ptr, 0, size);
    83f475c8:	8626                	mv	a2,s1
    83f475ca:	4581                	li	a1,0
   uintptr_t *ptr =  pvPortMalloc(size);
    83f475cc:	892a                	mv	s2,a0
   memset(ptr, 0, size);
    83f475ce:	1af040ef          	jal	ra,83f4bf7c <memset>
  st->noise_mu2 = (float*)mem_alloc((2*st->frame_size+1)*sizeof(float));
    83f475d2:	09842483          	lw	s1,152(s0)
  st->noise_mean = (float*)mem_alloc((2*st->frame_size+1)*sizeof(float));
    83f475d6:	03243823          	sd	s2,48(s0)
  st->noise_mu2 = (float*)mem_alloc((2*st->frame_size+1)*sizeof(float));
    83f475da:	0034949b          	slliw	s1,s1,0x3
   uintptr_t *ptr =  pvPortMalloc(size);
    83f475de:	2491                	addiw	s1,s1,4
    83f475e0:	8526                	mv	a0,s1
    83f475e2:	7a3060ef          	jal	ra,83f4e584 <pvPortMalloc>
   memset(ptr, 0, size);
    83f475e6:	8626                	mv	a2,s1
    83f475e8:	4581                	li	a1,0
   uintptr_t *ptr =  pvPortMalloc(size);
    83f475ea:	84aa                	mv	s1,a0
   memset(ptr, 0, size);
    83f475ec:	191040ef          	jal	ra,83f4bf7c <memset>
   uintptr_t *ptr =  pvPortMalloc(size);
    83f475f0:	03c00513          	li	a0,60
    83f475f4:	fc04                	sd	s1,56(s0)
    83f475f6:	78f060ef          	jal	ra,83f4e584 <pvPortMalloc>
   memset(ptr, 0, size);
    83f475fa:	03c00613          	li	a2,60
    83f475fe:	4581                	li	a1,0
   uintptr_t *ptr =  pvPortMalloc(size);
    83f47600:	84aa                	mv	s1,a0
   memset(ptr, 0, size);
    83f47602:	17b040ef          	jal	ra,83f4bf7c <memset>
   uintptr_t *ptr =  pvPortMalloc(size);
    83f47606:	4551                	li	a0,20
  st->amp_inst_band = (float*)mem_alloc(5*3*sizeof(float));
    83f47608:	e024                	sd	s1,64(s0)
    83f4760a:	77b060ef          	jal	ra,83f4e584 <pvPortMalloc>
   memset(ptr, 0, size);
    83f4760e:	4651                	li	a2,20
    83f47610:	4581                	li	a1,0
   uintptr_t *ptr =  pvPortMalloc(size);
    83f47612:	84aa                	mv	s1,a0
   memset(ptr, 0, size);
    83f47614:	169040ef          	jal	ra,83f4bf7c <memset>
   uintptr_t *ptr =  pvPortMalloc(size);
    83f47618:	4551                	li	a0,20
  st->noisy_st_trough = (float*)mem_alloc(5*sizeof(float));
    83f4761a:	e424                	sd	s1,72(s0)
    83f4761c:	769060ef          	jal	ra,83f4e584 <pvPortMalloc>
   memset(ptr, 0, size);
    83f47620:	4651                	li	a2,20
    83f47622:	4581                	li	a1,0
   uintptr_t *ptr =  pvPortMalloc(size);
    83f47624:	84aa                	mv	s1,a0
   memset(ptr, 0, size);
    83f47626:	157040ef          	jal	ra,83f4bf7c <memset>
   uintptr_t *ptr =  pvPortMalloc(size);
    83f4762a:	4531                	li	a0,12
  st->noisy_st_peak = (float*)mem_alloc(5*sizeof(float));
    83f4762c:	e824                	sd	s1,80(s0)
    83f4762e:	757060ef          	jal	ra,83f4e584 <pvPortMalloc>
   memset(ptr, 0, size);
    83f47632:	4631                	li	a2,12
    83f47634:	4581                	li	a1,0
   uintptr_t *ptr =  pvPortMalloc(size);
    83f47636:	892a                	mv	s2,a0
   memset(ptr, 0, size);
    83f47638:	145040ef          	jal	ra,83f4bf7c <memset>
  st->amp_inst_sum_hist = (float*)mem_alloc(3*sizeof(float));
  st->float_x = (float*)mem_alloc(2*st->frame_size*sizeof(float));
    83f4763c:	09842483          	lw	s1,152(s0)
  st->amp_inst_sum_hist = (float*)mem_alloc(3*sizeof(float));
    83f47640:	05243c23          	sd	s2,88(s0)
   uintptr_t *ptr =  pvPortMalloc(size);
    83f47644:	0034949b          	slliw	s1,s1,0x3
    83f47648:	8526                	mv	a0,s1
    83f4764a:	73b060ef          	jal	ra,83f4e584 <pvPortMalloc>
   memset(ptr, 0, size);
    83f4764e:	8626                	mv	a2,s1
    83f47650:	4581                	li	a1,0
   uintptr_t *ptr =  pvPortMalloc(size);
    83f47652:	84aa                	mv	s1,a0
   memset(ptr, 0, size);
    83f47654:	129040ef          	jal	ra,83f4bf7c <memset>

  for (i = 0; i < 2*st->frame_size; i++) {
    83f47658:	09842703          	lw	a4,152(s0)
  st->float_x = (float*)mem_alloc(2*st->frame_size*sizeof(float));
    83f4765c:	f024                	sd	s1,96(s0)
  for (i = 0; i < 2*st->frame_size; i++) {
    83f4765e:	08e05363          	blez	a4,83f476e4 <NR_init+0x206>
    83f47662:	0000a517          	auipc	a0,0xa
    83f47666:	ed250513          	addi	a0,a0,-302 # 83f51534 <fv0.1+0x4>
    83f4766a:	0000a597          	auipc	a1,0xa
    83f4766e:	3ca58593          	addi	a1,a1,970 # 83f51a34 <fv1.0+0x4>
    83f47672:	4781                	li	a5,0
    83f47674:	0000b717          	auipc	a4,0xb
    83f47678:	d3472707          	flw	fa4,-716(a4) # 83f523a8 <__func__.1+0x1b0>
    83f4767c:	0000b717          	auipc	a4,0xb
    83f47680:	d3072787          	flw	fa5,-720(a4) # 83f523ac <__func__.1+0x1b4>
    83f47684:	a039                	j	83f47692 <NR_init+0x1b4>
    st->ana_win[i] = fv0[i];
    83f47686:	00052787          	flw	fa5,0(a0)
    st->syn_win[i] = fv1[i];
    83f4768a:	0005a707          	flw	fa4,0(a1)
    83f4768e:	0511                	addi	a0,a0,4
    83f47690:	0591                	addi	a1,a1,4
    st->ana_win[i] = fv0[i];
    83f47692:	6414                	ld	a3,8(s0)
    83f47694:	00279613          	slli	a2,a5,0x2
  for (i = 0; i < 2*st->frame_size; i++) {
    83f47698:	0785                	addi	a5,a5,1
    st->ana_win[i] = fv0[i];
    83f4769a:	96b2                	add	a3,a3,a2
    83f4769c:	00f6a027          	fsw	fa5,0(a3)
    st->syn_win[i] = fv1[i];
    83f476a0:	6818                	ld	a4,16(s0)
  for (i = 0; i < 2*st->frame_size; i++) {
    83f476a2:	0007881b          	sext.w	a6,a5
    st->syn_win[i] = fv1[i];
    83f476a6:	9732                	add	a4,a4,a2
    83f476a8:	00e72027          	fsw	fa4,0(a4)
  for (i = 0; i < 2*st->frame_size; i++) {
    83f476ac:	09842703          	lw	a4,152(s0)
    83f476b0:	0017169b          	slliw	a3,a4,0x1
    83f476b4:	fcd849e3          	blt	a6,a3,83f47686 <NR_init+0x1a8>
  }

  for (i = 0; i < st->frame_size; i++) {
    83f476b8:	02e05663          	blez	a4,83f476e4 <NR_init+0x206>
    83f476bc:	4781                	li	a5,0
    st->x_old[i] = 0;
    83f476be:	6c14                	ld	a3,24(s0)
    83f476c0:	00179713          	slli	a4,a5,0x1
    st->y_old[i] = 0.0F;
    83f476c4:	00279613          	slli	a2,a5,0x2
    st->x_old[i] = 0;
    83f476c8:	96ba                	add	a3,a3,a4
    83f476ca:	00069023          	sh	zero,0(a3)
    st->y_old[i] = 0.0F;
    83f476ce:	7018                	ld	a4,32(s0)
  for (i = 0; i < st->frame_size; i++) {
    83f476d0:	0785                	addi	a5,a5,1
    83f476d2:	0007869b          	sext.w	a3,a5
    st->y_old[i] = 0.0F;
    83f476d6:	9732                	add	a4,a4,a2
    83f476d8:	00072023          	sw	zero,0(a4)
  for (i = 0; i < st->frame_size; i++) {
    83f476dc:	09842703          	lw	a4,152(s0)
    83f476e0:	fce6cfe3          	blt	a3,a4,83f476be <NR_init+0x1e0>
  }

  for (i = 0; i < 2*st->frame_size+1; i++) {
    83f476e4:	4781                	li	a5,0
    83f476e6:	02074963          	bltz	a4,83f47718 <NR_init+0x23a>
    //Xk_prev[i].re = 0.0F;
    //Xk_prev[i].im = 0.0F;
    st->Xk_prev[i] = 0.0F;
    83f476ea:	7418                	ld	a4,40(s0)
    83f476ec:	00279693          	slli	a3,a5,0x2
  for (i = 0; i < 2*st->frame_size+1; i++) {
    83f476f0:	0785                	addi	a5,a5,1
    st->Xk_prev[i] = 0.0F;
    83f476f2:	9736                	add	a4,a4,a3
    83f476f4:	00072023          	sw	zero,0(a4)
    st->noise_mean[i] = 0.0F;
    83f476f8:	7818                	ld	a4,48(s0)
  for (i = 0; i < 2*st->frame_size+1; i++) {
    83f476fa:	0007861b          	sext.w	a2,a5
    st->noise_mean[i] = 0.0F;
    83f476fe:	9736                	add	a4,a4,a3
    83f47700:	00072023          	sw	zero,0(a4)
    st->noise_mu2[i] = 0.0F;
    83f47704:	7c18                	ld	a4,56(s0)
    83f47706:	9736                	add	a4,a4,a3
    83f47708:	00072023          	sw	zero,0(a4)
  for (i = 0; i < 2*st->frame_size+1; i++) {
    83f4770c:	09842703          	lw	a4,152(s0)
    83f47710:	0017171b          	slliw	a4,a4,0x1
    83f47714:	fcc75be3          	bge	a4,a2,83f476ea <NR_init+0x20c>
    83f47718:	4781                	li	a5,0
  }

  for (i = 0; i < 15; i++) {
    83f4771a:	03c00693          	li	a3,60
    st->amp_inst_band[i] = 0.0F;
    83f4771e:	6038                	ld	a4,64(s0)
    83f47720:	973e                	add	a4,a4,a5
    83f47722:	00072023          	sw	zero,0(a4)
  for (i = 0; i < 15; i++) {
    83f47726:	0791                	addi	a5,a5,4
    83f47728:	fed79be3          	bne	a5,a3,83f4771e <NR_init+0x240>
    83f4772c:	4781                	li	a5,0
  }

  for (i = 0; i < 5; i++) {
    83f4772e:	46d1                	li	a3,20
    st->noisy_st_trough[i] = 0.0F;
    83f47730:	6438                	ld	a4,72(s0)
    83f47732:	973e                	add	a4,a4,a5
    83f47734:	00072023          	sw	zero,0(a4)
    st->noisy_st_peak[i] = 0.0F;
    83f47738:	6838                	ld	a4,80(s0)
    83f4773a:	973e                	add	a4,a4,a5
    83f4773c:	00072023          	sw	zero,0(a4)
  for (i = 0; i < 5; i++) {
    83f47740:	0791                	addi	a5,a5,4
    83f47742:	fed797e3          	bne	a5,a3,83f47730 <NR_init+0x252>
  }

  for (i = 0; i < 3; i++) {
    st->amp_inst_sum_hist[i] = 0.0F;
    83f47746:	6c38                	ld	a4,88(s0)
  st->vad_slope = 0.0F;
  st->vad_dr_cnt = 0.0F;
  st->vad_dr = 0.0F;
  st->vad_mmse = 0.0F;
  st->vad_mmse_cnt = 0.0F;
  if (fs == 16000)
    83f47748:	0000b797          	auipc	a5,0xb
    83f4774c:	b0c7a787          	flw	fa5,-1268(a5) # 83f52254 <__func__.1+0x5c>
    83f47750:	a0f427d3          	feq.s	a5,fs0,fa5
    st->amp_inst_sum_hist[i] = 0.0F;
    83f47754:	00072023          	sw	zero,0(a4)
    83f47758:	6c38                	ld	a4,88(s0)
    83f4775a:	00072223          	sw	zero,4(a4)
    83f4775e:	6c38                	ld	a4,88(s0)
    83f47760:	00072423          	sw	zero,8(a4)
  st->eta = 0.15F;
    83f47764:	0000b717          	auipc	a4,0xb
    83f47768:	c3c73703          	ld	a4,-964(a4) # 83f523a0 <__func__.1+0x1a8>
  st->vad_slope_cnt = 0.0F;
    83f4776c:	06043423          	sd	zero,104(s0)
  st->vad_dr_cnt = 0.0F;
    83f47770:	06043823          	sd	zero,112(s0)
  st->vad_mmse = 0.0F;
    83f47774:	06043c23          	sd	zero,120(s0)
  st->eta = 0.15F;
    83f47778:	e058                	sd	a4,128(s0)
  if (fs == 16000)
    83f4777a:	c38d                	beqz	a5,83f4779c <NR_init+0x2be>
    st->vad_mmse_cnt_para = 4;    /* last at least 40ms, once the mmse vad goes up, keep the circumstance a period of time to get better speech quality */
    83f4777c:	0000b797          	auipc	a5,0xb
    83f47780:	c347a787          	flw	fa5,-972(a5) # 83f523b0 <__func__.1+0x1b8>
    83f47784:	08f42827          	fsw	fa5,144(s0)
  else if (fs == 8000)
    st->vad_mmse_cnt_para = 2;    /* last at least 40ms, once the mmse vad goes up, keep the circumstance a period of time to get better speech quality */

  return st;

}
    83f47788:	70e2                	ld	ra,56(sp)
    83f4778a:	8522                	mv	a0,s0
    83f4778c:	7442                	ld	s0,48(sp)
    83f4778e:	74a2                	ld	s1,40(sp)
    83f47790:	7902                	ld	s2,32(sp)
    83f47792:	2462                	fld	fs0,24(sp)
    83f47794:	24c2                	fld	fs1,16(sp)
    83f47796:	2922                	fld	fs2,8(sp)
    83f47798:	6121                	addi	sp,sp,64
    83f4779a:	8082                	ret
  else if (fs == 8000)
    83f4779c:	0000b797          	auipc	a5,0xb
    83f477a0:	c187a787          	flw	fa5,-1000(a5) # 83f523b4 <__func__.1+0x1bc>
    83f477a4:	a0f427d3          	feq.s	a5,fs0,fa5
    83f477a8:	d3e5                	beqz	a5,83f47788 <NR_init+0x2aa>
    st->vad_mmse_cnt_para = 2;    /* last at least 40ms, once the mmse vad goes up, keep the circumstance a period of time to get better speech quality */
    83f477aa:	0000b797          	auipc	a5,0xb
    83f477ae:	ae27a787          	flw	fa5,-1310(a5) # 83f5228c <__func__.1+0x94>
    83f477b2:	08f42827          	fsw	fa5,144(s0)
  return st;
    83f477b6:	bfc9                	j	83f47788 <NR_init+0x2aa>

0000000083f477b8 <NR_free>:

EXPORT void NR_free(NRState *st)
{
    83f477b8:	1141                	addi	sp,sp,-16
    83f477ba:	e406                	sd	ra,8(sp)
    83f477bc:	e022                	sd	s0,0(sp)
    83f477be:	842a                	mv	s0,a0
  speech_fft_free(st->nr_fft_table);
    83f477c0:	6108                	ld	a0,0(a0)
    83f477c2:	0c3010ef          	jal	ra,83f49084 <speech_fft_free>
   vPortFree(ptr);
    83f477c6:	6408                	ld	a0,8(s0)
    83f477c8:	723060ef          	jal	ra,83f4e6ea <vPortFree>
    83f477cc:	6808                	ld	a0,16(s0)
    83f477ce:	71d060ef          	jal	ra,83f4e6ea <vPortFree>
    83f477d2:	6c08                	ld	a0,24(s0)
    83f477d4:	717060ef          	jal	ra,83f4e6ea <vPortFree>
    83f477d8:	7008                	ld	a0,32(s0)
    83f477da:	711060ef          	jal	ra,83f4e6ea <vPortFree>
    83f477de:	7408                	ld	a0,40(s0)
    83f477e0:	70b060ef          	jal	ra,83f4e6ea <vPortFree>
    83f477e4:	7808                	ld	a0,48(s0)
    83f477e6:	705060ef          	jal	ra,83f4e6ea <vPortFree>
    83f477ea:	7c08                	ld	a0,56(s0)
    83f477ec:	6ff060ef          	jal	ra,83f4e6ea <vPortFree>
    83f477f0:	6028                	ld	a0,64(s0)
    83f477f2:	6f9060ef          	jal	ra,83f4e6ea <vPortFree>
    83f477f6:	6428                	ld	a0,72(s0)
    83f477f8:	6f3060ef          	jal	ra,83f4e6ea <vPortFree>
    83f477fc:	6828                	ld	a0,80(s0)
    83f477fe:	6ed060ef          	jal	ra,83f4e6ea <vPortFree>
    83f47802:	6c28                	ld	a0,88(s0)
    83f47804:	6e7060ef          	jal	ra,83f4e6ea <vPortFree>
    83f47808:	7028                	ld	a0,96(s0)
    83f4780a:	6e1060ef          	jal	ra,83f4e6ea <vPortFree>
    83f4780e:	8522                	mv	a0,s0
  mem_free(st->amp_inst_sum_hist);
  mem_free(st->float_x);

  mem_free(st);

}
    83f47810:	6402                	ld	s0,0(sp)
    83f47812:	60a2                	ld	ra,8(sp)
    83f47814:	0141                	addi	sp,sp,16
    83f47816:	6d50606f          	j	83f4e6ea <vPortFree>

0000000083f4781a <NLP_AES_para>:
   unsigned short tmp;

   /* NLP AES Parameters */
   para_obj = para;

   tmp = MIN(MAX(para_obj->para_aes_std_thrd, 0), 39);    /* the threshold level for residual echo */
    83f4781a:	00c55803          	lhu	a6,12(a0)
    83f4781e:	02700713          	li	a4,39
    83f47822:	87c2                	mv	a5,a6
    83f47824:	01077463          	bgeu	a4,a6,83f4782c <NLP_AES_para+0x12>
    83f47828:	02700793          	li	a5,39
   *std_thrd = 0.6f + tmp * 0.01f;    /* [0.6, 0.99], each step 0.01 */
    83f4782c:	d007f7d3          	fcvt.s.w	fa5,a5
    83f47830:	0000b797          	auipc	a5,0xb
    83f47834:	b887a687          	flw	fa3,-1144(a5) # 83f523b8 <__func__.1+0x1c0>
    83f47838:	0000b797          	auipc	a5,0xb
    83f4783c:	a807a707          	flw	fa4,-1408(a5) # 83f522b8 <__func__.1+0xc0>
    83f47840:	70d7f7c3          	fmadd.s	fa5,fa5,fa3,fa4

   tmp = MIN(MAX(para_obj->para_aes_supp_coeff, 0), 100);    /* the suppression level for residual echo */
    83f47844:	06400713          	li	a4,100
   *std_thrd = 0.6f + tmp * 0.01f;    /* [0.6, 0.99], each step 0.01 */
    83f47848:	00f5a027          	fsw	fa5,0(a1)
   tmp = MIN(MAX(para_obj->para_aes_supp_coeff, 0), 100);    /* the suppression level for residual echo */
    83f4784c:	00e55583          	lhu	a1,14(a0)
    83f47850:	87ae                	mv	a5,a1
    83f47852:	00b77463          	bgeu	a4,a1,83f4785a <NLP_AES_para+0x40>
    83f47856:	06400793          	li	a5,100
   *aes_supp_coef1 = 1.0f + tmp * 0.125f;    /* [1.0, 13.5], each step 0.125 */
    83f4785a:	d007f7d3          	fcvt.s.w	fa5,a5
    83f4785e:	0000b797          	auipc	a5,0xb
    83f47862:	9f27a687          	flw	fa3,-1550(a5) # 83f52250 <__func__.1+0x58>
    83f47866:	0000b797          	auipc	a5,0xb
    83f4786a:	ada7a707          	flw	fa4,-1318(a5) # 83f52340 <__func__.1+0x148>
    83f4786e:	68e7f743          	fmadd.s	fa4,fa5,fa4,fa3
   *aes_supp_coef2 = 2.0f + tmp * 0.25f;    /* [2.0, 27.0], each step 0.25 */
    83f47872:	0000b797          	auipc	a5,0xb
    83f47876:	a6e7a607          	flw	fa2,-1426(a5) # 83f522e0 <__func__.1+0xe8>
    83f4787a:	0000b797          	auipc	a5,0xb
    83f4787e:	a127a687          	flw	fa3,-1518(a5) # 83f5228c <__func__.1+0x94>
    83f47882:	68c7f7c3          	fmadd.s	fa5,fa5,fa2,fa3
   *aes_supp_coef1 = 1.0f + tmp * 0.125f;    /* [1.0, 13.5], each step 0.125 */
    83f47886:	00e62027          	fsw	fa4,0(a2)
   *aes_supp_coef2 = 2.0f + tmp * 0.25f;    /* [2.0, 27.0], each step 0.25 */
    83f4788a:	00f6a027          	fsw	fa5,0(a3)

}
    83f4788e:	8082                	ret

0000000083f47890 <NLP_AES_init>:

EXPORT NonLinearEchoState *NLP_AES_init(int frame_size, float sampling_rate, float std_thrd, float aes_supp_coef1, float aes_supp_coef2)
{
    83f47890:	711d                	addi	sp,sp,-96
    83f47892:	e0ca                	sd	s2,64(sp)
    83f47894:	892a                	mv	s2,a0
   uintptr_t *ptr =  pvPortMalloc(size);
    83f47896:	0e800513          	li	a0,232
    83f4789a:	ec86                	sd	ra,88(sp)
    83f4789c:	e8a2                	sd	s0,80(sp)
    83f4789e:	e4a6                	sd	s1,72(sp)
    83f478a0:	fc4e                	sd	s3,56(sp)
    83f478a2:	f852                	sd	s4,48(sp)
    83f478a4:	f456                	sd	s5,40(sp)
    83f478a6:	ac22                	fsd	fs0,24(sp)
    83f478a8:	a826                	fsd	fs1,16(sp)
    83f478aa:	20a50453          	fmv.s	fs0,fa0
    83f478ae:	20d684d3          	fmv.s	fs1,fa3
    83f478b2:	a44a                	fsd	fs2,8(sp)
    83f478b4:	a04e                	fsd	fs3,0(sp)
    83f478b6:	20c60953          	fmv.s	fs2,fa2
    83f478ba:	20b589d3          	fmv.s	fs3,fa1
    83f478be:	4c7060ef          	jal	ra,83f4e584 <pvPortMalloc>
   memset(ptr, 0, size);
    83f478c2:	0e800613          	li	a2,232
    83f478c6:	4581                	li	a1,0
   uintptr_t *ptr =  pvPortMalloc(size);
    83f478c8:	842a                	mv	s0,a0
   memset(ptr, 0, size);
    83f478ca:	6b2040ef          	jal	ra,83f4bf7c <memset>
   st->aes_supp_coef2 = aes_supp_coef2;
   st->frame_size = frame_size;
   st->ps_size = st->frame_size;
   N = st->ps_size;  /* power spectrum size */
   N3 = 2*N - st->frame_size;
   st->sampling_rate = (int)sampling_rate;
    83f478ce:	c00417d3          	fcvt.w.s	a5,fs0,rtz

   st->echo_state = NULL;
   st->nbands = 2;
   M = st->nbands;
   st->bank = filterbank_create(M, sampling_rate, N, 1);
    83f478d2:	20840553          	fmv.s	fa0,fs0
    83f478d6:	4605                	li	a2,1
   st->sampling_rate = (int)sampling_rate;
    83f478d8:	c41c                	sw	a5,8(s0)
   st->nbands = 2;
    83f478da:	4789                	li	a5,2
    83f478dc:	0af42823          	sw	a5,176(s0)
   st->bank = filterbank_create(M, sampling_rate, N, 1);
    83f478e0:	85ca                	mv	a1,s2
   st->fdstd_thrd = std_thrd;
    83f478e2:	0d342a27          	fsw	fs3,212(s0)
   st->aes_supp_coef1 = aes_supp_coef1;
    83f478e6:	0d242e27          	fsw	fs2,220(s0)
   st->aes_supp_coef2 = aes_supp_coef2;
    83f478ea:	0e942027          	fsw	fs1,224(s0)
   st->frame_size = frame_size;
    83f478ee:	01242023          	sw	s2,0(s0)
   st->ps_size = st->frame_size;
    83f478f2:	01242223          	sw	s2,4(s0)
   st->echo_state = NULL;
    83f478f6:	00043c23          	sd	zero,24(s0)
   st->bank = filterbank_create(M, sampling_rate, N, 1);
    83f478fa:	4509                	li	a0,2
    83f478fc:	669000ef          	jal	ra,83f48764 <filterbank_create>
   st->frame = (float*)mem_alloc(2*N*sizeof(float));
    83f47900:	0039149b          	slliw	s1,s2,0x3
   st->bank = filterbank_create(M, sampling_rate, N, 1);
    83f47904:	e808                	sd	a0,16(s0)
   uintptr_t *ptr =  pvPortMalloc(size);
    83f47906:	8526                	mv	a0,s1
    83f47908:	47d060ef          	jal	ra,83f4e584 <pvPortMalloc>
   memset(ptr, 0, size);
    83f4790c:	8626                	mv	a2,s1
    83f4790e:	4581                	li	a1,0
   uintptr_t *ptr =  pvPortMalloc(size);
    83f47910:	8a2a                	mv	s4,a0
   memset(ptr, 0, size);
    83f47912:	66a040ef          	jal	ra,83f4bf7c <memset>
   uintptr_t *ptr =  pvPortMalloc(size);
    83f47916:	8526                	mv	a0,s1
   st->frame = (float*)mem_alloc(2*N*sizeof(float));
    83f47918:	03443023          	sd	s4,32(s0)
    83f4791c:	469060ef          	jal	ra,83f4e584 <pvPortMalloc>
   memset(ptr, 0, size);
    83f47920:	8626                	mv	a2,s1
    83f47922:	4581                	li	a1,0
   uintptr_t *ptr =  pvPortMalloc(size);
    83f47924:	8a2a                	mv	s4,a0
   memset(ptr, 0, size);
    83f47926:	656040ef          	jal	ra,83f4bf7c <memset>
   uintptr_t *ptr =  pvPortMalloc(size);
    83f4792a:	8526                	mv	a0,s1
   st->window = (float*)mem_alloc(2*N*sizeof(float));
    83f4792c:	05443423          	sd	s4,72(s0)
    83f47930:	455060ef          	jal	ra,83f4e584 <pvPortMalloc>
   memset(ptr, 0, size);
    83f47934:	8626                	mv	a2,s1
    83f47936:	4581                	li	a1,0
   st->ft = (float*)mem_alloc(2*N*sizeof(float));
   st->ps = (float*)mem_alloc((N+M)*sizeof(float));
    83f47938:	00290a1b          	addiw	s4,s2,2
   uintptr_t *ptr =  pvPortMalloc(size);
    83f4793c:	002a149b          	slliw	s1,s4,0x2
    83f47940:	8aaa                	mv	s5,a0
   memset(ptr, 0, size);
    83f47942:	63a040ef          	jal	ra,83f4bf7c <memset>
   uintptr_t *ptr =  pvPortMalloc(size);
    83f47946:	8526                	mv	a0,s1
   st->ft = (float*)mem_alloc(2*N*sizeof(float));
    83f47948:	03543423          	sd	s5,40(s0)
    83f4794c:	439060ef          	jal	ra,83f4e584 <pvPortMalloc>
   memset(ptr, 0, size);
    83f47950:	8626                	mv	a2,s1
    83f47952:	4581                	li	a1,0
   uintptr_t *ptr =  pvPortMalloc(size);
    83f47954:	8aaa                	mv	s5,a0
   memset(ptr, 0, size);
    83f47956:	626040ef          	jal	ra,83f4bf7c <memset>
   uintptr_t *ptr =  pvPortMalloc(size);
    83f4795a:	8526                	mv	a0,s1
   st->ps = (float*)mem_alloc((N+M)*sizeof(float));
    83f4795c:	03543823          	sd	s5,48(s0)
    83f47960:	425060ef          	jal	ra,83f4e584 <pvPortMalloc>
   memset(ptr, 0, size);
    83f47964:	8626                	mv	a2,s1
    83f47966:	4581                	li	a1,0
   uintptr_t *ptr =  pvPortMalloc(size);
    83f47968:	8aaa                	mv	s5,a0
   memset(ptr, 0, size);
    83f4796a:	612040ef          	jal	ra,83f4bf7c <memset>
   uintptr_t *ptr =  pvPortMalloc(size);
    83f4796e:	8526                	mv	a0,s1
   st->echo_noise = (float*)mem_alloc((N+M)*sizeof(float));
    83f47970:	07543c23          	sd	s5,120(s0)
    83f47974:	411060ef          	jal	ra,83f4e584 <pvPortMalloc>
   memset(ptr, 0, size);
    83f47978:	8626                	mv	a2,s1
    83f4797a:	4581                	li	a1,0
   uintptr_t *ptr =  pvPortMalloc(size);
    83f4797c:	8aaa                	mv	s5,a0
   memset(ptr, 0, size);
    83f4797e:	5fe040ef          	jal	ra,83f4bf7c <memset>
   uintptr_t *ptr =  pvPortMalloc(size);
    83f47982:	8526                	mv	a0,s1
   st->residual_echo = (float*)mem_alloc((N+M)*sizeof(float));
    83f47984:	09543023          	sd	s5,128(s0)
    83f47988:	3fd060ef          	jal	ra,83f4e584 <pvPortMalloc>
   memset(ptr, 0, size);
    83f4798c:	8626                	mv	a2,s1
    83f4798e:	4581                	li	a1,0
   uintptr_t *ptr =  pvPortMalloc(size);
    83f47990:	8aaa                	mv	s5,a0
   memset(ptr, 0, size);
    83f47992:	5ea040ef          	jal	ra,83f4bf7c <memset>
   uintptr_t *ptr =  pvPortMalloc(size);
    83f47996:	8526                	mv	a0,s1
   st->old_ps = (float*)mem_alloc((N+M)*sizeof(float));
    83f47998:	05543823          	sd	s5,80(s0)
    83f4799c:	3e9060ef          	jal	ra,83f4e584 <pvPortMalloc>
   memset(ptr, 0, size);
    83f479a0:	8626                	mv	a2,s1
    83f479a2:	4581                	li	a1,0
   uintptr_t *ptr =  pvPortMalloc(size);
    83f479a4:	8aaa                	mv	s5,a0
   memset(ptr, 0, size);
    83f479a6:	5d6040ef          	jal	ra,83f4bf7c <memset>
   uintptr_t *ptr =  pvPortMalloc(size);
    83f479aa:	8526                	mv	a0,s1
   st->prior = (float*)mem_alloc((N+M)*sizeof(float));
    83f479ac:	07543023          	sd	s5,96(s0)
    83f479b0:	3d5060ef          	jal	ra,83f4e584 <pvPortMalloc>
   memset(ptr, 0, size);
    83f479b4:	8626                	mv	a2,s1
    83f479b6:	4581                	li	a1,0
   uintptr_t *ptr =  pvPortMalloc(size);
    83f479b8:	8aaa                	mv	s5,a0
   memset(ptr, 0, size);
    83f479ba:	5c2040ef          	jal	ra,83f4bf7c <memset>
   uintptr_t *ptr =  pvPortMalloc(size);
    83f479be:	8526                	mv	a0,s1
   st->post = (float*)mem_alloc((N+M)*sizeof(float));
    83f479c0:	07543423          	sd	s5,104(s0)
    83f479c4:	3c1060ef          	jal	ra,83f4e584 <pvPortMalloc>
   memset(ptr, 0, size);
    83f479c8:	8626                	mv	a2,s1
    83f479ca:	4581                	li	a1,0
   uintptr_t *ptr =  pvPortMalloc(size);
    83f479cc:	8aaa                	mv	s5,a0
   memset(ptr, 0, size);
    83f479ce:	5ae040ef          	jal	ra,83f4bf7c <memset>
   uintptr_t *ptr =  pvPortMalloc(size);
    83f479d2:	8526                	mv	a0,s1
   st->gain = (float*)mem_alloc((N+M)*sizeof(float));
    83f479d4:	05543c23          	sd	s5,88(s0)
    83f479d8:	3ad060ef          	jal	ra,83f4e584 <pvPortMalloc>
   memset(ptr, 0, size);
    83f479dc:	8626                	mv	a2,s1
    83f479de:	4581                	li	a1,0
   uintptr_t *ptr =  pvPortMalloc(size);
    83f479e0:	8aaa                	mv	s5,a0
   memset(ptr, 0, size);
    83f479e2:	59a040ef          	jal	ra,83f4bf7c <memset>
   uintptr_t *ptr =  pvPortMalloc(size);
    83f479e6:	8526                	mv	a0,s1
   st->gain2 = (float*)mem_alloc((N+M)*sizeof(float));
    83f479e8:	03543c23          	sd	s5,56(s0)
    83f479ec:	399060ef          	jal	ra,83f4e584 <pvPortMalloc>
   memset(ptr, 0, size);
    83f479f0:	8626                	mv	a2,s1
    83f479f2:	4581                	li	a1,0
   uintptr_t *ptr =  pvPortMalloc(size);
    83f479f4:	8aaa                	mv	s5,a0
   memset(ptr, 0, size);
    83f479f6:	586040ef          	jal	ra,83f4bf7c <memset>
   uintptr_t *ptr =  pvPortMalloc(size);
    83f479fa:	8526                	mv	a0,s1
   st->gain_floor = (float*)mem_alloc((N+M)*sizeof(float));
    83f479fc:	05543023          	sd	s5,64(s0)
    83f47a00:	385060ef          	jal	ra,83f4e584 <pvPortMalloc>
   memset(ptr, 0, size);
    83f47a04:	8626                	mv	a2,s1
    83f47a06:	4581                	li	a1,0
   st->zeta = (float*)mem_alloc((N+M)*sizeof(float));

   st->inbuf = (float*)mem_alloc(N3*sizeof(float));
    83f47a08:	0029149b          	slliw	s1,s2,0x2
   uintptr_t *ptr =  pvPortMalloc(size);
    83f47a0c:	8aaa                	mv	s5,a0
   memset(ptr, 0, size);
    83f47a0e:	56e040ef          	jal	ra,83f4bf7c <memset>
   uintptr_t *ptr =  pvPortMalloc(size);
    83f47a12:	8526                	mv	a0,s1
   st->zeta = (float*)mem_alloc((N+M)*sizeof(float));
    83f47a14:	07543823          	sd	s5,112(s0)
    83f47a18:	36d060ef          	jal	ra,83f4e584 <pvPortMalloc>
   memset(ptr, 0, size);
    83f47a1c:	8626                	mv	a2,s1
    83f47a1e:	4581                	li	a1,0
   uintptr_t *ptr =  pvPortMalloc(size);
    83f47a20:	8aaa                	mv	s5,a0
   memset(ptr, 0, size);
    83f47a22:	55a040ef          	jal	ra,83f4bf7c <memset>
   uintptr_t *ptr =  pvPortMalloc(size);
    83f47a26:	8526                	mv	a0,s1
   st->inbuf = (float*)mem_alloc(N3*sizeof(float));
    83f47a28:	09543823          	sd	s5,144(s0)
    83f47a2c:	359060ef          	jal	ra,83f4e584 <pvPortMalloc>
   memset(ptr, 0, size);
    83f47a30:	4581                	li	a1,0
    83f47a32:	8626                	mv	a2,s1
   uintptr_t *ptr =  pvPortMalloc(size);
    83f47a34:	84aa                	mv	s1,a0
   memset(ptr, 0, size);
    83f47a36:	546040ef          	jal	ra,83f4bf7c <memset>
   st->outbuf = (float*)mem_alloc(N3*sizeof(float));

   aes_conj_window(st->window, 2*N3);
    83f47a3a:	6428                	ld	a0,72(s0)
   N3 = 2*N - st->frame_size;
    83f47a3c:	0019199b          	slliw	s3,s2,0x1
   st->outbuf = (float*)mem_alloc(N3*sizeof(float));
    83f47a40:	ec44                	sd	s1,152(s0)
   aes_conj_window(st->window, 2*N3);
    83f47a42:	85ce                	mv	a1,s3
   st->inbuf = (float*)mem_alloc(N3*sizeof(float));
    83f47a44:	0009049b          	sext.w	s1,s2
   aes_conj_window(st->window, 2*N3);
    83f47a48:	028010ef          	jal	ra,83f48a70 <aes_conj_window>

   for (i=0;i<N+M;i++) {
    83f47a4c:	05405863          	blez	s4,83f47a9c <NLP_AES_init+0x20c>
    83f47a50:	0019069b          	addiw	a3,s2,1
    83f47a54:	02069793          	slli	a5,a3,0x20
    83f47a58:	01e7d693          	srli	a3,a5,0x1e
    83f47a5c:	0691                	addi	a3,a3,4
    83f47a5e:	4781                	li	a5,0
      st->old_ps[i] = FLOAT_ONE;
    83f47a60:	0000a717          	auipc	a4,0xa
    83f47a64:	7f072787          	flw	fa5,2032(a4) # 83f52250 <__func__.1+0x58>
    83f47a68:	6838                	ld	a4,80(s0)
    83f47a6a:	973e                	add	a4,a4,a5
    83f47a6c:	00f72027          	fsw	fa5,0(a4)
      st->gain[i] = FLOAT_ONE;
    83f47a70:	6c38                	ld	a4,88(s0)
    83f47a72:	973e                	add	a4,a4,a5
    83f47a74:	00f72027          	fsw	fa5,0(a4)
      st->post[i] = FLOAT_ONE;
    83f47a78:	7438                	ld	a4,104(s0)
    83f47a7a:	973e                	add	a4,a4,a5
    83f47a7c:	00f72027          	fsw	fa5,0(a4)
      st->prior[i] = FLOAT_ONE;
    83f47a80:	7038                	ld	a4,96(s0)
    83f47a82:	973e                	add	a4,a4,a5
    83f47a84:	00f72027          	fsw	fa5,0(a4)
      st->echo_noise[i] = FLOAT_ZERO;
    83f47a88:	7c38                	ld	a4,120(s0)
    83f47a8a:	973e                	add	a4,a4,a5
    83f47a8c:	00072023          	sw	zero,0(a4)
      st->zeta[0] = FLOAT_ZERO;
    83f47a90:	7838                	ld	a4,112(s0)
   for (i=0;i<N+M;i++) {
    83f47a92:	0791                	addi	a5,a5,4
      st->zeta[0] = FLOAT_ZERO;
    83f47a94:	00072023          	sw	zero,0(a4)
   for (i=0;i<N+M;i++) {
    83f47a98:	fcd798e3          	bne	a5,a3,83f47a68 <NLP_AES_init+0x1d8>
   }

   st->echo_sup = -40;
    83f47a9c:	57e5                	li	a5,-7
    83f47a9e:	1786                	slli	a5,a5,0x21
    83f47aa0:	fd878793          	addi	a5,a5,-40
    83f47aa4:	e45c                	sd	a5,136(s0)
   st->echo_sup_active = -15;

   for (i=0;i<N3;i++) {
    83f47aa6:	00291693          	slli	a3,s2,0x2
    83f47aaa:	4781                	li	a5,0
    83f47aac:	01205d63          	blez	s2,83f47ac6 <NLP_AES_init+0x236>
      st->inbuf[i] = 0;
    83f47ab0:	6858                	ld	a4,144(s0)
    83f47ab2:	973e                	add	a4,a4,a5
    83f47ab4:	00072023          	sw	zero,0(a4)
      st->outbuf[i] = 0;
    83f47ab8:	6c58                	ld	a4,152(s0)
    83f47aba:	973e                	add	a4,a4,a5
    83f47abc:	00072023          	sw	zero,0(a4)
   for (i=0;i<N3;i++) {
    83f47ac0:	0791                	addi	a5,a5,4
    83f47ac2:	fef697e3          	bne	a3,a5,83f47ab0 <NLP_AES_init+0x220>
   }

   st->fft_lookup = speech_fft_init(2*N);
    83f47ac6:	854e                	mv	a0,s3
    83f47ac8:	58e010ef          	jal	ra,83f49056 <speech_fft_init>

   st->nb_adapt = 0;
   st->min_count = 0;

   /* STD/DTD */
   st->aes_std_in = (short*)mem_alloc(frame_size*sizeof(short));
    83f47acc:	0014949b          	slliw	s1,s1,0x1
   st->fft_lookup = speech_fft_init(2*N);
    83f47ad0:	f448                	sd	a0,168(s0)
   st->nb_adapt = 0;
    83f47ad2:	0a043023          	sd	zero,160(s0)
   uintptr_t *ptr =  pvPortMalloc(size);
    83f47ad6:	8526                	mv	a0,s1
    83f47ad8:	2ad060ef          	jal	ra,83f4e584 <pvPortMalloc>
   memset(ptr, 0, size);
    83f47adc:	8626                	mv	a2,s1
    83f47ade:	4581                	li	a1,0
   uintptr_t *ptr =  pvPortMalloc(size);
    83f47ae0:	892a                	mv	s2,a0
   memset(ptr, 0, size);
    83f47ae2:	49a040ef          	jal	ra,83f4bf7c <memset>
   uintptr_t *ptr =  pvPortMalloc(size);
    83f47ae6:	8526                	mv	a0,s1
   st->aes_std_in = (short*)mem_alloc(frame_size*sizeof(short));
    83f47ae8:	0d243023          	sd	s2,192(s0)
    83f47aec:	299060ef          	jal	ra,83f4e584 <pvPortMalloc>
   memset(ptr, 0, size);
    83f47af0:	8626                	mv	a2,s1
    83f47af2:	4581                	li	a1,0
   uintptr_t *ptr =  pvPortMalloc(size);
    83f47af4:	84aa                	mv	s1,a0
   memset(ptr, 0, size);
    83f47af6:	486040ef          	jal	ra,83f4bf7c <memset>
   st->mic_raw_ola = (short*)mem_alloc(frame_size*sizeof(short));
   //st->fdstd_mic_in_sm = (float*)mem_alloc(frame_size*sizeof(float));
   //st->fdstd_linear_echo_sm = (float*)mem_alloc(frame_size*sizeof(float));

   for (i=0;i < st->frame_size;i++) {
    83f47afa:	4018                	lw	a4,0(s0)
   st->mic_raw_ola = (short*)mem_alloc(frame_size*sizeof(short));
    83f47afc:	e464                	sd	s1,200(s0)
   for (i=0;i < st->frame_size;i++) {
    83f47afe:	4781                	li	a5,0
    83f47b00:	00e04463          	bgtz	a4,83f47b08 <NLP_AES_init+0x278>
    83f47b04:	a829                	j	83f47b1e <NLP_AES_init+0x28e>
      st->mic_raw_ola[i] = 0;
    83f47b06:	6464                	ld	s1,200(s0)
    83f47b08:	00179513          	slli	a0,a5,0x1
    83f47b0c:	94aa                	add	s1,s1,a0
    83f47b0e:	00049023          	sh	zero,0(s1)
   for (i=0;i < st->frame_size;i++) {
    83f47b12:	4014                	lw	a3,0(s0)
    83f47b14:	0785                	addi	a5,a5,1
    83f47b16:	0007871b          	sext.w	a4,a5
    83f47b1a:	fed746e3          	blt	a4,a3,83f47b06 <NLP_AES_init+0x276>
      //st->fdstd_mic_in_sm[i] = FLOAT_ZERO;
      //st->fdstd_linear_echo_sm[i] = FLOAT_ZERO;
   }
   st->RER_smooth = FLOAT_ZERO;
    83f47b1e:	0a042a23          	sw	zero,180(s0)
   st->RER_vad = 0;
    83f47b22:	0a043c23          	sd	zero,184(s0)
   st->st_vad = 0;
   st->fdstd_vad = 0;
    83f47b26:	0c042c23          	sw	zero,216(s0)
   st->frame1_last_sample = 0;
    83f47b2a:	0e042223          	sw	zero,228(s0)

   return st;

}
    83f47b2e:	60e6                	ld	ra,88(sp)
    83f47b30:	8522                	mv	a0,s0
    83f47b32:	6446                	ld	s0,80(sp)
    83f47b34:	64a6                	ld	s1,72(sp)
    83f47b36:	6906                	ld	s2,64(sp)
    83f47b38:	79e2                	ld	s3,56(sp)
    83f47b3a:	7a42                	ld	s4,48(sp)
    83f47b3c:	7aa2                	ld	s5,40(sp)
    83f47b3e:	2462                	fld	fs0,24(sp)
    83f47b40:	24c2                	fld	fs1,16(sp)
    83f47b42:	2922                	fld	fs2,8(sp)
    83f47b44:	2982                	fld	fs3,0(sp)
    83f47b46:	6125                	addi	sp,sp,96
    83f47b48:	8082                	ret

0000000083f47b4a <NLP_AES_free>:

EXPORT void NLP_AES_free(NonLinearEchoState *st)
{
    83f47b4a:	1141                	addi	sp,sp,-16
    83f47b4c:	e406                	sd	ra,8(sp)
    83f47b4e:	e022                	sd	s0,0(sp)
    83f47b50:	842a                	mv	s0,a0
   vPortFree(ptr);
    83f47b52:	7108                	ld	a0,32(a0)
    83f47b54:	397060ef          	jal	ra,83f4e6ea <vPortFree>
    83f47b58:	7408                	ld	a0,40(s0)
    83f47b5a:	391060ef          	jal	ra,83f4e6ea <vPortFree>
    83f47b5e:	7808                	ld	a0,48(s0)
    83f47b60:	38b060ef          	jal	ra,83f4e6ea <vPortFree>
    83f47b64:	7c08                	ld	a0,56(s0)
    83f47b66:	385060ef          	jal	ra,83f4e6ea <vPortFree>
    83f47b6a:	6028                	ld	a0,64(s0)
    83f47b6c:	37f060ef          	jal	ra,83f4e6ea <vPortFree>
    83f47b70:	6428                	ld	a0,72(s0)
    83f47b72:	379060ef          	jal	ra,83f4e6ea <vPortFree>
    83f47b76:	6828                	ld	a0,80(s0)
    83f47b78:	373060ef          	jal	ra,83f4e6ea <vPortFree>
    83f47b7c:	6c28                	ld	a0,88(s0)
    83f47b7e:	36d060ef          	jal	ra,83f4e6ea <vPortFree>
    83f47b82:	7028                	ld	a0,96(s0)
    83f47b84:	367060ef          	jal	ra,83f4e6ea <vPortFree>
    83f47b88:	7428                	ld	a0,104(s0)
    83f47b8a:	361060ef          	jal	ra,83f4e6ea <vPortFree>
    83f47b8e:	7c28                	ld	a0,120(s0)
    83f47b90:	35b060ef          	jal	ra,83f4e6ea <vPortFree>
    83f47b94:	6048                	ld	a0,128(s0)
    83f47b96:	355060ef          	jal	ra,83f4e6ea <vPortFree>
    83f47b9a:	7828                	ld	a0,112(s0)
    83f47b9c:	34f060ef          	jal	ra,83f4e6ea <vPortFree>
    83f47ba0:	6848                	ld	a0,144(s0)
    83f47ba2:	349060ef          	jal	ra,83f4e6ea <vPortFree>
    83f47ba6:	6c48                	ld	a0,152(s0)
    83f47ba8:	343060ef          	jal	ra,83f4e6ea <vPortFree>
   mem_free(st->zeta);

   mem_free(st->inbuf);
   mem_free(st->outbuf);

   speech_fft_free(st->fft_lookup);
    83f47bac:	7448                	ld	a0,168(s0)
    83f47bae:	4d6010ef          	jal	ra,83f49084 <speech_fft_free>
   filterbank_free(st->bank);
    83f47bb2:	6808                	ld	a0,16(s0)
    83f47bb4:	5bd000ef          	jal	ra,83f48970 <filterbank_free>
    83f47bb8:	6068                	ld	a0,192(s0)
    83f47bba:	331060ef          	jal	ra,83f4e6ea <vPortFree>
    83f47bbe:	6468                	ld	a0,200(s0)
    83f47bc0:	32b060ef          	jal	ra,83f4e6ea <vPortFree>
    83f47bc4:	8522                	mv	a0,s0
   //SSP_SAFE_FREE_BUF(mic_raw_std);
   SSP_SAFE_FREE_BUF(tmp1);
   SSP_SAFE_FREE_BUF(tmp2);
#endif

}
    83f47bc6:	6402                	ld	s0,0(sp)
    83f47bc8:	60a2                	ld	ra,8(sp)
    83f47bca:	0141                	addi	sp,sp,16
    83f47bcc:	31f0606f          	j	83f4e6ea <vPortFree>

0000000083f47bd0 <std_residual_echo>:

void std_residual_echo(NonLinearEchoState *st, float *residual_echo, int len, boolean_T speech_vad)
{
    83f47bd0:	81010113          	addi	sp,sp,-2032
    83f47bd4:	7e813023          	sd	s0,2016(sp)
    83f47bd8:	7c913c23          	sd	s1,2008(sp)
    83f47bdc:	7d313423          	sd	s3,1992(sp)
    83f47be0:	7e113423          	sd	ra,2024(sp)
    83f47be4:	7d213823          	sd	s2,2000(sp)
    83f47be8:	7d413023          	sd	s4,1984(sp)
    83f47bec:	7b513c23          	sd	s5,1976(sp)
    83f47bf0:	7b613823          	sd	s6,1968(sp)
    83f47bf4:	7b713423          	sd	s7,1960(sp)
    83f47bf8:	7b813023          	sd	s8,1952(sp)
    83f47bfc:	79913c23          	sd	s9,1944(sp)
    83f47c00:	78813427          	fsd	fs0,1928(sp)
    83f47c04:	78913027          	fsd	fs1,1920(sp)
   int i;
   float leak2;
   int N;
   //float rer_coef;

   N = st->echo_state->window_size;
    83f47c08:	6d18                	ld	a4,24(a0)
{
    83f47c0a:	d7010113          	addi	sp,sp,-656
    83f47c0e:	842a                	mv	s0,a0
   N = st->echo_state->window_size;
    83f47c10:	00472903          	lw	s2,4(a4)
{
    83f47c14:	84ae                	mv	s1,a1
    83f47c16:	89b6                	mv	s3,a3
	len = len;
   /* Apply hanning window (should pre-compute it) */
   for (i=0;i<N;i++)
    83f47c18:	03205c63          	blez	s2,83f47c50 <std_residual_echo+0x80>
    83f47c1c:	fff9059b          	addiw	a1,s2,-1
    83f47c20:	02059793          	slli	a5,a1,0x20
    83f47c24:	01e7d593          	srli	a1,a5,0x1e
    83f47c28:	4781                	li	a5,0
    83f47c2a:	a011                	j	83f47c2e <std_residual_echo+0x5e>
    83f47c2c:	0791                	addi	a5,a5,4
      st->echo_state->y[i] = st->echo_state->window[i] * st->echo_state->last_y[i];
    83f47c2e:	7770                	ld	a2,232(a4)
    83f47c30:	7334                	ld	a3,96(a4)
    83f47c32:	6f38                	ld	a4,88(a4)
    83f47c34:	963e                	add	a2,a2,a5
    83f47c36:	96be                	add	a3,a3,a5
    83f47c38:	00062787          	flw	fa5,0(a2)
    83f47c3c:	0006a707          	flw	fa4,0(a3)
    83f47c40:	973e                	add	a4,a4,a5
    83f47c42:	10e7f7d3          	fmul.s	fa5,fa5,fa4
    83f47c46:	00f72027          	fsw	fa5,0(a4)
    83f47c4a:	6c18                	ld	a4,24(s0)
   for (i=0;i<N;i++)
    83f47c4c:	fef590e3          	bne	a1,a5,83f47c2c <std_residual_echo+0x5c>

   /* Compute power spectrum of the linear echo in each bin */
   speech_fft(st->echo_state->fft_table, st->echo_state->y, st->echo_state->Y);
    83f47c50:	7730                	ld	a2,104(a4)
    83f47c52:	6f2c                	ld	a1,88(a4)
    83f47c54:	7f68                	ld	a0,248(a4)
    83f47c56:	446010ef          	jal	ra,83f4909c <speech_fft>
   bin_power_spectrum(st->echo_state->Y, residual_echo, N);  /* powe-based linear echo */
    83f47c5a:	6c1c                	ld	a5,24(s0)
    83f47c5c:	864a                	mv	a2,s2
    83f47c5e:	85a6                	mv	a1,s1
    83f47c60:	77a8                	ld	a0,104(a5)
    83f47c62:	eaefe0ef          	jal	ra,83f46310 <bin_power_spectrum>

   //rer_coef = 0.75f;
   //st->RER_smooth = rer_coef*st->RER_smooth + (FLOAT_ONE-rer_coef)*st->echo_state->RER;  /* not better */
   //if (st->RER_smooth*32767 > 2000)
   if (st->echo_state->RER*32767 > 3000)
    83f47c66:	6c08                	ld	a0,24(s0)
    83f47c68:	0000a797          	auipc	a5,0xa
    83f47c6c:	6047a687          	flw	fa3,1540(a5) # 83f5226c <__func__.1+0x74>
    83f47c70:	0000a797          	auipc	a5,0xa
    83f47c74:	74c7a707          	flw	fa4,1868(a5) # 83f523bc <__func__.1+0x1c4>
    83f47c78:	14452787          	flw	fa5,324(a0)
      float tmp1[320], tmp2[320];
#endif
      float fdstd_tau, fdstd_tau_sum;
      int start_f, end_f;
   
      for (i=0;i < st->frame_size;i++) {
    83f47c7c:	401c                	lw	a5,0(s0)
   if (st->echo_state->RER*32767 > 3000)
    83f47c7e:	10d7f7d3          	fmul.s	fa5,fa5,fa3
    83f47c82:	a0f71753          	flt.s	a4,fa4,fa5
    83f47c86:	0ae42c23          	sw	a4,184(s0)
      for (i=0;i < st->frame_size;i++) {
    83f47c8a:	06f05363          	blez	a5,83f47cf0 <std_residual_echo+0x120>
    83f47c8e:	6605                	lui	a2,0x1
    83f47c90:	a0060713          	addi	a4,a2,-1536 # a00 <_EL1_STACK_SIZE+0x200>
    83f47c94:	0808                	addi	a0,sp,16
        tmp1[i] = st->mic_raw_ola[i];  /* previous frame */
        tmp1[i+st->frame_size] = st->aes_std_in[i];  /* current frame */
    83f47c96:	a0060613          	addi	a2,a2,-1536
    83f47c9a:	76fd                	lui	a3,0xfffff
    83f47c9c:	962a                	add	a2,a2,a0
    83f47c9e:	60068593          	addi	a1,a3,1536 # fffffffffffff600 <_end+0xffffffff7bfff8c0>
    83f47ca2:	972a                	add	a4,a4,a0
    83f47ca4:	96b2                	add	a3,a3,a2
    83f47ca6:	95ba                	add	a1,a1,a4
    83f47ca8:	e436                	sd	a3,8(sp)
      for (i=0;i < st->frame_size;i++) {
    83f47caa:	4701                	li	a4,0
        tmp1[i] = st->mic_raw_ola[i];  /* previous frame */
    83f47cac:	6470                	ld	a2,200(s0)
    83f47cae:	00171513          	slli	a0,a4,0x1
        tmp1[i+st->frame_size] = st->aes_std_in[i];  /* current frame */
    83f47cb2:	6074                	ld	a3,192(s0)
        tmp1[i] = st->mic_raw_ola[i];  /* previous frame */
    83f47cb4:	962a                	add	a2,a2,a0
    83f47cb6:	00061803          	lh	a6,0(a2)
        tmp1[i+st->frame_size] = st->aes_std_in[i];  /* current frame */
    83f47cba:	96aa                	add	a3,a3,a0
    83f47cbc:	6522                	ld	a0,8(sp)
        tmp1[i] = st->mic_raw_ola[i];  /* previous frame */
    83f47cbe:	d00877d3          	fcvt.s.w	fa5,a6
        tmp1[i+st->frame_size] = st->aes_std_in[i];  /* current frame */
    83f47cc2:	9fb9                	addw	a5,a5,a4
    83f47cc4:	078a                	slli	a5,a5,0x2
        tmp1[i] = st->mic_raw_ola[i];  /* previous frame */
    83f47cc6:	00f5a027          	fsw	fa5,0(a1)
        tmp1[i+st->frame_size] = st->aes_std_in[i];  /* current frame */
    83f47cca:	00069803          	lh	a6,0(a3)
    83f47cce:	97aa                	add	a5,a5,a0
      for (i=0;i < st->frame_size;i++) {
    83f47cd0:	0705                	addi	a4,a4,1
        tmp1[i+st->frame_size] = st->aes_std_in[i];  /* current frame */
    83f47cd2:	d00877d3          	fcvt.s.w	fa5,a6
      for (i=0;i < st->frame_size;i++) {
    83f47cd6:	0007051b          	sext.w	a0,a4
    83f47cda:	0591                	addi	a1,a1,4
        tmp1[i+st->frame_size] = st->aes_std_in[i];  /* current frame */
    83f47cdc:	60f7a027          	fsw	fa5,1536(a5)
        st->mic_raw_ola[i] = st->aes_std_in[i];    /* update input overlap data */
    83f47ce0:	00069783          	lh	a5,0(a3)
    83f47ce4:	00f61023          	sh	a5,0(a2)
      for (i=0;i < st->frame_size;i++) {
    83f47ce8:	401c                	lw	a5,0(s0)
    83f47cea:	fcf541e3          	blt	a0,a5,83f47cac <std_residual_echo+0xdc>
      }

      for (i=0;i<N;i++)
        tmp1[i] = st->echo_state->window[i] * tmp1[i];
      speech_fft(st->echo_state->fft_table, tmp1, tmp2);
    83f47cee:	6c08                	ld	a0,24(s0)
      for (i=0;i<N;i++)
    83f47cf0:	05205563          	blez	s2,83f47d3a <std_residual_echo+0x16a>
    83f47cf4:	6785                	lui	a5,0x1
    83f47cf6:	0818                	addi	a4,sp,16
    83f47cf8:	76fd                	lui	a3,0xfffff
    83f47cfa:	a0078793          	addi	a5,a5,-1536 # a00 <_EL1_STACK_SIZE+0x200>
    83f47cfe:	97ba                	add	a5,a5,a4
    83f47d00:	fff9059b          	addiw	a1,s2,-1
    83f47d04:	60068693          	addi	a3,a3,1536 # fffffffffffff600 <_end+0xffffffff7bfff8c0>
    83f47d08:	96be                	add	a3,a3,a5
    83f47d0a:	02059793          	slli	a5,a1,0x20
    83f47d0e:	01e7d593          	srli	a1,a5,0x1e
    83f47d12:	00468713          	addi	a4,a3,4
    83f47d16:	95ba                	add	a1,a1,a4
    83f47d18:	4601                	li	a2,0
    83f47d1a:	a011                	j	83f47d1e <std_residual_echo+0x14e>
    83f47d1c:	0711                	addi	a4,a4,4
        tmp1[i] = st->echo_state->window[i] * tmp1[i];
    83f47d1e:	757c                	ld	a5,232(a0)
    83f47d20:	0006a787          	flw	fa5,0(a3)
    83f47d24:	97b2                	add	a5,a5,a2
    83f47d26:	0007a707          	flw	fa4,0(a5)
      for (i=0;i<N;i++)
    83f47d2a:	0611                	addi	a2,a2,4
        tmp1[i] = st->echo_state->window[i] * tmp1[i];
    83f47d2c:	10e7f7d3          	fmul.s	fa5,fa5,fa4
    83f47d30:	00f6a027          	fsw	fa5,0(a3)
      for (i=0;i<N;i++)
    83f47d34:	86ba                	mv	a3,a4
    83f47d36:	fee593e3          	bne	a1,a4,83f47d1c <std_residual_echo+0x14c>
      speech_fft(st->echo_state->fft_table, tmp1, tmp2);
    83f47d3a:	6785                	lui	a5,0x1
    83f47d3c:	0818                	addi	a4,sp,16
    83f47d3e:	7a7d                	lui	s4,0xfffff
    83f47d40:	a0078793          	addi	a5,a5,-1536 # a00 <_EL1_STACK_SIZE+0x200>
    83f47d44:	97ba                	add	a5,a5,a4
    83f47d46:	7d68                	ld	a0,248(a0)
    83f47d48:	600a0a13          	addi	s4,s4,1536 # fffffffffffff600 <_end+0xffffffff7bfff8c0>
    83f47d4c:	9a3e                	add	s4,s4,a5
    83f47d4e:	51010613          	addi	a2,sp,1296
    83f47d52:	85d2                	mv	a1,s4
    83f47d54:	348010ef          	jal	ra,83f4909c <speech_fft>
      bin_power_spectrum(tmp2, tmp1, N);
    83f47d58:	864a                	mv	a2,s2
    83f47d5a:	85d2                	mv	a1,s4
    83f47d5c:	51010513          	addi	a0,sp,1296
    83f47d60:	db0fe0ef          	jal	ra,83f46310 <bin_power_spectrum>

      fdstd_tau_sum = FLOAT_ZERO;
      start_f = (int)(ceil(100 * N / st->sampling_rate));
    83f47d64:	06400793          	li	a5,100
    83f47d68:	032787bb          	mulw	a5,a5,s2
    83f47d6c:	4418                	lw	a4,8(s0)
      fdstd_tau_sum = FLOAT_ZERO;
    83f47d6e:	f0000453          	fmv.w.x	fs0,zero
      start_f = (int)(ceil(100 * N / st->sampling_rate));
    83f47d72:	02e7c7bb          	divw	a5,a5,a4
    83f47d76:	d2078553          	fcvt.d.w	fa0,a5
    83f47d7a:	a21f80ef          	jal	ra,83f4079a <ceil>
      end_f = (int)(floor(3800 * N / st->sampling_rate));
    83f47d7e:	6785                	lui	a5,0x1
    83f47d80:	ed87879b          	addiw	a5,a5,-296
    83f47d84:	02f9093b          	mulw	s2,s2,a5
    83f47d88:	441c                	lw	a5,8(s0)
      start_f = (int)(ceil(100 * N / st->sampling_rate));
    83f47d8a:	c2051bd3          	fcvt.w.d	s7,fa0,rtz
    83f47d8e:	000b8c1b          	sext.w	s8,s7
      end_f = (int)(floor(3800 * N / st->sampling_rate));
    83f47d92:	02f9493b          	divw	s2,s2,a5
    83f47d96:	d2090553          	fcvt.d.w	fa0,s2
    83f47d9a:	bc9f80ef          	jal	ra,83f40962 <floor>
    83f47d9e:	c2051b53          	fcvt.w.d	s6,fa0,rtz
    83f47da2:	000b0a9b          	sext.w	s5,s6
      for (i = start_f; i <= end_f; i++) {
    83f47da6:	058ac063          	blt	s5,s8,83f47de6 <std_residual_echo+0x216>
    83f47daa:	002c1913          	slli	s2,s8,0x2
    83f47dae:	01248cb3          	add	s9,s1,s2
    83f47db2:	0000a797          	auipc	a5,0xa
    83f47db6:	60e7a487          	flw	fs1,1550(a5) # 83f523c0 <__func__.1+0x1c8>
    83f47dba:	9952                	add	s2,s2,s4
        fdstd_tau = (float)sqrt(residual_echo[i]/(tmp1[i] + 0.000000000465f));  /* add small DC to avoid zero denominator */
    83f47dbc:	00092787          	flw	fa5,0(s2)
    83f47dc0:	000ca507          	flw	fa0,0(s9)
      for (i = start_f; i <= end_f; i++) {
    83f47dc4:	2c05                	addiw	s8,s8,1
        fdstd_tau = (float)sqrt(residual_echo[i]/(tmp1[i] + 0.000000000465f));  /* add small DC to avoid zero denominator */
    83f47dc6:	0097f7d3          	fadd.s	fa5,fa5,fs1
      for (i = start_f; i <= end_f; i++) {
    83f47dca:	0c91                	addi	s9,s9,4
    83f47dcc:	0911                	addi	s2,s2,4
        fdstd_tau = (float)sqrt(residual_echo[i]/(tmp1[i] + 0.000000000465f));  /* add small DC to avoid zero denominator */
    83f47dce:	18f57553          	fdiv.s	fa0,fa0,fa5
    83f47dd2:	42050553          	fcvt.d.s	fa0,fa0
    83f47dd6:	81cf90ef          	jal	ra,83f40df2 <sqrt>
    83f47dda:	40157553          	fcvt.s.d	fa0,fa0
        fdstd_tau_sum += fdstd_tau;
    83f47dde:	00a47453          	fadd.s	fs0,fs0,fa0
      for (i = start_f; i <= end_f; i++) {
    83f47de2:	fd8adde3          	bge	s5,s8,83f47dbc <std_residual_echo+0x1ec>
      }

      if (fdstd_tau_sum > (float)(end_f - start_f + 1))  /* fix abnormal situation */
    83f47de6:	417b0b3b          	subw	s6,s6,s7
    83f47dea:	2b05                	addiw	s6,s6,1
    83f47dec:	d00b77d3          	fcvt.s.w	fa5,s6
    83f47df0:	a08797d3          	flt.s	a5,fa5,fs0
    83f47df4:	c399                	beqz	a5,83f47dfa <std_residual_echo+0x22a>
        fdstd_tau_sum = (float)(end_f - start_f + 1);
    83f47df6:	20f78453          	fmv.s	fs0,fa5

      st->fdstd_tau_mean = fdstd_tau_sum/(end_f - start_f + 1);  /* frame-based */
    83f47dfa:	18f47453          	fdiv.s	fs0,fs0,fa5
      if (st->fdstd_tau_mean > st->fdstd_thrd)
    83f47dfe:	0d442787          	flw	fa5,212(s0)
        st->fdstd_vad = 1;
      else
        st->fdstd_vad = 0;

      if ((st->RER_vad) && (st->fdstd_vad))
    83f47e02:	0b842783          	lw	a5,184(s0)
      if (st->fdstd_tau_mean > st->fdstd_thrd)
    83f47e06:	a0879753          	flt.s	a4,fa5,fs0
      st->fdstd_tau_mean = fdstd_tau_sum/(end_f - start_f + 1);  /* frame-based */
    83f47e0a:	0c842827          	fsw	fs0,208(s0)
      if (st->fdstd_tau_mean > st->fdstd_thrd)
    83f47e0e:	0ce42c23          	sw	a4,216(s0)
      if ((st->RER_vad) && (st->fdstd_vad))
    83f47e12:	cbd1                	beqz	a5,83f47ea6 <std_residual_echo+0x2d6>
    83f47e14:	c379                	beqz	a4,83f47eda <std_residual_echo+0x30a>
        st->st_vad = 0;

   }

   if (st->st_vad) {
         if (st->echo_state->leak_estimate > .5)  /* the bigger the value, the more abrupt the signal */
    83f47e16:	6c1c                	ld	a5,24(s0)
        st->st_vad = 1;
    83f47e18:	4705                	li	a4,1
    83f47e1a:	0ae42e23          	sw	a4,188(s0)
         if (st->echo_state->leak_estimate > .5)  /* the bigger the value, the more abrupt the signal */
    83f47e1e:	0307a707          	flw	fa4,48(a5)
    83f47e22:	0000a797          	auipc	a5,0xa
    83f47e26:	44e7a787          	flw	fa5,1102(a5) # 83f52270 <__func__.1+0x78>
    83f47e2a:	a0e797d3          	flt.s	a5,fa5,fa4
    83f47e2e:	c3cd                	beqz	a5,83f47ed0 <std_residual_echo+0x300>
            leak2 = st->aes_supp_coef1;
    83f47e30:	0dc42707          	flw	fa4,220(s0)
           else
              leak2 = 2.0f * st->echo_state->leak_estimate;
         }
   }

   for (i=0;i<=st->frame_size;i++) {
    83f47e34:	4018                	lw	a4,0(s0)
    83f47e36:	4781                	li	a5,0
    83f47e38:	02074863          	bltz	a4,83f47e68 <std_residual_echo+0x298>
      if (st->st_vad)
         residual_echo[i] = leak2 * residual_echo[i];
    83f47e3c:	0004a787          	flw	fa5,0(s1)
      if (st->st_vad)
    83f47e40:	0bc42703          	lw	a4,188(s0)
         residual_echo[i] = leak2 * residual_echo[i];
    83f47e44:	10f777d3          	fmul.s	fa5,fa4,fa5
      if (st->st_vad)
    83f47e48:	eb09                	bnez	a4,83f47e5a <std_residual_echo+0x28a>
      else
         residual_echo[i] = (short)(leak2 * residual_echo[i]);
    83f47e4a:	c0079753          	fcvt.w.s	a4,fa5,rtz
    83f47e4e:	0107171b          	slliw	a4,a4,0x10
    83f47e52:	4107571b          	sraiw	a4,a4,0x10
    83f47e56:	d00777d3          	fcvt.s.w	fa5,a4
    83f47e5a:	00f4a027          	fsw	fa5,0(s1)
   for (i=0;i<=st->frame_size;i++) {
    83f47e5e:	4018                	lw	a4,0(s0)
    83f47e60:	2785                	addiw	a5,a5,1
    83f47e62:	0491                	addi	s1,s1,4
    83f47e64:	fcf75ce3          	bge	a4,a5,83f47e3c <std_residual_echo+0x26c>
   }

}
    83f47e68:	29010113          	addi	sp,sp,656
    83f47e6c:	7e813083          	ld	ra,2024(sp)
    83f47e70:	7e013403          	ld	s0,2016(sp)
    83f47e74:	7d813483          	ld	s1,2008(sp)
    83f47e78:	7d013903          	ld	s2,2000(sp)
    83f47e7c:	7c813983          	ld	s3,1992(sp)
    83f47e80:	7c013a03          	ld	s4,1984(sp)
    83f47e84:	7b813a83          	ld	s5,1976(sp)
    83f47e88:	7b013b03          	ld	s6,1968(sp)
    83f47e8c:	7a813b83          	ld	s7,1960(sp)
    83f47e90:	7a013c03          	ld	s8,1952(sp)
    83f47e94:	79813c83          	ld	s9,1944(sp)
    83f47e98:	78813407          	fld	fs0,1928(sp)
    83f47e9c:	78013487          	fld	fs1,1920(sp)
    83f47ea0:	7f010113          	addi	sp,sp,2032
    83f47ea4:	8082                	ret
        st->st_vad = 0;
    83f47ea6:	0a042e23          	sw	zero,188(s0)
           leak2 = 0.0f;  /* keep clean speech signal not to be attenuated */
    83f47eaa:	f0000753          	fmv.w.x	fa4,zero
         if (!(st->RER_vad) && (speech_vad)) { 
    83f47eae:	f80993e3          	bnez	s3,83f47e34 <std_residual_echo+0x264>
           if (st->echo_state->leak_estimate > .5)
    83f47eb2:	6c1c                	ld	a5,24(s0)
    83f47eb4:	0000a717          	auipc	a4,0xa
    83f47eb8:	3bc72787          	flw	fa5,956(a4) # 83f52270 <__func__.1+0x78>
    83f47ebc:	0307a707          	flw	fa4,48(a5)
    83f47ec0:	a0e797d3          	flt.s	a5,fa5,fa4
    83f47ec4:	c79d                	beqz	a5,83f47ef2 <std_residual_echo+0x322>
              leak2 = 1.0f;
    83f47ec6:	0000a797          	auipc	a5,0xa
    83f47eca:	38a7a707          	flw	fa4,906(a5) # 83f52250 <__func__.1+0x58>
    83f47ece:	b79d                	j	83f47e34 <std_residual_echo+0x264>
            leak2 = st->aes_supp_coef2 * st->echo_state->leak_estimate;
    83f47ed0:	0e042787          	flw	fa5,224(s0)
    83f47ed4:	10f77753          	fmul.s	fa4,fa4,fa5
    83f47ed8:	bfb1                	j	83f47e34 <std_residual_echo+0x264>
           if (st->echo_state->leak_estimate > .5)
    83f47eda:	6c1c                	ld	a5,24(s0)
        st->st_vad = 0;
    83f47edc:	0a042e23          	sw	zero,188(s0)
           if (st->echo_state->leak_estimate > .5)
    83f47ee0:	0000a717          	auipc	a4,0xa
    83f47ee4:	39072787          	flw	fa5,912(a4) # 83f52270 <__func__.1+0x78>
    83f47ee8:	0307a707          	flw	fa4,48(a5)
    83f47eec:	a0e797d3          	flt.s	a5,fa5,fa4
    83f47ef0:	fbf9                	bnez	a5,83f47ec6 <std_residual_echo+0x2f6>
              leak2 = 2.0f * st->echo_state->leak_estimate;
    83f47ef2:	00e77753          	fadd.s	fa4,fa4,fa4
    83f47ef6:	bf3d                	j	83f47e34 <std_residual_echo+0x264>

0000000083f47ef8 <NLP_AES>:

EXPORT void NLP_AES(NonLinearEchoState *aes_state, short *y, float aes_frame, boolean_T speech_vad)
{
    83f47ef8:	ce010113          	addi	sp,sp,-800
    83f47efc:	30813823          	sd	s0,784(sp)
    83f47f00:	31213023          	sd	s2,768(sp)
    83f47f04:	2d713c23          	sd	s7,728(sp)
    83f47f08:	2d813823          	sd	s8,720(sp)
    83f47f0c:	2b213427          	fsd	fs2,680(sp)
    83f47f10:	30113c23          	sd	ra,792(sp)
    83f47f14:	30913423          	sd	s1,776(sp)
    83f47f18:	2f313c23          	sd	s3,760(sp)
    83f47f1c:	2f413823          	sd	s4,752(sp)
    83f47f20:	2f513423          	sd	s5,744(sp)
    83f47f24:	2f613023          	sd	s6,736(sp)
    83f47f28:	2d913423          	sd	s9,712(sp)
    83f47f2c:	2da13023          	sd	s10,704(sp)
    83f47f30:	2a813c27          	fsd	fs0,696(sp)
    83f47f34:	2a913827          	fsd	fs1,688(sp)
    83f47f38:	2b313027          	fsd	fs3,672(sp)
    83f47f3c:	29413c27          	fsd	fs4,664(sp)
    83f47f40:	29513827          	fsd	fs5,656(sp)
    83f47f44:	29613427          	fsd	fs6,648(sp)
    83f47f48:	29713027          	fsd	fs7,640(sp)
   NonLinearEchoState *st;
   float alpha, alpha2;
   float y_tmp[160];

   st = aes_state;
   N = st->ps_size;
    83f47f4c:	00452b03          	lw	s6,4(a0)
   N3 = 2*N - st->frame_size;
    83f47f50:	00052a83          	lw	s5,0(a0)
   ps = st->ps;

   st->nb_adapt++;
    83f47f54:	0a052703          	lw	a4,160(a0)
   N3 = 2*N - st->frame_size;
    83f47f58:	001b1c1b          	slliw	s8,s6,0x1
   if (st->nb_adapt>20000)
    83f47f5c:	6795                	lui	a5,0x5
{
    83f47f5e:	842a                	mv	s0,a0
   N3 = 2*N - st->frame_size;
    83f47f60:	415c0bbb          	subw	s7,s8,s5
   st->nb_adapt++;
    83f47f64:	0017051b          	addiw	a0,a4,1
   if (st->nb_adapt>20000)
    83f47f68:	e2078793          	addi	a5,a5,-480 # 4e20 <_EL1_STACK_SIZE+0x4620>
{
    83f47f6c:	20a50953          	fmv.s	fs2,fa0
   ps = st->ps;
    83f47f70:	03043a03          	ld	s4,48(s0)
   N3 = 2*N - st->frame_size;
    83f47f74:	8ade                	mv	s5,s7
{
    83f47f76:	892e                	mv	s2,a1
    83f47f78:	86b2                	mv	a3,a2
   if (st->nb_adapt>20000)
    83f47f7a:	50a7c263          	blt	a5,a0,83f4847e <NLP_AES+0x586>
      st->nb_adapt = 20000;
   st->min_count++;
    83f47f7e:	0a442783          	lw	a5,164(s0)

   beta = MAX(.03f, (float)(FLOAT_ONE / st->nb_adapt));
   beta_1 = FLOAT_ONE - beta;
   beta_1 = beta_1;
   M = st->nbands;
    83f47f82:	0b042483          	lw	s1,176(s0)

   /* Deal with residual echo if provided */
   if (st->echo_state) {
    83f47f86:	6c18                	ld	a4,24(s0)
   st->min_count++;
    83f47f88:	2785                	addiw	a5,a5,1
   st->nb_adapt++;
    83f47f8a:	0aa42023          	sw	a0,160(s0)
   st->min_count++;
    83f47f8e:	0af42223          	sw	a5,164(s0)

      for (i=0;i<N;i++)
         st->echo_noise[i] = MAX(.6f * st->echo_noise[i], st->residual_echo[i]);  /* power-based */
      filterbank_linear2sb(st->bank, st->echo_noise, st->echo_noise+N);
   } else {
      for (i=0;i<N+M;i++)
    83f47f92:	009b0d3b          	addw	s10,s6,s1
      filterbank_linear2sb(st->bank, st->echo_noise, st->echo_noise+N);
    83f47f96:	002b1993          	slli	s3,s6,0x2
   if (st->echo_state) {
    83f47f9a:	50070263          	beqz	a4,83f4849e <NLP_AES+0x5a6>
      std_residual_echo(st, st->residual_echo, N, speech_vad);
    83f47f9e:	604c                	ld	a1,128(s0)
    83f47fa0:	865a                	mv	a2,s6
    83f47fa2:	8522                	mv	a0,s0
    83f47fa4:	c2dff0ef          	jal	ra,83f47bd0 <std_residual_echo>
      if (!(st->residual_echo[0] >=0 && st->residual_echo[0]<N*1e9f)) {
    83f47fa8:	605c                	ld	a5,128(s0)
    83f47faa:	f00007d3          	fmv.w.x	fa5,zero
    83f47fae:	0007a707          	flw	fa4,0(a5)
    83f47fb2:	a0e78753          	fle.s	a4,fa5,fa4
    83f47fb6:	cf09                	beqz	a4,83f47fd0 <NLP_AES+0xd8>
    83f47fb8:	d00b77d3          	fcvt.s.w	fa5,s6
    83f47fbc:	0000a717          	auipc	a4,0xa
    83f47fc0:	41072687          	flw	fa3,1040(a4) # 83f523cc <__func__.1+0x1d4>
    83f47fc4:	10d7f7d3          	fmul.s	fa5,fa5,fa3
    83f47fc8:	a0f71753          	flt.s	a4,fa4,fa5
    83f47fcc:	76071e63          	bnez	a4,83f48748 <NLP_AES+0x850>
         for (i=0;i<N;i++)
    83f47fd0:	fffb0c9b          	addiw	s9,s6,-1
    83f47fd4:	020c9713          	slli	a4,s9,0x20
    83f47fd8:	01e75693          	srli	a3,a4,0x1e
    83f47fdc:	4701                	li	a4,0
    83f47fde:	01604463          	bgtz	s6,83f47fe6 <NLP_AES+0xee>
    83f47fe2:	a0b1                	j	83f4802e <NLP_AES+0x136>
    83f47fe4:	0711                	addi	a4,a4,4
            st->residual_echo[i] = 0;
    83f47fe6:	97ba                	add	a5,a5,a4
    83f47fe8:	0007a023          	sw	zero,0(a5)
    83f47fec:	605c                	ld	a5,128(s0)
         for (i=0;i<N;i++)
    83f47fee:	fee69be3          	bne	a3,a4,83f47fe4 <NLP_AES+0xec>
         st->echo_noise[i] = MAX(.6f * st->echo_noise[i], st->residual_echo[i]);  /* power-based */
    83f47ff2:	0007a707          	flw	fa4,0(a5)
         for (i=0;i<N;i++)
    83f47ff6:	4701                	li	a4,0
    83f47ff8:	4681                	li	a3,0
    83f47ffa:	0000a797          	auipc	a5,0xa
    83f47ffe:	2be7a687          	flw	fa3,702(a5) # 83f522b8 <__func__.1+0xc0>
    83f48002:	a029                	j	83f4800c <NLP_AES+0x114>
         st->echo_noise[i] = MAX(.6f * st->echo_noise[i], st->residual_echo[i]);  /* power-based */
    83f48004:	605c                	ld	a5,128(s0)
    83f48006:	97ba                	add	a5,a5,a4
    83f48008:	0007a707          	flw	fa4,0(a5)
    83f4800c:	7c3c                	ld	a5,120(s0)
      for (i=0;i<N;i++)
    83f4800e:	2685                	addiw	a3,a3,1
         st->echo_noise[i] = MAX(.6f * st->echo_noise[i], st->residual_echo[i]);  /* power-based */
    83f48010:	97ba                	add	a5,a5,a4
    83f48012:	0007a787          	flw	fa5,0(a5)
      for (i=0;i<N;i++)
    83f48016:	0711                	addi	a4,a4,4
         st->echo_noise[i] = MAX(.6f * st->echo_noise[i], st->residual_echo[i]);  /* power-based */
    83f48018:	10d7f7d3          	fmul.s	fa5,fa5,fa3
    83f4801c:	a0e79653          	flt.s	a2,fa5,fa4
    83f48020:	e219                	bnez	a2,83f48026 <NLP_AES+0x12e>
    83f48022:	20f78753          	fmv.s	fa4,fa5
    83f48026:	00e7a027          	fsw	fa4,0(a5)
      for (i=0;i<N;i++)
    83f4802a:	fd66cde3          	blt	a3,s6,83f48004 <NLP_AES+0x10c>
      filterbank_linear2sb(st->bank, st->echo_noise, st->echo_noise+N);
    83f4802e:	7c2c                	ld	a1,120(s0)
    83f48030:	6808                	ld	a0,16(s0)
    83f48032:	01358633          	add	a2,a1,s3
    83f48036:	167000ef          	jal	ra,83f4899c <filterbank_linear2sb>
         st->echo_noise[i] = 0;
   }

   aes_analysis(st, y);
    83f4803a:	85ca                	mv	a1,s2
    83f4803c:	8522                	mv	a0,s0
    83f4803e:	4e1000ef          	jal	ra,83f48d1e <aes_analysis>

   /* Special case for first frame */
   if (st->nb_adapt==1)
    83f48042:	0a042703          	lw	a4,160(s0)
    83f48046:	4785                	li	a5,1
    83f48048:	48f70263          	beq	a4,a5,83f484cc <NLP_AES+0x5d4>
      for (i=0;i<N+M;i++)
         st->old_ps[i] = ps[i];

   for (i=0;i<N+M;i++) {
    83f4804c:	71a05363          	blez	s10,83f48752 <NLP_AES+0x85a>

      /* Update gamma */
      gamma = .1f + .89f * SQR(st->old_ps[i] / (st->old_ps[i] + tot_noise));

      /* Priori SNR */
      st->prior[i] = gamma * MAX(0, st->post[i]) + (FLOAT_ONE-gamma) * (st->old_ps[i] / tot_noise);
    83f48050:	f0000053          	fmv.w.x	ft0,zero
    83f48054:	86d2                	mv	a3,s4
      for (i=0;i<N+M;i++)
    83f48056:	4701                	li	a4,0
    83f48058:	0000a797          	auipc	a5,0xa
    83f4805c:	1f87a407          	flw	fs0,504(a5) # 83f52250 <__func__.1+0x58>
    83f48060:	0000a797          	auipc	a5,0xa
    83f48064:	3647a607          	flw	fa2,868(a5) # 83f523c4 <__func__.1+0x1cc>
    83f48068:	0000a797          	auipc	a5,0xa
    83f4806c:	3687a507          	flw	fa0,872(a5) # 83f523d0 <__func__.1+0x1d8>
    83f48070:	0000a797          	auipc	a5,0xa
    83f48074:	2b87aa87          	flw	fs5,696(a5) # 83f52328 <__func__.1+0x130>
      float tot_noise = 1.f + st->echo_noise[i];
    83f48078:	7c30                	ld	a2,120(s0)
    83f4807a:	00271793          	slli	a5,a4,0x2
      st->post[i] = ps[i] / tot_noise - 1.f;
    83f4807e:	0006a787          	flw	fa5,0(a3)
      float tot_noise = 1.f + st->echo_noise[i];
    83f48082:	963e                	add	a2,a2,a5
    83f48084:	00062707          	flw	fa4,0(a2)
      st->post[i] = ps[i] / tot_noise - 1.f;
    83f48088:	742c                	ld	a1,104(s0)
   for (i=0;i<N+M;i++) {
    83f4808a:	0705                	addi	a4,a4,1
      float tot_noise = 1.f + st->echo_noise[i];
    83f4808c:	00877753          	fadd.s	fa4,fa4,fs0
      st->post[i] = ps[i] / tot_noise - 1.f;
    83f48090:	95be                	add	a1,a1,a5
   for (i=0;i<N+M;i++) {
    83f48092:	0007061b          	sext.w	a2,a4
    83f48096:	0691                	addi	a3,a3,4
      st->post[i] = ps[i] / tot_noise - 1.f;
    83f48098:	18e7f7d3          	fdiv.s	fa5,fa5,fa4
    83f4809c:	0887f7d3          	fsub.s	fa5,fa5,fs0
    83f480a0:	00f5a027          	fsw	fa5,0(a1)
      st->post[i]=MIN(st->post[i], 100.f);
    83f480a4:	742c                	ld	a1,104(s0)
    83f480a6:	95be                	add	a1,a1,a5
    83f480a8:	0005a787          	flw	fa5,0(a1)
    83f480ac:	a0f61553          	flt.s	a0,fa2,fa5
    83f480b0:	c119                	beqz	a0,83f480b6 <NLP_AES+0x1be>
    83f480b2:	20c607d3          	fmv.s	fa5,fa2
    83f480b6:	00f5a027          	fsw	fa5,0(a1)
      gamma = .1f + .89f * SQR(st->old_ps[i] / (st->old_ps[i] + tot_noise));
    83f480ba:	6828                	ld	a0,80(s0)
      st->prior[i] = gamma * MAX(0, st->post[i]) + (FLOAT_ONE-gamma) * (st->old_ps[i] / tot_noise);
    83f480bc:	742c                	ld	a1,104(s0)
      gamma = .1f + .89f * SQR(st->old_ps[i] / (st->old_ps[i] + tot_noise));
    83f480be:	953e                	add	a0,a0,a5
    83f480c0:	00052787          	flw	fa5,0(a0)
      st->prior[i] = gamma * MAX(0, st->post[i]) + (FLOAT_ONE-gamma) * (st->old_ps[i] / tot_noise);
    83f480c4:	95be                	add	a1,a1,a5
    83f480c6:	0005a687          	flw	fa3,0(a1)
    83f480ca:	18e7f5d3          	fdiv.s	fa1,fa5,fa4
      gamma = .1f + .89f * SQR(st->old_ps[i] / (st->old_ps[i] + tot_noise));
    83f480ce:	00e7f753          	fadd.s	fa4,fa5,fa4
      st->prior[i] = gamma * MAX(0, st->post[i]) + (FLOAT_ONE-gamma) * (st->old_ps[i] / tot_noise);
    83f480d2:	a0d015d3          	flt.s	a1,ft0,fa3
      gamma = .1f + .89f * SQR(st->old_ps[i] / (st->old_ps[i] + tot_noise));
    83f480d6:	18e7f7d3          	fdiv.s	fa5,fa5,fa4
    83f480da:	10f7f7d3          	fmul.s	fa5,fa5,fa5
    83f480de:	a8a7f7c3          	fmadd.s	fa5,fa5,fa0,fs5
      st->prior[i] = gamma * MAX(0, st->post[i]) + (FLOAT_ONE-gamma) * (st->old_ps[i] / tot_noise);
    83f480e2:	e199                	bnez	a1,83f480e8 <NLP_AES+0x1f0>
    83f480e4:	f00006d3          	fmv.w.x	fa3,zero
    83f480e8:	08f47753          	fsub.s	fa4,fs0,fa5
    83f480ec:	702c                	ld	a1,96(s0)
    83f480ee:	95be                	add	a1,a1,a5
    83f480f0:	10b77753          	fmul.s	fa4,fa4,fa1
    83f480f4:	70f6f7c3          	fmadd.s	fa5,fa3,fa5,fa4
    83f480f8:	00f5a027          	fsw	fa5,0(a1)
      st->prior[i] = MIN(st->prior[i], 100.f);
    83f480fc:	702c                	ld	a1,96(s0)
    83f480fe:	97ae                	add	a5,a5,a1
    83f48100:	0007a787          	flw	fa5,0(a5)
    83f48104:	a0f615d3          	flt.s	a1,fa2,fa5
    83f48108:	c199                	beqz	a1,83f4810e <NLP_AES+0x216>
    83f4810a:	20c607d3          	fmv.s	fa5,fa2
    83f4810e:	00f7a027          	fsw	fa5,0(a5)
   for (i=0;i<N+M;i++) {
    83f48112:	f7a643e3          	blt	a2,s10,83f48078 <NLP_AES+0x180>
   }

   /* Recursive average of the priori SNR */
   st->zeta[0] = .7f * st->zeta[0] + .3f * st->prior[0];
    83f48116:	7038                	ld	a4,96(s0)
    83f48118:	783c                	ld	a5,112(s0)
    83f4811a:	0000a697          	auipc	a3,0xa
    83f4811e:	1c26a007          	flw	ft0,450(a3) # 83f522dc <__func__.1+0xe4>
    83f48122:	00072707          	flw	fa4,0(a4)
    83f48126:	0007a787          	flw	fa5,0(a5)
    83f4812a:	0000a717          	auipc	a4,0xa
    83f4812e:	15e72587          	flw	fa1,350(a4) # 83f52288 <__func__.1+0x90>
    83f48132:	10077753          	fmul.s	fa4,fa4,ft0
   for (i=1;i<N-1;i++)
    83f48136:	4705                	li	a4,1
   st->zeta[0] = .7f * st->zeta[0] + .3f * st->prior[0];
    83f48138:	70b7f7c3          	fmadd.s	fa5,fa5,fa1,fa4
    83f4813c:	00f7a027          	fsw	fa5,0(a5)
   for (i=1;i<N-1;i++)
    83f48140:	05975d63          	bge	a4,s9,83f4819a <NLP_AES+0x2a2>
    83f48144:	ffdb059b          	addiw	a1,s6,-3
    83f48148:	02059793          	slli	a5,a1,0x20
    83f4814c:	01e7d593          	srli	a1,a5,0x1e
    83f48150:	05a1                	addi	a1,a1,8
    83f48152:	4791                	li	a5,4
    83f48154:	0000a717          	auipc	a4,0xa
    83f48158:	16872087          	flw	ft1,360(a4) # 83f522bc <__func__.1+0xc4>
    83f4815c:	0000a717          	auipc	a4,0xa
    83f48160:	27872507          	flw	fa0,632(a4) # 83f523d4 <__func__.1+0x1dc>
      st->zeta[i] = .7f * st->zeta[i] + .15f * st->prior[i] + .075f * st->prior[i-1] + .075f * st->prior[i+1];
    83f48164:	7034                	ld	a3,96(s0)
    83f48166:	7838                	ld	a4,112(s0)
    83f48168:	00f68633          	add	a2,a3,a5
    83f4816c:	00062787          	flw	fa5,0(a2)
    83f48170:	973e                	add	a4,a4,a5
    83f48172:	00072687          	flw	fa3,0(a4)
    83f48176:	1017f653          	fmul.s	fa2,fa5,ft1
    83f4817a:	ffc62707          	flw	fa4,-4(a2)
    83f4817e:	0791                	addi	a5,a5,4
    83f48180:	96be                	add	a3,a3,a5
    83f48182:	0006a787          	flw	fa5,0(a3)
    83f48186:	60b6f6c3          	fmadd.s	fa3,fa3,fa1,fa2
    83f4818a:	68a77743          	fmadd.s	fa4,fa4,fa0,fa3
    83f4818e:	70a7f7c3          	fmadd.s	fa5,fa5,fa0,fa4
    83f48192:	00f72027          	fsw	fa5,0(a4)
   for (i=1;i<N-1;i++)
    83f48196:	fcf597e3          	bne	a1,a5,83f48164 <NLP_AES+0x26c>
   for (i=N-1;i<N+M;i++)
    83f4819a:	0204ca63          	bltz	s1,83f481ce <NLP_AES+0x2d6>
    83f4819e:	02049613          	slli	a2,s1,0x20
    83f481a2:	9201                	srli	a2,a2,0x20
    83f481a4:	965a                	add	a2,a2,s6
    83f481a6:	ffc98793          	addi	a5,s3,-4
    83f481aa:	060a                	slli	a2,a2,0x2
      st->zeta[i] = .7f * st->zeta[i] + .3f * st->prior[i];
    83f481ac:	7034                	ld	a3,96(s0)
    83f481ae:	7838                	ld	a4,112(s0)
    83f481b0:	96be                	add	a3,a3,a5
    83f481b2:	0006a707          	flw	fa4,0(a3)
    83f481b6:	973e                	add	a4,a4,a5
    83f481b8:	00072787          	flw	fa5,0(a4)
    83f481bc:	10077753          	fmul.s	fa4,fa4,ft0
   for (i=N-1;i<N+M;i++)
    83f481c0:	0791                	addi	a5,a5,4
      st->zeta[i] = .7f * st->zeta[i] + .3f * st->prior[i];
    83f481c2:	70b7f7c3          	fmadd.s	fa5,fa5,fa1,fa4
    83f481c6:	00f72027          	fsw	fa5,0(a4)
   for (i=N-1;i<N+M;i++)
    83f481ca:	fef611e3          	bne	a2,a5,83f481ac <NLP_AES+0x2b4>

   Zframe = 0;
    83f481ce:	f00007d3          	fmv.w.x	fa5,zero
   for (i=N;i<N+M;i++)
    83f481d2:	03ab5663          	bge	s6,s10,83f481fe <NLP_AES+0x306>
    83f481d6:	fff4871b          	addiw	a4,s1,-1
      Zframe = Zframe + st->zeta[i];
    83f481da:	783c                	ld	a5,112(s0)
    83f481dc:	1702                	slli	a4,a4,0x20
    83f481de:	9301                	srli	a4,a4,0x20
    83f481e0:	975a                	add	a4,a4,s6
   Zframe = 0;
    83f481e2:	f00007d3          	fmv.w.x	fa5,zero
    83f481e6:	00478693          	addi	a3,a5,4
    83f481ea:	070a                	slli	a4,a4,0x2
    83f481ec:	97ce                	add	a5,a5,s3
    83f481ee:	9736                	add	a4,a4,a3
      Zframe = Zframe + st->zeta[i];
    83f481f0:	0007a707          	flw	fa4,0(a5)
   for (i=N;i<N+M;i++)
    83f481f4:	0791                	addi	a5,a5,4
      Zframe = Zframe + st->zeta[i];
    83f481f6:	00e7f7d3          	fadd.s	fa5,fa5,fa4
   for (i=N;i<N+M;i++)
    83f481fa:	fef71be3          	bne	a4,a5,83f481f0 <NLP_AES+0x2f8>

   Pframe = .1f + .899f * aes_qcurve(Zframe / st->nbands);
    83f481fe:	0b042783          	lw	a5,176(s0)
    83f48202:	d007f553          	fcvt.s.w	fa0,a5
    83f48206:	18a7f553          	fdiv.s	fa0,fa5,fa0
    83f4820a:	25f000ef          	jal	ra,83f48c68 <aes_qcurve>
   effective_echo_suppress = (FLOAT_ONE - Pframe) * st->echo_sup + Pframe * st->echo_sup_active;
    83f4820e:	08c42783          	lw	a5,140(s0)
   Pframe = .1f + .899f * aes_qcurve(Zframe / st->nbands);
    83f48212:	0000a717          	auipc	a4,0xa
    83f48216:	1c672787          	flw	fa5,454(a4) # 83f523d8 <__func__.1+0x1e0>
    83f4821a:	a8f57ac3          	fmadd.s	fs5,fa0,fa5,fs5
   effective_echo_suppress = (FLOAT_ONE - Pframe) * st->echo_sup + Pframe * st->echo_sup_active;
    83f4821e:	d007f7d3          	fcvt.s.w	fa5,a5
    83f48222:	08842783          	lw	a5,136(s0)
   aes_gain_floor(effective_echo_suppress, st->echo_noise+N, st->gain_floor+N, M);
    83f48226:	602c                	ld	a1,64(s0)
    83f48228:	7c28                	ld	a0,120(s0)
   effective_echo_suppress = (FLOAT_ONE - Pframe) * st->echo_sup + Pframe * st->echo_sup_active;
    83f4822a:	09547553          	fsub.s	fa0,fs0,fs5
    83f4822e:	1157f7d3          	fmul.s	fa5,fa5,fs5
    83f48232:	d007f753          	fcvt.s.w	fa4,a5
   aes_gain_floor(effective_echo_suppress, st->echo_noise+N, st->gain_floor+N, M);
    83f48236:	8626                	mv	a2,s1
    83f48238:	95ce                	add	a1,a1,s3
    83f4823a:	954e                	add	a0,a0,s3
    83f4823c:	78e57543          	fmadd.s	fa0,fa0,fa4,fa5
    83f48240:	247000ef          	jal	ra,83f48c86 <aes_gain_floor>
         
   /* Compute speech probability of presence */
   for (i=N;i<N+M;i++) {
    83f48244:	0fab5563          	bge	s6,s10,83f4832e <NLP_AES+0x436>
    83f48248:	34fd                	addiw	s1,s1,-1
    83f4824a:	1482                	slli	s1,s1,0x20
    83f4824c:	001b0c93          	addi	s9,s6,1
    83f48250:	9081                	srli	s1,s1,0x20
    83f48252:	94e6                	add	s1,s1,s9
    83f48254:	00249c93          	slli	s9,s1,0x2
    83f48258:	0000a797          	auipc	a5,0xa
    83f4825c:	04c7a987          	flw	fs3,76(a5) # 83f522a4 <__func__.1+0xac>
    83f48260:	84ce                	mv	s1,s3
    83f48262:	0000a797          	auipc	a5,0xa
    83f48266:	0e27aa07          	flw	fs4,226(a5) # 83f52344 <__func__.1+0x14c>
    83f4826a:	0000a797          	auipc	a5,0xa
    83f4826e:	1727ab07          	flw	fs6,370(a5) # 83f523dc <__func__.1+0x1e4>
      float MM;  /* gain from hypergeometric function */
      float prior_ratio;  /* Weiner filter gain */
      float P1;  /* priority probability of speech presence */
      float q;  /* speech absence the priori probability */

      prior_ratio = st->prior[i] / (st->prior[i] + 1.f);
    83f48272:	7038                	ld	a4,96(s0)
      theta = prior_ratio * (1.f + st->post[i]);
    83f48274:	743c                	ld	a5,104(s0)
      prior_ratio = st->prior[i] / (st->prior[i] + 1.f);
    83f48276:	9726                	add	a4,a4,s1
    83f48278:	00072507          	flw	fa0,0(a4)
      theta = prior_ratio * (1.f + st->post[i]);
    83f4827c:	97a6                	add	a5,a5,s1
    83f4827e:	0007ab87          	flw	fs7,0(a5)
      prior_ratio = st->prior[i] / (st->prior[i] + 1.f);
    83f48282:	008574d3          	fadd.s	fs1,fa0,fs0
      theta = prior_ratio * (1.f + st->post[i]);
    83f48286:	008bfbd3          	fadd.s	fs7,fs7,fs0
      prior_ratio = st->prior[i] / (st->prior[i] + 1.f);
    83f4828a:	189574d3          	fdiv.s	fs1,fa0,fs1
      theta = prior_ratio * (1.f + st->post[i]);
    83f4828e:	109bfbd3          	fmul.s	fs7,fs7,fs1

      MM = aes_hypergeom_gain(theta);
    83f48292:	217b8553          	fmv.s	fa0,fs7
    83f48296:	10d000ef          	jal	ra,83f48ba2 <aes_hypergeom_gain>
      st->gain[i] = MIN(FLOAT_ONE, prior_ratio * MM);  /* gain with bound */
    83f4829a:	10a4f553          	fmul.s	fa0,fs1,fa0
      st->old_ps[i] = .2f * st->old_ps[i] + .8f * SQR(st->gain[i]) * ps[i];  /* save old power spectrum */
    83f4829e:	009a06b3          	add	a3,s4,s1
      st->gain[i] = MIN(FLOAT_ONE, prior_ratio * MM);  /* gain with bound */
    83f482a2:	a08517d3          	flt.s	a5,fa0,fs0
    83f482a6:	e399                	bnez	a5,83f482ac <NLP_AES+0x3b4>
    83f482a8:	20840553          	fmv.s	fa0,fs0
    83f482ac:	6c3c                	ld	a5,88(s0)

      P1 = .199f + .8f * aes_qcurve(st->zeta[i]);
      q = FLOAT_ONE - Pframe * P1;
      st->gain2[i] = 1/(1.f + (q/(1.f-q))*(1+st->prior[i])*(float)exp(-theta));  /* lambda/(1+lambda) */
    83f482ae:	217b9bd3          	fneg.s	fs7,fs7
      st->gain[i] = MIN(FLOAT_ONE, prior_ratio * MM);  /* gain with bound */
    83f482b2:	97a6                	add	a5,a5,s1
    83f482b4:	00a7a027          	fsw	fa0,0(a5)
      st->old_ps[i] = .2f * st->old_ps[i] + .8f * SQR(st->gain[i]) * ps[i];  /* save old power spectrum */
    83f482b8:	6c38                	ld	a4,88(s0)
    83f482ba:	0006a687          	flw	fa3,0(a3)
    83f482be:	683c                	ld	a5,80(s0)
    83f482c0:	9726                	add	a4,a4,s1
    83f482c2:	00072787          	flw	fa5,0(a4)
    83f482c6:	97a6                	add	a5,a5,s1
    83f482c8:	0007a707          	flw	fa4,0(a5)
    83f482cc:	10f7f7d3          	fmul.s	fa5,fa5,fa5
    83f482d0:	1137f7d3          	fmul.s	fa5,fa5,fs3
    83f482d4:	10d7f7d3          	fmul.s	fa5,fa5,fa3
    83f482d8:	794777c3          	fmadd.s	fa5,fa4,fs4,fa5
    83f482dc:	00f7a027          	fsw	fa5,0(a5)
      P1 = .199f + .8f * aes_qcurve(st->zeta[i]);
    83f482e0:	783c                	ld	a5,112(s0)
    83f482e2:	97a6                	add	a5,a5,s1
    83f482e4:	0007a507          	flw	fa0,0(a5)
    83f482e8:	181000ef          	jal	ra,83f48c68 <aes_qcurve>
    83f482ec:	b13574c3          	fmadd.s	fs1,fa0,fs3,fs6
      st->gain2[i] = 1/(1.f + (q/(1.f-q))*(1+st->prior[i])*(float)exp(-theta));  /* lambda/(1+lambda) */
    83f482f0:	703c                	ld	a5,96(s0)
    83f482f2:	420b8553          	fcvt.d.s	fa0,fs7
    83f482f6:	97a6                	add	a5,a5,s1
      q = FLOAT_ONE - Pframe * P1;
    83f482f8:	409af4cb          	fnmsub.s	fs1,fs5,fs1,fs0
      st->gain2[i] = 1/(1.f + (q/(1.f-q))*(1+st->prior[i])*(float)exp(-theta));  /* lambda/(1+lambda) */
    83f482fc:	0007a787          	flw	fa5,0(a5)
    83f48300:	0087f7d3          	fadd.s	fa5,fa5,fs0
    83f48304:	08947753          	fsub.s	fa4,fs0,fs1
    83f48308:	18e4f4d3          	fdiv.s	fs1,fs1,fa4
    83f4830c:	1097f4d3          	fmul.s	fs1,fa5,fs1
    83f48310:	8d1f80ef          	jal	ra,83f40be0 <exp>
    83f48314:	40157553          	fcvt.s.d	fa0,fa0
    83f48318:	7c1c                	ld	a5,56(s0)
    83f4831a:	40a4f4c3          	fmadd.s	fs1,fs1,fa0,fs0
    83f4831e:	97a6                	add	a5,a5,s1
   for (i=N;i<N+M;i++) {
    83f48320:	0491                	addi	s1,s1,4
      st->gain2[i] = 1/(1.f + (q/(1.f-q))*(1+st->prior[i])*(float)exp(-theta));  /* lambda/(1+lambda) */
    83f48322:	189474d3          	fdiv.s	fs1,fs0,fs1
    83f48326:	0097a027          	fsw	fs1,0(a5)
   for (i=N;i<N+M;i++) {
    83f4832a:	f49c94e3          	bne	s9,s1,83f48272 <NLP_AES+0x37a>

   }

   filterbank_sb2linear(st->bank,st->gain2+N, st->gain2);
    83f4832e:	7c10                	ld	a2,56(s0)
    83f48330:	6808                	ld	a0,16(s0)
    83f48332:	013605b3          	add	a1,a2,s3
    83f48336:	6e2000ef          	jal	ra,83f48a18 <filterbank_sb2linear>
   filterbank_sb2linear(st->bank,st->gain+N, st->gain);
    83f4833a:	6c30                	ld	a2,88(s0)
    83f4833c:	6808                	ld	a0,16(s0)
    83f4833e:	013605b3          	add	a1,a2,s3
    83f48342:	6d6000ef          	jal	ra,83f48a18 <filterbank_sb2linear>
   filterbank_sb2linear(st->bank,st->gain_floor+N, st->gain_floor);
    83f48346:	6030                	ld	a2,64(s0)
    83f48348:	6808                	ld	a0,16(s0)
    83f4834a:	013605b3          	add	a1,a2,s3
    83f4834e:	6ca000ef          	jal	ra,83f48a18 <filterbank_sb2linear>

   /* Compute gain */
   for (i=0;i<N;i++) {
    83f48352:	1f605163          	blez	s6,83f48534 <NLP_AES+0x63c>
    83f48356:	4481                	li	s1,0
    83f48358:	0000a797          	auipc	a5,0xa
    83f4835c:	f4c7a987          	flw	fs3,-180(a5) # 83f522a4 <__func__.1+0xac>
    83f48360:	0000a797          	auipc	a5,0xa
    83f48364:	fe47aa07          	flw	fs4,-28(a5) # 83f52344 <__func__.1+0x14c>
    83f48368:	0000a797          	auipc	a5,0xa
    83f4836c:	0607aa87          	flw	fs5,96(a5) # 83f523c8 <__func__.1+0x1d0>
      g = MIN(FLOAT_ONE, prior_ratio * MM);  /* gain with bound */
      p = st->gain2[i];  /* interpolated speech probability of presence */

      /* Constrain the gain to be close to the scale gain */
      if ((.333f *g) > st->gain[i])
         g = 3.f * st->gain[i];
    83f48370:	0000a797          	auipc	a5,0xa
    83f48374:	f607ab07          	flw	fs6,-160(a5) # 83f522d0 <__func__.1+0xd8>
    83f48378:	a0f1                	j	83f48444 <NLP_AES+0x54c>
      g = MIN(FLOAT_ONE, prior_ratio * MM);  /* gain with bound */
    83f4837a:	20840553          	fmv.s	fa0,fs0
      if ((.333f *g) > st->gain[i])
    83f4837e:	6c3c                	ld	a5,88(s0)
      p = st->gain2[i];  /* interpolated speech probability of presence */
    83f48380:	7c18                	ld	a4,56(s0)
      st->gain[i] = g;

      /* save old power spectrum */
      st->old_ps[i] = .2f * st->old_ps[i] + .8f * SQR(st->gain[i]) * ps[i];
    83f48382:	009a06b3          	add	a3,s4,s1
      if ((.333f *g) > st->gain[i])
    83f48386:	97a6                	add	a5,a5,s1
    83f48388:	0007a787          	flw	fa5,0(a5)
      p = st->gain2[i];  /* interpolated speech probability of presence */
    83f4838c:	9726                	add	a4,a4,s1
    83f4838e:	00072b87          	flw	fs7,0(a4)
      if ((.333f *g) > st->gain[i])
    83f48392:	a0e79753          	flt.s	a4,fa5,fa4
    83f48396:	c319                	beqz	a4,83f4839c <NLP_AES+0x4a4>
         g = 3.f * st->gain[i];
    83f48398:	1167f553          	fmul.s	fa0,fa5,fs6
      st->gain[i] = g;
    83f4839c:	00a7a027          	fsw	fa0,0(a5)
      st->old_ps[i] = .2f * st->old_ps[i] + .8f * SQR(st->gain[i]) * ps[i];
    83f483a0:	6c38                	ld	a4,88(s0)
    83f483a2:	0006a787          	flw	fa5,0(a3)
    83f483a6:	683c                	ld	a5,80(s0)
    83f483a8:	9726                	add	a4,a4,s1
    83f483aa:	00072707          	flw	fa4,0(a4)
    83f483ae:	97a6                	add	a5,a5,s1
    83f483b0:	0007a687          	flw	fa3,0(a5)
    83f483b4:	10e77753          	fmul.s	fa4,fa4,fa4
    83f483b8:	11377753          	fmul.s	fa4,fa4,fs3
    83f483bc:	10f77753          	fmul.s	fa4,fa4,fa5
    83f483c0:	7146f743          	fmadd.s	fa4,fa3,fs4,fa4
    83f483c4:	00e7a027          	fsw	fa4,0(a5)

      /* Apply gain floor */
      if (st->gain[i] < st->gain_floor[i])
    83f483c8:	6c3c                	ld	a5,88(s0)
    83f483ca:	6038                	ld	a4,64(s0)
    83f483cc:	97a6                	add	a5,a5,s1
    83f483ce:	9726                	add	a4,a4,s1
    83f483d0:	0007a507          	flw	fa0,0(a5)
    83f483d4:	00072787          	flw	fa5,0(a4)
    83f483d8:	a0f51753          	flt.s	a4,fa0,fa5
    83f483dc:	c719                	beqz	a4,83f483ea <NLP_AES+0x4f2>
         st->gain[i] = st->gain_floor[i];
    83f483de:	00f7a027          	fsw	fa5,0(a5)
         
      /* Take into account speech probability of presence */
      tmp = p * (float)math_sqrt(st->gain[i]) + (FLOAT_ONE -p) * (float)math_sqrt(st->gain_floor[i]);
    83f483e2:	6c3c                	ld	a5,88(s0)
    83f483e4:	97a6                	add	a5,a5,s1
    83f483e6:	0007a507          	flw	fa0,0(a5)
    83f483ea:	42050553          	fcvt.d.s	fa0,fa0
    83f483ee:	a05f80ef          	jal	ra,83f40df2 <sqrt>
    83f483f2:	603c                	ld	a5,64(s0)
    83f483f4:	22a504d3          	fmv.d	fs1,fa0
    83f483f8:	97a6                	add	a5,a5,s1
    83f483fa:	0007a507          	flw	fa0,0(a5)
    83f483fe:	42050553          	fcvt.d.s	fa0,fa0
    83f48402:	9f1f80ef          	jal	ra,83f40df2 <sqrt>
    83f48406:	09747753          	fsub.s	fa4,fs0,fs7
    83f4840a:	401577d3          	fcvt.s.d	fa5,fa0
    83f4840e:	4014f4d3          	fcvt.s.d	fs1,fs1
      st->gain2[i] = SQR(tmp);
    83f48412:	7c1c                	ld	a5,56(s0)
      tmp = p * (float)math_sqrt(st->gain[i]) + (FLOAT_ONE -p) * (float)math_sqrt(st->gain_floor[i]);
    83f48414:	10f777d3          	fmul.s	fa5,fa4,fa5
      st->gain2[i] = SQR(tmp);
    83f48418:	97a6                	add	a5,a5,s1
      tmp = p * (float)math_sqrt(st->gain[i]) + (FLOAT_ONE -p) * (float)math_sqrt(st->gain_floor[i]);
    83f4841a:	7974f7c3          	fmadd.s	fa5,fs1,fs7,fa5
      st->gain2[i] = SQR(tmp);
    83f4841e:	10f7f7d3          	fmul.s	fa5,fa5,fa5
    83f48422:	00f7a027          	fsw	fa5,0(a5)

      //if (st->st_vad)
      //if (st->RER_vad)
         st->gain2[i] = st->gain2[i] * st->gain[i];
    83f48426:	7c1c                	ld	a5,56(s0)
    83f48428:	6c38                	ld	a4,88(s0)
    83f4842a:	97a6                	add	a5,a5,s1
    83f4842c:	9726                	add	a4,a4,s1
    83f4842e:	0007a787          	flw	fa5,0(a5)
    83f48432:	00072707          	flw	fa4,0(a4)
   for (i=0;i<N;i++) {
    83f48436:	0491                	addi	s1,s1,4
         st->gain2[i] = st->gain2[i] * st->gain[i];
    83f48438:	10e7f7d3          	fmul.s	fa5,fa5,fa4
    83f4843c:	00f7a027          	fsw	fa5,0(a5)
   for (i=0;i<N;i++) {
    83f48440:	0a998763          	beq	s3,s1,83f484ee <NLP_AES+0x5f6>
      prior_ratio = st->prior[i] / (st->prior[i] + 1.f);
    83f48444:	7038                	ld	a4,96(s0)
      theta = prior_ratio * (1.f + st->post[i]);
    83f48446:	743c                	ld	a5,104(s0)
      prior_ratio = st->prior[i] / (st->prior[i] + 1.f);
    83f48448:	9726                	add	a4,a4,s1
    83f4844a:	00072487          	flw	fs1,0(a4)
      theta = prior_ratio * (1.f + st->post[i]);
    83f4844e:	97a6                	add	a5,a5,s1
    83f48450:	0007a507          	flw	fa0,0(a5)
      prior_ratio = st->prior[i] / (st->prior[i] + 1.f);
    83f48454:	0084f7d3          	fadd.s	fa5,fs1,fs0
      theta = prior_ratio * (1.f + st->post[i]);
    83f48458:	00857553          	fadd.s	fa0,fa0,fs0
      prior_ratio = st->prior[i] / (st->prior[i] + 1.f);
    83f4845c:	18f4f4d3          	fdiv.s	fs1,fs1,fa5
      MM = aes_hypergeom_gain(theta);
    83f48460:	10957553          	fmul.s	fa0,fa0,fs1
    83f48464:	73e000ef          	jal	ra,83f48ba2 <aes_hypergeom_gain>
      g = MIN(FLOAT_ONE, prior_ratio * MM);  /* gain with bound */
    83f48468:	10a4f553          	fmul.s	fa0,fs1,fa0
    83f4846c:	215a8753          	fmv.s	fa4,fs5
    83f48470:	a08517d3          	flt.s	a5,fa0,fs0
    83f48474:	f00783e3          	beqz	a5,83f4837a <NLP_AES+0x482>
      if ((.333f *g) > st->gain[i])
    83f48478:	11557753          	fmul.s	fa4,fa0,fs5
    83f4847c:	b709                	j	83f4837e <NLP_AES+0x486>
      st->nb_adapt = 20000;
    83f4847e:	0af42023          	sw	a5,160(s0)
   st->min_count++;
    83f48482:	0a442783          	lw	a5,164(s0)
   M = st->nbands;
    83f48486:	0b042483          	lw	s1,176(s0)
   if (st->echo_state) {
    83f4848a:	6c18                	ld	a4,24(s0)
   st->min_count++;
    83f4848c:	2785                	addiw	a5,a5,1
    83f4848e:	0af42223          	sw	a5,164(s0)
      for (i=0;i<N+M;i++)
    83f48492:	009b0d3b          	addw	s10,s6,s1
      filterbank_linear2sb(st->bank, st->echo_noise, st->echo_noise+N);
    83f48496:	002b1993          	slli	s3,s6,0x2
   if (st->echo_state) {
    83f4849a:	b00712e3          	bnez	a4,83f47f9e <NLP_AES+0xa6>
      for (i=0;i<N+M;i++)
    83f4849e:	002d1693          	slli	a3,s10,0x2
    83f484a2:	4781                	li	a5,0
    83f484a4:	01a05963          	blez	s10,83f484b6 <NLP_AES+0x5be>
         st->echo_noise[i] = 0;
    83f484a8:	7c38                	ld	a4,120(s0)
    83f484aa:	973e                	add	a4,a4,a5
    83f484ac:	00072023          	sw	zero,0(a4)
      for (i=0;i<N+M;i++)
    83f484b0:	0791                	addi	a5,a5,4
    83f484b2:	fef69be3          	bne	a3,a5,83f484a8 <NLP_AES+0x5b0>
   aes_analysis(st, y);
    83f484b6:	85ca                	mv	a1,s2
    83f484b8:	8522                	mv	a0,s0
    83f484ba:	065000ef          	jal	ra,83f48d1e <aes_analysis>
   if (st->nb_adapt==1)
    83f484be:	0a042703          	lw	a4,160(s0)
    83f484c2:	4785                	li	a5,1
    83f484c4:	fffb0c9b          	addiw	s9,s6,-1
    83f484c8:	b8f712e3          	bne	a4,a5,83f4804c <NLP_AES+0x154>
      for (i=0;i<N+M;i++)
    83f484cc:	002d1613          	slli	a2,s10,0x2
    83f484d0:	4781                	li	a5,0
    83f484d2:	29a05063          	blez	s10,83f48752 <NLP_AES+0x85a>
         st->old_ps[i] = ps[i];
    83f484d6:	6838                	ld	a4,80(s0)
    83f484d8:	00fa06b3          	add	a3,s4,a5
    83f484dc:	0006a787          	flw	fa5,0(a3)
    83f484e0:	973e                	add	a4,a4,a5
      for (i=0;i<N+M;i++)
    83f484e2:	0791                	addi	a5,a5,4
         st->old_ps[i] = ps[i];
    83f484e4:	00f72027          	fsw	fa5,0(a4)
      for (i=0;i<N+M;i++)
    83f484e8:	fef617e3          	bne	a2,a5,83f484d6 <NLP_AES+0x5de>
    83f484ec:	b695                	j	83f48050 <NLP_AES+0x158>

      }


   for (i=1;i<N;i++) {
    83f484ee:	4705                	li	a4,1
    83f484f0:	4591                	li	a1,4
    83f484f2:	4791                	li	a5,4
    83f484f4:	05675063          	bge	a4,s6,83f48534 <NLP_AES+0x63c>
      st->ft[2*i-1] = st->gain2[i] * st->ft[2*i-1];
    83f484f8:	7414                	ld	a3,40(s0)
    83f484fa:	7c10                	ld	a2,56(s0)
      st->ft[2*i] = st->gain2[i] * st->ft[2*i];
    83f484fc:	00179513          	slli	a0,a5,0x1
      st->ft[2*i-1] = st->gain2[i] * st->ft[2*i-1];
    83f48500:	96ae                	add	a3,a3,a1
    83f48502:	963e                	add	a2,a2,a5
    83f48504:	0006a787          	flw	fa5,0(a3)
    83f48508:	00062707          	flw	fa4,0(a2)
   for (i=1;i<N;i++) {
    83f4850c:	05a1                	addi	a1,a1,8
      st->ft[2*i-1] = st->gain2[i] * st->ft[2*i-1];
    83f4850e:	10e7f7d3          	fmul.s	fa5,fa5,fa4
    83f48512:	00f6a027          	fsw	fa5,0(a3)
      st->ft[2*i] = st->gain2[i] * st->ft[2*i];
    83f48516:	7418                	ld	a4,40(s0)
    83f48518:	7c14                	ld	a3,56(s0)
    83f4851a:	972a                	add	a4,a4,a0
    83f4851c:	96be                	add	a3,a3,a5
    83f4851e:	00072787          	flw	fa5,0(a4)
    83f48522:	0006a707          	flw	fa4,0(a3)
   for (i=1;i<N;i++) {
    83f48526:	0791                	addi	a5,a5,4
      st->ft[2*i] = st->gain2[i] * st->ft[2*i];
    83f48528:	10e7f7d3          	fmul.s	fa5,fa5,fa4
    83f4852c:	00f72027          	fsw	fa5,0(a4)
   for (i=1;i<N;i++) {
    83f48530:	fcf994e3          	bne	s3,a5,83f484f8 <NLP_AES+0x600>
   }
   st->ft[0] = st->gain2[0] * st->ft[0];
    83f48534:	7418                	ld	a4,40(s0)
    83f48536:	7c1c                	ld	a5,56(s0)
   st->ft[2*N-1] = st->gain2[N-1] * st->ft[2*N-1];
    83f48538:	002c1493          	slli	s1,s8,0x2
   st->ft[0] = st->gain2[0] * st->ft[0];
    83f4853c:	00072787          	flw	fa5,0(a4)
    83f48540:	0007a707          	flw	fa4,0(a5)
   st->ft[2*N-1] = st->gain2[N-1] * st->ft[2*N-1];
    83f48544:	ffc48693          	addi	a3,s1,-4
   st->ft[0] = st->gain2[0] * st->ft[0];
    83f48548:	10e7f7d3          	fmul.s	fa5,fa5,fa4
    83f4854c:	00f72027          	fsw	fa5,0(a4)
   st->ft[2*N-1] = st->gain2[N-1] * st->ft[2*N-1];
    83f48550:	741c                	ld	a5,40(s0)
    83f48552:	7c18                	ld	a4,56(s0)
    83f48554:	97b6                	add	a5,a5,a3
    83f48556:	99ba                	add	s3,s3,a4
    83f48558:	0007a787          	flw	fa5,0(a5)
    83f4855c:	ffc9a707          	flw	fa4,-4(s3)
    83f48560:	10e7f7d3          	fmul.s	fa5,fa5,fa4
    83f48564:	00f7a027          	fsw	fa5,0(a5)

   speech_ifft(st->fft_lookup, st->ft, st->frame);
    83f48568:	7010                	ld	a2,32(s0)
    83f4856a:	740c                	ld	a1,40(s0)
    83f4856c:	7448                	ld	a0,168(s0)
    83f4856e:	39b000ef          	jal	ra,83f49108 <speech_ifft>

   /* Apply synthesis window (for WOLA) */
   for (i=0;i<2*N;i++)
    83f48572:	4781                	li	a5,0
    83f48574:	03805163          	blez	s8,83f48596 <NLP_AES+0x69e>
      st->frame[i] = st->frame[i] * st->window[i];
    83f48578:	7018                	ld	a4,32(s0)
    83f4857a:	6434                	ld	a3,72(s0)
    83f4857c:	973e                	add	a4,a4,a5
    83f4857e:	96be                	add	a3,a3,a5
    83f48580:	00072787          	flw	fa5,0(a4)
    83f48584:	0006a707          	flw	fa4,0(a3)
   for (i=0;i<2*N;i++)
    83f48588:	0791                	addi	a5,a5,4
      st->frame[i] = st->frame[i] * st->window[i];
    83f4858a:	10e7f7d3          	fmul.s	fa5,fa5,fa4
    83f4858e:	00f72027          	fsw	fa5,0(a4)
   for (i=0;i<2*N;i++)
    83f48592:	fef493e3          	bne	s1,a5,83f48578 <NLP_AES+0x680>

   /* Perform overlap and add */
   for (i=0;i<N3;i++) {
    83f48596:	03705d63          	blez	s7,83f485d0 <NLP_AES+0x6d8>
    83f4859a:	6c50                	ld	a2,152(s0)
    83f4859c:	fffa859b          	addiw	a1,s5,-1
    83f485a0:	02059793          	slli	a5,a1,0x20
    83f485a4:	01e7d593          	srli	a1,a5,0x1e
    83f485a8:	00460793          	addi	a5,a2,4
    83f485ac:	7014                	ld	a3,32(s0)
    83f485ae:	870a                	mv	a4,sp
    83f485b0:	95be                	add	a1,a1,a5
    83f485b2:	a011                	j	83f485b6 <NLP_AES+0x6be>
    83f485b4:	0791                	addi	a5,a5,4
      y_tmp[i] = st->outbuf[i] + st->frame[i];
    83f485b6:	00062787          	flw	fa5,0(a2)
    83f485ba:	0006a707          	flw	fa4,0(a3)
   for (i=0;i<N3;i++) {
    83f485be:	0711                	addi	a4,a4,4
    83f485c0:	863e                	mv	a2,a5
      y_tmp[i] = st->outbuf[i] + st->frame[i];
    83f485c2:	00e7f7d3          	fadd.s	fa5,fa5,fa4
   for (i=0;i<N3;i++) {
    83f485c6:	0691                	addi	a3,a3,4
      y_tmp[i] = st->outbuf[i] + st->frame[i];
    83f485c8:	fef72e27          	fsw	fa5,-4(a4)
   for (i=0;i<N3;i++) {
    83f485cc:	fef594e3          	bne	a1,a5,83f485b4 <NLP_AES+0x6bc>
   }

   if (1 == (unsigned short)aes_frame)
    83f485d0:	c01917d3          	fcvt.wu.s	a5,fs2,rtz
    83f485d4:	4705                	li	a4,1
    83f485d6:	17c2                	slli	a5,a5,0x30
    83f485d8:	93c1                	srli	a5,a5,0x30
    83f485da:	14e78d63          	beq	a5,a4,83f48734 <NLP_AES+0x83c>
      st->frame1_last_sample = y_tmp[N3-1];
   if (2 == (unsigned short)aes_frame) {
    83f485de:	4709                	li	a4,2
    83f485e0:	06e79263          	bne	a5,a4,83f48644 <NLP_AES+0x74c>
      alpha2 = 1.0F/160.0F;
      alpha = 1 - alpha2;
      y_tmp[0] = alpha * st->frame1_last_sample + alpha2 * y_tmp[0];
    83f485e4:	00012787          	flw	fa5,0(sp)
    83f485e8:	0000a797          	auipc	a5,0xa
    83f485ec:	d687a687          	flw	fa3,-664(a5) # 83f52350 <__func__.1+0x158>
    83f485f0:	0e442707          	flw	fa4,228(s0)
    83f485f4:	10d7f7d3          	fmul.s	fa5,fa5,fa3
    83f485f8:	0000a797          	auipc	a5,0xa
    83f485fc:	d5c7a687          	flw	fa3,-676(a5) # 83f52354 <__func__.1+0x15c>
      for (i = 0; i < N3-1; i++) {
    83f48600:	fffa869b          	addiw	a3,s5,-1
      y_tmp[0] = alpha * st->frame1_last_sample + alpha2 * y_tmp[0];
    83f48604:	78d77743          	fmadd.s	fa4,fa4,fa3,fa5
    83f48608:	00e12027          	fsw	fa4,0(sp)
      for (i = 0; i < N3-1; i++) {
    83f4860c:	02d05c63          	blez	a3,83f48644 <NLP_AES+0x74c>
    83f48610:	0058                	addi	a4,sp,4
    83f48612:	4781                	li	a5,0
    83f48614:	0000a617          	auipc	a2,0xa
    83f48618:	d4462587          	flw	fa1,-700(a2) # 83f52358 <__func__.1+0x160>
         alpha2 = (float)(1.0F + i)/160.0F;
    83f4861c:	d007f7d3          	fcvt.s.w	fa5,a5
         alpha = 1 - alpha2;
         y_tmp[i+1] =  alpha * y_tmp[i] + alpha2 * y_tmp[i+1];
    83f48620:	00072607          	flw	fa2,0(a4)
      for (i = 0; i < N3-1; i++) {
    83f48624:	0711                	addi	a4,a4,4
         alpha2 = (float)(1.0F + i)/160.0F;
    83f48626:	0087f7d3          	fadd.s	fa5,fa5,fs0
         y_tmp[i+1] =  alpha * y_tmp[i] + alpha2 * y_tmp[i+1];
    83f4862a:	2785                	addiw	a5,a5,1
         alpha2 = (float)(1.0F + i)/160.0F;
    83f4862c:	18b7f7d3          	fdiv.s	fa5,fa5,fa1
         alpha = 1 - alpha2;
    83f48630:	08f476d3          	fsub.s	fa3,fs0,fa5
         y_tmp[i+1] =  alpha * y_tmp[i] + alpha2 * y_tmp[i+1];
    83f48634:	10c7f7d3          	fmul.s	fa5,fa5,fa2
    83f48638:	78e6f743          	fmadd.s	fa4,fa3,fa4,fa5
    83f4863c:	fee72e27          	fsw	fa4,-4(a4)
      for (i = 0; i < N3-1; i++) {
    83f48640:	fcd79ee3          	bne	a5,a3,83f4861c <NLP_AES+0x724>
      }
   }

   for (i=0;i<N3;i++)
    83f48644:	09705d63          	blez	s7,83f486de <NLP_AES+0x7e6>
    83f48648:	3afd                	addiw	s5,s5,-1
    83f4864a:	020a9793          	slli	a5,s5,0x20
    83f4864e:	01e7da93          	srli	s5,a5,0x1e
      y[i] = (short)WORD2INT(y_tmp[i]);
    83f48652:	69a1                	lui	s3,0x8
    83f48654:	005c                	addi	a5,sp,4
    83f48656:	9abe                	add	s5,s5,a5
    83f48658:	848a                	mv	s1,sp
    83f4865a:	0000a797          	auipc	a5,0xa
    83f4865e:	c367a407          	flw	fs0,-970(a5) # 83f52290 <__func__.1+0x98>
    83f48662:	0000a797          	auipc	a5,0xa
    83f48666:	c327a487          	flw	fs1,-974(a5) # 83f52294 <__func__.1+0x9c>
    83f4866a:	19fd                	addi	s3,s3,-1
    83f4866c:	0000a797          	auipc	a5,0xa
    83f48670:	c2c7b907          	fld	fs2,-980(a5) # 83f52298 <__func__.1+0xa0>
    83f48674:	a031                	j	83f48680 <NLP_AES+0x788>
    83f48676:	00f91023          	sh	a5,0(s2)
   for (i=0;i<N3;i++)
    83f4867a:	0909                	addi	s2,s2,2
    83f4867c:	03548e63          	beq	s1,s5,83f486b8 <NLP_AES+0x7c0>
      y[i] = (short)WORD2INT(y_tmp[i]);
    83f48680:	0004a507          	flw	fa0,0(s1)
    83f48684:	77e1                	lui	a5,0xffff8
   for (i=0;i<N3;i++)
    83f48686:	0491                	addi	s1,s1,4
      y[i] = (short)WORD2INT(y_tmp[i]);
    83f48688:	a0851753          	flt.s	a4,fa0,fs0
    83f4868c:	f76d                	bnez	a4,83f48676 <NLP_AES+0x77e>
    83f4868e:	a0a49753          	flt.s	a4,fs1,fa0
    83f48692:	87ce                	mv	a5,s3
    83f48694:	f36d                	bnez	a4,83f48676 <NLP_AES+0x77e>
    83f48696:	42050553          	fcvt.d.s	fa0,fa0
   for (i=0;i<N3;i++)
    83f4869a:	0909                	addi	s2,s2,2
      y[i] = (short)WORD2INT(y_tmp[i]);
    83f4869c:	03257553          	fadd.d	fa0,fa0,fs2
    83f486a0:	ac2f80ef          	jal	ra,83f40962 <floor>
    83f486a4:	c20517d3          	fcvt.w.d	a5,fa0,rtz
    83f486a8:	0107979b          	slliw	a5,a5,0x10
    83f486ac:	4107d79b          	sraiw	a5,a5,0x10
    83f486b0:	fef91f23          	sh	a5,-2(s2)
   for (i=0;i<N3;i++)
    83f486b4:	fd5496e3          	bne	s1,s5,83f48680 <NLP_AES+0x788>
    83f486b8:	4701                	li	a4,0

   /* Update OLA outbuf */
   for (i=0;i<N3;i++)
      st->outbuf[i] = st->frame[st->frame_size+i];  /* output 50% OLA */
    83f486ba:	401c                	lw	a5,0(s0)
    83f486bc:	7010                	ld	a2,32(s0)
    83f486be:	6c54                	ld	a3,152(s0)
    83f486c0:	9fb9                	addw	a5,a5,a4
    83f486c2:	078a                	slli	a5,a5,0x2
    83f486c4:	97b2                	add	a5,a5,a2
    83f486c6:	0007a787          	flw	fa5,0(a5) # ffffffffffff8000 <_end+0xffffffff7bff82c0>
    83f486ca:	00271793          	slli	a5,a4,0x2
    83f486ce:	97b6                	add	a5,a5,a3
   for (i=0;i<N3;i++)
    83f486d0:	0705                	addi	a4,a4,1
      st->outbuf[i] = st->frame[st->frame_size+i];  /* output 50% OLA */
    83f486d2:	00f7a027          	fsw	fa5,0(a5)
   for (i=0;i<N3;i++)
    83f486d6:	0007079b          	sext.w	a5,a4
    83f486da:	ff77c0e3          	blt	a5,s7,83f486ba <NLP_AES+0x7c2>

}
    83f486de:	31813083          	ld	ra,792(sp)
    83f486e2:	31013403          	ld	s0,784(sp)
    83f486e6:	30813483          	ld	s1,776(sp)
    83f486ea:	30013903          	ld	s2,768(sp)
    83f486ee:	2f813983          	ld	s3,760(sp)
    83f486f2:	2f013a03          	ld	s4,752(sp)
    83f486f6:	2e813a83          	ld	s5,744(sp)
    83f486fa:	2e013b03          	ld	s6,736(sp)
    83f486fe:	2d813b83          	ld	s7,728(sp)
    83f48702:	2d013c03          	ld	s8,720(sp)
    83f48706:	2c813c83          	ld	s9,712(sp)
    83f4870a:	2c013d03          	ld	s10,704(sp)
    83f4870e:	2b813407          	fld	fs0,696(sp)
    83f48712:	2b013487          	fld	fs1,688(sp)
    83f48716:	2a813907          	fld	fs2,680(sp)
    83f4871a:	2a013987          	fld	fs3,672(sp)
    83f4871e:	29813a07          	fld	fs4,664(sp)
    83f48722:	29013a87          	fld	fs5,656(sp)
    83f48726:	28813b07          	fld	fs6,648(sp)
    83f4872a:	28013b87          	fld	fs7,640(sp)
    83f4872e:	32010113          	addi	sp,sp,800
    83f48732:	8082                	ret
      st->frame1_last_sample = y_tmp[N3-1];
    83f48734:	fffa879b          	addiw	a5,s5,-1
    83f48738:	078a                	slli	a5,a5,0x2
    83f4873a:	0518                	addi	a4,sp,640
    83f4873c:	97ba                	add	a5,a5,a4
    83f4873e:	d807a787          	flw	fa5,-640(a5)
    83f48742:	0ef42227          	fsw	fa5,228(s0)
   if (2 == (unsigned short)aes_frame) {
    83f48746:	bdfd                	j	83f48644 <NLP_AES+0x74c>
      for (i=0;i<N;i++)
    83f48748:	fffb0c9b          	addiw	s9,s6,-1
    83f4874c:	8b6045e3          	bgtz	s6,83f47ff6 <NLP_AES+0xfe>
    83f48750:	b8f9                	j	83f4802e <NLP_AES+0x136>
    83f48752:	0000a797          	auipc	a5,0xa
    83f48756:	afe7a407          	flw	fs0,-1282(a5) # 83f52250 <__func__.1+0x58>
    83f4875a:	0000a797          	auipc	a5,0xa
    83f4875e:	bce7aa87          	flw	fs5,-1074(a5) # 83f52328 <__func__.1+0x130>
    83f48762:	ba55                	j	83f48116 <NLP_AES+0x21e>

0000000083f48764 <filterbank_create>:
#include "packfft.h"
#include "nlpaes_subfun.h"

/* Function Definitions */
FilterBank *filterbank_create(int banks, float sampling, int len, int type)
{
    83f48764:	7135                	addi	sp,sp,-160
    83f48766:	aca2                	fsd	fs0,88(sp)
   int id1;
   int id2;

   type = type;
   df = sampling / (float)(2 * len);
   max_mel = (float)toBARK(sampling/2);
    83f48768:	0000a797          	auipc	a5,0xa
    83f4876c:	b087a407          	flw	fs0,-1272(a5) # 83f52270 <__func__.1+0x78>
    83f48770:	10857453          	fmul.s	fs0,fa0,fs0
{
    83f48774:	b856                	fsd	fs5,48(sp)
   max_mel = (float)toBARK(sampling/2);
    83f48776:	0000a797          	auipc	a5,0xa
    83f4877a:	c6a7aa87          	flw	fs5,-918(a5) # 83f523e0 <__func__.1+0x1e8>
   df = sampling / (float)(2 * len);
    83f4877e:	0015979b          	slliw	a5,a1,0x1
{
    83f48782:	bc52                	fsd	fs4,56(sp)
   max_mel = (float)toBARK(sampling/2);
    83f48784:	115477d3          	fmul.s	fa5,fs0,fs5
   df = sampling / (float)(2 * len);
    83f48788:	d007fa53          	fcvt.s.w	fs4,a5
{
    83f4878c:	ed06                	sd	ra,152(sp)
    83f4878e:	e922                	sd	s0,144(sp)
   df = sampling / (float)(2 * len);
    83f48790:	19457a53          	fdiv.s	fs4,fa0,fs4
   max_mel = (float)toBARK(sampling/2);
    83f48794:	42078553          	fcvt.d.s	fa0,fa5
{
    83f48798:	e526                	sd	s1,136(sp)
    83f4879a:	e14a                	sd	s2,128(sp)
    83f4879c:	84ae                	mv	s1,a1
    83f4879e:	892a                	mv	s2,a0
    83f487a0:	fcce                	sd	s3,120(sp)
    83f487a2:	f4d6                	sd	s5,104(sp)
    83f487a4:	f0da                	sd	s6,96(sp)
    83f487a6:	a8a6                	fsd	fs1,80(sp)
    83f487a8:	a4ca                	fsd	fs2,72(sp)
    83f487aa:	a0ce                	fsd	fs3,64(sp)
    83f487ac:	b45a                	fsd	fs6,40(sp)
    83f487ae:	b05e                	fsd	fs7,32(sp)
    83f487b0:	ac62                	fsd	fs8,24(sp)
    83f487b2:	a866                	fsd	fs9,16(sp)
    83f487b4:	f8d2                	sd	s4,112(sp)
    83f487b6:	a46a                	fsd	fs10,8(sp)
   max_mel = (float)toBARK(sampling/2);
    83f487b8:	dd9f70ef          	jal	ra,83f40590 <atan>
    83f487bc:	108477d3          	fmul.s	fa5,fs0,fs0
    83f487c0:	0000a797          	auipc	a5,0xa
    83f487c4:	c247ab07          	flw	fs6,-988(a5) # 83f523e4 <__func__.1+0x1ec>
    83f487c8:	22a504d3          	fmv.d	fs1,fa0
   mel_interval = max_mel / (float)(banks - 1);
   
   bank = (FilterBank*)mem_alloc(sizeof(FilterBank));
   bank->nb_banks = banks;
   bank->len = len;
   bank->bank_left = (int*)mem_alloc(len*sizeof(int));
    83f487cc:	00249a9b          	slliw	s5,s1,0x2
   mel_interval = max_mel / (float)(banks - 1);
    83f487d0:	fff9041b          	addiw	s0,s2,-1
   max_mel = (float)toBARK(sampling/2);
    83f487d4:	1167f553          	fmul.s	fa0,fa5,fs6
    83f487d8:	42050553          	fcvt.d.s	fa0,fa0
    83f487dc:	db5f70ef          	jal	ra,83f40590 <atan>
    83f487e0:	0000a797          	auipc	a5,0xa
    83f487e4:	c187bb87          	fld	fs7,-1000(a5) # 83f523f8 <__func__.1+0x200>
    83f487e8:	13757553          	fmul.d	fa0,fa0,fs7
    83f487ec:	0000a797          	auipc	a5,0xa
    83f487f0:	c147bc07          	fld	fs8,-1004(a5) # 83f52400 <__func__.1+0x208>
   uintptr_t *ptr =  pvPortMalloc(size);
    83f487f4:	02800513          	li	a0,40
    83f487f8:	0000a797          	auipc	a5,0xa
    83f487fc:	bf07ac87          	flw	fs9,-1040(a5) # 83f523e8 <__func__.1+0x1f0>
    83f48800:	11947953          	fmul.s	fs2,fs0,fs9
   mel_interval = max_mel / (float)(banks - 1);
    83f48804:	d00479d3          	fcvt.s.w	fs3,s0
   max_mel = (float)toBARK(sampling/2);
    83f48808:	5384f4c3          	fmadd.d	fs1,fs1,fs8,fa0
    83f4880c:	579050ef          	jal	ra,83f4e584 <pvPortMalloc>
   memset(ptr, 0, size);
    83f48810:	02800613          	li	a2,40
    83f48814:	4581                	li	a1,0
   uintptr_t *ptr =  pvPortMalloc(size);
    83f48816:	89aa                	mv	s3,a0
   memset(ptr, 0, size);
    83f48818:	764030ef          	jal	ra,83f4bf7c <memset>
   uintptr_t *ptr =  pvPortMalloc(size);
    83f4881c:	8556                	mv	a0,s5
   bank->nb_banks = banks;
    83f4881e:	0329a023          	sw	s2,32(s3) # 8020 <_EL1_STACK_SIZE+0x7820>
   bank->len = len;
    83f48822:	0299a223          	sw	s1,36(s3)
    83f48826:	55f050ef          	jal	ra,83f4e584 <pvPortMalloc>
   memset(ptr, 0, size);
    83f4882a:	8656                	mv	a2,s5
    83f4882c:	4581                	li	a1,0
   uintptr_t *ptr =  pvPortMalloc(size);
    83f4882e:	8b2a                	mv	s6,a0
   max_mel = (float)toBARK(sampling/2);
    83f48830:	42090953          	fcvt.d.s	fs2,fs2
   memset(ptr, 0, size);
    83f48834:	748030ef          	jal	ra,83f4bf7c <memset>
   uintptr_t *ptr =  pvPortMalloc(size);
    83f48838:	8556                	mv	a0,s5
   bank->bank_left = (int*)mem_alloc(len*sizeof(int));
    83f4883a:	0169b023          	sd	s6,0(s3)
    83f4883e:	547050ef          	jal	ra,83f4e584 <pvPortMalloc>
   memset(ptr, 0, size);
    83f48842:	8656                	mv	a2,s5
    83f48844:	4581                	li	a1,0
   max_mel = (float)toBARK(sampling/2);
    83f48846:	02997953          	fadd.d	fs2,fs2,fs1
   uintptr_t *ptr =  pvPortMalloc(size);
    83f4884a:	8b2a                	mv	s6,a0
   memset(ptr, 0, size);
    83f4884c:	730030ef          	jal	ra,83f4bf7c <memset>
   uintptr_t *ptr =  pvPortMalloc(size);
    83f48850:	8556                	mv	a0,s5
   bank->bank_right = (int*)mem_alloc(len*sizeof(int));
    83f48852:	0169b423          	sd	s6,8(s3)
    83f48856:	52f050ef          	jal	ra,83f4e584 <pvPortMalloc>
   memset(ptr, 0, size);
    83f4885a:	8656                	mv	a2,s5
    83f4885c:	4581                	li	a1,0
   uintptr_t *ptr =  pvPortMalloc(size);
    83f4885e:	8b2a                	mv	s6,a0
   memset(ptr, 0, size);
    83f48860:	71c030ef          	jal	ra,83f4bf7c <memset>
   uintptr_t *ptr =  pvPortMalloc(size);
    83f48864:	8556                	mv	a0,s5
   bank->filter_left = (float*)mem_alloc(len*sizeof(float));
    83f48866:	0169b823          	sd	s6,16(s3)
    83f4886a:	51b050ef          	jal	ra,83f4e584 <pvPortMalloc>
   max_mel = (float)toBARK(sampling/2);
    83f4886e:	40197953          	fcvt.s.d	fs2,fs2
    83f48872:	8b2a                	mv	s6,a0
   memset(ptr, 0, size);
    83f48874:	8656                	mv	a2,s5
    83f48876:	4581                	li	a1,0
    83f48878:	704030ef          	jal	ra,83f4bf7c <memset>
   bank->filter_right = (float*)mem_alloc(len*sizeof(float));
    83f4887c:	0169bc23          	sd	s6,24(s3)
   mel_interval = max_mel / (float)(banks - 1);
    83f48880:	193979d3          	fdiv.s	fs3,fs2,fs3
   
   //bank->scaling = (float*)mem_alloc(banks*sizeof(float));

   for (i=0;i<len;i++) {
    83f48884:	0c905063          	blez	s1,83f48944 <filterbank_create+0x1e0>
    83f48888:	4a01                	li	s4,0
      } else {
         val = (mel - id1*mel_interval) / mel_interval;
      }
      id2 = id1+1;
      bank->bank_left[i] = id1;
      bank->filter_left[i] = FLOAT_ONE - val;
    83f4888a:	0000a797          	auipc	a5,0xa
    83f4888e:	9c67ad07          	flw	fs10,-1594(a5) # 83f52250 <__func__.1+0x58>
         id1 = banks-2;
    83f48892:	3979                	addiw	s2,s2,-2
    83f48894:	a80d                	j	83f488c6 <filterbank_create+0x162>
    83f48896:	86ca                	mv	a3,s2
      bank->bank_left[i] = id1;
    83f48898:	0009b703          	ld	a4,0(s3)
    83f4889c:	002a1793          	slli	a5,s4,0x2
   for (i=0;i<len;i++) {
    83f488a0:	0a05                	addi	s4,s4,1
      bank->bank_left[i] = id1;
    83f488a2:	973e                	add	a4,a4,a5
    83f488a4:	c314                	sw	a3,0(a4)
      bank->filter_left[i] = FLOAT_ONE - val;
    83f488a6:	0109b703          	ld	a4,16(s3)
    83f488aa:	973e                	add	a4,a4,a5
    83f488ac:	00e72027          	fsw	fa4,0(a4)
      bank->bank_right[i] = id2;
    83f488b0:	0089b703          	ld	a4,8(s3)
    83f488b4:	973e                	add	a4,a4,a5
    83f488b6:	c310                	sw	a2,0(a4)
      bank->filter_right[i] = val;
    83f488b8:	0189b703          	ld	a4,24(s3)
    83f488bc:	97ba                	add	a5,a5,a4
    83f488be:	00f7a027          	fsw	fa5,0(a5)
   for (i=0;i<len;i++) {
    83f488c2:	09448163          	beq	s1,s4,83f48944 <filterbank_create+0x1e0>
      curr_freq = (float)(i * df);
    83f488c6:	d00a7453          	fcvt.s.w	fs0,s4
    83f488ca:	11447453          	fmul.s	fs0,fs0,fs4
      mel = (float)toBARK(curr_freq);
    83f488ce:	11547553          	fmul.s	fa0,fs0,fs5
    83f488d2:	42050553          	fcvt.d.s	fa0,fa0
    83f488d6:	cbbf70ef          	jal	ra,83f40590 <atan>
    83f488da:	108477d3          	fmul.s	fa5,fs0,fs0
    83f488de:	22a504d3          	fmv.d	fs1,fa0
    83f488e2:	1167f553          	fmul.s	fa0,fa5,fs6
    83f488e6:	42050553          	fcvt.d.s	fa0,fa0
    83f488ea:	ca7f70ef          	jal	ra,83f40590 <atan>
    83f488ee:	13757553          	fmul.d	fa0,fa0,fs7
    83f488f2:	11947453          	fmul.s	fs0,fs0,fs9
    83f488f6:	42040453          	fcvt.d.s	fs0,fs0
    83f488fa:	5384f4c3          	fmadd.d	fs1,fs1,fs8,fa0
    83f488fe:	02947453          	fadd.d	fs0,fs0,fs1
    83f48902:	40147453          	fcvt.s.d	fs0,fs0
      if (mel > max_mel)
    83f48906:	a08917d3          	flt.s	a5,fs2,fs0
    83f4890a:	ef8d                	bnez	a5,83f48944 <filterbank_create+0x1e0>
      id1 = (int)(floor(mel/mel_interval));
    83f4890c:	19347553          	fdiv.s	fa0,fs0,fs3
    83f48910:	42050553          	fcvt.d.s	fa0,fa0
    83f48914:	84ef80ef          	jal	ra,83f40962 <floor>
    83f48918:	c20517d3          	fcvt.w.d	a5,fa0,rtz
    83f4891c:	f0000753          	fmv.w.x	fa4,zero
         val = FLOAT_ONE;
    83f48920:	21ad07d3          	fmv.s	fa5,fs10
      id1 = (int)(floor(mel/mel_interval));
    83f48924:	0007869b          	sext.w	a3,a5
      if (id1>banks-2) {
    83f48928:	8622                	mv	a2,s0
    83f4892a:	f686d6e3          	bge	a3,s0,83f48896 <filterbank_create+0x132>
         val = (mel - id1*mel_interval) / mel_interval;
    83f4892e:	d007f7d3          	fcvt.s.w	fa5,a5
      id2 = id1+1;
    83f48932:	0017861b          	addiw	a2,a5,1
         val = (mel - id1*mel_interval) / mel_interval;
    83f48936:	4137f7cb          	fnmsub.s	fa5,fa5,fs3,fs0
    83f4893a:	1937f7d3          	fdiv.s	fa5,fa5,fs3
      bank->filter_left[i] = FLOAT_ONE - val;
    83f4893e:	08fd7753          	fsub.s	fa4,fs10,fa5
    83f48942:	bf99                	j	83f48898 <filterbank_create+0x134>
   for (i=0;i<bank->nb_banks;i++)
      bank->scaling[i] = FLOAT_ONE/(bank->scaling[i]);
   #endif
   
   return bank;
}
    83f48944:	60ea                	ld	ra,152(sp)
    83f48946:	644a                	ld	s0,144(sp)
    83f48948:	64aa                	ld	s1,136(sp)
    83f4894a:	690a                	ld	s2,128(sp)
    83f4894c:	7a46                	ld	s4,112(sp)
    83f4894e:	7aa6                	ld	s5,104(sp)
    83f48950:	7b06                	ld	s6,96(sp)
    83f48952:	2466                	fld	fs0,88(sp)
    83f48954:	24c6                	fld	fs1,80(sp)
    83f48956:	2926                	fld	fs2,72(sp)
    83f48958:	2986                	fld	fs3,64(sp)
    83f4895a:	3a62                	fld	fs4,56(sp)
    83f4895c:	3ac2                	fld	fs5,48(sp)
    83f4895e:	3b22                	fld	fs6,40(sp)
    83f48960:	3b82                	fld	fs7,32(sp)
    83f48962:	2c62                	fld	fs8,24(sp)
    83f48964:	2cc2                	fld	fs9,16(sp)
    83f48966:	2d22                	fld	fs10,8(sp)
    83f48968:	854e                	mv	a0,s3
    83f4896a:	79e6                	ld	s3,120(sp)
    83f4896c:	610d                	addi	sp,sp,160
    83f4896e:	8082                	ret

0000000083f48970 <filterbank_free>:

inline void filterbank_free(FilterBank *bank)
{
    83f48970:	1141                	addi	sp,sp,-16
    83f48972:	e406                	sd	ra,8(sp)
    83f48974:	e022                	sd	s0,0(sp)
    83f48976:	842a                	mv	s0,a0
   vPortFree(ptr);
    83f48978:	6108                	ld	a0,0(a0)
    83f4897a:	571050ef          	jal	ra,83f4e6ea <vPortFree>
    83f4897e:	6408                	ld	a0,8(s0)
    83f48980:	56b050ef          	jal	ra,83f4e6ea <vPortFree>
    83f48984:	6808                	ld	a0,16(s0)
    83f48986:	565050ef          	jal	ra,83f4e6ea <vPortFree>
    83f4898a:	6c08                	ld	a0,24(s0)
    83f4898c:	55f050ef          	jal	ra,83f4e6ea <vPortFree>
    83f48990:	8522                	mv	a0,s0
   mem_free(bank->bank_right);
   mem_free(bank->filter_left);
   mem_free(bank->filter_right);
   //mem_free(bank->scaling);
   mem_free(bank);
}
    83f48992:	6402                	ld	s0,0(sp)
    83f48994:	60a2                	ld	ra,8(sp)
    83f48996:	0141                	addi	sp,sp,16
    83f48998:	5530506f          	j	83f4e6ea <vPortFree>

0000000083f4899c <filterbank_linear2sb>:

inline void filterbank_linear2sb(FilterBank *bank, float *ps, float *mel)
{
   int i;
   for (i=0;i<bank->nb_banks;i++)
    83f4899c:	511c                	lw	a5,32(a0)
    83f4899e:	00f05b63          	blez	a5,83f489b4 <filterbank_linear2sb+0x18>
    83f489a2:	8732                	mv	a4,a2
    83f489a4:	4781                	li	a5,0
      mel[i] = 0;
    83f489a6:	00072023          	sw	zero,0(a4)
   for (i=0;i<bank->nb_banks;i++)
    83f489aa:	5114                	lw	a3,32(a0)
    83f489ac:	2785                	addiw	a5,a5,1
    83f489ae:	0711                	addi	a4,a4,4
    83f489b0:	fed7cbe3          	blt	a5,a3,83f489a6 <filterbank_linear2sb+0xa>

   for (i=0;i<bank->len;i++) {
    83f489b4:	515c                	lw	a5,36(a0)
    83f489b6:	06f05063          	blez	a5,83f48a16 <filterbank_linear2sb+0x7a>
    83f489ba:	4681                	li	a3,0
      int id;
      id = bank->bank_left[i];
    83f489bc:	611c                	ld	a5,0(a0)
    83f489be:	00269713          	slli	a4,a3,0x2
      mel[id] += (bank->filter_left[i] * ps[i]);
    83f489c2:	01053803          	ld	a6,16(a0)
      id = bank->bank_left[i];
    83f489c6:	97ba                	add	a5,a5,a4
      mel[id] += (bank->filter_left[i] * ps[i]);
    83f489c8:	439c                	lw	a5,0(a5)
    83f489ca:	983a                	add	a6,a6,a4
    83f489cc:	0005a687          	flw	fa3,0(a1)
    83f489d0:	078a                	slli	a5,a5,0x2
    83f489d2:	97b2                	add	a5,a5,a2
    83f489d4:	0007a707          	flw	fa4,0(a5)
    83f489d8:	00082787          	flw	fa5,0(a6)
   for (i=0;i<bank->len;i++) {
    83f489dc:	0591                	addi	a1,a1,4
    83f489de:	0685                	addi	a3,a3,1
      mel[id] += (bank->filter_left[i] * ps[i]);
    83f489e0:	70d7f7c3          	fmadd.s	fa5,fa5,fa3,fa4
   for (i=0;i<bank->len;i++) {
    83f489e4:	0006889b          	sext.w	a7,a3
      mel[id] += (bank->filter_left[i] * ps[i]);
    83f489e8:	00f7a027          	fsw	fa5,0(a5)
      id = bank->bank_right[i];
    83f489ec:	651c                	ld	a5,8(a0)
      mel[id] += (bank->filter_right[i] * ps[i]);
    83f489ee:	01853803          	ld	a6,24(a0)
    83f489f2:	ffc5a687          	flw	fa3,-4(a1)
      id = bank->bank_right[i];
    83f489f6:	97ba                	add	a5,a5,a4
      mel[id] += (bank->filter_right[i] * ps[i]);
    83f489f8:	439c                	lw	a5,0(a5)
    83f489fa:	9742                	add	a4,a4,a6
    83f489fc:	00072787          	flw	fa5,0(a4)
    83f48a00:	078a                	slli	a5,a5,0x2
    83f48a02:	97b2                	add	a5,a5,a2
    83f48a04:	0007a707          	flw	fa4,0(a5)
    83f48a08:	70d7f7c3          	fmadd.s	fa5,fa5,fa3,fa4
    83f48a0c:	00f7a027          	fsw	fa5,0(a5)
   for (i=0;i<bank->len;i++) {
    83f48a10:	515c                	lw	a5,36(a0)
    83f48a12:	faf8c5e3          	blt	a7,a5,83f489bc <filterbank_linear2sb+0x20>
   
   /*for (i=0;i<bank->nb_banks;i++)
      mel[i] = (bank->scaling[i]) * mel[i];
   */

}
    83f48a16:	8082                	ret

0000000083f48a18 <filterbank_sb2linear>:

inline void filterbank_sb2linear(FilterBank *bank, float *mel, float *ps)
{
   int i;
   for (i=0;i<bank->len;i++) {
    83f48a18:	515c                	lw	a5,36(a0)
    83f48a1a:	04f05a63          	blez	a5,83f48a6e <filterbank_sb2linear+0x56>
    83f48a1e:	88b2                	mv	a7,a2
    83f48a20:	4601                	li	a2,0
      float tmp;
      int id1, id2;
      id1 = bank->bank_left[i];
      id2 = bank->bank_right[i];
    83f48a22:	6518                	ld	a4,8(a0)
    83f48a24:	00261693          	slli	a3,a2,0x2
      id1 = bank->bank_left[i];
    83f48a28:	611c                	ld	a5,0(a0)
      id2 = bank->bank_right[i];
    83f48a2a:	9736                	add	a4,a4,a3
      tmp =  mel[id1] * bank->filter_left[i];
      tmp += (mel[id2] * bank->filter_right[i]);
    83f48a2c:	4318                	lw	a4,0(a4)
    83f48a2e:	01853803          	ld	a6,24(a0)
      id1 = bank->bank_left[i];
    83f48a32:	97b6                	add	a5,a5,a3
      tmp += (mel[id2] * bank->filter_right[i]);
    83f48a34:	070a                	slli	a4,a4,0x2
    83f48a36:	972e                	add	a4,a4,a1
    83f48a38:	9836                	add	a6,a6,a3
    83f48a3a:	00072787          	flw	fa5,0(a4)
      tmp =  mel[id1] * bank->filter_left[i];
    83f48a3e:	439c                	lw	a5,0(a5)
      tmp += (mel[id2] * bank->filter_right[i]);
    83f48a40:	00082707          	flw	fa4,0(a6)
      tmp =  mel[id1] * bank->filter_left[i];
    83f48a44:	6918                	ld	a4,16(a0)
    83f48a46:	078a                	slli	a5,a5,0x2
      tmp += (mel[id2] * bank->filter_right[i]);
    83f48a48:	10e7f753          	fmul.s	fa4,fa5,fa4
      tmp =  mel[id1] * bank->filter_left[i];
    83f48a4c:	97ae                	add	a5,a5,a1
    83f48a4e:	96ba                	add	a3,a3,a4
      tmp += (mel[id2] * bank->filter_right[i]);
    83f48a50:	0007a787          	flw	fa5,0(a5)
    83f48a54:	0006a687          	flw	fa3,0(a3)
   for (i=0;i<bank->len;i++) {
    83f48a58:	0891                	addi	a7,a7,4
    83f48a5a:	0605                	addi	a2,a2,1
      tmp += (mel[id2] * bank->filter_right[i]);
    83f48a5c:	70d7f7c3          	fmadd.s	fa5,fa5,fa3,fa4
   for (i=0;i<bank->len;i++) {
    83f48a60:	0006079b          	sext.w	a5,a2
      ps[i] = tmp;
    83f48a64:	fef8ae27          	fsw	fa5,-4(a7)
   for (i=0;i<bank->len;i++) {
    83f48a68:	5158                	lw	a4,36(a0)
    83f48a6a:	fae7cce3          	blt	a5,a4,83f48a22 <filterbank_sb2linear+0xa>
   }
}
    83f48a6e:	8082                	ret

0000000083f48a70 <aes_conj_window>:

inline void aes_conj_window(float *w, int len)  /* Hanning */
{
   int i;
   for (i=0;i<len;i++) {
    83f48a70:	12b05863          	blez	a1,83f48ba0 <aes_conj_window+0x130>
{
    83f48a74:	711d                	addi	sp,sp,-96
    83f48a76:	e8a2                	sd	s0,80(sp)
    83f48a78:	e4a6                	sd	s1,72(sp)
    83f48a7a:	e0ca                	sd	s2,64(sp)
    83f48a7c:	bc22                	fsd	fs0,56(sp)
    83f48a7e:	b826                	fsd	fs1,48(sp)
    83f48a80:	b44a                	fsd	fs2,40(sp)
    83f48a82:	b04e                	fsd	fs3,32(sp)
    83f48a84:	ac52                	fsd	fs4,24(sp)
    83f48a86:	a856                	fsd	fs5,16(sp)
    83f48a88:	a45a                	fsd	fs6,8(sp)
    83f48a8a:	a05e                	fsd	fs7,0(sp)
      float tmp;    
      float x = (float)(4.f * i) / (float)len;
    83f48a8c:	d005fb53          	fcvt.s.w	fs6,a1
{
    83f48a90:	ec86                	sd	ra,88(sp)
    83f48a92:	84ae                	mv	s1,a1
    83f48a94:	842a                	mv	s0,a0
   for (i=0;i<len;i++) {
    83f48a96:	4901                	li	s2,0
    83f48a98:	0000a797          	auipc	a5,0xa
    83f48a9c:	9187a907          	flw	fs2,-1768(a5) # 83f523b0 <__func__.1+0x1b8>
    83f48aa0:	00009797          	auipc	a5,0x9
    83f48aa4:	7b07a487          	flw	fs1,1968(a5) # 83f52250 <__func__.1+0x58>
    83f48aa8:	0000a797          	auipc	a5,0xa
    83f48aac:	9447aa87          	flw	fs5,-1724(a5) # 83f523ec <__func__.1+0x1f4>
    83f48ab0:	0000a797          	auipc	a5,0xa
    83f48ab4:	9587ba07          	fld	fs4,-1704(a5) # 83f52408 <__func__.1+0x210>
    83f48ab8:	00009797          	auipc	a5,0x9
    83f48abc:	7b87a407          	flw	fs0,1976(a5) # 83f52270 <__func__.1+0x78>
      int inv = 0;
      if (x<1.f) {
      } else if (x<2.f) {
    83f48ac0:	00009797          	auipc	a5,0x9
    83f48ac4:	7cc7a987          	flw	fs3,1996(a5) # 83f5228c <__func__.1+0x94>
         x = 2.f-x;
         inv = 1;
      } else if (x<3.f) {
    83f48ac8:	0000a797          	auipc	a5,0xa
    83f48acc:	8087ab87          	flw	fs7,-2040(a5) # 83f522d0 <__func__.1+0xd8>
    83f48ad0:	a081                	j	83f48b10 <aes_conj_window+0xa0>
      } else if (x<2.f) {
    83f48ad2:	a13517d3          	flt.s	a5,fa0,fs3
    83f48ad6:	cfd1                	beqz	a5,83f48b72 <aes_conj_window+0x102>
         x = 2.f-x;
    83f48ad8:	08a9f553          	fsub.s	fa0,fs3,fa0
         x = x-2.f;
         inv = 1;
      } else {
         x = 4.f-x;
      }
      x = 1.271903f * x;
    83f48adc:	11557553          	fmul.s	fa0,fa0,fs5
   for (i=0;i<len;i++) {
    83f48ae0:	0411                	addi	s0,s0,4
    83f48ae2:	2905                	addiw	s2,s2,1
      tmp = .5f-.5f * (float)math_cos_norm(x);  /* Hanning */
    83f48ae4:	42050553          	fcvt.d.s	fa0,fa0
    83f48ae8:	13457553          	fmul.d	fa0,fa0,fs4
    83f48aec:	de7f70ef          	jal	ra,83f408d2 <cos>
    83f48af0:	40157553          	fcvt.s.d	fa0,fa0
    83f48af4:	4085754b          	fnmsub.s	fa0,fa0,fs0,fs0
      tmp = tmp * tmp;
      if (inv)
         tmp = FLOAT_ONE - tmp;
    83f48af8:	48a5754b          	fnmsub.s	fa0,fa0,fa0,fs1
      w[i] = (float)math_sqrt(tmp);
    83f48afc:	42050553          	fcvt.d.s	fa0,fa0
    83f48b00:	af2f80ef          	jal	ra,83f40df2 <sqrt>
    83f48b04:	40157553          	fcvt.s.d	fa0,fa0
    83f48b08:	fea42e27          	fsw	fa0,-4(s0)
   for (i=0;i<len;i++) {
    83f48b0c:	05248563          	beq	s1,s2,83f48b56 <aes_conj_window+0xe6>
      float x = (float)(4.f * i) / (float)len;
    83f48b10:	d0097553          	fcvt.s.w	fa0,s2
    83f48b14:	11257553          	fmul.s	fa0,fa0,fs2
    83f48b18:	19657553          	fdiv.s	fa0,fa0,fs6
      if (x<1.f) {
    83f48b1c:	a09517d3          	flt.s	a5,fa0,fs1
    83f48b20:	dbcd                	beqz	a5,83f48ad2 <aes_conj_window+0x62>
      x = 1.271903f * x;
    83f48b22:	11557553          	fmul.s	fa0,fa0,fs5
      tmp = .5f-.5f * (float)math_cos_norm(x);  /* Hanning */
    83f48b26:	42050553          	fcvt.d.s	fa0,fa0
    83f48b2a:	13457553          	fmul.d	fa0,fa0,fs4
    83f48b2e:	da5f70ef          	jal	ra,83f408d2 <cos>
    83f48b32:	40157553          	fcvt.s.d	fa0,fa0
    83f48b36:	4085754b          	fnmsub.s	fa0,fa0,fs0,fs0
      tmp = tmp * tmp;
    83f48b3a:	10a57553          	fmul.s	fa0,fa0,fa0
      w[i] = (float)math_sqrt(tmp);
    83f48b3e:	42050553          	fcvt.d.s	fa0,fa0
   for (i=0;i<len;i++) {
    83f48b42:	0411                	addi	s0,s0,4
    83f48b44:	2905                	addiw	s2,s2,1
      w[i] = (float)math_sqrt(tmp);
    83f48b46:	aacf80ef          	jal	ra,83f40df2 <sqrt>
    83f48b4a:	40157553          	fcvt.s.d	fa0,fa0
    83f48b4e:	fea42e27          	fsw	fa0,-4(s0)
   for (i=0;i<len;i++) {
    83f48b52:	fb249fe3          	bne	s1,s2,83f48b10 <aes_conj_window+0xa0>

   }
}
    83f48b56:	60e6                	ld	ra,88(sp)
    83f48b58:	6446                	ld	s0,80(sp)
    83f48b5a:	64a6                	ld	s1,72(sp)
    83f48b5c:	6906                	ld	s2,64(sp)
    83f48b5e:	3462                	fld	fs0,56(sp)
    83f48b60:	34c2                	fld	fs1,48(sp)
    83f48b62:	3922                	fld	fs2,40(sp)
    83f48b64:	3982                	fld	fs3,32(sp)
    83f48b66:	2a62                	fld	fs4,24(sp)
    83f48b68:	2ac2                	fld	fs5,16(sp)
    83f48b6a:	2b22                	fld	fs6,8(sp)
    83f48b6c:	2b82                	fld	fs7,0(sp)
    83f48b6e:	6125                	addi	sp,sp,96
    83f48b70:	8082                	ret
      } else if (x<3.f) {
    83f48b72:	a17517d3          	flt.s	a5,fa0,fs7
    83f48b76:	c781                	beqz	a5,83f48b7e <aes_conj_window+0x10e>
         x = x-2.f;
    83f48b78:	09357553          	fsub.s	fa0,fa0,fs3
         inv = 1;
    83f48b7c:	b785                	j	83f48adc <aes_conj_window+0x6c>
         x = 4.f-x;
    83f48b7e:	08a97553          	fsub.s	fa0,fs2,fa0
      x = 1.271903f * x;
    83f48b82:	11557553          	fmul.s	fa0,fa0,fs5
      tmp = .5f-.5f * (float)math_cos_norm(x);  /* Hanning */
    83f48b86:	42050553          	fcvt.d.s	fa0,fa0
    83f48b8a:	13457553          	fmul.d	fa0,fa0,fs4
    83f48b8e:	d45f70ef          	jal	ra,83f408d2 <cos>
    83f48b92:	40157553          	fcvt.s.d	fa0,fa0
    83f48b96:	4085754b          	fnmsub.s	fa0,fa0,fs0,fs0
      tmp = tmp * tmp;
    83f48b9a:	10a57553          	fmul.s	fa0,fa0,fa0
      if (inv)
    83f48b9e:	b745                	j	83f48b3e <aes_conj_window+0xce>
    83f48ba0:	8082                	ret

0000000083f48ba2 <aes_hypergeom_gain>:

inline float aes_hypergeom_gain(float vk)
{
    83f48ba2:	1101                	addi	sp,sp,-32
    83f48ba4:	a422                	fsd	fs0,8(sp)
   0.82157f, 1.02017f, 1.20461f, 1.37534f, 1.53363f, 1.68092f, 1.81865f,
   1.94811f, 2.07038f, 2.18638f, 2.29688f, 2.40255f, 2.50391f, 2.60144f,
   2.69551f, 2.78647f, 2.87458f, 2.96015f, 3.04333f, 3.12431f, 3.20326f};

   x = AES_EXPIN_SCALING*vk;
   integer = (float)floor(2*x);
    83f48ba6:	00a57453          	fadd.s	fs0,fa0,fa0
{
    83f48baa:	a026                	fsd	fs1,0(sp)
    83f48bac:	20a504d3          	fmv.s	fs1,fa0
    83f48bb0:	ec06                	sd	ra,24(sp)
   integer = (float)floor(2*x);
    83f48bb2:	42040553          	fcvt.d.s	fa0,fs0
    83f48bb6:	dadf70ef          	jal	ra,83f40962 <floor>
    83f48bba:	40157553          	fcvt.s.d	fa0,fa0
   ind = (int)integer;
    83f48bbe:	c00517d3          	fcvt.w.s	a5,fa0,rtz
    83f48bc2:	0007871b          	sext.w	a4,a5
   if (ind<0)
    83f48bc6:	08074863          	bltz	a4,83f48c56 <aes_hypergeom_gain+0xb4>
      return AES_FRAC_SCALING;
   if (ind>19)
    83f48bca:	46cd                	li	a3,19
    83f48bcc:	02e6d763          	bge	a3,a4,83f48bfa <aes_hypergeom_gain+0x58>
      return (float)(AES_FRAC_SCALING*(1.f+.1296/x));
    83f48bd0:	420484d3          	fcvt.d.s	fs1,fs1
    83f48bd4:	0000a797          	auipc	a5,0xa
    83f48bd8:	83c7b507          	fld	fa0,-1988(a5) # 83f52410 <__func__.1+0x218>
    83f48bdc:	00009797          	auipc	a5,0x9
    83f48be0:	7347b787          	fld	fa5,1844(a5) # 83f52310 <__func__.1+0x118>
    83f48be4:	1a957553          	fdiv.d	fa0,fa0,fs1
   frac = 2*x-integer;
   return (float)(AES_FRAC_SCALING*((1.f-frac)*table[ind] + frac*table[ind+1])/sqrt(x+.0001f));
   
}
    83f48be8:	60e2                	ld	ra,24(sp)
    83f48bea:	2422                	fld	fs0,8(sp)
    83f48bec:	2482                	fld	fs1,0(sp)
    83f48bee:	6105                	addi	sp,sp,32
      return (float)(AES_FRAC_SCALING*(1.f+.1296/x));
    83f48bf0:	02f57553          	fadd.d	fa0,fa0,fa5
    83f48bf4:	40157553          	fcvt.s.d	fa0,fa0
}
    83f48bf8:	8082                	ret
   return (float)(AES_FRAC_SCALING*((1.f-frac)*table[ind] + frac*table[ind+1])/sqrt(x+.0001f));
    83f48bfa:	2785                	addiw	a5,a5,1
   frac = 2*x-integer;
    83f48bfc:	08a47553          	fsub.s	fa0,fs0,fa0
   return (float)(AES_FRAC_SCALING*((1.f-frac)*table[ind] + frac*table[ind+1])/sqrt(x+.0001f));
    83f48c00:	00009697          	auipc	a3,0x9
    83f48c04:	33068693          	addi	a3,a3,816 # 83f51f30 <table.0>
    83f48c08:	078a                	slli	a5,a5,0x2
    83f48c0a:	97b6                	add	a5,a5,a3
    83f48c0c:	0007a787          	flw	fa5,0(a5)
    83f48c10:	00009797          	auipc	a5,0x9
    83f48c14:	6407a407          	flw	fs0,1600(a5) # 83f52250 <__func__.1+0x58>
    83f48c18:	08a47453          	fsub.s	fs0,fs0,fa0
    83f48c1c:	10f577d3          	fmul.s	fa5,fa0,fa5
    83f48c20:	070a                	slli	a4,a4,0x2
    83f48c22:	9736                	add	a4,a4,a3
    83f48c24:	00009797          	auipc	a5,0x9
    83f48c28:	7c47a507          	flw	fa0,1988(a5) # 83f523e8 <__func__.1+0x1f0>
    83f48c2c:	00a4f553          	fadd.s	fa0,fs1,fa0
    83f48c30:	00072707          	flw	fa4,0(a4)
    83f48c34:	78e47443          	fmadd.s	fs0,fs0,fa4,fa5
    83f48c38:	42050553          	fcvt.d.s	fa0,fa0
    83f48c3c:	9b6f80ef          	jal	ra,83f40df2 <sqrt>
    83f48c40:	42040453          	fcvt.d.s	fs0,fs0
}
    83f48c44:	60e2                	ld	ra,24(sp)
    83f48c46:	2482                	fld	fs1,0(sp)
   return (float)(AES_FRAC_SCALING*((1.f-frac)*table[ind] + frac*table[ind+1])/sqrt(x+.0001f));
    83f48c48:	1aa47553          	fdiv.d	fa0,fs0,fa0
}
    83f48c4c:	2422                	fld	fs0,8(sp)
    83f48c4e:	6105                	addi	sp,sp,32
   return (float)(AES_FRAC_SCALING*((1.f-frac)*table[ind] + frac*table[ind+1])/sqrt(x+.0001f));
    83f48c50:	40157553          	fcvt.s.d	fa0,fa0
}
    83f48c54:	8082                	ret
    83f48c56:	60e2                	ld	ra,24(sp)
    83f48c58:	2422                	fld	fs0,8(sp)
    83f48c5a:	2482                	fld	fs1,0(sp)
      return AES_FRAC_SCALING;
    83f48c5c:	00009797          	auipc	a5,0x9
    83f48c60:	5f47a507          	flw	fa0,1524(a5) # 83f52250 <__func__.1+0x58>
}
    83f48c64:	6105                	addi	sp,sp,32
    83f48c66:	8082                	ret

0000000083f48c68 <aes_qcurve>:

inline float aes_qcurve(float x)
{
   return 1.f/(1.f+.15f/(AES_SNR_SCALING*x));
    83f48c68:	00009797          	auipc	a5,0x9
    83f48c6c:	6547a787          	flw	fa5,1620(a5) # 83f522bc <__func__.1+0xc4>
    83f48c70:	18a7f7d3          	fdiv.s	fa5,fa5,fa0
    83f48c74:	00009797          	auipc	a5,0x9
    83f48c78:	5dc7a707          	flw	fa4,1500(a5) # 83f52250 <__func__.1+0x58>
    83f48c7c:	00e7f7d3          	fadd.s	fa5,fa5,fa4
}
    83f48c80:	18f77553          	fdiv.s	fa0,fa4,fa5
    83f48c84:	8082                	ret

0000000083f48c86 <aes_gain_floor>:
inline void aes_gain_floor(float effective_echo_suppress, float *echo, float *gain_floor, int len)
{
   int i;
   float echo_floor;

   echo_floor = (float)exp(.2302585f * effective_echo_suppress);
    83f48c86:	00009797          	auipc	a5,0x9
    83f48c8a:	76a7a787          	flw	fa5,1898(a5) # 83f523f0 <__func__.1+0x1f8>
    83f48c8e:	10f57553          	fmul.s	fa0,fa0,fa5
{
    83f48c92:	7139                	addi	sp,sp,-64
    83f48c94:	f04a                	sd	s2,32(sp)
    83f48c96:	8932                	mv	s2,a2
    83f48c98:	f822                	sd	s0,48(sp)
   echo_floor = (float)exp(.2302585f * effective_echo_suppress);
    83f48c9a:	42050553          	fcvt.d.s	fa0,fa0
{
    83f48c9e:	f426                	sd	s1,40(sp)
    83f48ca0:	fc06                	sd	ra,56(sp)
    83f48ca2:	ac22                	fsd	fs0,24(sp)
    83f48ca4:	a826                	fsd	fs1,16(sp)
    83f48ca6:	a44a                	fsd	fs2,8(sp)
    83f48ca8:	842a                	mv	s0,a0
    83f48caa:	84ae                	mv	s1,a1
   echo_floor = (float)exp(.2302585f * effective_echo_suppress);
    83f48cac:	f35f70ef          	jal	ra,83f40be0 <exp>

   /* Compute the gain floor for the residual echo */
   for (i=0;i<len;i++)
    83f48cb0:	05205e63          	blez	s2,83f48d0c <aes_gain_floor+0x86>
    83f48cb4:	397d                	addiw	s2,s2,-1
    83f48cb6:	02091793          	slli	a5,s2,0x20
    83f48cba:	401574d3          	fcvt.s.d	fs1,fa0
    83f48cbe:	01e7d913          	srli	s2,a5,0x1e
    83f48cc2:	00440793          	addi	a5,s0,4
    83f48cc6:	993e                	add	s2,s2,a5
    83f48cc8:	00009797          	auipc	a5,0x9
    83f48ccc:	5887a907          	flw	fs2,1416(a5) # 83f52250 <__func__.1+0x58>
      gain_floor[i] = AES_FRAC_SCALING * (float)sqrt(echo_floor * echo[i]) / (float)sqrt(1.f + echo[i]);
    83f48cd0:	00042507          	flw	fa0,0(s0)
   for (i=0;i<len;i++)
    83f48cd4:	0411                	addi	s0,s0,4
    83f48cd6:	0491                	addi	s1,s1,4
      gain_floor[i] = AES_FRAC_SCALING * (float)sqrt(echo_floor * echo[i]) / (float)sqrt(1.f + echo[i]);
    83f48cd8:	10a4f553          	fmul.s	fa0,fs1,fa0
    83f48cdc:	42050553          	fcvt.d.s	fa0,fa0
    83f48ce0:	912f80ef          	jal	ra,83f40df2 <sqrt>
    83f48ce4:	ffc42787          	flw	fa5,-4(s0)
    83f48ce8:	22a50453          	fmv.d	fs0,fa0
    83f48cec:	0127f553          	fadd.s	fa0,fa5,fs2
    83f48cf0:	42050553          	fcvt.d.s	fa0,fa0
    83f48cf4:	8fef80ef          	jal	ra,83f40df2 <sqrt>
    83f48cf8:	40157553          	fcvt.s.d	fa0,fa0
    83f48cfc:	40147453          	fcvt.s.d	fs0,fs0
    83f48d00:	18a47453          	fdiv.s	fs0,fs0,fa0
    83f48d04:	fe84ae27          	fsw	fs0,-4(s1)
   for (i=0;i<len;i++)
    83f48d08:	fd2414e3          	bne	s0,s2,83f48cd0 <aes_gain_floor+0x4a>
}
    83f48d0c:	70e2                	ld	ra,56(sp)
    83f48d0e:	7442                	ld	s0,48(sp)
    83f48d10:	74a2                	ld	s1,40(sp)
    83f48d12:	7902                	ld	s2,32(sp)
    83f48d14:	2462                	fld	fs0,24(sp)
    83f48d16:	24c2                	fld	fs1,16(sp)
    83f48d18:	2922                	fld	fs2,8(sp)
    83f48d1a:	6121                	addi	sp,sp,64
    83f48d1c:	8082                	ret

0000000083f48d1e <aes_analysis>:

inline void aes_analysis(NonLinearEchoState *st, short *x)
{
    83f48d1e:	1101                	addi	sp,sp,-32
    83f48d20:	e822                	sd	s0,16(sp)
    83f48d22:	ec06                	sd	ra,24(sp)
    83f48d24:	e426                	sd	s1,8(sp)
    83f48d26:	e04a                	sd	s2,0(sp)
   int i;
   int N = st->ps_size;
    83f48d28:	00452903          	lw	s2,4(a0)
   int N3 = 2*N - st->frame_size;
    83f48d2c:	411c                	lw	a5,0(a0)
   float *ps = st->ps;
    83f48d2e:	7904                	ld	s1,48(a0)
   int N3 = 2*N - st->frame_size;
    83f48d30:	0019189b          	slliw	a7,s2,0x1
{
    83f48d34:	842a                	mv	s0,a0
   int N3 = 2*N - st->frame_size;
    83f48d36:	40f8853b          	subw	a0,a7,a5

   /* Build input buffer for windowing */      
   for (i=0;i<st->frame_size;i++) {
    83f48d3a:	04f05663          	blez	a5,83f48d86 <aes_analysis+0x68>
    83f48d3e:	050a                	slli	a0,a0,0x2
    83f48d40:	4781                	li	a5,0
      st->frame[i] = st->inbuf[i];  /* take data in previous frame */
    83f48d42:	6850                	ld	a2,144(s0)
    83f48d44:	00279693          	slli	a3,a5,0x2
    83f48d48:	7018                	ld	a4,32(s0)
    83f48d4a:	9636                	add	a2,a2,a3
    83f48d4c:	00062787          	flw	fa5,0(a2)
    83f48d50:	9736                	add	a4,a4,a3
   for (i=0;i<st->frame_size;i++) {
    83f48d52:	0589                	addi	a1,a1,2
      st->frame[i] = st->inbuf[i];  /* take data in previous frame */
    83f48d54:	00f72027          	fsw	fa5,0(a4)
      st->frame[N3+i] = x[i];  /* take data in current frame */
    83f48d58:	ffe59803          	lh	a6,-2(a1)
    83f48d5c:	7018                	ld	a4,32(s0)
   for (i=0;i<st->frame_size;i++) {
    83f48d5e:	0785                	addi	a5,a5,1
      st->frame[N3+i] = x[i];  /* take data in current frame */
    83f48d60:	d00877d3          	fcvt.s.w	fa5,a6
    83f48d64:	972a                	add	a4,a4,a0
   for (i=0;i<st->frame_size;i++) {
    83f48d66:	0007861b          	sext.w	a2,a5
      st->frame[N3+i] = x[i];  /* take data in current frame */
    83f48d6a:	00f72027          	fsw	fa5,0(a4)
      st->inbuf[i] = x[i];  /* update data in previous frame */
    83f48d6e:	ffe59803          	lh	a6,-2(a1)
    83f48d72:	6858                	ld	a4,144(s0)
   for (i=0;i<st->frame_size;i++) {
    83f48d74:	0511                	addi	a0,a0,4
      st->inbuf[i] = x[i];  /* update data in previous frame */
    83f48d76:	d00877d3          	fcvt.s.w	fa5,a6
    83f48d7a:	9736                	add	a4,a4,a3
    83f48d7c:	00f72027          	fsw	fa5,0(a4)
   for (i=0;i<st->frame_size;i++) {
    83f48d80:	4018                	lw	a4,0(s0)
    83f48d82:	fce640e3          	blt	a2,a4,83f48d42 <aes_analysis+0x24>
   }

   /* Windowing */
   for (i=0;i<2*N;i++)
    83f48d86:	03105463          	blez	a7,83f48dae <aes_analysis+0x90>
    83f48d8a:	00289613          	slli	a2,a7,0x2
    83f48d8e:	4781                	li	a5,0
      st->frame[i] = st->frame[i] * st->window[i];
    83f48d90:	7018                	ld	a4,32(s0)
    83f48d92:	6434                	ld	a3,72(s0)
    83f48d94:	973e                	add	a4,a4,a5
    83f48d96:	96be                	add	a3,a3,a5
    83f48d98:	00072787          	flw	fa5,0(a4)
    83f48d9c:	0006a707          	flw	fa4,0(a3)
   for (i=0;i<2*N;i++)
    83f48da0:	0791                	addi	a5,a5,4
      st->frame[i] = st->frame[i] * st->window[i];
    83f48da2:	10e7f7d3          	fmul.s	fa5,fa5,fa4
    83f48da6:	00f72027          	fsw	fa5,0(a4)
   for (i=0;i<2*N;i++)
    83f48daa:	fef613e3          	bne	a2,a5,83f48d90 <aes_analysis+0x72>
   
   /* Perform FFT */
   speech_fft(st->fft_lookup, st->frame, st->ft);
    83f48dae:	7410                	ld	a2,40(s0)
    83f48db0:	700c                	ld	a1,32(s0)
    83f48db2:	7448                	ld	a0,168(s0)
    83f48db4:	2e8000ef          	jal	ra,83f4909c <speech_fft>

   /* Power spectrum */
   ps[0] = st->ft[0] * st->ft[0];  /* re^2 */
    83f48db8:	7418                	ld	a4,40(s0)
   for (i=1;i<N;i++)  /* 0 to N-1 is enough for filterbank computation */
    83f48dba:	4785                	li	a5,1
   ps[0] = st->ft[0] * st->ft[0];  /* re^2 */
    83f48dbc:	00072787          	flw	fa5,0(a4)
    83f48dc0:	10f7f7d3          	fmul.s	fa5,fa5,fa5
    83f48dc4:	00f4a027          	fsw	fa5,0(s1)
   for (i=1;i<N;i++)  /* 0 to N-1 is enough for filterbank computation */
    83f48dc8:	0327dc63          	bge	a5,s2,83f48e00 <aes_analysis+0xe2>
    83f48dcc:	ffe9061b          	addiw	a2,s2,-2
    83f48dd0:	02061793          	slli	a5,a2,0x20
    83f48dd4:	01d7d613          	srli	a2,a5,0x1d
    83f48dd8:	00448693          	addi	a3,s1,4
    83f48ddc:	0631                	addi	a2,a2,12
    83f48dde:	4711                	li	a4,4
      ps[i] = st->ft[2*i-1] * st->ft[2*i-1] + st->ft[2*i] * st->ft[2*i];  /* re^2 + im^2 */
    83f48de0:	741c                	ld	a5,40(s0)
   for (i=1;i<N;i++)  /* 0 to N-1 is enough for filterbank computation */
    83f48de2:	0691                	addi	a3,a3,4
      ps[i] = st->ft[2*i-1] * st->ft[2*i-1] + st->ft[2*i] * st->ft[2*i];  /* re^2 + im^2 */
    83f48de4:	97ba                	add	a5,a5,a4
    83f48de6:	0047a707          	flw	fa4,4(a5)
    83f48dea:	0007a787          	flw	fa5,0(a5)
   for (i=1;i<N;i++)  /* 0 to N-1 is enough for filterbank computation */
    83f48dee:	0721                	addi	a4,a4,8
      ps[i] = st->ft[2*i-1] * st->ft[2*i-1] + st->ft[2*i] * st->ft[2*i];  /* re^2 + im^2 */
    83f48df0:	10e77753          	fmul.s	fa4,fa4,fa4
    83f48df4:	70f7f7c3          	fmadd.s	fa5,fa5,fa5,fa4
    83f48df8:	fef6ae27          	fsw	fa5,-4(a3)
   for (i=1;i<N;i++)  /* 0 to N-1 is enough for filterbank computation */
    83f48dfc:	fee612e3          	bne	a2,a4,83f48de0 <aes_analysis+0xc2>

   filterbank_linear2sb(st->bank, ps, ps+N);
    83f48e00:	6818                	ld	a4,16(s0)
    83f48e02:	090a                	slli	s2,s2,0x2
    83f48e04:	9926                	add	s2,s2,s1
   for (i=0;i<bank->nb_banks;i++)
    83f48e06:	531c                	lw	a5,32(a4)
    83f48e08:	00f05b63          	blez	a5,83f48e1e <aes_analysis+0x100>
    83f48e0c:	86ca                	mv	a3,s2
    83f48e0e:	4781                	li	a5,0
      mel[i] = 0;
    83f48e10:	0006a023          	sw	zero,0(a3)
   for (i=0;i<bank->nb_banks;i++)
    83f48e14:	5310                	lw	a2,32(a4)
    83f48e16:	2785                	addiw	a5,a5,1
    83f48e18:	0691                	addi	a3,a3,4
    83f48e1a:	fec7cbe3          	blt	a5,a2,83f48e10 <aes_analysis+0xf2>
   for (i=0;i<bank->len;i++) {
    83f48e1e:	535c                	lw	a5,36(a4)
    83f48e20:	04f05f63          	blez	a5,83f48e7e <aes_analysis+0x160>
    83f48e24:	8626                	mv	a2,s1
    83f48e26:	4581                	li	a1,0
      id = bank->bank_left[i];
    83f48e28:	631c                	ld	a5,0(a4)
    83f48e2a:	00259693          	slli	a3,a1,0x2
      mel[id] += (bank->filter_left[i] * ps[i]);
    83f48e2e:	6b08                	ld	a0,16(a4)
      id = bank->bank_left[i];
    83f48e30:	97b6                	add	a5,a5,a3
      mel[id] += (bank->filter_left[i] * ps[i]);
    83f48e32:	439c                	lw	a5,0(a5)
    83f48e34:	9536                	add	a0,a0,a3
    83f48e36:	00062687          	flw	fa3,0(a2)
    83f48e3a:	078a                	slli	a5,a5,0x2
    83f48e3c:	97ca                	add	a5,a5,s2
    83f48e3e:	0007a707          	flw	fa4,0(a5)
    83f48e42:	00052787          	flw	fa5,0(a0)
   for (i=0;i<bank->len;i++) {
    83f48e46:	0611                	addi	a2,a2,4
    83f48e48:	0585                	addi	a1,a1,1
      mel[id] += (bank->filter_left[i] * ps[i]);
    83f48e4a:	70d7f7c3          	fmadd.s	fa5,fa5,fa3,fa4
   for (i=0;i<bank->len;i++) {
    83f48e4e:	0005881b          	sext.w	a6,a1
      mel[id] += (bank->filter_left[i] * ps[i]);
    83f48e52:	00f7a027          	fsw	fa5,0(a5)
      id = bank->bank_right[i];
    83f48e56:	671c                	ld	a5,8(a4)
      mel[id] += (bank->filter_right[i] * ps[i]);
    83f48e58:	6f08                	ld	a0,24(a4)
    83f48e5a:	ffc62687          	flw	fa3,-4(a2)
      id = bank->bank_right[i];
    83f48e5e:	97b6                	add	a5,a5,a3
      mel[id] += (bank->filter_right[i] * ps[i]);
    83f48e60:	439c                	lw	a5,0(a5)
    83f48e62:	96aa                	add	a3,a3,a0
    83f48e64:	0006a787          	flw	fa5,0(a3)
    83f48e68:	078a                	slli	a5,a5,0x2
    83f48e6a:	97ca                	add	a5,a5,s2
    83f48e6c:	0007a707          	flw	fa4,0(a5)
    83f48e70:	70d7f7c3          	fmadd.s	fa5,fa5,fa3,fa4
    83f48e74:	00f7a027          	fsw	fa5,0(a5)
   for (i=0;i<bank->len;i++) {
    83f48e78:	535c                	lw	a5,36(a4)
    83f48e7a:	faf847e3          	blt	a6,a5,83f48e28 <aes_analysis+0x10a>
   
}
    83f48e7e:	60e2                	ld	ra,24(sp)
    83f48e80:	6442                	ld	s0,16(sp)
    83f48e82:	64a2                	ld	s1,8(sp)
    83f48e84:	6902                	ld	s2,0(sp)
    83f48e86:	6105                	addi	sp,sp,32
    83f48e88:	8082                	ret

0000000083f48e8a <notch_para>:
      {8192,0,8192,0,-16096, 16240}
  };

  /* Notch Filter Parameter */
  para_obj = para;
  tmp = MIN(MAX(para_obj->para_notch_freq, 0), 1);    /* the notch freq, 0 for 1kHz and 1 for 4kHz */
    83f48e8a:	01c5d783          	lhu	a5,28(a1)
    83f48e8e:	0107971b          	slliw	a4,a5,0x10
    83f48e92:	4107571b          	sraiw	a4,a4,0x10
    83f48e96:	c311                	beqz	a4,83f48e9a <notch_para+0x10>
    83f48e98:	4785                	li	a5,1
  if (Fs == 8000.0F)
    83f48e9a:	00009717          	auipc	a4,0x9
    83f48e9e:	51a72787          	flw	fa5,1306(a4) # 83f523b4 <__func__.1+0x1bc>
    83f48ea2:	03079713          	slli	a4,a5,0x30
    83f48ea6:	9341                	srli	a4,a4,0x30
    83f48ea8:	a0f526d3          	feq.s	a3,fa0,fa5
    83f48eac:	00171793          	slli	a5,a4,0x1
    83f48eb0:	97ba                	add	a5,a5,a4
    83f48eb2:	078a                	slli	a5,a5,0x2
    83f48eb4:	ca81                	beqz	a3,83f48ec4 <notch_para+0x3a>
    notch_obj->qcoef = &nb_notch_coef[tmp][0];
    83f48eb6:	0000a717          	auipc	a4,0xa
    83f48eba:	20a70713          	addi	a4,a4,522 # 83f530c0 <nb_notch_coef.1>
    83f48ebe:	97ba                	add	a5,a5,a4
    83f48ec0:	e11c                	sd	a5,0(a0)
  else
    notch_obj->qcoef = &wb_notch_coef[tmp][0];
  
}
    83f48ec2:	8082                	ret
    notch_obj->qcoef = &wb_notch_coef[tmp][0];
    83f48ec4:	0000a717          	auipc	a4,0xa
    83f48ec8:	21470713          	addi	a4,a4,532 # 83f530d8 <wb_notch_coef.0>
    83f48ecc:	97ba                	add	a5,a5,a4
    83f48ece:	e11c                	sd	a5,0(a0)
}
    83f48ed0:	8082                	ret

0000000083f48ed2 <notch_init>:
void notch_init(qfilter_struct *notch_obj, int *notch_state)
{
  unsigned short i;

  for(i=0; i<4;i++) {
    notch_state[i] = 0;
    83f48ed2:	0005a023          	sw	zero,0(a1)
    83f48ed6:	0005a223          	sw	zero,4(a1)
    83f48eda:	0005a423          	sw	zero,8(a1)
    83f48ede:	0005a623          	sw	zero,12(a1)
  }

  notch_obj->nq = 1;
    83f48ee2:	4785                	li	a5,1
    83f48ee4:	00f51823          	sh	a5,16(a0)
  notch_obj->pstate = notch_state;
    83f48ee8:	e50c                	sd	a1,8(a0)
  
}
    83f48eea:	8082                	ret

0000000083f48eec <notch_filter>:

  //initialize
  acc0 =0;

	ptr1 = pin;
	ptr2 = pout;
    83f48eec:	00169793          	slli	a5,a3,0x1
{
    83f48ef0:	7159                	addi	sp,sp,-112
    83f48ef2:	97aa                	add	a5,a5,a0
    83f48ef4:	f4a2                	sd	s0,104(sp)
    83f48ef6:	f0a6                	sd	s1,96(sp)
    83f48ef8:	ecca                	sd	s2,88(sp)
    83f48efa:	e8ce                	sd	s3,80(sp)
    83f48efc:	e4d2                	sd	s4,72(sp)
    83f48efe:	e0d6                	sd	s5,64(sp)
    83f48f00:	fc5a                	sd	s6,56(sp)
    83f48f02:	f85e                	sd	s7,48(sp)
    83f48f04:	f462                	sd	s8,40(sp)
    83f48f06:	f066                	sd	s9,32(sp)
    83f48f08:	ec6a                	sd	s10,24(sp)
    83f48f0a:	e86e                	sd	s11,16(sp)
    83f48f0c:	e43e                	sd	a5,8(sp)

	for(i = frame_size; i > 0; i--) {
    83f48f0e:	10d05a63          	blez	a3,83f49022 <notch_filter+0x136>
			acc0 = (((int)((int)acc0>>16)) * (*pcoef));
		else
			acc0 = -(((int)(-(int)acc0>>16)) * (*pcoef));  /* remove zero-inputs-limit-cycle osicillation */

		//acc0 = MAX(((int)0x80000000), (MIN(0x7fffffff, (((int)acc0)<<3))));
		acc0 = MAX(((int)0x80000000), (MIN(0x7fffffff, ((acc0)<<3))));  /* Q3.13 */
    83f48f12:	80000db7          	lui	s11,0x80000
			acc0 = ((unsigned short)(xn))*(*pcoef++);  /* low part */
    83f48f16:	63c1                	lui	t2,0x10
    83f48f18:	8baa                	mv	s7,a0
    83f48f1a:	8c2e                	mv	s8,a1
    83f48f1c:	8cb2                	mv	s9,a2
    83f48f1e:	4781                	li	a5,0
    83f48f20:	13fd                	addi	t2,t2,-1
		acc0 = MAX(((int)0x80000000), (MIN(0x7fffffff, ((acc0)<<3))));  /* Q3.13 */
    83f48f22:	fffdcd13          	not	s10,s11
	 	xn = (((int) (*ptr1++))<<16);
    83f48f26:	000b9e83          	lh	t4,0(s7)
		for(j = filter->nq; j > 0; j--) {
    83f48f2a:	010cdb03          	lhu	s6,16(s9)
		pcoef = filter->qcoef;
    83f48f2e:	000cba83          	ld	s5,0(s9)
		pst = filter->pstate;
    83f48f32:	008cb703          	ld	a4,8(s9)
	 	xn = (((int) (*ptr1++))<<16);
    83f48f36:	0b89                	addi	s7,s7,2
    83f48f38:	010e9e9b          	slliw	t4,t4,0x10
		for(j = filter->nq; j > 0; j--) {
    83f48f3c:	100b0a63          	beqz	s6,83f49050 <notch_filter+0x164>
    83f48f40:	004b1a13          	slli	s4,s6,0x4
    83f48f44:	9a3a                	add	s4,s4,a4
		pcoef = filter->qcoef;
    83f48f46:	8356                	mv	t1,s5
			xn1 = *pst;  /* take x(n-1) */
    83f48f48:	4314                	lw	a3,0(a4)
			acc0 = ((unsigned short)(xn))*(*pcoef++);  /* low part */
    83f48f4a:	00031983          	lh	s3,0(t1)
			*pst++ = xn;  /* update x(n-1)*/
    83f48f4e:	01d72023          	sw	t4,0(a4)
			acc0 += ((unsigned short)(xn1))*(*pcoef++);  /* low part */
    83f48f52:	00231903          	lh	s2,2(t1)
			xn2 = *pst;  /* take x(n-2) */
    83f48f56:	00472803          	lw	a6,4(a4)
			*pst++ = xn1;  /* update x(n-2) */
    83f48f5a:	c354                	sw	a3,4(a4)
			acc0 += ((unsigned short)(xn2))*(*pcoef++);  /* low part */
    83f48f5c:	00431483          	lh	s1,4(t1)
			yn1 = *pst++;  /* take y(n-1) */
    83f48f60:	470c                	lw	a1,8(a4)
			acc0 += ((unsigned short)(yn1))*(*pcoef++);  /* low part */
    83f48f62:	00631403          	lh	s0,6(t1)
			yn2 = *pst;  /* take y(n-2) */
    83f48f66:	475c                	lw	a5,12(a4)
			acc0 = ((unsigned short)(xn))*(*pcoef++);  /* low part */
    83f48f68:	007ef633          	and	a2,t4,t2
			acc0 += ((unsigned short)(xn1))*(*pcoef++);  /* low part */
    83f48f6c:	0076f2b3          	and	t0,a3,t2
			coef_tmp5 = *pcoef;  /* for high part */
    83f48f70:	00831503          	lh	a0,8(t1)
			acc0 += ((unsigned short)(xn2))*(*pcoef++);  /* low part */
    83f48f74:	00787fb3          	and	t6,a6,t2
			acc0 = ((unsigned short)(xn))*(*pcoef++);  /* low part */
    83f48f78:	02c9863b          	mulw	a2,s3,a2
			acc0 += ((unsigned short)(yn1))*(*pcoef++);  /* low part */
    83f48f7c:	0075ff33          	and	t5,a1,t2
			acc0 += ((unsigned short)(yn2))*(*pcoef++);  /* low part */
    83f48f80:	0077f8b3          	and	a7,a5,t2
			state_tmp1 = ((short)(xn>>0x10));  /* for high part */
    83f48f84:	410ede9b          	sraiw	t4,t4,0x10
			state_tmp2 = ((short)(xn1>>0x10));  /* for high part */
    83f48f88:	4106d69b          	sraiw	a3,a3,0x10
			state_tmp3 = ((short)(xn2>>0x10));  /* for high part */
    83f48f8c:	4108581b          	sraiw	a6,a6,0x10
			state_tmp4 = ((short)(yn1>>0x10));  /* for high part */
    83f48f90:	4105de1b          	sraiw	t3,a1,0x10
			state_tmp5 = ((short)(yn2>>0x10));  /* for high part */
    83f48f94:	4107d79b          	sraiw	a5,a5,0x10
    83f48f98:	0741                	addi	a4,a4,16
			*pst++ = yn1;  /* update y(n-2) */
    83f48f9a:	feb72e23          	sw	a1,-4(a4)
			acc0 += ((unsigned short)(xn1))*(*pcoef++);  /* low part */
    83f48f9e:	025902bb          	mulw	t0,s2,t0
    83f48fa2:	0329                	addi	t1,t1,10
			acc0 += ((unsigned short)(xn2))*(*pcoef++);  /* low part */
    83f48fa4:	03f48fbb          	mulw	t6,s1,t6
			acc0 += ((unsigned short)(xn1))*(*pcoef++);  /* low part */
    83f48fa8:	9616                	add	a2,a2,t0
			acc0 += ((unsigned short)(yn1))*(*pcoef++);  /* low part */
    83f48faa:	03e40f3b          	mulw	t5,s0,t5
			acc0 += ((unsigned short)(xn2))*(*pcoef++);  /* low part */
    83f48fae:	9fb2                	add	t6,t6,a2
			acc0 += ((unsigned short)(yn2))*(*pcoef++);  /* low part */
    83f48fb0:	02a888bb          	mulw	a7,a7,a0
			acc0 += ((unsigned short)(yn1))*(*pcoef++);  /* low part */
    83f48fb4:	9f7e                	add	t5,t5,t6
			acc0 += ((short)(state_tmp1))*coef_tmp1;  /* high part */
    83f48fb6:	033e8ebb          	mulw	t4,t4,s3
			acc0 += ((unsigned short)(yn2))*(*pcoef++);  /* low part */
    83f48fba:	98fa                	add	a7,a7,t5
			acc0 >>= 0x10;  /* be low part */
    83f48fbc:	4108d893          	srai	a7,a7,0x10
			acc0 += ((short)(state_tmp2))*coef_tmp2;  /* high part */
    83f48fc0:	032686bb          	mulw	a3,a3,s2
			acc0 += ((short)(state_tmp1))*coef_tmp1;  /* high part */
    83f48fc4:	9ec6                	add	t4,t4,a7
			acc0 += ((short)(state_tmp3))*coef_tmp3;  /* high part */
    83f48fc6:	0298083b          	mulw	a6,a6,s1
			acc0 += ((short)(state_tmp2))*coef_tmp2;  /* high part */
    83f48fca:	9eb6                	add	t4,t4,a3
			acc0 += ((short)(state_tmp4))*coef_tmp4;  /* high part */
    83f48fcc:	028e0e3b          	mulw	t3,t3,s0
			acc0 += ((short)(state_tmp3))*coef_tmp3;  /* high part */
    83f48fd0:	9876                	add	a6,a6,t4
			acc0 += ((short)(state_tmp5))*coef_tmp5;  /* high part */
    83f48fd2:	02a78ebb          	mulw	t4,a5,a0
			acc0 += ((short)(state_tmp4))*coef_tmp4;  /* high part */
    83f48fd6:	9e42                	add	t3,t3,a6
			acc0 += ((short)(state_tmp5))*coef_tmp5;  /* high part */
    83f48fd8:	9ef2                	add	t4,t4,t3
			acc0 = MAX(((int)0x80000000), (MIN(0x7fffffff, (((int)acc0)<<2))));  /* Q2.14 */
    83f48fda:	002e9e9b          	slliw	t4,t4,0x2
			pst[-2] = (int)acc0 ;  /* update y(n-1) */
    83f48fde:	ffd72c23          	sw	t4,-8(a4)
		for(j = filter->nq; j > 0; j--) {
    83f48fe2:	f74713e3          	bne	a4,s4,83f48f48 <notch_filter+0x5c>
			acc0 += ((unsigned short)(yn2))*(*pcoef++);  /* low part */
    83f48fe6:	002b1793          	slli	a5,s6,0x2
    83f48fea:	9b3e                	add	s6,s6,a5
    83f48fec:	0b06                	slli	s6,s6,0x1
    83f48fee:	9ada                	add	s5,s5,s6
			acc0 = MAX(((int)0x80000000), (MIN(0x7fffffff, (((int)acc0)<<2))));  /* Q2.14 */
    83f48ff0:	87f6                	mv	a5,t4
			acc0 = (((int)((int)acc0>>16)) * (*pcoef));
    83f48ff2:	000a9703          	lh	a4,0(s5)
		if(acc0>=0)
    83f48ff6:	0407c463          	bltz	a5,83f4903e <notch_filter+0x152>
			acc0 = (((int)((int)acc0>>16)) * (*pcoef));
    83f48ffa:	410ed79b          	sraiw	a5,t4,0x10
    83f48ffe:	02e787bb          	mulw	a5,a5,a4
		acc0 = MAX(((int)0x80000000), (MIN(0x7fffffff, ((acc0)<<3))));  /* Q3.13 */
    83f49002:	078e                	slli	a5,a5,0x3
    83f49004:	00fd5363          	bge	s10,a5,83f4900a <notch_filter+0x11e>
    83f49008:	87ea                	mv	a5,s10
    83f4900a:	01b7d463          	bge	a5,s11,83f49012 <notch_filter+0x126>
    83f4900e:	800007b7          	lui	a5,0x80000
		*ptr2++ = (short)(acc0>>16);
    83f49012:	4107d713          	srai	a4,a5,0x10
    83f49016:	00ec1023          	sh	a4,0(s8)
	for(i = frame_size; i > 0; i--) {
    83f4901a:	6722                	ld	a4,8(sp)
		*ptr2++ = (short)(acc0>>16);
    83f4901c:	0c09                	addi	s8,s8,2
	for(i = frame_size; i > 0; i--) {
    83f4901e:	f0eb94e3          	bne	s7,a4,83f48f26 <notch_filter+0x3a>

	}

}
    83f49022:	7426                	ld	s0,104(sp)
    83f49024:	7486                	ld	s1,96(sp)
    83f49026:	6966                	ld	s2,88(sp)
    83f49028:	69c6                	ld	s3,80(sp)
    83f4902a:	6a26                	ld	s4,72(sp)
    83f4902c:	6a86                	ld	s5,64(sp)
    83f4902e:	7b62                	ld	s6,56(sp)
    83f49030:	7bc2                	ld	s7,48(sp)
    83f49032:	7c22                	ld	s8,40(sp)
    83f49034:	7c82                	ld	s9,32(sp)
    83f49036:	6d62                	ld	s10,24(sp)
    83f49038:	6dc2                	ld	s11,16(sp)
    83f4903a:	6165                	addi	sp,sp,112
    83f4903c:	8082                	ret
			acc0 = -(((int)(-(int)acc0>>16)) * (*pcoef));  /* remove zero-inputs-limit-cycle osicillation */
    83f4903e:	41d00ebb          	negw	t4,t4
    83f49042:	410ed79b          	sraiw	a5,t4,0x10
    83f49046:	02e787bb          	mulw	a5,a5,a4
    83f4904a:	40f007bb          	negw	a5,a5
    83f4904e:	bf55                	j	83f49002 <notch_filter+0x116>
			acc0 = (((int)((int)acc0>>16)) * (*pcoef));
    83f49050:	00078e9b          	sext.w	t4,a5
    83f49054:	bf79                	j	83f48ff2 <notch_filter+0x106>

0000000083f49056 <speech_fft_init>:
#include "fftcore.h"
#include "packfft.h"

/* Function Definitions */
void *speech_fft_init(int size)
{
    83f49056:	1101                	addi	sp,sp,-32
    83f49058:	e426                	sd	s1,8(sp)
    83f4905a:	84aa                	mv	s1,a0
   uintptr_t *ptr =  pvPortMalloc(size);
    83f4905c:	4561                	li	a0,24
    83f4905e:	ec06                	sd	ra,24(sp)
    83f49060:	e822                	sd	s0,16(sp)
    83f49062:	522050ef          	jal	ra,83f4e584 <pvPortMalloc>
   memset(ptr, 0, size);
    83f49066:	4661                	li	a2,24
    83f49068:	4581                	li	a1,0
   uintptr_t *ptr =  pvPortMalloc(size);
    83f4906a:	842a                	mv	s0,a0
   memset(ptr, 0, size);
    83f4906c:	711020ef          	jal	ra,83f4bf7c <memset>
   struct drft_lookup *table;
   table = mem_alloc(sizeof(struct drft_lookup));
   core_drft_init((struct drft_lookup *)table, size);
    83f49070:	8522                	mv	a0,s0
    83f49072:	85a6                	mv	a1,s1
    83f49074:	375020ef          	jal	ra,83f4bbe8 <core_drft_init>
   return (void*)table;
}
    83f49078:	60e2                	ld	ra,24(sp)
    83f4907a:	8522                	mv	a0,s0
    83f4907c:	6442                	ld	s0,16(sp)
    83f4907e:	64a2                	ld	s1,8(sp)
    83f49080:	6105                	addi	sp,sp,32
    83f49082:	8082                	ret

0000000083f49084 <speech_fft_free>:

void speech_fft_free(void *table)
{
    83f49084:	1141                	addi	sp,sp,-16
    83f49086:	e022                	sd	s0,0(sp)
    83f49088:	e406                	sd	ra,8(sp)
    83f4908a:	842a                	mv	s0,a0
   core_drft_clear(table);
    83f4908c:	567020ef          	jal	ra,83f4bdf2 <core_drft_clear>
   vPortFree(ptr);
    83f49090:	8522                	mv	a0,s0
   mem_free(table);
}
    83f49092:	6402                	ld	s0,0(sp)
    83f49094:	60a2                	ld	ra,8(sp)
    83f49096:	0141                	addi	sp,sp,16
    83f49098:	6520506f          	j	83f4e6ea <vPortFree>

0000000083f4909c <speech_fft>:

void speech_fft(void *table, float *in, float *out)
{
   if (in==out) {
      int i;
      float scale = (float)(1./((struct drft_lookup *)table)->n);
    83f4909c:	00052803          	lw	a6,0(a0)
    83f490a0:	00009797          	auipc	a5,0x9
    83f490a4:	2707b707          	fld	fa4,624(a5) # 83f52310 <__func__.1+0x118>
{
    83f490a8:	87ae                	mv	a5,a1
      float scale = (float)(1./((struct drft_lookup *)table)->n);
    83f490aa:	d20807d3          	fcvt.d.w	fa5,a6
{
    83f490ae:	85b2                	mv	a1,a2
      float scale = (float)(1./((struct drft_lookup *)table)->n);
    83f490b0:	1af77753          	fdiv.d	fa4,fa4,fa5
    83f490b4:	40177753          	fcvt.s.d	fa4,fa4
   if (in==out) {
    83f490b8:	02c78563          	beq	a5,a2,83f490e2 <speech_fft+0x46>
      for (i=0;i<((struct drft_lookup *)table)->n;i++)
         out[i] = scale*in[i];
   } else {
      int i;
      float scale = (float)(1./((struct drft_lookup *)table)->n);
      for (i=0;i<((struct drft_lookup *)table)->n;i++)
    83f490bc:	03005163          	blez	a6,83f490de <speech_fft+0x42>
    83f490c0:	86b2                	mv	a3,a2
    83f490c2:	4701                	li	a4,0
         out[i] = scale*in[i];
    83f490c4:	0007a787          	flw	fa5,0(a5)
      for (i=0;i<((struct drft_lookup *)table)->n;i++)
    83f490c8:	0691                	addi	a3,a3,4
    83f490ca:	2705                	addiw	a4,a4,1
         out[i] = scale*in[i];
    83f490cc:	10e7f7d3          	fmul.s	fa5,fa5,fa4
      for (i=0;i<((struct drft_lookup *)table)->n;i++)
    83f490d0:	0791                	addi	a5,a5,4
         out[i] = scale*in[i];
    83f490d2:	fef6ae27          	fsw	fa5,-4(a3)
      for (i=0;i<((struct drft_lookup *)table)->n;i++)
    83f490d6:	00052803          	lw	a6,0(a0)
    83f490da:	ff0745e3          	blt	a4,a6,83f490c4 <speech_fft+0x28>
   }
   core_drft_forward((struct drft_lookup *)table, out);
    83f490de:	0070206f          	j	83f4b8e4 <core_drft_forward>
      for (i=0;i<((struct drft_lookup *)table)->n;i++)
    83f490e2:	86b2                	mv	a3,a2
    83f490e4:	8732                	mv	a4,a2
    83f490e6:	4781                	li	a5,0
    83f490e8:	ff005be3          	blez	a6,83f490de <speech_fft+0x42>
         out[i] = scale*in[i];
    83f490ec:	0006a787          	flw	fa5,0(a3)
      for (i=0;i<((struct drft_lookup *)table)->n;i++)
    83f490f0:	0711                	addi	a4,a4,4
    83f490f2:	2785                	addiw	a5,a5,1
         out[i] = scale*in[i];
    83f490f4:	10e7f7d3          	fmul.s	fa5,fa5,fa4
      for (i=0;i<((struct drft_lookup *)table)->n;i++)
    83f490f8:	0691                	addi	a3,a3,4
         out[i] = scale*in[i];
    83f490fa:	fef72e27          	fsw	fa5,-4(a4)
      for (i=0;i<((struct drft_lookup *)table)->n;i++)
    83f490fe:	4110                	lw	a2,0(a0)
    83f49100:	fec7c6e3          	blt	a5,a2,83f490ec <speech_fft+0x50>
   core_drft_forward((struct drft_lookup *)table, out);
    83f49104:	7e00206f          	j	83f4b8e4 <core_drft_forward>

0000000083f49108 <speech_ifft>:
}

void speech_ifft(void *table, float *in, float *out)
{
    83f49108:	87ae                	mv	a5,a1
    83f4910a:	85b2                	mv	a1,a2
   if (in==out) {
    83f4910c:	02c78263          	beq	a5,a2,83f49130 <speech_ifft+0x28>
      //speech_warning("FFT should not be done in-place");
   } else {
      int i;
      for (i=0;i<((struct drft_lookup *)table)->n;i++)
    83f49110:	4118                	lw	a4,0(a0)
    83f49112:	00e05f63          	blez	a4,83f49130 <speech_ifft+0x28>
    83f49116:	86b2                	mv	a3,a2
    83f49118:	4701                	li	a4,0
         out[i] = in[i];
    83f4911a:	0007a787          	flw	fa5,0(a5)
      for (i=0;i<((struct drft_lookup *)table)->n;i++)
    83f4911e:	2705                	addiw	a4,a4,1
    83f49120:	0791                	addi	a5,a5,4
         out[i] = in[i];
    83f49122:	00f6a027          	fsw	fa5,0(a3)
      for (i=0;i<((struct drft_lookup *)table)->n;i++)
    83f49126:	00052803          	lw	a6,0(a0)
    83f4912a:	0691                	addi	a3,a3,4
    83f4912c:	ff0747e3          	blt	a4,a6,83f4911a <speech_ifft+0x12>
   }
   core_drft_backward((struct drft_lookup *)table, out);
    83f49130:	1290206f          	j	83f4ba58 <core_drft_backward>

0000000083f49134 <c_power>:

/* Function Definitions */
void c_power(const float a[], float y[], int N)
{
  int k;
  for (k = 0; k < N; k++) {
    83f49134:	02c05563          	blez	a2,83f4915e <c_power+0x2a>
    83f49138:	fff6079b          	addiw	a5,a2,-1
    83f4913c:	02079713          	slli	a4,a5,0x20
    83f49140:	01e75793          	srli	a5,a4,0x1e
    83f49144:	00450713          	addi	a4,a0,4
    83f49148:	97ba                	add	a5,a5,a4
    y[k] = a[k] * a[k];
    83f4914a:	00052787          	flw	fa5,0(a0)
  for (k = 0; k < N; k++) {
    83f4914e:	0591                	addi	a1,a1,4
    83f49150:	0511                	addi	a0,a0,4
    y[k] = a[k] * a[k];
    83f49152:	10f7f7d3          	fmul.s	fa5,fa5,fa5
    83f49156:	fef5ae27          	fsw	fa5,-4(a1)
  for (k = 0; k < N; k++) {
    83f4915a:	fef518e3          	bne	a0,a5,83f4914a <c_power+0x16>
  }
}
    83f4915e:	8082                	ret

0000000083f49160 <d_power>:

void d_power(const float a[321], float y[321])
{
    83f49160:	1101                	addi	sp,sp,-32
    83f49162:	e822                	sd	s0,16(sp)
    83f49164:	e426                	sd	s1,8(sp)
    83f49166:	e04a                	sd	s2,0(sp)
    83f49168:	ec06                	sd	ra,24(sp)
    83f4916a:	842a                	mv	s0,a0
    83f4916c:	84ae                	mv	s1,a1
    83f4916e:	50450913          	addi	s2,a0,1284
  int k;
  for (k = 0; k < 321; k++) {
    y[k] = (float)sqrt(a[k]);
    83f49172:	00042507          	flw	fa0,0(s0)
  for (k = 0; k < 321; k++) {
    83f49176:	0491                	addi	s1,s1,4
    83f49178:	0411                	addi	s0,s0,4
    y[k] = (float)sqrt(a[k]);
    83f4917a:	42050553          	fcvt.d.s	fa0,fa0
    83f4917e:	c75f70ef          	jal	ra,83f40df2 <sqrt>
    83f49182:	40157553          	fcvt.s.d	fa0,fa0
    83f49186:	fea4ae27          	fsw	fa0,-4(s1)
  for (k = 0; k < 321; k++) {
    83f4918a:	ff2414e3          	bne	s0,s2,83f49172 <d_power+0x12>
  }
}
    83f4918e:	60e2                	ld	ra,24(sp)
    83f49190:	6442                	ld	s0,16(sp)
    83f49192:	64a2                	ld	s1,8(sp)
    83f49194:	6902                	ld	s2,0(sp)
    83f49196:	6105                	addi	sp,sp,32
    83f49198:	8082                	ret

0000000083f4919a <slope_detection>:
  float temp;

  /*  signal power change based VAD */
  /*  consider small speech at the biginning, ensure it is not suppressed */
  instant_slope = 0;
  for (k = 0; k < 5; k++) {    /* subband based */
    83f4919a:	613c                	ld	a5,64(a0)
    temp = st->amp_inst_band[k] / 4.0F;
    if ((temp - st->amp_inst_band[5 + k] > 0.0F) || (temp - st->amp_inst_band[10 + k] > 0.0F)) {
    83f4919c:	f00006d3          	fmv.w.x	fa3,zero
  instant_slope = 0;
    83f491a0:	4681                	li	a3,0
    83f491a2:	01478613          	addi	a2,a5,20
    83f491a6:	00009717          	auipc	a4,0x9
    83f491aa:	13a72607          	flw	fa2,314(a4) # 83f522e0 <__func__.1+0xe8>
    temp = st->amp_inst_band[k] / 4.0F;
    83f491ae:	0007a787          	flw	fa5,0(a5)
    if ((temp - st->amp_inst_band[5 + k] > 0.0F) || (temp - st->amp_inst_band[10 + k] > 0.0F)) {
    83f491b2:	0147a707          	flw	fa4,20(a5)
    temp = st->amp_inst_band[k] / 4.0F;
    83f491b6:	10c7f7d3          	fmul.s	fa5,fa5,fa2
    if ((temp - st->amp_inst_band[5 + k] > 0.0F) || (temp - st->amp_inst_band[10 + k] > 0.0F)) {
    83f491ba:	08e7f753          	fsub.s	fa4,fa5,fa4
    83f491be:	a0e69753          	flt.s	a4,fa3,fa4
    83f491c2:	cb0d                	beqz	a4,83f491f4 <slope_detection+0x5a>
      instant_slope = 1;
    83f491c4:	4685                	li	a3,1
  for (k = 0; k < 5; k++) {    /* subband based */
    83f491c6:	0791                	addi	a5,a5,4
    83f491c8:	fef613e3          	bne	a2,a5,83f491ae <slope_detection+0x14>
    }
  }

  if (instant_slope == 0) {
    83f491cc:	ee85                	bnez	a3,83f49204 <slope_detection+0x6a>
    temp = st->vad_slope_cnt - 1.0F;
    83f491ce:	06852787          	flw	fa5,104(a0)
    83f491d2:	00009797          	auipc	a5,0x9
    83f491d6:	07e7a687          	flw	fa3,126(a5) # 83f52250 <__func__.1+0x58>
    if (0.0F > temp) {
    83f491da:	f0000753          	fmv.w.x	fa4,zero
    temp = st->vad_slope_cnt - 1.0F;
    83f491de:	08d7f7d3          	fsub.s	fa5,fa5,fa3
    if (0.0F > temp) {
    83f491e2:	a0e797d3          	flt.s	a5,fa5,fa4
    83f491e6:	e3bd                	bnez	a5,83f4924c <slope_detection+0xb2>
      temp = 0.0F;
    }

    st->vad_slope_cnt = temp;
    if (temp == 0.0F) {
    83f491e8:	a0e7a7d3          	feq.s	a5,fa5,fa4
    st->vad_slope_cnt = temp;
    83f491ec:	06f52427          	fsw	fa5,104(a0)
    if (temp == 0.0F) {
    83f491f0:	e3a5                	bnez	a5,83f49250 <slope_detection+0xb6>
        st->vad_slope_cnt = 4.0F;
      }
    }
  }

}
    83f491f2:	8082                	ret
    if ((temp - st->amp_inst_band[5 + k] > 0.0F) || (temp - st->amp_inst_band[10 + k] > 0.0F)) {
    83f491f4:	0287a707          	flw	fa4,40(a5)
    83f491f8:	08e7f7d3          	fsub.s	fa5,fa5,fa4
    83f491fc:	a0f69753          	flt.s	a4,fa3,fa5
    83f49200:	f371                	bnez	a4,83f491c4 <slope_detection+0x2a>
    83f49202:	b7d1                	j	83f491c6 <slope_detection+0x2c>
    if (st->Fs == 16000.0F) {
    83f49204:	09c52787          	flw	fa5,156(a0)
    st->vad_slope = 1.0F;
    83f49208:	00009797          	auipc	a5,0x9
    83f4920c:	0487a707          	flw	fa4,72(a5) # 83f52250 <__func__.1+0x58>
    if (st->Fs == 16000.0F) {
    83f49210:	00009797          	auipc	a5,0x9
    83f49214:	0447a687          	flw	fa3,68(a5) # 83f52254 <__func__.1+0x5c>
    83f49218:	a0d7a7d3          	feq.s	a5,fa5,fa3
    st->vad_slope = 1.0F;
    83f4921c:	06e52627          	fsw	fa4,108(a0)
    if (st->Fs == 16000.0F) {
    83f49220:	cb81                	beqz	a5,83f49230 <slope_detection+0x96>
      st->vad_slope_cnt = 8.0F;
    83f49222:	00009797          	auipc	a5,0x9
    83f49226:	1f67a787          	flw	fa5,502(a5) # 83f52418 <__func__.1+0x220>
    83f4922a:	06f52427          	fsw	fa5,104(a0)
    83f4922e:	8082                	ret
      if (st->Fs == 8000.0F) {
    83f49230:	00009797          	auipc	a5,0x9
    83f49234:	1847a707          	flw	fa4,388(a5) # 83f523b4 <__func__.1+0x1bc>
    83f49238:	a0e7a7d3          	feq.s	a5,fa5,fa4
    83f4923c:	dbdd                	beqz	a5,83f491f2 <slope_detection+0x58>
        st->vad_slope_cnt = 4.0F;
    83f4923e:	00009797          	auipc	a5,0x9
    83f49242:	1727a787          	flw	fa5,370(a5) # 83f523b0 <__func__.1+0x1b8>
    83f49246:	06f52427          	fsw	fa5,104(a0)
}
    83f4924a:	8082                	ret
    st->vad_slope_cnt = temp;
    83f4924c:	06052423          	sw	zero,104(a0)
      st->vad_slope = 0.0F;
    83f49250:	06052623          	sw	zero,108(a0)
    83f49254:	8082                	ret

0000000083f49256 <c_sum>:
float c_sum(const float x[], int N)
{
  float y;
  int k;
  y = x[0];
  for (k = 0; k < N-1; k++) {
    83f49256:	4785                	li	a5,1
  y = x[0];
    83f49258:	00052507          	flw	fa0,0(a0)
  for (k = 0; k < N-1; k++) {
    83f4925c:	02b7d363          	bge	a5,a1,83f49282 <c_sum+0x2c>
    83f49260:	ffe5879b          	addiw	a5,a1,-2
    83f49264:	02079713          	slli	a4,a5,0x20
    83f49268:	01e75793          	srli	a5,a4,0x1e
    83f4926c:	00850713          	addi	a4,a0,8
    83f49270:	97ba                	add	a5,a5,a4
    83f49272:	0511                	addi	a0,a0,4
    y += x[k + 1];
    83f49274:	00052787          	flw	fa5,0(a0)
  for (k = 0; k < N-1; k++) {
    83f49278:	0511                	addi	a0,a0,4
    y += x[k + 1];
    83f4927a:	00f57553          	fadd.s	fa0,fa0,fa5
  for (k = 0; k < N-1; k++) {
    83f4927e:	fef51be3          	bne	a0,a5,83f49274 <c_sum+0x1e>
  }

  return y;
}
    83f49282:	8082                	ret

0000000083f49284 <a_abs>:

/* Function Definitions */
void a_abs(const creal32_T a[321], float y[321], int N)
{
  int k;
  for (k = 0; k < N; k++) {
    83f49284:	04c05463          	blez	a2,83f492cc <a_abs+0x48>
{
    83f49288:	1101                	addi	sp,sp,-32
    83f4928a:	e04a                	sd	s2,0(sp)
    83f4928c:	fff6091b          	addiw	s2,a2,-1
    83f49290:	02091793          	slli	a5,s2,0x20
    83f49294:	01d7d913          	srli	s2,a5,0x1d
    83f49298:	00850793          	addi	a5,a0,8
    83f4929c:	e822                	sd	s0,16(sp)
    83f4929e:	e426                	sd	s1,8(sp)
    83f492a0:	ec06                	sd	ra,24(sp)
    83f492a2:	842a                	mv	s0,a0
    83f492a4:	84ae                	mv	s1,a1
    83f492a6:	993e                	add	s2,s2,a5
    y[k] = rt_hypotf(a[k].re, a[k].im);
    83f492a8:	00442587          	flw	fa1,4(s0)
    83f492ac:	00042507          	flw	fa0,0(s0)
  for (k = 0; k < N; k++) {
    83f492b0:	0491                	addi	s1,s1,4
    83f492b2:	0421                	addi	s0,s0,8
    y[k] = rt_hypotf(a[k].re, a[k].im);
    83f492b4:	39b020ef          	jal	ra,83f4be4e <rt_hypotf>
    83f492b8:	fea4ae27          	fsw	fa0,-4(s1)
  for (k = 0; k < N; k++) {
    83f492bc:	ff2416e3          	bne	s0,s2,83f492a8 <a_abs+0x24>
  }
}
    83f492c0:	60e2                	ld	ra,24(sp)
    83f492c2:	6442                	ld	s0,16(sp)
    83f492c4:	64a2                	ld	s1,8(sp)
    83f492c6:	6902                	ld	s2,0(sp)
    83f492c8:	6105                	addi	sp,sp,32
    83f492ca:	8082                	ret
    83f492cc:	8082                	ret

0000000083f492ce <AGC>:
#include "agc_init.h"
#include "agc.h"

/* Function Definitions */
void AGC(short *sin, short *sout, agc_struct *agc_obj, ssp_para_struct *para_obj, boolean_T speech_vad, boolean_T st_vad, int nenr_silence_time, int nenr_silence_cnt, short path)
{
    83f492ce:	7175                	addi	sp,sp,-144
    83f492d0:	f86a                	sd	s10,48(sp)
  short sig_out;
  short sig_err;
  int temp32;
  int diff;

  if (1 == path) {
    83f492d2:	09011d03          	lh	s10,144(sp)
{
    83f492d6:	e122                	sd	s0,128(sp)
    83f492d8:	fca6                	sd	s1,120(sp)
    83f492da:	e4de                	sd	s7,72(sp)
    83f492dc:	e506                	sd	ra,136(sp)
    83f492de:	f8ca                	sd	s2,112(sp)
    83f492e0:	f4ce                	sd	s3,104(sp)
    83f492e2:	f0d2                	sd	s4,96(sp)
    83f492e4:	ecd6                	sd	s5,88(sp)
    83f492e6:	e8da                	sd	s6,80(sp)
    83f492e8:	e0e2                	sd	s8,64(sp)
    83f492ea:	fc66                	sd	s9,56(sp)
    83f492ec:	f46e                	sd	s11,40(sp)
  if (1 == path) {
    83f492ee:	4305                	li	t1,1
{
    83f492f0:	e436                	sd	a3,8(sp)
    83f492f2:	84aa                	mv	s1,a0
    83f492f4:	842e                	mv	s0,a1
    83f492f6:	8bb2                	mv	s7,a2
  if (1 == path) {
    83f492f8:	386d0263          	beq	s10,t1,83f4967c <AGC+0x3ae>
  		}
		#endif
  	}
  }

  if (nenr_silence_cnt < nenr_silence_time) {    /* be in silence to solve CODEC initial random signal issue and not to perform AGC as well */
    83f492fc:	0108d663          	bge	a7,a6,83f49308 <AGC+0x3a>
	agc_obj->agc_vad1 = false;
    83f49300:	020b8423          	sb	zero,40(s7)
	agc_obj->agc_vad1_cnt = 0;
    83f49304:	020b9523          	sh	zero,42(s7)
  }

  agc_obj->env = envelope(sin, agc_obj->frame_size);	/* calculate once every 20ms@NB or 10ms@WB */
    83f49308:	032b9583          	lh	a1,50(s7)
    83f4930c:	8526                	mv	a0,s1
    83f4930e:	6a4000ef          	jal	ra,83f499b2 <envelope>

  unit_gain = (1L << (agc_obj->max_gain));
    83f49312:	000b9703          	lh	a4,0(s7)

  frame_signal_identify = 0;
  if (agc_obj->env > agc_obj->pcb_noise_thrd)
    83f49316:	018b9683          	lh	a3,24(s7)
  unit_gain = (1L << (agc_obj->max_gain));
    83f4931a:	4305                	li	t1,1
  	frame_signal_identify = 1;    /* no matter it is noise or speech signals */

  for (i = 0; i < agc_obj->frame_size; i++) {
    83f4931c:	032b9783          	lh	a5,50(s7)
  unit_gain = (1L << (agc_obj->max_gain));
    83f49320:	00e31333          	sll	t1,t1,a4
    83f49324:	01031b1b          	slliw	s6,t1,0x10
  agc_obj->env = envelope(sin, agc_obj->frame_size);	/* calculate once every 20ms@NB or 10ms@WB */
    83f49328:	e82a                	sd	a0,16(sp)
    83f4932a:	00ab9423          	sh	a0,8(s7)
  if (agc_obj->env > agc_obj->pcb_noise_thrd)
    83f4932e:	ec36                	sd	a3,24(sp)
  unit_gain = (1L << (agc_obj->max_gain));
    83f49330:	410b5b1b          	sraiw	s6,s6,0x10
  for (i = 0; i < agc_obj->frame_size; i++) {
    83f49334:	28f05763          	blez	a5,83f495c2 <AGC+0x2f4>

	#if (1)    /* smooth output to avoid pop noise when unit gain changed */
	if (agc_obj->smooth_cnt) {
		sig_out = ((agc_obj->alpha * agc_obj->sout_hist) >> 15) + ((agc_obj->alpha2 * sig_out) >> 15);
		agc_obj->alpha -= 3276;    /* each step 1/10 */
		agc_obj ->alpha2 += 3276;    /* each step 1/10 */
    83f49338:	6905                	lui	s2,0x1
    83f4933a:	ccc9071b          	addiw	a4,s2,-820
  for (i = 0; i < agc_obj->frame_size; i++) {
    83f4933e:	4c81                	li	s9,0
		agc_obj ->alpha2 += 3276;    /* each step 1/10 */
    83f49340:	c23a                	sw	a4,4(sp)
  	if (agc_obj->unit_gain_change_det == true) {
    83f49342:	01fbc703          	lbu	a4,31(s7)
  	sig_in = sin[i];
    83f49346:	001c9a13          	slli	s4,s9,0x1
		agc_obj->gain32 = (((int)(agc_obj->gain32 >> 16) * MINUS_halfdB) << 1);	    /* MINUS_halfdB is Q1.15, so gain32 is Q1.31 */
    83f4934a:	6c21                	lui	s8,0x8
		agc_obj->alpha -= 3276;    /* each step 1/10 */
    83f4934c:	79fd                	lui	s3,0xfffff
  	sig_in = sin[i];
    83f4934e:	01448933          	add	s2,s1,s4
  	if (agc_obj->unit_gain_change_det == true) {
    83f49352:	4a85                	li	s5,1
  	sig_in = sin[i];
    83f49354:	00091d83          	lh	s11,0(s2) # 1000 <_EL1_STACK_SIZE+0x800>
  for (i = 0; i < agc_obj->frame_size; i++) {
    83f49358:	87aa                	mv	a5,a0
		agc_obj->gain32 = (((int)(agc_obj->gain32 >> 16) * MINUS_halfdB) << 1);	    /* MINUS_halfdB is Q1.15, so gain32 is Q1.31 */
    83f4935a:	8d4c0c1b          	addiw	s8,s8,-1836
		agc_obj->alpha -= 3276;    /* each step 1/10 */
    83f4935e:	3349899b          	addiw	s3,s3,820
  	if (agc_obj->unit_gain_change_det == true) {
    83f49362:	15570563          	beq	a4,s5,83f494ac <AGC+0x1de>
	tmp16 = agc_obj->gain32 >> 16;    /* leave space for gain>1, gain has Q format, unit_gain is 1 */
    83f49366:	004baf03          	lw	t5,4(s7)
				agc_obj->target_high = (agc_obj->env*unit_gain) >> 15;    /* better for keeping speech fidelity */
    83f4936a:	2781                	sext.w	a5,a5
	if (1 == path) {
    83f4936c:	1b5d0a63          	beq	s10,s5,83f49520 <AGC+0x252>
	if ( agc_obj->pcb_noise_cnt < agc_obj->pcb_noise_hold_time) {
    83f49370:	01ab9583          	lh	a1,26(s7)
    83f49374:	01cb9683          	lh	a3,28(s7)
	tmp16 = agc_obj->gain32 >> 16;    /* leave space for gain>1, gain has Q format, unit_gain is 1 */
    83f49378:	410f571b          	sraiw	a4,t5,0x10
    83f4937c:	410f5e93          	srai	t4,t5,0x10
	if ( agc_obj->pcb_noise_cnt < agc_obj->pcb_noise_hold_time) {
    83f49380:	04d5d563          	bge	a1,a3,83f493ca <AGC+0xfc>
		tmp16 = (agc_obj->env*unit_gain) >> 15;
    83f49384:	02fb053b          	mulw	a0,s6,a5
		if (tmp16 < agc_obj->target_low)
    83f49388:	00ab9583          	lh	a1,10(s7)
		if (tmp16 > agc_obj->target_high)
    83f4938c:	00eb9683          	lh	a3,14(s7)
	sig_err = ((int)agc_obj->env)*((int)tmp16) >> 15;    /* use the MSB */
    83f49390:	02f707bb          	mulw	a5,a4,a5
		tmp16 = (agc_obj->env*unit_gain) >> 15;
    83f49394:	40f5551b          	sraiw	a0,a0,0xf
    83f49398:	0105171b          	slliw	a4,a0,0x10
    83f4939c:	4107571b          	sraiw	a4,a4,0x10
		if (tmp16 < agc_obj->target_low)
    83f493a0:	00070e9b          	sext.w	t4,a4
	sig_err = ((int)agc_obj->env)*((int)tmp16) >> 15;    /* use the MSB */
    83f493a4:	40f7d51b          	sraiw	a0,a5,0xf
			diff = (agc_obj->target_low) - sig_err;
    83f493a8:	0105151b          	slliw	a0,a0,0x10
    83f493ac:	4105579b          	sraiw	a5,a0,0x10
    83f493b0:	853e                	mv	a0,a5
		if (tmp16 < agc_obj->target_low)
    83f493b2:	26b75363          	bge	a4,a1,83f49618 <AGC+0x34a>
		if (tmp16 > agc_obj->target_high)
    83f493b6:	27d6c363          	blt	a3,t4,83f4961c <AGC+0x34e>
			diff = (agc_obj->target_low) - sig_err;
    83f493ba:	40f5853b          	subw	a0,a1,a5
		update_gain(diff, agc_obj);	   /* update agc_obj->gain32 sample by sample */
    83f493be:	85de                	mv	a1,s7
    83f493c0:	648000ef          	jal	ra,83f49a08 <update_gain>
	temp32 = ((int)(agc_obj->gain32 >> 16)* (int)(sig_in)) >> agc_obj->unit_gain;
    83f493c4:	006b9e83          	lh	t4,6(s7)
    83f493c8:	8776                	mv	a4,t4
    83f493ca:	03dd87bb          	mulw	a5,s11,t4
    83f493ce:	002b9683          	lh	a3,2(s7)
	while (ABS(temp32) > 32767L) {    /* overflow limiter */
    83f493d2:	6521                	lui	a0,0x8
	temp32 = ((int)(agc_obj->gain32 >> 16)* (int)(sig_in)) >> agc_obj->unit_gain;
    83f493d4:	000d859b          	sext.w	a1,s11
    83f493d8:	40d7d7bb          	sraw	a5,a5,a3
	while (ABS(temp32) > 32767L) {    /* overflow limiter */
    83f493dc:	41f7df1b          	sraiw	t5,a5,0x1f
    83f493e0:	00ff47b3          	xor	a5,t5,a5
    83f493e4:	41e787bb          	subw	a5,a5,t5
    83f493e8:	02a7c863          	blt	a5,a0,83f49418 <AGC+0x14a>
		agc_obj->gain32 = (((int)(agc_obj->gain32 >> 16) * MINUS_halfdB) << 1);	    /* MINUS_halfdB is Q1.15, so gain32 is Q1.31 */
    83f493ec:	0387073b          	mulw	a4,a4,s8
    83f493f0:	00171f1b          	slliw	t5,a4,0x1
		temp32 = ((int)(agc_obj->gain32 >> 16)*(int)(sig_in)) >> agc_obj->unit_gain;
    83f493f4:	410f5e9b          	sraiw	t4,t5,0x10
    83f493f8:	03d587bb          	mulw	a5,a1,t4
	while (ABS(temp32) > 32767L) {    /* overflow limiter */
    83f493fc:	410f571b          	sraiw	a4,t5,0x10
		temp32 = ((int)(agc_obj->gain32 >> 16)*(int)(sig_in)) >> agc_obj->unit_gain;
    83f49400:	40d7d7bb          	sraw	a5,a5,a3
	while (ABS(temp32) > 32767L) {    /* overflow limiter */
    83f49404:	41f7df9b          	sraiw	t6,a5,0x1f
    83f49408:	00ffc7b3          	xor	a5,t6,a5
    83f4940c:	41f787bb          	subw	a5,a5,t6
    83f49410:	fca7dee3          	bge	a5,a0,83f493ec <AGC+0x11e>
    83f49414:	01eba223          	sw	t5,4(s7)
	sig_out = sin[i]*(agc_obj->gain32 >> 16) >> agc_obj->unit_gain;
    83f49418:	00091783          	lh	a5,0(s2)
	if (agc_obj->smooth_cnt) {
    83f4941c:	022b9703          	lh	a4,34(s7)
	sig_out = sin[i]*(agc_obj->gain32 >> 16) >> agc_obj->unit_gain;
    83f49420:	03d78ebb          	mulw	t4,a5,t4
    83f49424:	40ded6bb          	sraw	a3,t4,a3
    83f49428:	0106969b          	slliw	a3,a3,0x10
    83f4942c:	4106d69b          	sraiw	a3,a3,0x10
	if (agc_obj->smooth_cnt) {
    83f49430:	cf1d                	beqz	a4,83f4946e <AGC+0x1a0>
		sig_out = ((agc_obj->alpha * agc_obj->sout_hist) >> 15) + ((agc_obj->alpha2 * sig_out) >> 15);
    83f49432:	026b9583          	lh	a1,38(s7)
    83f49436:	024b9883          	lh	a7,36(s7)
    83f4943a:	020b9783          	lh	a5,32(s7)
    83f4943e:	02d5853b          	mulw	a0,a1,a3
		agc_obj ->alpha2 += 3276;    /* each step 1/10 */
    83f49442:	4692                	lw	a3,4(sp)
		agc_obj->alpha -= 3276;    /* each step 1/10 */
    83f49444:	01198ebb          	addw	t4,s3,a7
		agc_obj->smooth_cnt--;
    83f49448:	377d                	addiw	a4,a4,-1
		agc_obj ->alpha2 += 3276;    /* each step 1/10 */
    83f4944a:	9db5                	addw	a1,a1,a3
		agc_obj->alpha -= 3276;    /* each step 1/10 */
    83f4944c:	03db9223          	sh	t4,36(s7)
		agc_obj ->alpha2 += 3276;    /* each step 1/10 */
    83f49450:	02bb9323          	sh	a1,38(s7)
		agc_obj->smooth_cnt--;
    83f49454:	02eb9123          	sh	a4,34(s7)
		sig_out = ((agc_obj->alpha * agc_obj->sout_hist) >> 15) + ((agc_obj->alpha2 * sig_out) >> 15);
    83f49458:	031786bb          	mulw	a3,a5,a7
    83f4945c:	40f5579b          	sraiw	a5,a0,0xf
    83f49460:	40f6d69b          	sraiw	a3,a3,0xf
    83f49464:	9ebd                	addw	a3,a3,a5
    83f49466:	0106969b          	slliw	a3,a3,0x10
    83f4946a:	4106d69b          	sraiw	a3,a3,0x10
	}
	#endif

  	sout[i] = sig_out;
    83f4946e:	01440633          	add	a2,s0,s4
    83f49472:	00d61023          	sh	a3,0(a2)

	/* modify for release processing, automaticly drop 6dB on max gain if big signal come in */
	if (agc_obj->unit_gain_change == true) {
    83f49476:	01ebc783          	lbu	a5,30(s7)
    83f4947a:	11578963          	beq	a5,s5,83f4958c <AGC+0x2be>
		if (ABS(sig_in) > (short)(0.223*32768)) {
			agc_obj->unit_gain_change = false;
			agc_obj->unit_gain_change_det = true;
		}
	}
	agc_obj->sout_hist = sig_out;    /* update y(n-1) */
    83f4947e:	2c85                	addiw	s9,s9,1
  for (i = 0; i < agc_obj->frame_size; i++) {
    83f49480:	032b9783          	lh	a5,50(s7)
    83f49484:	010c9c9b          	slliw	s9,s9,0x10
	agc_obj->sout_hist = sig_out;    /* update y(n-1) */
    83f49488:	02db9023          	sh	a3,32(s7)
  for (i = 0; i < agc_obj->frame_size; i++) {
    83f4948c:	410cdc9b          	sraiw	s9,s9,0x10
    83f49490:	12fcd963          	bge	s9,a5,83f495c2 <AGC+0x2f4>
  	if (agc_obj->unit_gain_change_det == true) {
    83f49494:	01fbc703          	lbu	a4,31(s7)
  	sig_in = sin[i];
    83f49498:	001c9a13          	slli	s4,s9,0x1
    83f4949c:	01448933          	add	s2,s1,s4
		if (ABS(agc_obj->env) < (short)(0.0316*32768)) {
    83f494a0:	008b9783          	lh	a5,8(s7)
  	sig_in = sin[i];
    83f494a4:	00091d83          	lh	s11,0(s2)
  	if (agc_obj->unit_gain_change_det == true) {
    83f494a8:	eb571fe3          	bne	a4,s5,83f49366 <AGC+0x98>
		if (ABS(agc_obj->env) < (short)(0.0316*32768)) {
    83f494ac:	40f7d69b          	sraiw	a3,a5,0xf
    83f494b0:	00d7c733          	xor	a4,a5,a3
    83f494b4:	9f15                	subw	a4,a4,a3
    83f494b6:	1742                	slli	a4,a4,0x30
    83f494b8:	9341                	srli	a4,a4,0x30
    83f494ba:	40a00693          	li	a3,1034
    83f494be:	eae6e4e3          	bltu	a3,a4,83f49366 <AGC+0x98>
			agc_obj->max_gain++;    /* drop 6dB to max gain */
    83f494c2:	000bd703          	lhu	a4,0(s7)
			agc_obj->target_low = (agc_obj->target_low_Q15*unit_gain) >> 15;
    83f494c6:	00cb9683          	lh	a3,12(s7)
			agc_obj->target_high = (agc_obj->target_high_Q15*unit_gain) >> 15;
    83f494ca:	010b9583          	lh	a1,16(s7)
			agc_obj->max_gain++;    /* drop 6dB to max gain */
    83f494ce:	2705                	addiw	a4,a4,1
    83f494d0:	0107171b          	slliw	a4,a4,0x10
    83f494d4:	4107571b          	sraiw	a4,a4,0x10
			unit_gain = (1L << (agc_obj->max_gain));
    83f494d8:	00ea9533          	sll	a0,s5,a4
    83f494dc:	01051b1b          	slliw	s6,a0,0x10
    83f494e0:	410b5b1b          	sraiw	s6,s6,0x10
			agc_obj->max_gain++;    /* drop 6dB to max gain */
    83f494e4:	00eb9023          	sh	a4,0(s7)
			agc_obj->unit_gain = agc_obj->max_gain;
    83f494e8:	00eb9123          	sh	a4,2(s7)
			agc_obj->smooth_cnt = 10;
    83f494ec:	4729                	li	a4,10
			agc_obj->target_high = (agc_obj->target_high_Q15*unit_gain) >> 15;
    83f494ee:	036585bb          	mulw	a1,a1,s6
			agc_obj->smooth_cnt = 10;
    83f494f2:	02eb9123          	sh	a4,34(s7)
			agc_obj->gain32 = unit_gain << 16;
    83f494f6:	0105151b          	slliw	a0,a0,0x10
    83f494fa:	00aba223          	sw	a0,4(s7)
			agc_obj->unit_gain_change_det = false;
    83f494fe:	000b8fa3          	sb	zero,31(s7)
			agc_obj->gain32 = unit_gain << 16;
    83f49502:	010b1f13          	slli	t5,s6,0x10
				agc_obj->target_high = (agc_obj->env*unit_gain) >> 15;    /* better for keeping speech fidelity */
    83f49506:	2781                	sext.w	a5,a5
			agc_obj->target_low = (agc_obj->target_low_Q15*unit_gain) >> 15;
    83f49508:	0366873b          	mulw	a4,a3,s6
			agc_obj->target_high = (agc_obj->target_high_Q15*unit_gain) >> 15;
    83f4950c:	40f5d69b          	sraiw	a3,a1,0xf
    83f49510:	00db9723          	sh	a3,14(s7)
			agc_obj->target_low = (agc_obj->target_low_Q15*unit_gain) >> 15;
    83f49514:	40f7571b          	sraiw	a4,a4,0xf
    83f49518:	00eb9523          	sh	a4,10(s7)
	if (1 == path) {
    83f4951c:	e55d1ae3          	bne	s10,s5,83f49370 <AGC+0xa2>
		if (para_obj->para_agc_vad_ena == true) {
    83f49520:	6722                	ld	a4,8(sp)
    83f49522:	01a74703          	lbu	a4,26(a4)
    83f49526:	e5a715e3          	bne	a4,s10,83f49370 <AGC+0xa2>
			if ((agc_obj->agc_vad1 == true) && (agc_obj->agc_vad2 == true)) {
    83f4952a:	028bc683          	lbu	a3,40(s7)
  				agc_obj->target_high = (agc_obj->target_high_Q15*unit_gain) >> 15;
    83f4952e:	000b071b          	sext.w	a4,s6
			if ((agc_obj->agc_vad1 == true) && (agc_obj->agc_vad2 == true)) {
    83f49532:	17a68b63          	beq	a3,s10,83f496a8 <AGC+0x3da>
				agc_obj->target_high = (agc_obj->env*unit_gain) >> 15;    /* better for keeping speech fidelity */
    83f49536:	02e786bb          	mulw	a3,a5,a4
	if ( agc_obj->pcb_noise_cnt < agc_obj->pcb_noise_hold_time) {
    83f4953a:	01cb9503          	lh	a0,28(s7)
    83f4953e:	01ab9583          	lh	a1,26(s7)
				agc_obj->agc_vad3 = false;
    83f49542:	020b8823          	sb	zero,48(s7)
	tmp16 = agc_obj->gain32 >> 16;    /* leave space for gain>1, gain has Q format, unit_gain is 1 */
    83f49546:	410f571b          	sraiw	a4,t5,0x10
    83f4954a:	410f5e93          	srai	t4,t5,0x10
				agc_obj->target_high = (agc_obj->env*unit_gain) >> 15;    /* better for keeping speech fidelity */
    83f4954e:	40f6d69b          	sraiw	a3,a3,0xf
    83f49552:	0106969b          	slliw	a3,a3,0x10
    83f49556:	4106d69b          	sraiw	a3,a3,0x10
    83f4955a:	00db9723          	sh	a3,14(s7)
				agc_obj->target_low = (agc_obj->env*unit_gain) >> 15;     /* better for keeping speech fidelity */
    83f4955e:	00db9523          	sh	a3,10(s7)
	if ( agc_obj->pcb_noise_cnt < agc_obj->pcb_noise_hold_time) {
    83f49562:	e6a5d4e3          	bge	a1,a0,83f493ca <AGC+0xfc>
		tmp16 = (agc_obj->env*unit_gain) >> 15;
    83f49566:	02fb06bb          	mulw	a3,s6,a5
	sig_err = ((int)agc_obj->env)*((int)tmp16) >> 15;    /* use the MSB */
    83f4956a:	02f707bb          	mulw	a5,a4,a5
		tmp16 = (agc_obj->env*unit_gain) >> 15;
    83f4956e:	40f6d71b          	sraiw	a4,a3,0xf
    83f49572:	0107171b          	slliw	a4,a4,0x10
    83f49576:	4107571b          	sraiw	a4,a4,0x10
	sig_err = ((int)agc_obj->env)*((int)tmp16) >> 15;    /* use the MSB */
    83f4957a:	40f7d79b          	sraiw	a5,a5,0xf
			diff = (agc_obj->target_low) - sig_err;
    83f4957e:	0107979b          	slliw	a5,a5,0x10
    83f49582:	4107d79b          	sraiw	a5,a5,0x10
			diff = tmp16 - sig_err;
    83f49586:	40f7053b          	subw	a0,a4,a5
    83f4958a:	bd15                	j	83f493be <AGC+0xf0>
		if (ABS(sig_in) > (short)(0.223*32768)) {
    83f4958c:	40fdd71b          	sraiw	a4,s11,0xf
    83f49590:	00edc7b3          	xor	a5,s11,a4
    83f49594:	9f99                	subw	a5,a5,a4
    83f49596:	17c2                	slli	a5,a5,0x30
    83f49598:	6709                	lui	a4,0x2
    83f4959a:	93c1                	srli	a5,a5,0x30
    83f4959c:	c8b70713          	addi	a4,a4,-885 # 1c8b <_EL1_STACK_SIZE+0x148b>
    83f495a0:	ecf77fe3          	bgeu	a4,a5,83f4947e <AGC+0x1b0>
			agc_obj->unit_gain_change = false;
    83f495a4:	10000793          	li	a5,256
    83f495a8:	00fb9f23          	sh	a5,30(s7)
	agc_obj->sout_hist = sig_out;    /* update y(n-1) */
    83f495ac:	2c85                	addiw	s9,s9,1
  for (i = 0; i < agc_obj->frame_size; i++) {
    83f495ae:	032b9783          	lh	a5,50(s7)
    83f495b2:	010c9c9b          	slliw	s9,s9,0x10
	agc_obj->sout_hist = sig_out;    /* update y(n-1) */
    83f495b6:	02db9023          	sh	a3,32(s7)
  for (i = 0; i < agc_obj->frame_size; i++) {
    83f495ba:	410cdc9b          	sraiw	s9,s9,0x10
    83f495be:	ecfccbe3          	blt	s9,a5,83f49494 <AGC+0x1c6>

  }

  #if (1)
  if (frame_signal_identify == 0) {
    83f495c2:	44c2                	lw	s1,16(sp)
    83f495c4:	67e2                	ld	a5,24(sp)
  	agc_obj->pcb_noise_cnt++;
  	agc_obj->pcb_noise_cnt = MIN(agc_obj->pcb_noise_hold_time, agc_obj->pcb_noise_cnt);
    83f495c6:	01cb9703          	lh	a4,28(s7)
  if (frame_signal_identify == 0) {
    83f495ca:	0497cc63          	blt	a5,s1,83f49622 <AGC+0x354>
  	agc_obj->pcb_noise_cnt++;
    83f495ce:	01abd783          	lhu	a5,26(s7)
  	agc_obj->pcb_noise_cnt = MIN(agc_obj->pcb_noise_hold_time, agc_obj->pcb_noise_cnt);
    83f495d2:	0007069b          	sext.w	a3,a4
  	agc_obj->pcb_noise_cnt++;
    83f495d6:	2785                	addiw	a5,a5,1
  	agc_obj->pcb_noise_cnt = MIN(agc_obj->pcb_noise_hold_time, agc_obj->pcb_noise_cnt);
    83f495d8:	0107961b          	slliw	a2,a5,0x10
    83f495dc:	4106561b          	sraiw	a2,a2,0x10
    83f495e0:	0cc74263          	blt	a4,a2,83f496a4 <AGC+0x3d6>
    83f495e4:	0107979b          	slliw	a5,a5,0x10
    83f495e8:	4107d79b          	sraiw	a5,a5,0x10
    83f495ec:	00fb9d23          	sh	a5,26(s7)
  }
  else
  	agc_obj->pcb_noise_cnt = 0;

  if ( agc_obj->pcb_noise_cnt == agc_obj->pcb_noise_hold_time) {
    83f495f0:	04d78063          	beq	a5,a3,83f49630 <AGC+0x362>
  	if ((agc_obj->gain32 >> 16) < unit_gain)
  		agc_obj->gain32 = unit_gain << 16;
  }
  #endif

  if (1 == path) {
    83f495f4:	4785                	li	a5,1
    83f495f6:	06fd0963          	beq	s10,a5,83f49668 <AGC+0x39a>
  	if (para_obj->para_agc_vad_ena == true) {
  		agc_obj->agc_vad_hist = agc_obj->agc_vad3;
  	}
  }

}
    83f495fa:	60aa                	ld	ra,136(sp)
    83f495fc:	640a                	ld	s0,128(sp)
    83f495fe:	74e6                	ld	s1,120(sp)
    83f49600:	7946                	ld	s2,112(sp)
    83f49602:	79a6                	ld	s3,104(sp)
    83f49604:	7a06                	ld	s4,96(sp)
    83f49606:	6ae6                	ld	s5,88(sp)
    83f49608:	6b46                	ld	s6,80(sp)
    83f4960a:	6ba6                	ld	s7,72(sp)
    83f4960c:	6c06                	ld	s8,64(sp)
    83f4960e:	7ce2                	ld	s9,56(sp)
    83f49610:	7d42                	ld	s10,48(sp)
    83f49612:	7da2                	ld	s11,40(sp)
    83f49614:	6149                	addi	sp,sp,144
    83f49616:	8082                	ret
		if (tmp16 > agc_obj->target_high)
    83f49618:	f7d6d7e3          	bge	a3,t4,83f49586 <AGC+0x2b8>
			diff = (agc_obj->target_high) - sig_err;
    83f4961c:	40a6853b          	subw	a0,a3,a0
		if (tmp16 >= agc_obj->target_low && tmp16 <= agc_obj->target_high)
    83f49620:	bb79                	j	83f493be <AGC+0xf0>
  	agc_obj->pcb_noise_cnt = 0;
    83f49622:	4781                	li	a5,0
    83f49624:	0007069b          	sext.w	a3,a4
    83f49628:	00fb9d23          	sh	a5,26(s7)
  if ( agc_obj->pcb_noise_cnt == agc_obj->pcb_noise_hold_time) {
    83f4962c:	fcd794e3          	bne	a5,a3,83f495f4 <AGC+0x326>
	tmp16 = (agc_obj->gain32 >> 16) >> 7;
    83f49630:	004ba783          	lw	a5,4(s7)
    83f49634:	4177d713          	srai	a4,a5,0x17
  	tmp16 = MAX(tmp16, 1);
    83f49638:	86ba                	mv	a3,a4
  	tmp16 = (agc_obj->gain32 >> 16) - tmp16;
    83f4963a:	4107d79b          	sraiw	a5,a5,0x10
  	tmp16 = MAX(tmp16, 1);
    83f4963e:	00e04363          	bgtz	a4,83f49644 <AGC+0x376>
    83f49642:	4685                	li	a3,1
  	tmp16 = (agc_obj->gain32 >> 16) - tmp16;
    83f49644:	9f95                	subw	a5,a5,a3
  	agc_obj->gain32 = ((long)tmp16) << 16;    /* cut down gain32 */
    83f49646:	0107979b          	slliw	a5,a5,0x10
    83f4964a:	4107d79b          	sraiw	a5,a5,0x10
    83f4964e:	01079693          	slli	a3,a5,0x10
  	if ((agc_obj->gain32 >> 16) < unit_gain)
    83f49652:	000b071b          	sext.w	a4,s6
    83f49656:	0967d063          	bge	a5,s6,83f496d6 <AGC+0x408>
  		agc_obj->gain32 = unit_gain << 16;
    83f4965a:	0107171b          	slliw	a4,a4,0x10
    83f4965e:	00eba223          	sw	a4,4(s7)
  if (1 == path) {
    83f49662:	4785                	li	a5,1
    83f49664:	f8fd1be3          	bne	s10,a5,83f495fa <AGC+0x32c>
  	if (para_obj->para_agc_vad_ena == true) {
    83f49668:	67a2                	ld	a5,8(sp)
    83f4966a:	01a7c783          	lbu	a5,26(a5)
    83f4966e:	f9a796e3          	bne	a5,s10,83f495fa <AGC+0x32c>
  		agc_obj->agc_vad_hist = agc_obj->agc_vad3;
    83f49672:	030bc783          	lbu	a5,48(s7)
    83f49676:	02fb88a3          	sb	a5,49(s7)
}
    83f4967a:	b741                	j	83f495fa <AGC+0x32c>
  	if (para_obj->para_agc_vad_ena == true) {
    83f4967c:	01a6c683          	lbu	a3,26(a3)
    83f49680:	c7a69ee3          	bne	a3,s10,83f492fc <AGC+0x2e>
  		if (speech_vad == false) {
    83f49684:	ef21                	bnez	a4,83f496dc <AGC+0x40e>
			agc_obj->agc_vad1_cnt = MAX(0, agc_obj->agc_vad1_cnt - 1);
    83f49686:	02a61703          	lh	a4,42(a2)
    83f4968a:	06ed5863          	bge	s10,a4,83f496fa <AGC+0x42c>
    83f4968e:	377d                	addiw	a4,a4,-1
    83f49690:	02e61523          	sh	a4,42(a2)
		if (st_vad == false) {
    83f49694:	e3c1                	bnez	a5,83f49714 <AGC+0x446>
			agc_obj->agc_vad2 = true;
    83f49696:	4785                	li	a5,1
    83f49698:	02fb8623          	sb	a5,44(s7)
			agc_obj->agc_vad2_cnt = 3;
    83f4969c:	478d                	li	a5,3
    83f4969e:	02fb9723          	sh	a5,46(s7)
    83f496a2:	b9a9                	j	83f492fc <AGC+0x2e>
  	agc_obj->pcb_noise_cnt = MIN(agc_obj->pcb_noise_hold_time, agc_obj->pcb_noise_cnt);
    83f496a4:	87ba                	mv	a5,a4
    83f496a6:	bf3d                	j	83f495e4 <AGC+0x316>
			if ((agc_obj->agc_vad1 == true) && (agc_obj->agc_vad2 == true)) {
    83f496a8:	02cbc683          	lbu	a3,44(s7)
    83f496ac:	e95695e3          	bne	a3,s5,83f49536 <AGC+0x268>
				agc_obj->target_low = (agc_obj->target_low_Q15*unit_gain) >> 15;
    83f496b0:	00cb9683          	lh	a3,12(s7)
  				agc_obj->target_high = (agc_obj->target_high_Q15*unit_gain) >> 15;
    83f496b4:	010b9583          	lh	a1,16(s7)
				agc_obj->agc_vad3 = true;
    83f496b8:	03ab8823          	sb	s10,48(s7)
  				agc_obj->target_high = (agc_obj->target_high_Q15*unit_gain) >> 15;
    83f496bc:	02e585bb          	mulw	a1,a1,a4
				agc_obj->target_low = (agc_obj->target_low_Q15*unit_gain) >> 15;
    83f496c0:	02e6873b          	mulw	a4,a3,a4
  				agc_obj->target_high = (agc_obj->target_high_Q15*unit_gain) >> 15;
    83f496c4:	40f5d69b          	sraiw	a3,a1,0xf
    83f496c8:	00db9723          	sh	a3,14(s7)
				agc_obj->target_low = (agc_obj->target_low_Q15*unit_gain) >> 15;
    83f496cc:	40f7571b          	sraiw	a4,a4,0xf
    83f496d0:	00eb9523          	sh	a4,10(s7)
				agc_obj->agc_vad3 = true;
    83f496d4:	b971                	j	83f49370 <AGC+0xa2>
  	agc_obj->gain32 = ((long)tmp16) << 16;    /* cut down gain32 */
    83f496d6:	00dba223          	sw	a3,4(s7)
    83f496da:	bf29                	j	83f495f4 <AGC+0x326>
			if (agc_obj->Fs == 16000)
    83f496dc:	03461683          	lh	a3,52(a2)
    83f496e0:	6711                	lui	a4,0x4
			agc_obj->agc_vad1 = true;
    83f496e2:	03a60423          	sb	s10,40(a2)
			if (agc_obj->Fs == 16000)
    83f496e6:	e8070713          	addi	a4,a4,-384 # 3e80 <_EL1_STACK_SIZE+0x3680>
    83f496ea:	00e68d63          	beq	a3,a4,83f49704 <AGC+0x436>
  				agc_obj->agc_vad1_cnt = para_obj->para_agc_vad_cnt;           /* keep it longer than speech vad in order to have better speech fidelity at the end of speech segment */
    83f496ee:	6722                	ld	a4,8(sp)
    83f496f0:	02075703          	lhu	a4,32(a4)
    83f496f4:	02e61523          	sh	a4,42(a2)
    83f496f8:	bf71                	j	83f49694 <AGC+0x3c6>
			agc_obj->agc_vad1_cnt = MAX(0, agc_obj->agc_vad1_cnt - 1);
    83f496fa:	02061523          	sh	zero,42(a2)
      				agc_obj->agc_vad1 = false;
    83f496fe:	02060423          	sb	zero,40(a2)
    83f49702:	bf49                	j	83f49694 <AGC+0x3c6>
  				agc_obj->agc_vad1_cnt = para_obj->para_agc_vad_cnt * 2;    /* keep it longer than speech vad in order to have better speech fidelity at the end of speech segment */
    83f49704:	6722                	ld	a4,8(sp)
    83f49706:	02075703          	lhu	a4,32(a4)
    83f4970a:	0017171b          	slliw	a4,a4,0x1
    83f4970e:	02e61523          	sh	a4,42(a2)
    83f49712:	b749                	j	83f49694 <AGC+0x3c6>
			agc_obj->agc_vad2_cnt = MAX(0, agc_obj->agc_vad2_cnt - 1);
    83f49714:	02eb9783          	lh	a5,46(s7)
    83f49718:	4705                	li	a4,1
    83f4971a:	00f75663          	bge	a4,a5,83f49726 <AGC+0x458>
    83f4971e:	37fd                	addiw	a5,a5,-1
    83f49720:	02fb9723          	sh	a5,46(s7)
			if (!agc_obj->agc_vad2_cnt)
    83f49724:	bee1                	j	83f492fc <AGC+0x2e>
			agc_obj->agc_vad2_cnt = MAX(0, agc_obj->agc_vad2_cnt - 1);
    83f49726:	020b9723          	sh	zero,46(s7)
      				agc_obj->agc_vad2 = false;
    83f4972a:	020b8623          	sb	zero,44(s7)
    83f4972e:	b6f9                	j	83f492fc <AGC+0x2e>

0000000083f49730 <AGC_init>:
  agc_obj = agc;
  agc_obj->Fs = (short)Fs;
  agc_obj->frame_size = (short)frame_size;
  agc_obj->env = 0L;

  agc_obj->fixed_step_size = 1 << 10;
    83f49730:	40000713          	li	a4,1024
  agc_obj->Fs = (short)Fs;
    83f49734:	c00517d3          	fcvt.w.s	a5,fa0,rtz
  agc_obj->fixed_step_size = 1 << 10;
    83f49738:	00e51923          	sh	a4,18(a0) # 8012 <_EL1_STACK_SIZE+0x7812>
  agc_obj->stepsize_release = agc_obj->fixed_step_size;
    83f4973c:	20000737          	lui	a4,0x20000
    83f49740:	40070713          	addi	a4,a4,1024 # 20000400 <CVIMMAP_DRAM_SIZE+0x1c000400>
  agc_obj->Fs = (short)Fs;
    83f49744:	0107979b          	slliw	a5,a5,0x10
  agc_obj->stepsize_release = agc_obj->fixed_step_size;
    83f49748:	c958                	sw	a4,20(a0)
  agc_obj->stepsize_attack = MAX( agc_obj->fixed_step_size, (1 << 13));

  agc_obj->pcb_noise_thrd = 38;
    83f4974a:	02600713          	li	a4,38
  agc_obj->Fs = (short)Fs;
    83f4974e:	4107d79b          	sraiw	a5,a5,0x10
  agc_obj->pcb_noise_thrd = 38;
    83f49752:	00e51c23          	sh	a4,24(a0)
  if (agc_obj->Fs == 16000)    /* WB */
    83f49756:	6711                	lui	a4,0x4
  agc_obj->frame_size = (short)frame_size;
    83f49758:	02c51923          	sh	a2,50(a0)
  agc_obj->Fs = (short)Fs;
    83f4975c:	02f51a23          	sh	a5,52(a0)
  agc_obj->env = 0L;
    83f49760:	00051423          	sh	zero,8(a0)
  if (agc_obj->Fs == 16000)    /* WB */
    83f49764:	e8070713          	addi	a4,a4,-384 # 3e80 <_EL1_STACK_SIZE+0x3680>
  	agc_obj->pcb_noise_hold_time = 50*(3+1);    /* unit is frame */
    83f49768:	0c800613          	li	a2,200
  if (agc_obj->Fs == 16000)    /* WB */
    83f4976c:	00e78463          	beq	a5,a4,83f49774 <AGC_init+0x44>
  else    /* NB */
  	agc_obj->pcb_noise_hold_time = 25*(3+1);    /* unit is frame */
    83f49770:	06400613          	li	a2,100
    83f49774:	00c51e23          	sh	a2,28(a0)
  agc_obj->pcb_noise_cnt = 0;
    83f49778:	00051d23          	sh	zero,26(a0)

  if (1 == path) {
    83f4977c:	4785                	li	a5,1
    83f4977e:	02f68863          	beq	a3,a5,83f497ae <AGC_init+0x7e>
  	agc_obj->unit_gain_change = para_obj->para_agc_cut6_ena;    /* allow to drop unit gain 6dB and only for one time, controlled here!!! */
  	if (!para_obj->para_agc_max_gain)
  		agc_obj->unit_gain_change = false;
    83f49782:	00050f23          	sb	zero,30(a0)
  }

  agc_obj->unit_gain_change_det = false;
  agc_obj->sout_hist = 0;
  agc_obj->smooth_cnt = 0;
  agc_obj->alpha = (short)((float)(9.0F/10.0F) * 32767);    /* coef for Lagrange Interpolation */
    83f49786:	0ccd77b7          	lui	a5,0xccd7
    83f4978a:	33278793          	addi	a5,a5,818 # ccd7332 <CVIMMAP_DRAM_SIZE+0x8cd7332>
  agc_obj->unit_gain_change_det = false;
    83f4978e:	00050fa3          	sb	zero,31(a0)
  agc_obj->sout_hist = 0;
    83f49792:	02052023          	sw	zero,32(a0)
  agc_obj->alpha = (short)((float)(9.0F/10.0F) * 32767);    /* coef for Lagrange Interpolation */
    83f49796:	d15c                	sw	a5,36(a0)
  agc_obj->alpha2 = 32767 - agc_obj->alpha;

  agc_obj->agc_vad1 = false;
    83f49798:	02050423          	sb	zero,40(a0)
  agc_obj->agc_vad1_cnt = 0;
    83f4979c:	02051523          	sh	zero,42(a0)
  agc_obj->agc_vad2 = false;
    83f497a0:	02050623          	sb	zero,44(a0)
  agc_obj->agc_vad2_cnt = 0;
    83f497a4:	02051723          	sh	zero,46(a0)
  agc_obj->agc_vad_hist = false;
    83f497a8:	020508a3          	sb	zero,49(a0)

}
    83f497ac:	8082                	ret
  	agc_obj->unit_gain_change = para_obj->para_agc_cut6_ena;    /* allow to drop unit gain 6dB and only for one time, controlled here!!! */
    83f497ae:	0225c783          	lbu	a5,34(a1)
    83f497b2:	00f50f23          	sb	a5,30(a0)
  	if (!para_obj->para_agc_max_gain)
    83f497b6:	0145d783          	lhu	a5,20(a1)
    83f497ba:	f7f1                	bnez	a5,83f49786 <AGC_init+0x56>
    83f497bc:	b7d9                	j	83f49782 <AGC_init+0x52>

0000000083f497be <AGC_para>:

void AGC_para(agc_struct *agc, ssp_para_struct *para, short path)
{
    83f497be:	1101                	addi	sp,sp,-32
    83f497c0:	e822                	sd	s0,16(sp)
    83f497c2:	e426                	sd	s1,8(sp)
    83f497c4:	ec06                	sd	ra,24(sp)

  /* restrict parameter range */
  para_obj = para;
  agc_obj = agc;

  if (1 == path) {
    83f497c6:	4785                	li	a5,1
{
    83f497c8:	84aa                	mv	s1,a0
    83f497ca:	842e                	mv	s0,a1
  if (1 == path) {
    83f497cc:	10f60763          	beq	a2,a5,83f498da <AGC_para+0x11c>
	agc_obj->target_low = db_to_linear(para_obj->para_agc_target_low);
  } else {
	para_obj->para_spk_agc_cut6_ena = 0;
	para_obj->para_spk_agc_vad_ena = 0;
	para_obj->para_spk_agc_vad_cnt = 7;
	para_obj->para_spk_agc_max_gain = MIN(MAX(para_obj->para_spk_agc_max_gain, 0), 6);
    83f497d0:	0265d783          	lhu	a5,38(a1)
	para_obj->para_spk_agc_vad_cnt = 7;
    83f497d4:	471d                	li	a4,7
    83f497d6:	04e59723          	sh	a4,78(a1)
	para_obj->para_spk_agc_max_gain = MIN(MAX(para_obj->para_spk_agc_max_gain, 0), 6);
    83f497da:	03079693          	slli	a3,a5,0x30
	para_obj->para_spk_agc_cut6_ena = 0;
    83f497de:	04058823          	sb	zero,80(a1)
	para_obj->para_spk_agc_vad_ena = 0;
    83f497e2:	04058623          	sb	zero,76(a1)
	para_obj->para_spk_agc_max_gain = MIN(MAX(para_obj->para_spk_agc_max_gain, 0), 6);
    83f497e6:	92c1                	srli	a3,a3,0x30
    83f497e8:	4719                	li	a4,6
    83f497ea:	0cd76963          	bltu	a4,a3,83f498bc <AGC_para+0xfe>
	para_obj->para_spk_agc_target_high = MIN(MAX(para_obj->para_spk_agc_target_high, 0), 36);
    83f497ee:	02845703          	lhu	a4,40(s0)
	para_obj->para_spk_agc_max_gain = MIN(MAX(para_obj->para_spk_agc_max_gain, 0), 6);
    83f497f2:	02f41323          	sh	a5,38(s0)
	para_obj->para_spk_agc_target_high = MIN(MAX(para_obj->para_spk_agc_target_high, 0), 36);
    83f497f6:	02400693          	li	a3,36
    83f497fa:	03071613          	slli	a2,a4,0x30
	para_obj->para_spk_agc_max_gain = MIN(MAX(para_obj->para_spk_agc_max_gain, 0), 6);
    83f497fe:	17c2                	slli	a5,a5,0x30
	para_obj->para_spk_agc_target_high = MIN(MAX(para_obj->para_spk_agc_target_high, 0), 36);
    83f49800:	9241                	srli	a2,a2,0x30
	para_obj->para_spk_agc_max_gain = MIN(MAX(para_obj->para_spk_agc_max_gain, 0), 6);
    83f49802:	93c1                	srli	a5,a5,0x30
	para_obj->para_spk_agc_target_high = MIN(MAX(para_obj->para_spk_agc_target_high, 0), 36);
    83f49804:	08c6ee63          	bltu	a3,a2,83f498a0 <AGC_para+0xe2>
	para_obj->para_spk_agc_target_low = MIN(MAX(para_obj->para_spk_agc_target_low, 0), 72);
    83f49808:	02a45683          	lhu	a3,42(s0)
	para_obj->para_spk_agc_target_high = MIN(MAX(para_obj->para_spk_agc_target_high, 0), 36);
    83f4980c:	02e41423          	sh	a4,40(s0)
	para_obj->para_spk_agc_target_low = MIN(MAX(para_obj->para_spk_agc_target_low, 0), 72);
    83f49810:	04800713          	li	a4,72
    83f49814:	03069613          	slli	a2,a3,0x30
    83f49818:	9241                	srli	a2,a2,0x30
    83f4981a:	08c76063          	bltu	a4,a2,83f4989a <AGC_para+0xdc>
	agc_obj->max_gain = agc_gain_table[para_obj->para_spk_agc_max_gain];
    83f4981e:	00008717          	auipc	a4,0x8
    83f49822:	76a70713          	addi	a4,a4,1898 # 83f51f88 <agc_gain_table.0>
    83f49826:	0786                	slli	a5,a5,0x1
    83f49828:	97ba                	add	a5,a5,a4
    83f4982a:	0007d783          	lhu	a5,0(a5)
	para_obj->para_spk_agc_target_low = MIN(MAX(para_obj->para_spk_agc_target_low, 0), 72);
    83f4982e:	02d41523          	sh	a3,42(s0)
	agc_obj->max_gain = agc_gain_table[para_obj->para_spk_agc_max_gain];
    83f49832:	00f49023          	sh	a5,0(s1)
	agc_obj->target_high = db_to_linear(para_obj->para_spk_agc_target_high);
    83f49836:	02841503          	lh	a0,40(s0)
    83f4983a:	32e000ef          	jal	ra,83f49b68 <db_to_linear>
    83f4983e:	00a49723          	sh	a0,14(s1)
	agc_obj->target_low = db_to_linear(para_obj->para_spk_agc_target_low);
    83f49842:	02a41503          	lh	a0,42(s0)
    83f49846:	322000ef          	jal	ra,83f49b68 <db_to_linear>
  }

  unit_gain = (1L << (agc_obj->max_gain));    /* if max is Q3.13,  i.e 2^13=8192 */
    83f4984a:	00049703          	lh	a4,0(s1)
  agc_obj->unit_gain = agc_obj->max_gain;
  agc_obj->gain32 = unit_gain << 16;    /* start from unit gain */

  agc_obj->target_high_Q15 = agc_obj->target_high;    /* target high in Q1.15 format */
    83f4984e:	00e49783          	lh	a5,14(s1)
  unit_gain = (1L << (agc_obj->max_gain));    /* if max is Q3.13,  i.e 2^13=8192 */
    83f49852:	66c1                	lui	a3,0x10
  agc_obj->gain32 = unit_gain << 16;    /* start from unit gain */
    83f49854:	00e696b3          	sll	a3,a3,a4
  agc_obj->unit_gain = agc_obj->max_gain;
    83f49858:	00e49123          	sh	a4,2(s1)
  agc_obj->gain32 = unit_gain << 16;    /* start from unit gain */
    83f4985c:	c0d4                	sw	a3,4(s1)
  agc_obj->target_high_Q15 = agc_obj->target_high;    /* target high in Q1.15 format */
    83f4985e:	00f49823          	sh	a5,16(s1)

  agc_obj->target_low = MIN(agc_obj->target_low, agc_obj->target_high);
    83f49862:	0005069b          	sext.w	a3,a0
  unit_gain = (1L << (agc_obj->max_gain));    /* if max is Q3.13,  i.e 2^13=8192 */
    83f49866:	2701                	sext.w	a4,a4
  agc_obj->target_low = MIN(agc_obj->target_low, agc_obj->target_high);
    83f49868:	863e                	mv	a2,a5
    83f4986a:	00f6d363          	bge	a3,a5,83f49870 <AGC_para+0xb2>
    83f4986e:	862a                	mv	a2,a0
    83f49870:	0106169b          	slliw	a3,a2,0x10
    83f49874:	4106d69b          	sraiw	a3,a3,0x10
  agc_obj->target_low_Q15 = agc_obj->target_low;    /* target low in Q1.15 format */

  agc_obj->target_high = (short)((agc_obj->target_high*unit_gain) >> 15);    /* proper Q format according to agc max_gain */
    83f49878:	00e797b3          	sll	a5,a5,a4
  agc_obj->target_low = (short)((agc_obj->target_low*unit_gain) >> 15);    /* proper Q format according to agc max_gain */
    83f4987c:	00e69733          	sll	a4,a3,a4
  agc_obj->target_high = (short)((agc_obj->target_high*unit_gain) >> 15);    /* proper Q format according to agc max_gain */
    83f49880:	87bd                	srai	a5,a5,0xf
  agc_obj->target_low = (short)((agc_obj->target_low*unit_gain) >> 15);    /* proper Q format according to agc max_gain */
    83f49882:	873d                	srai	a4,a4,0xf
  agc_obj->target_low_Q15 = agc_obj->target_low;    /* target low in Q1.15 format */
    83f49884:	00c49623          	sh	a2,12(s1)
  agc_obj->target_high = (short)((agc_obj->target_high*unit_gain) >> 15);    /* proper Q format according to agc max_gain */
    83f49888:	00f49723          	sh	a5,14(s1)
  agc_obj->target_low = (short)((agc_obj->target_low*unit_gain) >> 15);    /* proper Q format according to agc max_gain */
    83f4988c:	00e49523          	sh	a4,10(s1)

}
    83f49890:	60e2                	ld	ra,24(sp)
    83f49892:	6442                	ld	s0,16(sp)
    83f49894:	64a2                	ld	s1,8(sp)
    83f49896:	6105                	addi	sp,sp,32
    83f49898:	8082                	ret
	para_obj->para_spk_agc_target_low = MIN(MAX(para_obj->para_spk_agc_target_low, 0), 72);
    83f4989a:	04800693          	li	a3,72
    83f4989e:	b741                	j	83f4981e <AGC_para+0x60>
    83f498a0:	02a45683          	lhu	a3,42(s0)
	para_obj->para_spk_agc_target_high = MIN(MAX(para_obj->para_spk_agc_target_high, 0), 36);
    83f498a4:	02400713          	li	a4,36
    83f498a8:	02e41423          	sh	a4,40(s0)
	para_obj->para_spk_agc_target_low = MIN(MAX(para_obj->para_spk_agc_target_low, 0), 72);
    83f498ac:	03069613          	slli	a2,a3,0x30
    83f498b0:	04800713          	li	a4,72
    83f498b4:	9241                	srli	a2,a2,0x30
    83f498b6:	f6c774e3          	bgeu	a4,a2,83f4981e <AGC_para+0x60>
    83f498ba:	b7c5                	j	83f4989a <AGC_para+0xdc>
	para_obj->para_spk_agc_target_high = MIN(MAX(para_obj->para_spk_agc_target_high, 0), 36);
    83f498bc:	02845703          	lhu	a4,40(s0)
	para_obj->para_spk_agc_max_gain = MIN(MAX(para_obj->para_spk_agc_max_gain, 0), 6);
    83f498c0:	4799                	li	a5,6
    83f498c2:	02f41323          	sh	a5,38(s0)
	para_obj->para_spk_agc_target_high = MIN(MAX(para_obj->para_spk_agc_target_high, 0), 36);
    83f498c6:	03071613          	slli	a2,a4,0x30
	para_obj->para_spk_agc_max_gain = MIN(MAX(para_obj->para_spk_agc_max_gain, 0), 6);
    83f498ca:	17c2                	slli	a5,a5,0x30
	para_obj->para_spk_agc_target_high = MIN(MAX(para_obj->para_spk_agc_target_high, 0), 36);
    83f498cc:	02400693          	li	a3,36
    83f498d0:	9241                	srli	a2,a2,0x30
	para_obj->para_spk_agc_max_gain = MIN(MAX(para_obj->para_spk_agc_max_gain, 0), 6);
    83f498d2:	93c1                	srli	a5,a5,0x30
	para_obj->para_spk_agc_target_high = MIN(MAX(para_obj->para_spk_agc_target_high, 0), 36);
    83f498d4:	f2c6fae3          	bgeu	a3,a2,83f49808 <AGC_para+0x4a>
    83f498d8:	b7e1                	j	83f498a0 <AGC_para+0xe2>
  	para_obj->para_agc_max_gain = MIN(MAX(para_obj->para_agc_max_gain, 0), 6);
    83f498da:	0145d783          	lhu	a5,20(a1)
  	para_obj->para_agc_vad_cnt = 7;
    83f498de:	471d                	li	a4,7
    83f498e0:	02e59023          	sh	a4,32(a1)
  	para_obj->para_agc_max_gain = MIN(MAX(para_obj->para_agc_max_gain, 0), 6);
    83f498e4:	03079693          	slli	a3,a5,0x30
  	para_obj->para_agc_cut6_ena = 1;
    83f498e8:	02c58123          	sb	a2,34(a1)
  	para_obj->para_agc_max_gain = MIN(MAX(para_obj->para_agc_max_gain, 0), 6);
    83f498ec:	92c1                	srli	a3,a3,0x30
    83f498ee:	4719                	li	a4,6
    83f498f0:	0ad76263          	bltu	a4,a3,83f49994 <AGC_para+0x1d6>
  	para_obj->para_agc_target_high = MIN(MAX(para_obj->para_agc_target_high, 0), 36);
    83f498f4:	01645683          	lhu	a3,22(s0)
  	para_obj->para_agc_max_gain = MIN(MAX(para_obj->para_agc_max_gain, 0), 6);
    83f498f8:	00f41a23          	sh	a5,20(s0)
  	para_obj->para_agc_target_high = MIN(MAX(para_obj->para_agc_target_high, 0), 36);
    83f498fc:	02400713          	li	a4,36
    83f49900:	03069613          	slli	a2,a3,0x30
  	para_obj->para_agc_max_gain = MIN(MAX(para_obj->para_agc_max_gain, 0), 6);
    83f49904:	17c2                	slli	a5,a5,0x30
  	para_obj->para_agc_target_high = MIN(MAX(para_obj->para_agc_target_high, 0), 36);
    83f49906:	9241                	srli	a2,a2,0x30
  	para_obj->para_agc_max_gain = MIN(MAX(para_obj->para_agc_max_gain, 0), 6);
    83f49908:	93c1                	srli	a5,a5,0x30
  	para_obj->para_agc_target_high = MIN(MAX(para_obj->para_agc_target_high, 0), 36);
    83f4990a:	06c76763          	bltu	a4,a2,83f49978 <AGC_para+0x1ba>
  	para_obj->para_agc_target_low = MIN(MAX(para_obj->para_agc_target_low, 0), 72);
    83f4990e:	01845703          	lhu	a4,24(s0)
  	para_obj->para_agc_target_high = MIN(MAX(para_obj->para_agc_target_high, 0), 36);
    83f49912:	00d41b23          	sh	a3,22(s0)
  	para_obj->para_agc_target_low = MIN(MAX(para_obj->para_agc_target_low, 0), 72);
    83f49916:	04800693          	li	a3,72
    83f4991a:	03071613          	slli	a2,a4,0x30
    83f4991e:	9241                	srli	a2,a2,0x30
    83f49920:	04c6e263          	bltu	a3,a2,83f49964 <AGC_para+0x1a6>
  	para_obj->para_agc_vad_ena = MIN(MAX(para_obj->para_agc_vad_ena, 0), 1);
    83f49924:	01a44683          	lbu	a3,26(s0)
  	para_obj->para_agc_target_low = MIN(MAX(para_obj->para_agc_target_low, 0), 72);
    83f49928:	00e41c23          	sh	a4,24(s0)
  	para_obj->para_agc_vad_ena = MIN(MAX(para_obj->para_agc_vad_ena, 0), 1);
    83f4992c:	0ff6f713          	andi	a4,a3,255
    83f49930:	eb05                	bnez	a4,83f49960 <AGC_para+0x1a2>
	agc_obj->max_gain = agc_gain_table[para_obj->para_agc_max_gain];
    83f49932:	00008717          	auipc	a4,0x8
    83f49936:	65670713          	addi	a4,a4,1622 # 83f51f88 <agc_gain_table.0>
    83f4993a:	0786                	slli	a5,a5,0x1
    83f4993c:	97ba                	add	a5,a5,a4
    83f4993e:	0007d783          	lhu	a5,0(a5)
  	para_obj->para_agc_vad_ena = MIN(MAX(para_obj->para_agc_vad_ena, 0), 1);
    83f49942:	00d40d23          	sb	a3,26(s0)
	agc_obj->max_gain = agc_gain_table[para_obj->para_agc_max_gain];
    83f49946:	00f49023          	sh	a5,0(s1)
	agc_obj->target_high = db_to_linear(para_obj->para_agc_target_high);
    83f4994a:	01641503          	lh	a0,22(s0)
    83f4994e:	21a000ef          	jal	ra,83f49b68 <db_to_linear>
    83f49952:	00a49723          	sh	a0,14(s1)
	agc_obj->target_low = db_to_linear(para_obj->para_agc_target_low);
    83f49956:	01841503          	lh	a0,24(s0)
    83f4995a:	20e000ef          	jal	ra,83f49b68 <db_to_linear>
    83f4995e:	b5f5                	j	83f4984a <AGC_para+0x8c>
  	para_obj->para_agc_vad_ena = MIN(MAX(para_obj->para_agc_vad_ena, 0), 1);
    83f49960:	4685                	li	a3,1
    83f49962:	bfc1                	j	83f49932 <AGC_para+0x174>
    83f49964:	01a44683          	lbu	a3,26(s0)
  	para_obj->para_agc_target_low = MIN(MAX(para_obj->para_agc_target_low, 0), 72);
    83f49968:	04800713          	li	a4,72
    83f4996c:	00e41c23          	sh	a4,24(s0)
  	para_obj->para_agc_vad_ena = MIN(MAX(para_obj->para_agc_vad_ena, 0), 1);
    83f49970:	0ff6f713          	andi	a4,a3,255
    83f49974:	df5d                	beqz	a4,83f49932 <AGC_para+0x174>
    83f49976:	b7ed                	j	83f49960 <AGC_para+0x1a2>
  	para_obj->para_agc_target_low = MIN(MAX(para_obj->para_agc_target_low, 0), 72);
    83f49978:	01845703          	lhu	a4,24(s0)
  	para_obj->para_agc_target_high = MIN(MAX(para_obj->para_agc_target_high, 0), 36);
    83f4997c:	02400693          	li	a3,36
    83f49980:	00d41b23          	sh	a3,22(s0)
  	para_obj->para_agc_target_low = MIN(MAX(para_obj->para_agc_target_low, 0), 72);
    83f49984:	03071613          	slli	a2,a4,0x30
    83f49988:	04800693          	li	a3,72
    83f4998c:	9241                	srli	a2,a2,0x30
    83f4998e:	f8c6fbe3          	bgeu	a3,a2,83f49924 <AGC_para+0x166>
    83f49992:	bfc9                	j	83f49964 <AGC_para+0x1a6>
  	para_obj->para_agc_target_high = MIN(MAX(para_obj->para_agc_target_high, 0), 36);
    83f49994:	01645683          	lhu	a3,22(s0)
  	para_obj->para_agc_max_gain = MIN(MAX(para_obj->para_agc_max_gain, 0), 6);
    83f49998:	4799                	li	a5,6
    83f4999a:	00f41a23          	sh	a5,20(s0)
  	para_obj->para_agc_target_high = MIN(MAX(para_obj->para_agc_target_high, 0), 36);
    83f4999e:	03069613          	slli	a2,a3,0x30
  	para_obj->para_agc_max_gain = MIN(MAX(para_obj->para_agc_max_gain, 0), 6);
    83f499a2:	17c2                	slli	a5,a5,0x30
  	para_obj->para_agc_target_high = MIN(MAX(para_obj->para_agc_target_high, 0), 36);
    83f499a4:	02400713          	li	a4,36
    83f499a8:	9241                	srli	a2,a2,0x30
  	para_obj->para_agc_max_gain = MIN(MAX(para_obj->para_agc_max_gain, 0), 6);
    83f499aa:	93c1                	srli	a5,a5,0x30
  	para_obj->para_agc_target_high = MIN(MAX(para_obj->para_agc_target_high, 0), 36);
    83f499ac:	f6c771e3          	bgeu	a4,a2,83f4990e <AGC_para+0x150>
    83f499b0:	b7e1                	j	83f49978 <AGC_para+0x1ba>

0000000083f499b2 <envelope>:
#include "define.h"
#include "agc_subfun.h"

/* Function Definitions */
short envelope(short* sin, short frame_size)	/* Envelope detector based on frame */
{
    83f499b2:	86aa                	mv	a3,a0
  short *ptr_sin;
  //int y1, y2;

  ptr_sin = sin;
  temp_max = 0x4;    /* keep a minimal DC here */
  for (i = 0; i < frame_size; i++) {
    83f499b4:	04b05863          	blez	a1,83f49a04 <envelope+0x52>
    83f499b8:	0586                	slli	a1,a1,0x1
  	temp = *ptr_sin++;
  	if (temp == (short)0x8000)
  		temp = (short)0x8001;
  	temp = ABS(temp);
    83f499ba:	7861                	lui	a6,0xffff8
    83f499bc:	00b50633          	add	a2,a0,a1
    83f499c0:	2805                	addiw	a6,a6,1
  temp_max = 0x4;    /* keep a minimal DC here */
    83f499c2:	4511                	li	a0,4
  	temp = ABS(temp);
    83f499c4:	75e1                	lui	a1,0xffff8
  	temp = *ptr_sin++;
    83f499c6:	00069703          	lh	a4,0(a3) # 10000 <_EL1_STACK_SIZE+0xf800>
    83f499ca:	0689                	addi	a3,a3,2
  	temp = ABS(temp);
    83f499cc:	87ba                	mv	a5,a4
    83f499ce:	00e5c363          	blt	a1,a4,83f499d4 <envelope+0x22>
    83f499d2:	87c2                	mv	a5,a6
    83f499d4:	0107971b          	slliw	a4,a5,0x10
    83f499d8:	4107571b          	sraiw	a4,a4,0x10
    83f499dc:	40f7571b          	sraiw	a4,a4,0xf
    83f499e0:	8fb9                	xor	a5,a5,a4
    83f499e2:	9f99                	subw	a5,a5,a4
    83f499e4:	17c2                	slli	a5,a5,0x30
    83f499e6:	93c1                	srli	a5,a5,0x30
  	if (temp > temp_max)
    83f499e8:	0107971b          	slliw	a4,a5,0x10
    83f499ec:	4107571b          	sraiw	a4,a4,0x10
    83f499f0:	00a75363          	bge	a4,a0,83f499f6 <envelope+0x44>
    83f499f4:	87aa                	mv	a5,a0
    83f499f6:	0107951b          	slliw	a0,a5,0x10
    83f499fa:	4105551b          	sraiw	a0,a0,0x10
  for (i = 0; i < frame_size; i++) {
    83f499fe:	fcd614e3          	bne	a2,a3,83f499c6 <envelope+0x14>
    83f49a02:	8082                	ret
  temp_max = 0x4;    /* keep a minimal DC here */
    83f49a04:	4511                	li	a0,4
  y = (y1 + y2) >> 16;
  #endif
  
  return y;

}
    83f49a06:	8082                	ret

0000000083f49a08 <update_gain>:
{
  int delta32;
  int gain32;
  short step_size;

  if (diff > 32767)
    83f49a08:	67a1                	lui	a5,0x8
    83f49a0a:	00f55963          	bge	a0,a5,83f49a1c <update_gain+0x14>
  	diff = 32767;
  else if (diff < -32768)
    83f49a0e:	77e1                	lui	a5,0xffff8
    83f49a10:	02f55863          	bge	a0,a5,83f49a40 <update_gain+0x38>
  	diff = -32768;

  if (diff > 0)    /* attack time and release time constants should be separated here!!! */
  	step_size = agc_obj->stepsize_release;	/* usually gain slowly increase, so release time constant here slowly */
  else
  	step_size = agc_obj->stepsize_attack;	/* usually gain quickly decrease, so attack time constant here quickly */
    83f49a14:	01659783          	lh	a5,22(a1) # ffffffffffff8016 <_end+0xffffffff7bff82d6>
  	diff = -32768;
    83f49a18:	7561                	lui	a0,0xffff8
  	step_size = agc_obj->stepsize_attack;	/* usually gain quickly decrease, so attack time constant here quickly */
    83f49a1a:	a029                	j	83f49a24 <update_gain+0x1c>
  	diff = 32767;
    83f49a1c:	fff78513          	addi	a0,a5,-1 # ffffffffffff7fff <_end+0xffffffff7bff82bf>
  	step_size = agc_obj->stepsize_release;	/* usually gain slowly increase, so release time constant here slowly */
    83f49a20:	01459783          	lh	a5,20(a1)

  delta32 = ((int)(step_size) * (int)(diff)) << 1;
    83f49a24:	02a787bb          	mulw	a5,a5,a0
  gain32 = agc_obj->gain32 + delta32;
    83f49a28:	41d4                	lw	a3,4(a1)

  //if(gain32 <0)
  //	printf("");
  if (((unsigned int)gain32) > 32767*65536)    /* saturation restriction */
    83f49a2a:	7fff0737          	lui	a4,0x7fff0
  delta32 = ((int)(step_size) * (int)(diff)) << 1;
    83f49a2e:	0017979b          	slliw	a5,a5,0x1
  gain32 = agc_obj->gain32 + delta32;
    83f49a32:	9fb5                	addw	a5,a5,a3
  if (((unsigned int)gain32) > 32767*65536)    /* saturation restriction */
    83f49a34:	00f77463          	bgeu	a4,a5,83f49a3c <update_gain+0x34>
  	gain32 = 32767*65536;    /* 0x7FFF0000 */
    83f49a38:	7fff07b7          	lui	a5,0x7fff0

  agc_obj->gain32 = gain32;
    83f49a3c:	c1dc                	sw	a5,4(a1)

 }
    83f49a3e:	8082                	ret
  if (diff > 0)    /* attack time and release time constants should be separated here!!! */
    83f49a40:	fea040e3          	bgtz	a0,83f49a20 <update_gain+0x18>
  	step_size = agc_obj->stepsize_attack;	/* usually gain quickly decrease, so attack time constant here quickly */
    83f49a44:	01659783          	lh	a5,22(a1)
    83f49a48:	bff1                	j	83f49a24 <update_gain+0x1c>

0000000083f49a4a <bessel_function>:
  double tmp2_d;
  boolean_T short_iteration;
  int i, m;
  float tmp1;

  if (v == 0.0F) {
    83f49a4a:	f0000753          	fmv.w.x	fa4,zero
{
    83f49a4e:	862e                	mv	a2,a1
  if (v == 0.0F) {
    83f49a50:	a0e527d3          	feq.s	a5,fa0,fa4
    83f49a54:	10079163          	bnez	a5,83f49b56 <bessel_function+0x10c>
    bessel_f_ptr0 = &bessel_v0_f[0];
    bessel_d_ptr0 = &bessel_v0_d[0];
  } else {
    bessel_f_ptr0 = &bessel_v1_f[0];
    bessel_d_ptr0 = &bessel_v1_d[0];
    83f49a58:	00009e17          	auipc	t3,0x9
    83f49a5c:	6f8e0e13          	addi	t3,t3,1784 # 83f53150 <bessel_v1_d.0>
    bessel_f_ptr0 = &bessel_v1_f[0];
    83f49a60:	00009817          	auipc	a6,0x9
    83f49a64:	71880813          	addi	a6,a6,1816 # 83f53178 <bessel_v1_f.1>
      bessel_f_ptr++;
    }

    if (short_iteration == true) {
      /* bessel(i,1) = ((x/2)^v)*acc0 */
      if (v == 0.0F) {
    83f49a68:	f0000753          	fmv.w.x	fa4,zero
    83f49a6c:	85aa                	mv	a1,a0
    83f49a6e:	50460893          	addi	a7,a2,1284
    83f49a72:	a0e52353          	feq.s	t1,fa0,fa4
    83f49a76:	03480693          	addi	a3,a6,52
    83f49a7a:	00008797          	auipc	a5,0x8
    83f49a7e:	7d67a187          	flw	ft3,2006(a5) # 83f52250 <__func__.1+0x58>
    83f49a82:	00009797          	auipc	a5,0x9
    83f49a86:	99e7b587          	fld	fa1,-1634(a5) # 83f52420 <__func__.1+0x228>
        bessel[i] = acc0_f;
      } else {
        bessel[i] = x[i] / 2.0F * acc0_f;
    83f49a8a:	00008797          	auipc	a5,0x8
    83f49a8e:	7e67a207          	flw	ft4,2022(a5) # 83f52270 <__func__.1+0x78>
    83f49a92:	028e0513          	addi	a0,t3,40
    83f49a96:	00009797          	auipc	a5,0x9
    83f49a9a:	9927b107          	fld	ft2,-1646(a5) # 83f52428 <__func__.1+0x230>
    tmp1 = x[i] * x[i];  
    83f49a9e:	0005a507          	flw	fa0,0(a1)
    tmp2_f = 1.0F;
    83f49aa2:	20318753          	fmv.s	fa4,ft3
    acc0_f = 1.0F;     /*  result for m = 0 */
    83f49aa6:	203186d3          	fmv.s	fa3,ft3
    tmp1 = x[i] * x[i];  
    83f49aaa:	10a57653          	fmul.s	fa2,fa0,fa0
    bessel_f_ptr = bessel_f_ptr0;
    83f49aae:	87c2                	mv	a5,a6
      if ((double)(tmp2_f*tmp1) > 3.4E+38)    /* positive for sure */
    83f49ab0:	10c77753          	fmul.s	fa4,fa4,fa2
    83f49ab4:	420707d3          	fcvt.d.s	fa5,fa4
    83f49ab8:	a2f59753          	flt.d	a4,fa1,fa5
    83f49abc:	c709                	beqz	a4,83f49ac6 <bessel_function+0x7c>
        tmp2_f = (float)3.4E+38;
    83f49abe:	00009717          	auipc	a4,0x9
    83f49ac2:	95e72707          	flw	fa4,-1698(a4) # 83f5241c <__func__.1+0x224>
      acc0_f = acc0_f + tmp2_f / (*bessel_f_ptr);
    83f49ac6:	0007a787          	flw	fa5,0(a5)
      bessel_f_ptr++;
    83f49aca:	0791                	addi	a5,a5,4
      acc0_f = acc0_f + tmp2_f / (*bessel_f_ptr);
    83f49acc:	18f777d3          	fdiv.s	fa5,fa4,fa5
    83f49ad0:	00d7f7d3          	fadd.s	fa5,fa5,fa3
      if (acc0_f == acc1_f) {
    83f49ad4:	a0d7a753          	feq.s	a4,fa5,fa3
      acc0_f = acc0_f + tmp2_f / (*bessel_f_ptr);
    83f49ad8:	20f786d3          	fmv.s	fa3,fa5
      if (acc0_f == acc1_f) {
    83f49adc:	e32d                	bnez	a4,83f49b3e <bessel_function+0xf4>
    for (m = 0; m < 13; m++) {
    83f49ade:	fcd799e3          	bne	a5,a3,83f49ab0 <bessel_function+0x66>
      }
      goto bessel_end;
    }
    
    tmp2_d = (double)tmp2_f;
    83f49ae2:	42070753          	fcvt.d.s	fa4,fa4
    acc0_d = (double)acc0_f;
    83f49ae6:	420787d3          	fcvt.d.s	fa5,fa5
    acc1_d = acc0_d;
    bessel_d_ptr = bessel_d_ptr0;

    for (m = 0; m < 5; m++) {
      tmp2_d *= tmp1;    /* positive for sure */
    83f49aea:	42060653          	fcvt.d.s	fa2,fa2
    bessel_d_ptr = bessel_d_ptr0;
    83f49aee:	87f2                	mv	a5,t3
      tmp2_d *= tmp1;    /* positive for sure */
    83f49af0:	12c77753          	fmul.d	fa4,fa4,fa2
      if (tmp2_d > 1.7E+200)    /* 1.7E+308 */
    83f49af4:	a2e11753          	flt.d	a4,ft2,fa4
    83f49af8:	ef21                	bnez	a4,83f49b50 <bessel_function+0x106>
        break;
      acc0_d = acc0_d + tmp2_d / (*bessel_d_ptr);
    83f49afa:	2394                	fld	fa3,0(a5)
      if ((float)(acc0_d) == (float)(acc1_d))
    83f49afc:	4017f053          	fcvt.s.d	ft0,fa5
         break;
      acc1_d = acc0_d;
      bessel_d_ptr++;
    83f49b00:	07a1                	addi	a5,a5,8
      acc0_d = acc0_d + tmp2_d / (*bessel_d_ptr);
    83f49b02:	1ad776d3          	fdiv.d	fa3,fa4,fa3
    83f49b06:	02f6f6d3          	fadd.d	fa3,fa3,fa5
      if ((float)(acc0_d) == (float)(acc1_d))
    83f49b0a:	4016f0d3          	fcvt.s.d	ft1,fa3
      acc0_d = acc0_d + tmp2_d / (*bessel_d_ptr);
    83f49b0e:	22d687d3          	fmv.d	fa5,fa3
      if ((float)(acc0_d) == (float)(acc1_d))
    83f49b12:	a000a753          	feq.s	a4,ft1,ft0
    83f49b16:	e319                	bnez	a4,83f49b1c <bessel_function+0xd2>
    for (m = 0; m < 5; m++) {
    83f49b18:	fca79ce3          	bne	a5,a0,83f49af0 <bessel_function+0xa6>
    }

    /* bessel(i,1) = ((x/2)^v)*acc0 */
    if (v == 0.0F) {
    83f49b1c:	00031863          	bnez	t1,83f49b2c <bessel_function+0xe2>
      bessel[i] = (float)(acc0_d);
    } else {
      bessel[i] = (float)(x[i] / 2.0F * acc0_d);
    83f49b20:	10457553          	fmul.s	fa0,fa0,ft4
    83f49b24:	42050553          	fcvt.d.s	fa0,fa0
    83f49b28:	12d576d3          	fmul.d	fa3,fa0,fa3
    83f49b2c:	4016f6d3          	fcvt.s.d	fa3,fa3
    83f49b30:	00d62027          	fsw	fa3,0(a2)
  for (i = 0; i < 321; i++) {    /*  input vector length */
    83f49b34:	0611                	addi	a2,a2,4
    83f49b36:	0591                	addi	a1,a1,4
    83f49b38:	f71613e3          	bne	a2,a7,83f49a9e <bessel_function+0x54>
    83f49b3c:	8082                	ret
      if (v == 0.0F) {
    83f49b3e:	00031663          	bnez	t1,83f49b4a <bessel_function+0x100>
        bessel[i] = x[i] / 2.0F * acc0_f;
    83f49b42:	10457553          	fmul.s	fa0,fa0,ft4
    83f49b46:	10f577d3          	fmul.s	fa5,fa0,fa5
    83f49b4a:	00f62027          	fsw	fa5,0(a2)
    83f49b4e:	b7dd                	j	83f49b34 <bessel_function+0xea>
    83f49b50:	22f786d3          	fmv.d	fa3,fa5
    83f49b54:	b7e1                	j	83f49b1c <bessel_function+0xd2>
    bessel_d_ptr0 = &bessel_v0_d[0];
    83f49b56:	00009e17          	auipc	t3,0x9
    83f49b5a:	59ae0e13          	addi	t3,t3,1434 # 83f530f0 <bessel_v0_d.2>
    bessel_f_ptr0 = &bessel_v0_f[0];
    83f49b5e:	00009817          	auipc	a6,0x9
    83f49b62:	5ba80813          	addi	a6,a6,1466 # 83f53118 <bessel_v0_f.3>
    83f49b66:	b709                	j	83f49a68 <bessel_function+0x1e>

0000000083f49b68 <db_to_linear>:
{
  short i;
  short tmp16;
  
  tmp16 = 0x7fff;
  db_num = MAX(0,db_num);
    83f49b68:	fff54713          	not	a4,a0
    83f49b6c:	977d                	srai	a4,a4,0x3f
    83f49b6e:	8f69                	and	a4,a4,a0
  for (i = 0; i < db_num; i++)
    83f49b70:	02a05863          	blez	a0,83f49ba0 <db_to_linear+0x38>
  tmp16 = 0x7fff;
    83f49b74:	6521                	lui	a0,0x8
  	tmp16 = (short)(((long)tmp16 * (long)29204) >> 15);
    83f49b76:	669d                	lui	a3,0x7
  tmp16 = 0x7fff;
    83f49b78:	157d                	addi	a0,a0,-1
  for (i = 0; i < db_num; i++)
    83f49b7a:	4781                	li	a5,0
    83f49b7c:	2701                	sext.w	a4,a4
  	tmp16 = (short)(((long)tmp16 * (long)29204) >> 15);
    83f49b7e:	21468693          	addi	a3,a3,532 # 7214 <_EL1_STACK_SIZE+0x6a14>
    83f49b82:	02d50533          	mul	a0,a0,a3
    83f49b86:	2785                	addiw	a5,a5,1
    83f49b88:	0107979b          	slliw	a5,a5,0x10
    83f49b8c:	4107d79b          	sraiw	a5,a5,0x10
    83f49b90:	853d                	srai	a0,a0,0xf
    83f49b92:	0105151b          	slliw	a0,a0,0x10
    83f49b96:	4105551b          	sraiw	a0,a0,0x10
  for (i = 0; i < db_num; i++)
    83f49b9a:	fee7c4e3          	blt	a5,a4,83f49b82 <db_to_linear+0x1a>
    83f49b9e:	8082                	ret
  tmp16 = 0x7fff;
    83f49ba0:	6521                	lui	a0,0x8
    83f49ba2:	157d                	addi	a0,a0,-1
  return tmp16;
  
}
    83f49ba4:	8082                	ret

0000000083f49ba6 <dr_detection>:
  int k;
  float alpha;

  /*  DR based VAD is good at low and high SNRs, but not good for tone */
  /*  alike signals and also sensitive to DC setup */
  DR_bin_cnt = 0.0F;
    83f49ba6:	f0000153          	fmv.w.x	ft2,zero
  for (k = 0; k < 5; k++) {
    if (st->amp_inst_band[k] - st->noisy_st_trough[k] > 0.0F) {
    83f49baa:	6538                	ld	a4,72(a0)
    83f49bac:	4781                	li	a5,0
    83f49bae:	202105d3          	fmv.s	fa1,ft2
    83f49bb2:	00009697          	auipc	a3,0x9
    83f49bb6:	8926a807          	flw	fa6,-1902(a3) # 83f52444 <__func__.1+0x24c>
    83f49bba:	00009697          	auipc	a3,0x9
    83f49bbe:	8926a387          	flw	ft7,-1902(a3) # 83f5244c <__func__.1+0x254>
    83f49bc2:	00009697          	auipc	a3,0x9
    83f49bc6:	86e6a307          	flw	ft6,-1938(a3) # 83f52430 <__func__.1+0x238>
      alpha = 0.98F;
    83f49bca:	00009697          	auipc	a3,0x9
    83f49bce:	86a6a287          	flw	ft5,-1942(a3) # 83f52434 <__func__.1+0x23c>
    if (st->amp_inst_band[k] - st->noisy_st_trough[k] > 0.0F) {
    83f49bd2:	00008697          	auipc	a3,0x8
    83f49bd6:	69e6a887          	flw	fa7,1694(a3) # 83f52270 <__func__.1+0x78>
    83f49bda:	00009697          	auipc	a3,0x9
    83f49bde:	85e6a207          	flw	ft4,-1954(a3) # 83f52438 <__func__.1+0x240>
      alpha = 0.5F;
    }

    st->noisy_st_trough[k] = alpha * st->noisy_st_trough[k] + (1.0F - alpha) * st->amp_inst_band[k];
    if (st->amp_inst_band[k] - st->noisy_st_peak[k] > 0.0F) {
      alpha = 0.9F;
    83f49be2:	00008697          	auipc	a3,0x8
    83f49be6:	69e6a187          	flw	ft3,1694(a3) # 83f52280 <__func__.1+0x88>
    if (st->amp_inst_band[k] - st->noisy_st_peak[k] > 0.0F) {
    83f49bea:	00009697          	auipc	a3,0x9
    83f49bee:	8526af87          	flw	ft11,-1966(a3) # 83f5243c <__func__.1+0x244>
    } else {
      alpha = 0.93F;
    83f49bf2:	00009697          	auipc	a3,0x9
    83f49bf6:	84e6af07          	flw	ft10,-1970(a3) # 83f52440 <__func__.1+0x248>

    st->noisy_st_peak[k] = alpha * st->noisy_st_peak[k] + (1.0F - alpha) * st->amp_inst_band[k];

    /*  to make sure noisy_st_peak cannot go up too much, now maximal 24 dB range */
    if (st->noisy_st_peak[k] / 16.0F - st->noisy_st_trough[k] > 0.0F) {
      st->noisy_st_peak[k] = st->noisy_st_trough[k] * 16.0F;
    83f49bfa:	00009697          	auipc	a3,0x9
    83f49bfe:	84e6ae87          	flw	ft9,-1970(a3) # 83f52448 <__func__.1+0x250>
    }

    /*  the smaller the threshold, the faster to suppress noise but easily introduce more speech distortion as trade-off */
    if (st->noisy_st_peak[k] * 0.5012F - st->noisy_st_trough[k] > 0.0F) {
      DR_bin_cnt++;
    83f49c02:	00008697          	auipc	a3,0x8
    83f49c06:	64e6ae07          	flw	ft8,1614(a3) # 83f52250 <__func__.1+0x58>
  for (k = 0; k < 5; k++) {
    83f49c0a:	4651                	li	a2,20
    if (st->amp_inst_band[k] - st->noisy_st_trough[k] > 0.0F) {
    83f49c0c:	6134                	ld	a3,64(a0)
    83f49c0e:	973e                	add	a4,a4,a5
    83f49c10:	00072687          	flw	fa3,0(a4)
    83f49c14:	96be                	add	a3,a3,a5
    83f49c16:	0006a607          	flw	fa2,0(a3)
    83f49c1a:	20630753          	fmv.s	fa4,ft6
      alpha = 0.98F;
    83f49c1e:	205287d3          	fmv.s	fa5,ft5
    if (st->amp_inst_band[k] - st->noisy_st_trough[k] > 0.0F) {
    83f49c22:	08d670d3          	fsub.s	ft1,fa2,fa3
    83f49c26:	20420053          	fmv.s	ft0,ft4
      alpha = 0.9F;
    83f49c2a:	20318553          	fmv.s	fa0,ft3
    if (st->amp_inst_band[k] - st->noisy_st_trough[k] > 0.0F) {
    83f49c2e:	a01596d3          	flt.s	a3,fa1,ft1
    83f49c32:	e689                	bnez	a3,83f49c3c <dr_detection+0x96>
    83f49c34:	21188753          	fmv.s	fa4,fa7
      alpha = 0.5F;
    83f49c38:	211887d3          	fmv.s	fa5,fa7
    st->noisy_st_trough[k] = alpha * st->noisy_st_trough[k] + (1.0F - alpha) * st->amp_inst_band[k];
    83f49c3c:	10e67653          	fmul.s	fa2,fa2,fa4
    83f49c40:	60f6f6c3          	fmadd.s	fa3,fa3,fa5,fa2
    83f49c44:	00d72027          	fsw	fa3,0(a4)
    if (st->amp_inst_band[k] - st->noisy_st_peak[k] > 0.0F) {
    83f49c48:	6134                	ld	a3,64(a0)
    83f49c4a:	6938                	ld	a4,80(a0)
    83f49c4c:	96be                	add	a3,a3,a5
    83f49c4e:	973e                	add	a4,a4,a5
    83f49c50:	0006a707          	flw	fa4,0(a3)
    83f49c54:	00072787          	flw	fa5,0(a4)
    83f49c58:	08f776d3          	fsub.s	fa3,fa4,fa5
    83f49c5c:	a0d596d3          	flt.s	a3,fa1,fa3
    83f49c60:	e689                	bnez	a3,83f49c6a <dr_detection+0xc4>
    83f49c62:	21ff8053          	fmv.s	ft0,ft11
      alpha = 0.93F;
    83f49c66:	21ef0553          	fmv.s	fa0,ft10
    st->noisy_st_peak[k] = alpha * st->noisy_st_peak[k] + (1.0F - alpha) * st->amp_inst_band[k];
    83f49c6a:	10077753          	fmul.s	fa4,fa4,ft0
    83f49c6e:	70a7f7c3          	fmadd.s	fa5,fa5,fa0,fa4
    83f49c72:	00f72027          	fsw	fa5,0(a4)
    if (st->noisy_st_peak[k] / 16.0F - st->noisy_st_trough[k] > 0.0F) {
    83f49c76:	6538                	ld	a4,72(a0)
    83f49c78:	6934                	ld	a3,80(a0)
    83f49c7a:	00f705b3          	add	a1,a4,a5
    83f49c7e:	96be                	add	a3,a3,a5
    83f49c80:	0005a707          	flw	fa4,0(a1)
    83f49c84:	0006a787          	flw	fa5,0(a3)
    83f49c88:	7107f6c7          	fmsub.s	fa3,fa5,fa6,fa4
    83f49c8c:	a0d595d3          	flt.s	a1,fa1,fa3
    83f49c90:	cd91                	beqz	a1,83f49cac <dr_detection+0x106>
      st->noisy_st_peak[k] = st->noisy_st_trough[k] * 16.0F;
    83f49c92:	11d77753          	fmul.s	fa4,fa4,ft9
    83f49c96:	00e6a027          	fsw	fa4,0(a3)
    if (st->noisy_st_peak[k] * 0.5012F - st->noisy_st_trough[k] > 0.0F) {
    83f49c9a:	6934                	ld	a3,80(a0)
    83f49c9c:	6538                	ld	a4,72(a0)
    83f49c9e:	96be                	add	a3,a3,a5
    83f49ca0:	00f705b3          	add	a1,a4,a5
    83f49ca4:	0006a787          	flw	fa5,0(a3)
    83f49ca8:	0005a707          	flw	fa4,0(a1)
    83f49cac:	7077f7c7          	fmsub.s	fa5,fa5,ft7,fa4
  for (k = 0; k < 5; k++) {
    83f49cb0:	0791                	addi	a5,a5,4
    if (st->noisy_st_peak[k] * 0.5012F - st->noisy_st_trough[k] > 0.0F) {
    83f49cb2:	a0f596d3          	flt.s	a3,fa1,fa5
    83f49cb6:	c299                	beqz	a3,83f49cbc <dr_detection+0x116>
      DR_bin_cnt++;
    83f49cb8:	01c17153          	fadd.s	ft2,ft2,ft8
  for (k = 0; k < 5; k++) {
    83f49cbc:	f4c798e3          	bne	a5,a2,83f49c0c <dr_detection+0x66>
    }
  }

  if (DR_bin_cnt == 0.0F) {
    83f49cc0:	f00007d3          	fmv.w.x	fa5,zero
    83f49cc4:	a0f127d3          	feq.s	a5,ft2,fa5
    83f49cc8:	c395                	beqz	a5,83f49cec <dr_detection+0x146>
    DR_bin_cnt = st->vad_dr_cnt - 1.0F;
    83f49cca:	07052707          	flw	fa4,112(a0) # 8070 <_EL1_STACK_SIZE+0x7870>
    83f49cce:	00008797          	auipc	a5,0x8
    83f49cd2:	5827a687          	flw	fa3,1410(a5) # 83f52250 <__func__.1+0x58>
    83f49cd6:	08d77753          	fsub.s	fa4,fa4,fa3
    if (0.0F > DR_bin_cnt) {
    83f49cda:	a0f717d3          	flt.s	a5,fa4,fa5
    83f49cde:	e7a9                	bnez	a5,83f49d28 <dr_detection+0x182>
      DR_bin_cnt = 0.0F;
    }

    st->vad_dr_cnt = DR_bin_cnt;
    if (DR_bin_cnt == 0.0F) {
    83f49ce0:	a0f727d3          	feq.s	a5,fa4,fa5
    st->vad_dr_cnt = DR_bin_cnt;
    83f49ce4:	06e52827          	fsw	fa4,112(a0)
    if (DR_bin_cnt == 0.0F) {
    83f49ce8:	e3b1                	bnez	a5,83f49d2c <dr_detection+0x186>
        st->vad_dr_cnt = 7.0F;
      }
    }
  }

}
    83f49cea:	8082                	ret
    if (st->Fs == 16000.0F) {
    83f49cec:	09c52787          	flw	fa5,156(a0)
    st->vad_dr = 1.0F;
    83f49cf0:	00008797          	auipc	a5,0x8
    83f49cf4:	5607a707          	flw	fa4,1376(a5) # 83f52250 <__func__.1+0x58>
    if (st->Fs == 16000.0F) {
    83f49cf8:	00008797          	auipc	a5,0x8
    83f49cfc:	55c7a687          	flw	fa3,1372(a5) # 83f52254 <__func__.1+0x5c>
    83f49d00:	a0d7a7d3          	feq.s	a5,fa5,fa3
    st->vad_dr = 1.0F;
    83f49d04:	06e52a27          	fsw	fa4,116(a0)
    if (st->Fs == 16000.0F) {
    83f49d08:	cb81                	beqz	a5,83f49d18 <dr_detection+0x172>
      st->vad_dr_cnt = 7.0F;
    83f49d0a:	00008797          	auipc	a5,0x8
    83f49d0e:	5527a787          	flw	fa5,1362(a5) # 83f5225c <__func__.1+0x64>
    83f49d12:	06f52827          	fsw	fa5,112(a0)
    83f49d16:	8082                	ret
      if (st->Fs == 8000.0F) {
    83f49d18:	00008797          	auipc	a5,0x8
    83f49d1c:	69c7a707          	flw	fa4,1692(a5) # 83f523b4 <__func__.1+0x1bc>
    83f49d20:	a0e7a7d3          	feq.s	a5,fa5,fa4
    83f49d24:	f3fd                	bnez	a5,83f49d0a <dr_detection+0x164>
    83f49d26:	8082                	ret
    st->vad_dr_cnt = DR_bin_cnt;
    83f49d28:	06052823          	sw	zero,112(a0)
      st->vad_dr = 0.0F;
    83f49d2c:	06052a23          	sw	zero,116(a0)
    83f49d30:	8082                	ret

0000000083f49d32 <dradf2>:

  if (n == 1) return;
  drfti1(n, wsave+n, ifac);
}

static void dradf2(int ido,int l1,float *cc,float *ch,float *wa1){
    83f49d32:	7139                	addi	sp,sp,-64
    83f49d34:	f04e                	sd	s3,32(sp)
  int i,k;
  float ti2,tr2;
  int t0,t1,t2,t3,t4,t5,t6;

  t1=0;
  t0=(t2=l1*ido);
    83f49d36:	02a589bb          	mulw	s3,a1,a0
static void dradf2(int ido,int l1,float *cc,float *ch,float *wa1){
    83f49d3a:	f44a                	sd	s2,40(sp)
    83f49d3c:	ec52                	sd	s4,24(sp)
  t3=ido<<1;
    83f49d3e:	0015129b          	slliw	t0,a0,0x1
static void dradf2(int ido,int l1,float *cc,float *ch,float *wa1){
    83f49d42:	fc22                	sd	s0,56(sp)
    83f49d44:	f826                	sd	s1,48(sp)
    83f49d46:	e856                	sd	s5,16(sp)
    83f49d48:	e45a                	sd	s6,8(sp)
  t3=ido<<1;
    83f49d4a:	8916                	mv	s2,t0
  t0=(t2=l1*ido);
    83f49d4c:	8a4e                	mv	s4,s3
  for(k=0;k<l1;k++){
    83f49d4e:	04b05763          	blez	a1,83f49d9c <dradf2+0x6a>
    83f49d52:	00299813          	slli	a6,s3,0x2
    83f49d56:	00251f13          	slli	t5,a0,0x2
    83f49d5a:	88b2                	mv	a7,a2
    83f49d5c:	9832                	add	a6,a6,a2
    83f49d5e:	4781                	li	a5,0
    83f49d60:	4e81                	li	t4,0
    ch[t1<<1]=cc[t1]+cc[t2];
    83f49d62:	00082707          	flw	fa4,0(a6)
    83f49d66:	0008a787          	flw	fa5,0(a7)
    83f49d6a:	00279e13          	slli	t3,a5,0x2
    83f49d6e:	9e36                	add	t3,t3,a3
    83f49d70:	00e7f7d3          	fadd.s	fa5,fa5,fa4
    ch[(t1<<1)+t3-1]=cc[t1]-cc[t2];
    83f49d74:	00f287bb          	addw	a5,t0,a5
    83f49d78:	00279313          	slli	t1,a5,0x2
    83f49d7c:	9336                	add	t1,t1,a3
  for(k=0;k<l1;k++){
    83f49d7e:	2e85                	addiw	t4,t4,1
    ch[t1<<1]=cc[t1]+cc[t2];
    83f49d80:	00fe2027          	fsw	fa5,0(t3)
    ch[(t1<<1)+t3-1]=cc[t1]-cc[t2];
    83f49d84:	0008a787          	flw	fa5,0(a7)
    83f49d88:	00082707          	flw	fa4,0(a6)
  for(k=0;k<l1;k++){
    83f49d8c:	98fa                	add	a7,a7,t5
    83f49d8e:	987a                	add	a6,a6,t5
    ch[(t1<<1)+t3-1]=cc[t1]-cc[t2];
    83f49d90:	08e7f7d3          	fsub.s	fa5,fa5,fa4
    83f49d94:	fef32e27          	fsw	fa5,-4(t1)
  for(k=0;k<l1;k++){
    83f49d98:	fdd595e3          	bne	a1,t4,83f49d62 <dradf2+0x30>
    t1+=ido;
    t2+=ido;
  }

  if(ido<2)return;
    83f49d9c:	4785                	li	a5,1
    83f49d9e:	0ea7d563          	bge	a5,a0,83f49e88 <dradf2+0x156>
  if(ido==2)goto L105;
    83f49da2:	4789                	li	a5,2
    83f49da4:	0ef50b63          	beq	a0,a5,83f49e9a <dradf2+0x168>
    }
    t1+=ido;
    t2+=ido;
  }

  if(ido%2==1)return;
    83f49da8:	00157b13          	andi	s6,a0,1
  for(k=0;k<l1;k++){
    83f49dac:	0cb05e63          	blez	a1,83f49e88 <dradf2+0x156>
    83f49db0:	8496                	mv	s1,t0
    83f49db2:	00251f13          	slli	t5,a0,0x2
    83f49db6:	8fb2                	mv	t6,a2
    83f49db8:	00291a93          	slli	s5,s2,0x2
    83f49dbc:	8436                	mv	s0,a3
    83f49dbe:	098a                	slli	s3,s3,0x2
    83f49dc0:	4381                	li	t2,0
    for(i=2;i<ido;i+=2){
    83f49dc2:	00249813          	slli	a6,s1,0x2
    83f49dc6:	8e3a                	mv	t3,a4
    83f49dc8:	01f98333          	add	t1,s3,t6
    83f49dcc:	9836                	add	a6,a6,a3
    t4=(t1<<1)+(ido<<1);
    83f49dce:	88a2                	mv	a7,s0
    83f49dd0:	87fe                	mv	a5,t6
    for(i=2;i<ido;i+=2){
    83f49dd2:	4e89                	li	t4,2
      tr2=wa1[i-2]*cc[t3-1]+wa1[i-1]*cc[t3];
    83f49dd4:	00432587          	flw	fa1,4(t1)
    83f49dd8:	004e2687          	flw	fa3,4(t3)
    83f49ddc:	000e2707          	flw	fa4,0(t3)
    83f49de0:	00832787          	flw	fa5,8(t1)
      ti2=wa1[i-2]*cc[t3]-wa1[i-1]*cc[t3-1];
    83f49de4:	10d5f553          	fmul.s	fa0,fa1,fa3
      ch[t6]=cc[t5]+ti2;
    83f49de8:	0087a607          	flw	fa2,8(a5)
      tr2=wa1[i-2]*cc[t3-1]+wa1[i-1]*cc[t3];
    83f49dec:	10f6f6d3          	fmul.s	fa3,fa3,fa5
    for(i=2;i<ido;i+=2){
    83f49df0:	08a1                	addi	a7,a7,8
    83f49df2:	07a1                	addi	a5,a5,8
      ti2=wa1[i-2]*cc[t3]-wa1[i-1]*cc[t3-1];
    83f49df4:	50f777c7          	fmsub.s	fa5,fa4,fa5,fa0
    for(i=2;i<ido;i+=2){
    83f49df8:	1861                	addi	a6,a6,-8
      tr2=wa1[i-2]*cc[t3-1]+wa1[i-1]*cc[t3];
    83f49dfa:	68b77743          	fmadd.s	fa4,fa4,fa1,fa3
    for(i=2;i<ido;i+=2){
    83f49dfe:	2e89                	addiw	t4,t4,2
    83f49e00:	0e21                	addi	t3,t3,8
      ch[t6]=cc[t5]+ti2;
    83f49e02:	00f67653          	fadd.s	fa2,fa2,fa5
    for(i=2;i<ido;i+=2){
    83f49e06:	0321                	addi	t1,t1,8
      ch[t6]=cc[t5]+ti2;
    83f49e08:	00c8a027          	fsw	fa2,0(a7)
      ch[t4]=ti2-cc[t5];
    83f49e0c:	0007a687          	flw	fa3,0(a5)
    83f49e10:	08d7f7d3          	fsub.s	fa5,fa5,fa3
    83f49e14:	00f82027          	fsw	fa5,0(a6)
      ch[t6-1]=cc[t5-1]+tr2;
    83f49e18:	ffc7a787          	flw	fa5,-4(a5)
    83f49e1c:	00e7f7d3          	fadd.s	fa5,fa5,fa4
    83f49e20:	fef8ae27          	fsw	fa5,-4(a7)
      ch[t4-1]=cc[t5-1]-tr2;
    83f49e24:	ffc7a787          	flw	fa5,-4(a5)
    83f49e28:	08e7f7d3          	fsub.s	fa5,fa5,fa4
    83f49e2c:	fef82e27          	fsw	fa5,-4(a6)
    for(i=2;i<ido;i+=2){
    83f49e30:	faaec2e3          	blt	t4,a0,83f49dd4 <dradf2+0xa2>
  for(k=0;k<l1;k++){
    83f49e34:	2385                	addiw	t2,t2,1
    83f49e36:	009904bb          	addw	s1,s2,s1
    83f49e3a:	9ffa                	add	t6,t6,t5
    83f49e3c:	9456                	add	s0,s0,s5
    83f49e3e:	f87592e3          	bne	a1,t2,83f49dc2 <dradf2+0x90>
  if(ido%2==1)return;
    83f49e42:	040b1363          	bnez	s6,83f49e88 <dradf2+0x156>

 L105:
  t3=(t2=(t1=ido)-1);
    83f49e46:	fff5081b          	addiw	a6,a0,-1
  t2+=t0;
    83f49e4a:	01480a3b          	addw	s4,a6,s4
  for(k=0;k<l1;k++){
    83f49e4e:	002a1793          	slli	a5,s4,0x2
    83f49e52:	41400a33          	neg	s4,s4
    83f49e56:	963e                	add	a2,a2,a5
    83f49e58:	028a                	slli	t0,t0,0x2
    83f49e5a:	96fa                	add	a3,a3,t5
    83f49e5c:	002a1513          	slli	a0,s4,0x2
    83f49e60:	080a                	slli	a6,a6,0x2
  t3=(t2=(t1=ido)-1);
    83f49e62:	4701                	li	a4,0
    ch[t1]=-cc[t2];
    83f49e64:	00062787          	flw	fa5,0(a2)
    ch[t1-1]=cc[t3];
    83f49e68:	00a607b3          	add	a5,a2,a0
    83f49e6c:	97c2                	add	a5,a5,a6
    ch[t1]=-cc[t2];
    83f49e6e:	20f797d3          	fneg.s	fa5,fa5
  for(k=0;k<l1;k++){
    83f49e72:	2705                	addiw	a4,a4,1
    83f49e74:	967a                	add	a2,a2,t5
    ch[t1]=-cc[t2];
    83f49e76:	00f6a027          	fsw	fa5,0(a3)
    ch[t1-1]=cc[t3];
    83f49e7a:	0007a787          	flw	fa5,0(a5)
    83f49e7e:	fef6ae27          	fsw	fa5,-4(a3)
  for(k=0;k<l1;k++){
    83f49e82:	9696                	add	a3,a3,t0
    83f49e84:	feb740e3          	blt	a4,a1,83f49e64 <dradf2+0x132>
    t1+=ido<<1;
    t2+=ido;
    t3+=ido;
  }
}
    83f49e88:	7462                	ld	s0,56(sp)
    83f49e8a:	74c2                	ld	s1,48(sp)
    83f49e8c:	7922                	ld	s2,40(sp)
    83f49e8e:	7982                	ld	s3,32(sp)
    83f49e90:	6a62                	ld	s4,24(sp)
    83f49e92:	6ac2                	ld	s5,16(sp)
    83f49e94:	6b22                	ld	s6,8(sp)
    83f49e96:	6121                	addi	sp,sp,64
    83f49e98:	8082                	ret
  for(k=0;k<l1;k++){
    83f49e9a:	feb057e3          	blez	a1,83f49e88 <dradf2+0x156>
  t2+=t0;
    83f49e9e:	2a05                	addiw	s4,s4,1
  t3=(t2=(t1=ido)-1);
    83f49ea0:	4805                	li	a6,1
    83f49ea2:	4f21                	li	t5,8
    83f49ea4:	b76d                	j	83f49e4e <dradf2+0x11c>

0000000083f49ea6 <dradf4>:
static void dradf4(int ido,int l1,float *cc,float *ch,float *wa1,
	    float *wa2,float *wa3){
  static float hsqt2 = .70710678118654752f;
  int i,k,t0,t1,t2,t3,t4,t5,t6;
  float ci2,ci3,ci4,cr2,cr3,cr4,ti1,ti2,ti3,ti4,tr1,tr2,tr3,tr4;
  t0=l1*ido;
    83f49ea6:	02a588bb          	mulw	a7,a1,a0
	    float *wa2,float *wa3){
    83f49eaa:	7119                	addi	sp,sp,-128
    83f49eac:	fca2                	sd	s0,120(sp)
    83f49eae:	f8a6                	sd	s1,112(sp)
    83f49eb0:	f4ca                	sd	s2,104(sp)
    83f49eb2:	f0ce                	sd	s3,96(sp)
    83f49eb4:	ecd2                	sd	s4,88(sp)
    83f49eb6:	e8d6                	sd	s5,80(sp)
    83f49eb8:	e4da                	sd	s6,72(sp)
    83f49eba:	e0de                	sd	s7,64(sp)

  t1=t0;
  t4=t1<<1;
    83f49ebc:	00189e9b          	slliw	t4,a7,0x1
	    float *wa2,float *wa3){
    83f49ec0:	fc62                	sd	s8,56(sp)
    83f49ec2:	f866                	sd	s9,48(sp)
    83f49ec4:	f46a                	sd	s10,40(sp)
    83f49ec6:	f06e                	sd	s11,32(sp)
  t0=l1*ido;
    83f49ec8:	c446                	sw	a7,8(sp)
  t4=t1<<1;
    83f49eca:	c676                	sw	t4,12(sp)
  t0=l1*ido;
    83f49ecc:	e046                	sd	a7,0(sp)
  t2=t1+(t1<<1);
    83f49ece:	01d88f3b          	addw	t5,a7,t4
  t3=0;

  for(k=0;k<l1;k++){
    83f49ed2:	08b05b63          	blez	a1,83f49f68 <dradf4+0xc2>
    83f49ed6:	6882                	ld	a7,0(sp)
    83f49ed8:	0f0a                	slli	t5,t5,0x2
    83f49eda:	0e8a                	slli	t4,t4,0x2
    83f49edc:	00289f93          	slli	t6,a7,0x2
    tr1=cc[t1]+cc[t2];
    tr2=cc[t3]+cc[t4];

    ch[t5=t3<<2]=tr1+tr2;
    ch[(ido<<2)+t5-1]=tr2-tr1;
    83f49ee0:	0025141b          	slliw	s0,a0,0x2
    ch[(t5+=(ido<<1))-1]=cc[t3]-cc[t4];
    83f49ee4:	0015149b          	slliw	s1,a0,0x1
    83f49ee8:	00251a13          	slli	s4,a0,0x2
    83f49eec:	9fb2                	add	t6,t6,a2
    83f49eee:	9f32                	add	t5,t5,a2
    83f49ef0:	82b2                	mv	t0,a2
    83f49ef2:	9eb2                	add	t4,t4,a2
    83f49ef4:	4e01                	li	t3,0
  for(k=0;k<l1;k++){
    83f49ef6:	4381                	li	t2,0
    tr2=cc[t3]+cc[t4];
    83f49ef8:	000ea687          	flw	fa3,0(t4)
    tr1=cc[t1]+cc[t2];
    83f49efc:	000fa707          	flw	fa4,0(t6)
    83f49f00:	000f2607          	flw	fa2,0(t5)
    tr2=cc[t3]+cc[t4];
    83f49f04:	0002a787          	flw	fa5,0(t0)
    ch[t5=t3<<2]=tr1+tr2;
    83f49f08:	002e1913          	slli	s2,t3,0x2
    tr1=cc[t1]+cc[t2];
    83f49f0c:	00c77753          	fadd.s	fa4,fa4,fa2
    tr2=cc[t3]+cc[t4];
    83f49f10:	00d7f7d3          	fadd.s	fa5,fa5,fa3
    ch[(ido<<2)+t5-1]=tr2-tr1;
    83f49f14:	01c4033b          	addw	t1,s0,t3
    ch[t5=t3<<2]=tr1+tr2;
    83f49f18:	9936                	add	s2,s2,a3
    ch[(ido<<2)+t5-1]=tr2-tr1;
    83f49f1a:	030a                	slli	t1,t1,0x2
    83f49f1c:	9336                	add	t1,t1,a3
    ch[t5=t3<<2]=tr1+tr2;
    83f49f1e:	00f776d3          	fadd.s	fa3,fa4,fa5
    ch[(ido<<2)+t5-1]=tr2-tr1;
    83f49f22:	08e7f7d3          	fsub.s	fa5,fa5,fa4
    ch[(t5+=(ido<<1))-1]=cc[t3]-cc[t4];
    83f49f26:	01c488bb          	addw	a7,s1,t3
    83f49f2a:	088a                	slli	a7,a7,0x2
    83f49f2c:	98b6                	add	a7,a7,a3
    ch[t5=t3<<2]=tr1+tr2;
    83f49f2e:	00d92027          	fsw	fa3,0(s2)
    ch[(ido<<2)+t5-1]=tr2-tr1;
    83f49f32:	fef32e27          	fsw	fa5,-4(t1)
    ch[(t5+=(ido<<1))-1]=cc[t3]-cc[t4];
    83f49f36:	000ea707          	flw	fa4,0(t4)
    83f49f3a:	0002a787          	flw	fa5,0(t0)
  for(k=0;k<l1;k++){
    83f49f3e:	2385                	addiw	t2,t2,1
    83f49f40:	92d2                	add	t0,t0,s4
    ch[(t5+=(ido<<1))-1]=cc[t3]-cc[t4];
    83f49f42:	08e7f7d3          	fsub.s	fa5,fa5,fa4
  for(k=0;k<l1;k++){
    83f49f46:	9ed2                	add	t4,t4,s4
    83f49f48:	01c40e3b          	addw	t3,s0,t3
    ch[(t5+=(ido<<1))-1]=cc[t3]-cc[t4];
    83f49f4c:	fef8ae27          	fsw	fa5,-4(a7)
    ch[t5]=cc[t2]-cc[t1];
    83f49f50:	000f2787          	flw	fa5,0(t5)
    83f49f54:	000fa707          	flw	fa4,0(t6)
  for(k=0;k<l1;k++){
    83f49f58:	9f52                	add	t5,t5,s4
    83f49f5a:	9fd2                	add	t6,t6,s4
    ch[t5]=cc[t2]-cc[t1];
    83f49f5c:	08e7f7d3          	fsub.s	fa5,fa5,fa4
    83f49f60:	00f8a027          	fsw	fa5,0(a7)
  for(k=0;k<l1;k++){
    83f49f64:	f8759ae3          	bne	a1,t2,83f49ef8 <dradf4+0x52>
    t2+=ido;
    t3+=ido;
    t4+=ido;
  }

  if(ido<2)return;
    83f49f68:	4885                	li	a7,1
    83f49f6a:	20a8d563          	bge	a7,a0,83f4a174 <dradf4+0x2ce>
  if(ido==2)goto L105;
    83f49f6e:	4889                	li	a7,2
    83f49f70:	23150063          	beq	a0,a7,83f4a190 <dradf4+0x2ea>
      ch[t5+t6-1]=tr2-tr1;
      ch[t5+t6]=ti1-ti2;
    }
    t1+=ido;
  }
  if(ido&1)return;
    83f49f74:	00157413          	andi	s0,a0,1
    83f49f78:	ec22                	sd	s0,24(sp)
  for(k=0;k<l1;k++){
    83f49f7a:	1eb05d63          	blez	a1,83f4a174 <dradf4+0x2ce>
    83f49f7e:	6402                	ld	s0,0(sp)
    t5=(t6=ido<<1)+t4;
    83f49f80:	00151a9b          	slliw	s5,a0,0x1
    83f49f84:	00251a13          	slli	s4,a0,0x2
    83f49f88:	408004b3          	neg	s1,s0
    83f49f8c:	00241c93          	slli	s9,s0,0x2
    83f49f90:	e826                	sd	s1,16(sp)
    83f49f92:	01960b33          	add	s6,a2,s9
    83f49f96:	00341d93          	slli	s11,s0,0x3
    83f49f9a:	00249d13          	slli	s10,s1,0x2
  t1=0;
    83f49f9e:	4c01                	li	s8,0
  for(k=0;k<l1;k++){
    83f49fa0:	4b81                	li	s7,0
    t4=t1<<2;
    83f49fa2:	002c131b          	slliw	t1,s8,0x2
    for(i=2;i<ido;i+=2){
    83f49fa6:	015308bb          	addw	a7,t1,s5
    83f49faa:	006a8eb3          	add	t4,s5,t1
    83f49fae:	011a8e33          	add	t3,s5,a7
    83f49fb2:	030a                	slli	t1,t1,0x2
    83f49fb4:	088a                	slli	a7,a7,0x2
    83f49fb6:	0e8a                	slli	t4,t4,0x2
    83f49fb8:	0e0a                	slli	t3,t3,0x2
    83f49fba:	893a                	mv	s2,a4
    83f49fbc:	84be                	mv	s1,a5
    83f49fbe:	016c8433          	add	s0,s9,s6
    83f49fc2:	83c2                	mv	t2,a6
    83f49fc4:	016d82b3          	add	t0,s11,s6
    83f49fc8:	016d0fb3          	add	t6,s10,s6
    83f49fcc:	9336                	add	t1,t1,a3
    83f49fce:	98b6                	add	a7,a7,a3
    83f49fd0:	9eb6                	add	t4,t4,a3
    83f49fd2:	9e36                	add	t3,t3,a3
    t4=t1<<2;
    83f49fd4:	8f5a                	mv	t5,s6
    for(i=2;i<ido;i+=2){
    83f49fd6:	4989                	li	s3,2
      cr2=wa1[i-2]*cc[t3-1]+wa1[i-1]*cc[t3];
    83f49fd8:	008f2287          	flw	ft5,8(t5)
      cr3=wa2[i-2]*cc[t3-1]+wa2[i-1]*cc[t3];
    83f49fdc:	00442607          	flw	fa2,4(s0)
    83f49fe0:	00842207          	flw	ft4,8(s0)
      cr4=wa3[i-2]*cc[t3-1]+wa3[i-1]*cc[t3];
    83f49fe4:	0043a007          	flw	ft0,4(t2) # 10004 <_EL1_STACK_SIZE+0xf804>
    83f49fe8:	0082a187          	flw	ft3,8(t0)
      cr2=wa1[i-2]*cc[t3-1]+wa1[i-1]*cc[t3];
    83f49fec:	004f2087          	flw	ft1,4(t5)
    83f49ff0:	00492587          	flw	fa1,4(s2)
      cr3=wa2[i-2]*cc[t3-1]+wa2[i-1]*cc[t3];
    83f49ff4:	0044a507          	flw	fa0,4(s1)
      cr4=wa3[i-2]*cc[t3-1]+wa3[i-1]*cc[t3];
    83f49ff8:	0042a787          	flw	fa5,4(t0)
      cr2=wa1[i-2]*cc[t3-1]+wa1[i-1]*cc[t3];
    83f49ffc:	1055f853          	fmul.s	fa6,fa1,ft5
      cr3=wa2[i-2]*cc[t3-1]+wa2[i-1]*cc[t3];
    83f4a000:	104573d3          	fmul.s	ft7,fa0,ft4
      ci4=wa3[i-2]*cc[t3]-wa3[i-1]*cc[t3-1];
    83f4a004:	1007f153          	fmul.s	ft2,fa5,ft0
      ci2=wa1[i-2]*cc[t3]-wa1[i-1]*cc[t3-1];
    83f4a008:	10b0f5d3          	fmul.s	fa1,ft1,fa1
      cr4=wa3[i-2]*cc[t3-1]+wa3[i-1]*cc[t3];
    83f4a00c:	10307353          	fmul.s	ft6,ft0,ft3
      ci3=wa2[i-2]*cc[t3]-wa2[i-1]*cc[t3-1];
    83f4a010:	10a67553          	fmul.s	fa0,fa2,fa0
      cr3=wa2[i-2]*cc[t3-1]+wa2[i-1]*cc[t3];
    83f4a014:	0004a687          	flw	fa3,0(s1)
      cr2=wa1[i-2]*cc[t3-1]+wa1[i-1]*cc[t3];
    83f4a018:	00092707          	flw	fa4,0(s2)
      cr4=wa3[i-2]*cc[t3-1]+wa3[i-1]*cc[t3];
    83f4a01c:	0003a007          	flw	ft0,0(t2)
      cr3=wa2[i-2]*cc[t3-1]+wa2[i-1]*cc[t3];
    83f4a020:	38c6f3c3          	fmadd.s	ft7,fa3,fa2,ft7
      cr2=wa1[i-2]*cc[t3-1]+wa1[i-1]*cc[t3];
    83f4a024:	801770c3          	fmadd.s	ft1,fa4,ft1,fa6
      ci3=wa2[i-2]*cc[t3]-wa2[i-1]*cc[t3-1];
    83f4a028:	5046f547          	fmsub.s	fa0,fa3,ft4,fa0
      ci2=wa1[i-2]*cc[t3]-wa1[i-1]*cc[t3-1];
    83f4a02c:	58577747          	fmsub.s	fa4,fa4,ft5,fa1
      cr4=wa3[i-2]*cc[t3-1]+wa3[i-1]*cc[t3];
    83f4a030:	30f077c3          	fmadd.s	fa5,ft0,fa5,ft6
      ci4=wa3[i-2]*cc[t3]-wa3[i-1]*cc[t3-1];
    83f4a034:	10307047          	fmsub.s	ft0,ft0,ft3,ft2
      ti2=cc[t2]+ci3;
    83f4a038:	008fa687          	flw	fa3,8(t6)
      tr2=cc[t2-1]+cr3;
    83f4a03c:	004fa607          	flw	fa2,4(t6)
    for(i=2;i<ido;i+=2){
    83f4a040:	2989                	addiw	s3,s3,2
      ti2=cc[t2]+ci3;
    83f4a042:	00a6f253          	fadd.s	ft4,fa3,fa0
      tr1=cr2+cr4;
    83f4a046:	00f0f2d3          	fadd.s	ft5,ft1,fa5
      ti1=ci2+ci4;
    83f4a04a:	00077153          	fadd.s	ft2,fa4,ft0
      tr2=cc[t2-1]+cr3;
    83f4a04e:	007671d3          	fadd.s	ft3,fa2,ft7
      tr4=cr4-cr2;
    83f4a052:	0817f7d3          	fsub.s	fa5,fa5,ft1
      ti4=ci2-ci4;
    83f4a056:	08077753          	fsub.s	fa4,fa4,ft0
      ti3=cc[t2]-ci3;
    83f4a05a:	08a6f6d3          	fsub.s	fa3,fa3,fa0
      tr3=cc[t2-1]-cr3;
    83f4a05e:	08767653          	fsub.s	fa2,fa2,ft7
      ch[t4-1]=tr1+tr2;
    83f4a062:	0032f0d3          	fadd.s	ft1,ft5,ft3
      ch[t4]=ti1+ti2;
    83f4a066:	00417053          	fadd.s	ft0,ft2,ft4
      ch[t5+t6-1]=tr2-tr1;
    83f4a06a:	0851f1d3          	fsub.s	ft3,ft3,ft5
      ch[t5]=tr4-ti3;
    83f4a06e:	08d7f5d3          	fsub.s	fa1,fa5,fa3
      ch[t5-1]=tr3-ti4;
    83f4a072:	08e67553          	fsub.s	fa0,fa2,fa4
      ch[t4+t6]=tr4+ti3;
    83f4a076:	00d7f7d3          	fadd.s	fa5,fa5,fa3
      ch[t4+t6-1]=ti4+tr3;
    83f4a07a:	00c77753          	fadd.s	fa4,fa4,fa2
      ch[t5+t6]=ti1-ti2;
    83f4a07e:	08417153          	fsub.s	ft2,ft2,ft4
      ch[t4-1]=tr1+tr2;
    83f4a082:	00132227          	fsw	ft1,4(t1)
      ch[t4]=ti1+ti2;
    83f4a086:	00032427          	fsw	ft0,8(t1)
      ch[t5-1]=tr3-ti4;
    83f4a08a:	fea8aa27          	fsw	fa0,-12(a7)
      ch[t5]=tr4-ti3;
    83f4a08e:	feb8ac27          	fsw	fa1,-8(a7)
      ch[t4+t6-1]=ti4+tr3;
    83f4a092:	00eea227          	fsw	fa4,4(t4)
      ch[t4+t6]=tr4+ti3;
    83f4a096:	00fea427          	fsw	fa5,8(t4)
      ch[t5+t6-1]=tr2-tr1;
    83f4a09a:	fe3e2a27          	fsw	ft3,-12(t3)
      ch[t5+t6]=ti1-ti2;
    83f4a09e:	fe2e2c27          	fsw	ft2,-8(t3)
    for(i=2;i<ido;i+=2){
    83f4a0a2:	0921                	addi	s2,s2,8
    83f4a0a4:	0f21                	addi	t5,t5,8
    83f4a0a6:	04a1                	addi	s1,s1,8
    83f4a0a8:	0421                	addi	s0,s0,8
    83f4a0aa:	03a1                	addi	t2,t2,8
    83f4a0ac:	02a1                	addi	t0,t0,8
    83f4a0ae:	0fa1                	addi	t6,t6,8
    83f4a0b0:	0321                	addi	t1,t1,8
    83f4a0b2:	18e1                	addi	a7,a7,-8
    83f4a0b4:	0ea1                	addi	t4,t4,8
    83f4a0b6:	1e61                	addi	t3,t3,-8
    83f4a0b8:	f2a9c0e3          	blt	s3,a0,83f49fd8 <dradf4+0x132>
  for(k=0;k<l1;k++){
    83f4a0bc:	2b85                	addiw	s7,s7,1
    t1+=ido;
    83f4a0be:	01850c3b          	addw	s8,a0,s8
  for(k=0;k<l1;k++){
    83f4a0c2:	9b52                	add	s6,s6,s4
    83f4a0c4:	ed759fe3          	bne	a1,s7,83f49fa2 <dradf4+0xfc>
  if(ido&1)return;
    83f4a0c8:	67e2                	ld	a5,24(sp)
    83f4a0ca:	e7cd                	bnez	a5,83f4a174 <dradf4+0x2ce>

 L105:

  t2=(t1=t0+ido-1)+(t0<<1);
    83f4a0cc:	47a2                	lw	a5,8(sp)
    83f4a0ce:	4432                	lw	s0,12(sp)
  t3=ido<<2;
    83f4a0d0:	0025189b          	slliw	a7,a0,0x2
  t2=(t1=t0+ido-1)+(t0<<1);
    83f4a0d4:	9fa9                	addw	a5,a5,a0
    83f4a0d6:	fff7871b          	addiw	a4,a5,-1
    83f4a0da:	00870e3b          	addw	t3,a4,s0
  t4=ido;
  t5=ido<<1;
  t6=ido;

  for(k=0;k<l1;k++){
    83f4a0de:	6782                	ld	a5,0(sp)
    83f4a0e0:	6442                	ld	s0,16(sp)
    83f4a0e2:	00aa8333          	add	t1,s5,a0
    83f4a0e6:	973e                	add	a4,a4,a5
    83f4a0e8:	00271813          	slli	a6,a4,0x2
    83f4a0ec:	40a00533          	neg	a0,a0
    83f4a0f0:	030a                	slli	t1,t1,0x2
    83f4a0f2:	00251e93          	slli	t4,a0,0x2
    83f4a0f6:	014607b3          	add	a5,a2,s4
    83f4a0fa:	01468733          	add	a4,a3,s4
    83f4a0fe:	9642                	add	a2,a2,a6
    83f4a100:	088a                	slli	a7,a7,0x2
    83f4a102:	969a                	add	a3,a3,t1
    83f4a104:	00241f13          	slli	t5,s0,0x2
    83f4a108:	0e0a                	slli	t3,t3,0x2
  t3=ido<<2;
    83f4a10a:	4801                	li	a6,0
    83f4a10c:	00008517          	auipc	a0,0x8
    83f4a110:	34452507          	flw	fa0,836(a0) # 83f52450 <__func__.1+0x258>
    83f4a114:	00008517          	auipc	a0,0x8
    83f4a118:	34052587          	flw	fa1,832(a0) # 83f52454 <__func__.1+0x25c>
    ti1=-hsqt2*(cc[t1]+cc[t2]);
    83f4a11c:	01d78533          	add	a0,a5,t4
    83f4a120:	01e60333          	add	t1,a2,t5
    83f4a124:	9572                	add	a0,a0,t3
    83f4a126:	00032787          	flw	fa5,0(t1)
    83f4a12a:	00052607          	flw	fa2,0(a0)
    tr1=hsqt2*(cc[t1]-cc[t2]);

    ch[t4-1]=tr1+cc[t6-1];
    83f4a12e:	ffc7a687          	flw	fa3,-4(a5)
  for(k=0;k<l1;k++){
    83f4a132:	2805                	addiw	a6,a6,1
    tr1=hsqt2*(cc[t1]-cc[t2]);
    83f4a134:	08c7f753          	fsub.s	fa4,fa5,fa2
    ti1=-hsqt2*(cc[t1]+cc[t2]);
    83f4a138:	00c7f7d3          	fadd.s	fa5,fa5,fa2
    ch[t4-1]=tr1+cc[t6-1];
    83f4a13c:	68a776c3          	fmadd.s	fa3,fa4,fa0,fa3
    83f4a140:	fed72e27          	fsw	fa3,-4(a4)
    ch[t4+t5-1]=cc[t6-1]-tr1;
    83f4a144:	ffc7a687          	flw	fa3,-4(a5)
  for(k=0;k<l1;k++){
    83f4a148:	97d2                	add	a5,a5,s4
    ch[t4+t5-1]=cc[t6-1]-tr1;
    83f4a14a:	68a7774b          	fnmsub.s	fa4,fa4,fa0,fa3
    83f4a14e:	fee6ae27          	fsw	fa4,-4(a3)

    ch[t4]=ti1-cc[t1+t0];
    83f4a152:	00062707          	flw	fa4,0(a2)
    83f4a156:	70b7f747          	fmsub.s	fa4,fa5,fa1,fa4
    83f4a15a:	00e72027          	fsw	fa4,0(a4)
    ch[t4+t5]=ti1+cc[t1+t0];
    83f4a15e:	00062707          	flw	fa4,0(a2)
  for(k=0;k<l1;k++){
    83f4a162:	9746                	add	a4,a4,a7
    83f4a164:	9652                	add	a2,a2,s4
    ch[t4+t5]=ti1+cc[t1+t0];
    83f4a166:	70b7f7c3          	fmadd.s	fa5,fa5,fa1,fa4
    83f4a16a:	00f6a027          	fsw	fa5,0(a3)
  for(k=0;k<l1;k++){
    83f4a16e:	96c6                	add	a3,a3,a7
    83f4a170:	fab846e3          	blt	a6,a1,83f4a11c <dradf4+0x276>
    t1+=ido;
    t2+=ido;
    t4+=t3;
    t6+=ido;
  }
}
    83f4a174:	7466                	ld	s0,120(sp)
    83f4a176:	74c6                	ld	s1,112(sp)
    83f4a178:	7926                	ld	s2,104(sp)
    83f4a17a:	7986                	ld	s3,96(sp)
    83f4a17c:	6a66                	ld	s4,88(sp)
    83f4a17e:	6ac6                	ld	s5,80(sp)
    83f4a180:	6b26                	ld	s6,72(sp)
    83f4a182:	6b86                	ld	s7,64(sp)
    83f4a184:	7c62                	ld	s8,56(sp)
    83f4a186:	7cc2                	ld	s9,48(sp)
    83f4a188:	7d22                	ld	s10,40(sp)
    83f4a18a:	7d82                	ld	s11,32(sp)
    83f4a18c:	6109                	addi	sp,sp,128
    83f4a18e:	8082                	ret
  for(k=0;k<l1;k++){
    83f4a190:	feb052e3          	blez	a1,83f4a174 <dradf4+0x2ce>
  t2=(t1=t0+ido-1)+(t0<<1);
    83f4a194:	47a2                	lw	a5,8(sp)
  t5=ido<<1;
    83f4a196:	4a91                	li	s5,4
  t3=ido<<2;
    83f4a198:	48a1                	li	a7,8
  t2=(t1=t0+ido-1)+(t0<<1);
    83f4a19a:	0017871b          	addiw	a4,a5,1
    83f4a19e:	47b2                	lw	a5,12(sp)
    83f4a1a0:	4a21                	li	s4,8
    83f4a1a2:	00e78e3b          	addw	t3,a5,a4
    83f4a1a6:	6782                	ld	a5,0(sp)
    83f4a1a8:	40f007b3          	neg	a5,a5
    83f4a1ac:	e83e                	sd	a5,16(sp)
    83f4a1ae:	bf05                	j	83f4a0de <dradf4+0x238>

0000000083f4a1b0 <dradb2>:
  if(na==1)return;

  for(i=0;i<n;i++)c[i]=ch[i];
}

static void dradb2(int ido,int l1,float *cc,float *ch,float *wa1){
    83f4a1b0:	1101                	addi	sp,sp,-32
    83f4a1b2:	e44a                	sd	s2,8(sp)
    83f4a1b4:	ec22                	sd	s0,24(sp)
    83f4a1b6:	e826                	sd	s1,16(sp)
  int i,k,t0,t1,t2,t3,t4,t5,t6;
  float ti2,tr2;

  t0=l1*ido;
    83f4a1b8:	02a5893b          	mulw	s2,a1,a0

  t1=0;
  t2=0;
  t3=(ido<<1)-1;
    83f4a1bc:	00151e9b          	slliw	t4,a0,0x1
  for(k=0;k<l1;k++){
    83f4a1c0:	04b05d63          	blez	a1,83f4a21a <dradb2+0x6a>
    83f4a1c4:	fffe841b          	addiw	s0,t4,-1
    83f4a1c8:	00251293          	slli	t0,a0,0x2
    83f4a1cc:	88b6                	mv	a7,a3
    83f4a1ce:	00291f93          	slli	t6,s2,0x2
    83f4a1d2:	8e76                	mv	t3,t4
  t2=0;
    83f4a1d4:	4801                	li	a6,0
  for(k=0;k<l1;k++){
    83f4a1d6:	4301                	li	t1,0
    ch[t1]=cc[t2]+cc[t3+t2];
    83f4a1d8:	010407bb          	addw	a5,s0,a6
    83f4a1dc:	078a                	slli	a5,a5,0x2
    83f4a1de:	080a                	slli	a6,a6,0x2
    83f4a1e0:	01060f33          	add	t5,a2,a6
    83f4a1e4:	97b2                	add	a5,a5,a2
    83f4a1e6:	0007a707          	flw	fa4,0(a5)
    83f4a1ea:	000f2787          	flw	fa5,0(t5)
    ch[t1+t0]=cc[t2]-cc[t3+t2];
    83f4a1ee:	01f883b3          	add	t2,a7,t6
  for(k=0;k<l1;k++){
    83f4a1f2:	2305                	addiw	t1,t1,1
    ch[t1]=cc[t2]+cc[t3+t2];
    83f4a1f4:	00e7f7d3          	fadd.s	fa5,fa5,fa4
    t2=(t1+=ido)<<1;
    83f4a1f8:	000e081b          	sext.w	a6,t3
  for(k=0;k<l1;k++){
    83f4a1fc:	01ce8e3b          	addw	t3,t4,t3
    ch[t1]=cc[t2]+cc[t3+t2];
    83f4a200:	00f8a027          	fsw	fa5,0(a7)
    ch[t1+t0]=cc[t2]-cc[t3+t2];
    83f4a204:	000f2787          	flw	fa5,0(t5)
    83f4a208:	0007a707          	flw	fa4,0(a5)
  for(k=0;k<l1;k++){
    83f4a20c:	9896                	add	a7,a7,t0
    ch[t1+t0]=cc[t2]-cc[t3+t2];
    83f4a20e:	08e7f7d3          	fsub.s	fa5,fa5,fa4
    83f4a212:	00f3a027          	fsw	fa5,0(t2)
  for(k=0;k<l1;k++){
    83f4a216:	fc6591e3          	bne	a1,t1,83f4a1d8 <dradb2+0x28>
  }

  if(ido<2)return;
    83f4a21a:	4785                	li	a5,1
    83f4a21c:	0ea7d863          	bge	a5,a0,83f4a30c <dradb2+0x15c>
  if(ido==2)goto L105;
    83f4a220:	4789                	li	a5,2
    83f4a222:	0ef50a63          	beq	a0,a5,83f4a316 <dradb2+0x166>
      ch[t6]=wa1[i-2]*ti2+wa1[i-1]*tr2;
    }
    t2=(t1+=ido)<<1;
  }

  if(ido%2==1)return;
    83f4a226:	00157493          	andi	s1,a0,1
  for(k=0;k<l1;k++){
    83f4a22a:	0eb05163          	blez	a1,83f4a30c <dradb2+0x15c>
    83f4a22e:	00251293          	slli	t0,a0,0x2
    83f4a232:	8f36                	mv	t5,a3
    83f4a234:	00291f93          	slli	t6,s2,0x2
  t2=0;
    83f4a238:	4781                	li	a5,0
  t1=0;
    83f4a23a:	4401                	li	s0,0
  for(k=0;k<l1;k++){
    83f4a23c:	4381                	li	t2,0
    for(i=2;i<ido;i+=2){
    83f4a23e:	00fe883b          	addw	a6,t4,a5
    83f4a242:	080a                	slli	a6,a6,0x2
    83f4a244:	078a                	slli	a5,a5,0x2
    83f4a246:	97b2                	add	a5,a5,a2
    83f4a248:	9832                	add	a6,a6,a2
    83f4a24a:	88ba                	mv	a7,a4
    83f4a24c:	01ef8e33          	add	t3,t6,t5
    t5=(t4=t2)+(ido<<1);
    83f4a250:	837a                	mv	t1,t5
    for(i=2;i<ido;i+=2){
    83f4a252:	4909                	li	s2,2
      ch[t3-1]=cc[t4-1]+cc[t5-1];
    83f4a254:	ff482707          	flw	fa4,-12(a6)
    83f4a258:	0047a787          	flw	fa5,4(a5)
    for(i=2;i<ido;i+=2){
    83f4a25c:	0321                	addi	t1,t1,8
    83f4a25e:	07a1                	addi	a5,a5,8
      ch[t3-1]=cc[t4-1]+cc[t5-1];
    83f4a260:	00e7f7d3          	fadd.s	fa5,fa5,fa4
    for(i=2;i<ido;i+=2){
    83f4a264:	1861                	addi	a6,a6,-8
    83f4a266:	08a1                	addi	a7,a7,8
    83f4a268:	0e21                	addi	t3,t3,8
    83f4a26a:	2909                	addiw	s2,s2,2
      ch[t3-1]=cc[t4-1]+cc[t5-1];
    83f4a26c:	fef32e27          	fsw	fa5,-4(t1)
      ch[t3]=cc[t4]-cc[t5];
    83f4a270:	00082607          	flw	fa2,0(a6)
    83f4a274:	0007a707          	flw	fa4,0(a5)
      tr2=cc[t4-1]-cc[t5-1];
    83f4a278:	ffc82687          	flw	fa3,-4(a6)
    83f4a27c:	ffc7a787          	flw	fa5,-4(a5)
      ch[t3]=cc[t4]-cc[t5];
    83f4a280:	08c77753          	fsub.s	fa4,fa4,fa2
      tr2=cc[t4-1]-cc[t5-1];
    83f4a284:	08d7f7d3          	fsub.s	fa5,fa5,fa3
      ch[t3]=cc[t4]-cc[t5];
    83f4a288:	00e32027          	fsw	fa4,0(t1)
      ti2=cc[t4]+cc[t5];
    83f4a28c:	0007a707          	flw	fa4,0(a5)
    83f4a290:	00082587          	flw	fa1,0(a6)
      ch[t6-1]=wa1[i-2]*tr2-wa1[i-1]*ti2;
    83f4a294:	ffc8a607          	flw	fa2,-4(a7)
    83f4a298:	ff88a687          	flw	fa3,-8(a7)
      ti2=cc[t4]+cc[t5];
    83f4a29c:	00b77753          	fadd.s	fa4,fa4,fa1
      ch[t6-1]=wa1[i-2]*tr2-wa1[i-1]*ti2;
    83f4a2a0:	10c77653          	fmul.s	fa2,fa4,fa2
    83f4a2a4:	60f6f6c7          	fmsub.s	fa3,fa3,fa5,fa2
    83f4a2a8:	fede2e27          	fsw	fa3,-4(t3)
      ch[t6]=wa1[i-2]*ti2+wa1[i-1]*tr2;
    83f4a2ac:	ffc8a607          	flw	fa2,-4(a7)
    83f4a2b0:	ff88a687          	flw	fa3,-8(a7)
    83f4a2b4:	10c7f7d3          	fmul.s	fa5,fa5,fa2
    83f4a2b8:	78e6f7c3          	fmadd.s	fa5,fa3,fa4,fa5
    83f4a2bc:	00fe2027          	fsw	fa5,0(t3)
    for(i=2;i<ido;i+=2){
    83f4a2c0:	f8a94ae3          	blt	s2,a0,83f4a254 <dradb2+0xa4>
    t2=(t1+=ido)<<1;
    83f4a2c4:	9c29                	addw	s0,s0,a0
  for(k=0;k<l1;k++){
    83f4a2c6:	2385                	addiw	t2,t2,1
    t2=(t1+=ido)<<1;
    83f4a2c8:	0014179b          	slliw	a5,s0,0x1
  for(k=0;k<l1;k++){
    83f4a2cc:	9f16                	add	t5,t5,t0
    83f4a2ce:	f67598e3          	bne	a1,t2,83f4a23e <dradb2+0x8e>

L105:
  t1=ido-1;
    83f4a2d2:	fff5079b          	addiw	a5,a0,-1
  if(ido%2==1)return;
    83f4a2d6:	e89d                	bnez	s1,83f4a30c <dradb2+0x15c>
    83f4a2d8:	078a                	slli	a5,a5,0x2
    83f4a2da:	963e                	add	a2,a2,a5
    83f4a2dc:	96be                	add	a3,a3,a5
    83f4a2de:	0e8a                	slli	t4,t4,0x2
  t1=ido-1;
    83f4a2e0:	4781                	li	a5,0
  t2=ido-1;
  for(k=0;k<l1;k++){
    ch[t1]=cc[t2]+cc[t2];
    83f4a2e2:	00062787          	flw	fa5,0(a2)
    ch[t1+t0]=-(cc[t2+1]+cc[t2+1]);
    83f4a2e6:	01f68733          	add	a4,a3,t6
  for(k=0;k<l1;k++){
    83f4a2ea:	2785                	addiw	a5,a5,1
    ch[t1]=cc[t2]+cc[t2];
    83f4a2ec:	00f7f7d3          	fadd.s	fa5,fa5,fa5
    83f4a2f0:	00f6a027          	fsw	fa5,0(a3)
    ch[t1+t0]=-(cc[t2+1]+cc[t2+1]);
    83f4a2f4:	00462787          	flw	fa5,4(a2)
  for(k=0;k<l1;k++){
    83f4a2f8:	9696                	add	a3,a3,t0
    83f4a2fa:	9676                	add	a2,a2,t4
    ch[t1+t0]=-(cc[t2+1]+cc[t2+1]);
    83f4a2fc:	00f7f7d3          	fadd.s	fa5,fa5,fa5
    83f4a300:	20f797d3          	fneg.s	fa5,fa5
    83f4a304:	00f72027          	fsw	fa5,0(a4)
  for(k=0;k<l1;k++){
    83f4a308:	fcb7cde3          	blt	a5,a1,83f4a2e2 <dradb2+0x132>
    t1+=ido;
    t2+=ido<<1;
  }
}
    83f4a30c:	6462                	ld	s0,24(sp)
    83f4a30e:	64c2                	ld	s1,16(sp)
    83f4a310:	6922                	ld	s2,8(sp)
    83f4a312:	6105                	addi	sp,sp,32
    83f4a314:	8082                	ret
  for(k=0;k<l1;k++){
    83f4a316:	feb05be3          	blez	a1,83f4a30c <dradb2+0x15c>
  t1=ido-1;
    83f4a31a:	4785                	li	a5,1
    83f4a31c:	42a1                	li	t0,8
    83f4a31e:	00291f93          	slli	t6,s2,0x2
    83f4a322:	bf5d                	j	83f4a2d8 <dradb2+0x128>

0000000083f4a324 <dradb3>:

static void dradb3(int ido,int l1,float *cc,float *ch,float *wa1,
                          float *wa2){
    83f4a324:	7139                	addi	sp,sp,-64
    83f4a326:	f04e                	sd	s3,32(sp)
    83f4a328:	ec52                	sd	s4,24(sp)
  float ci2,ci3,di2,di3,cr2,cr3,dr2,dr3,ti2,tr2;
  t0=l1*ido;

  t1=0;
  t2=t0<<1;
  t3=ido<<1;
    83f4a32a:	0015199b          	slliw	s3,a0,0x1
                          float *wa2){
    83f4a32e:	fc22                	sd	s0,56(sp)
    83f4a330:	f826                	sd	s1,48(sp)
    83f4a332:	f44a                	sd	s2,40(sp)
    83f4a334:	e856                	sd	s5,16(sp)
    83f4a336:	e45a                	sd	s6,8(sp)
  t0=l1*ido;
    83f4a338:	02a58a3b          	mulw	s4,a1,a0
  t4=ido+(ido<<1);
    83f4a33c:	00a98ebb          	addw	t4,s3,a0
  t5=0;
  for(k=0;k<l1;k++){
    83f4a340:	18b05f63          	blez	a1,83f4a4de <dradb3+0x1ba>
    83f4a344:	893a                	mv	s2,a4
    83f4a346:	001a1e1b          	slliw	t3,s4,0x1
    83f4a34a:	00299713          	slli	a4,s3,0x2
    83f4a34e:	41300f33          	neg	t5,s3
    83f4a352:	8abe                	mv	s5,a5
    83f4a354:	8432                	mv	s0,a2
    83f4a356:	9732                	add	a4,a4,a2
    83f4a358:	82b6                	mv	t0,a3
    83f4a35a:	0e8a                	slli	t4,t4,0x2
    83f4a35c:	00251613          	slli	a2,a0,0x2
    83f4a360:	0f0a                	slli	t5,t5,0x2
    83f4a362:	002a1493          	slli	s1,s4,0x2
    83f4a366:	0e0a                	slli	t3,t3,0x2
    83f4a368:	4801                	li	a6,0
    83f4a36a:	00008797          	auipc	a5,0x8
    83f4a36e:	f0e7a107          	flw	ft2,-242(a5) # 83f52278 <__func__.1+0x80>
    83f4a372:	00008797          	auipc	a5,0x8
    83f4a376:	0e67a587          	flw	fa1,230(a5) # 83f52458 <__func__.1+0x260>
    tr2=cc[t3-1]+cc[t3-1];
    83f4a37a:	ffc72787          	flw	fa5,-4(a4)
    cr2=cc[t5]+(taur*tr2);
    83f4a37e:	01e707b3          	add	a5,a4,t5
    83f4a382:	0007a707          	flw	fa4,0(a5)
    tr2=cc[t3-1]+cc[t3-1];
    83f4a386:	00f7f7d3          	fadd.s	fa5,fa5,fa5
    ch[t1]=cc[t5]+tr2;
    ci3=taui*(cc[t3]+cc[t3]);
    ch[t1+t0]=cr2-ci3;
    83f4a38a:	00968333          	add	t1,a3,s1
    ch[t1+t2]=cr2+ci3;
    83f4a38e:	01c688b3          	add	a7,a3,t3
    83f4a392:	87c2                	mv	a5,a6
  for(k=0;k<l1;k++){
    83f4a394:	2805                	addiw	a6,a6,1
    ch[t1]=cc[t5]+tr2;
    83f4a396:	00f776d3          	fadd.s	fa3,fa4,fa5
    cr2=cc[t5]+(taur*tr2);
    83f4a39a:	7027f7c3          	fmadd.s	fa5,fa5,ft2,fa4
    ch[t1]=cc[t5]+tr2;
    83f4a39e:	00d6a027          	fsw	fa3,0(a3)
    ci3=taui*(cc[t3]+cc[t3]);
    83f4a3a2:	00072707          	flw	fa4,0(a4)
  for(k=0;k<l1;k++){
    83f4a3a6:	96b2                	add	a3,a3,a2
    83f4a3a8:	9776                	add	a4,a4,t4
    ci3=taui*(cc[t3]+cc[t3]);
    83f4a3aa:	00e77753          	fadd.s	fa4,fa4,fa4
    ch[t1+t0]=cr2-ci3;
    83f4a3ae:	78b776cb          	fnmsub.s	fa3,fa4,fa1,fa5
    ch[t1+t2]=cr2+ci3;
    83f4a3b2:	78b777c3          	fmadd.s	fa5,fa4,fa1,fa5
    ch[t1+t0]=cr2-ci3;
    83f4a3b6:	00d32027          	fsw	fa3,0(t1)
    ch[t1+t2]=cr2+ci3;
    83f4a3ba:	00f8a027          	fsw	fa5,0(a7)
  for(k=0;k<l1;k++){
    83f4a3be:	fb059ee3          	bne	a1,a6,83f4a37a <dradb3+0x56>
    t1+=ido;
    t3+=t4;
    t5+=t4;
  }

  if(ido==1)return;
    83f4a3c2:	4705                	li	a4,1
    83f4a3c4:	10e50d63          	beq	a0,a4,83f4a4de <dradb3+0x1ba>
    83f4a3c8:	ffd5071b          	addiw	a4,a0,-3
    83f4a3cc:	0017571b          	srliw	a4,a4,0x1
    83f4a3d0:	070e                	slli	a4,a4,0x3
    83f4a3d2:	00890f93          	addi	t6,s2,8
    83f4a3d6:	9fba                	add	t6,t6,a4
    83f4a3d8:	0a0e                	slli	s4,s4,0x3
    83f4a3da:	4381                	li	t2,0
    83f4a3dc:	4701                	li	a4,0
    t7=t1+(t1<<1);
    t6=(t5=t7+t3);
    t8=t1;
    t10=(t9=t1+t0)+t0;

    for(i=2;i<ido;i+=2){
    83f4a3de:	4b09                	li	s6,2
    t7=t1+(t1<<1);
    83f4a3e0:	0013969b          	slliw	a3,t2,0x1
    83f4a3e4:	0076833b          	addw	t1,a3,t2
    t6=(t5=t7+t3);
    83f4a3e8:	013306bb          	addw	a3,t1,s3
    for(i=2;i<ido;i+=2){
    83f4a3ec:	0eab5063          	bge	s6,a0,83f4a4cc <dradb3+0x1a8>
    83f4a3f0:	068a                	slli	a3,a3,0x2
    83f4a3f2:	96a2                	add	a3,a3,s0
    83f4a3f4:	030a                	slli	t1,t1,0x2
    83f4a3f6:	9322                	add	t1,t1,s0
    83f4a3f8:	00928f33          	add	t5,t0,s1
    83f4a3fc:	88d6                	mv	a7,s5
    83f4a3fe:	005a0eb3          	add	t4,s4,t0
    83f4a402:	85ca                	mv	a1,s2
    83f4a404:	8e16                	mv	t3,t0
    83f4a406:	8836                	mv	a6,a3
      t6-=2;
      t7+=2;
      t8+=2;
      t9+=2;
      t10+=2;
      tr2=cc[t5-1]+cc[t6-1];
    83f4a408:	ff482707          	flw	fa4,-12(a6)
    83f4a40c:	0046a787          	flw	fa5,4(a3)
      cr2=cc[t7-1]+(taur*tr2);
    83f4a410:	00432687          	flw	fa3,4(t1)
    for(i=2;i<ido;i+=2){
    83f4a414:	0e21                	addi	t3,t3,8
      tr2=cc[t5-1]+cc[t6-1];
    83f4a416:	00e7f7d3          	fadd.s	fa5,fa5,fa4
    for(i=2;i<ido;i+=2){
    83f4a41a:	06a1                	addi	a3,a3,8
    83f4a41c:	1861                	addi	a6,a6,-8
    83f4a41e:	0321                	addi	t1,t1,8
    83f4a420:	05a1                	addi	a1,a1,8
      ch[t8-1]=cc[t7-1]+tr2;
    83f4a422:	00f6f753          	fadd.s	fa4,fa3,fa5
      cr2=cc[t7-1]+(taur*tr2);
    83f4a426:	6827f6c3          	fmadd.s	fa3,fa5,ft2,fa3
    for(i=2;i<ido;i+=2){
    83f4a42a:	0f21                	addi	t5,t5,8
    83f4a42c:	08a1                	addi	a7,a7,8
    83f4a42e:	0ea1                	addi	t4,t4,8
      ch[t8-1]=cc[t7-1]+tr2;
    83f4a430:	feee2e27          	fsw	fa4,-4(t3)
      ti2=cc[t5]-cc[t6];
    83f4a434:	00082787          	flw	fa5,0(a6)
    83f4a438:	0006a707          	flw	fa4,0(a3)
      ci2=cc[t7]+(taur*ti2);
    83f4a43c:	00032607          	flw	fa2,0(t1)
      ti2=cc[t5]-cc[t6];
    83f4a440:	08f77753          	fsub.s	fa4,fa4,fa5
      ch[t8]=cc[t7]+ti2;
    83f4a444:	00e677d3          	fadd.s	fa5,fa2,fa4
      ci2=cc[t7]+(taur*ti2);
    83f4a448:	60277643          	fmadd.s	fa2,fa4,ft2,fa2
      ch[t8]=cc[t7]+ti2;
    83f4a44c:	00fe2027          	fsw	fa5,0(t3)
      cr3=taui*(cc[t5-1]-cc[t6-1]);
    83f4a450:	ffc82007          	flw	ft0,-4(a6)
    83f4a454:	ffc6a707          	flw	fa4,-4(a3)
      ci3=taui*(cc[t5]+cc[t6]);
    83f4a458:	00082507          	flw	fa0,0(a6)
    83f4a45c:	0006a787          	flw	fa5,0(a3)
      cr3=taui*(cc[t5-1]-cc[t6-1]);
    83f4a460:	08077753          	fsub.s	fa4,fa4,ft0
      dr2=cr2-ci3;
      dr3=cr2+ci3;
      di2=ci2+cr3;
      di3=ci2-cr3;
      ch[t9-1]=wa1[i-2]*dr2-wa1[i-1]*di2;
    83f4a464:	ffc5a007          	flw	ft0,-4(a1)
      ci3=taui*(cc[t5]+cc[t6]);
    83f4a468:	00a7f7d3          	fadd.s	fa5,fa5,fa0
      ch[t9-1]=wa1[i-2]*dr2-wa1[i-1]*di2;
    83f4a46c:	ff85a507          	flw	fa0,-8(a1)
      di2=ci2+cr3;
    83f4a470:	60b770c3          	fmadd.s	ft1,fa4,fa1,fa2
      di3=ci2-cr3;
    83f4a474:	60b7774b          	fnmsub.s	fa4,fa4,fa1,fa2
      dr2=cr2-ci3;
    83f4a478:	68b7f64b          	fnmsub.s	fa2,fa5,fa1,fa3
      dr3=cr2+ci3;
    83f4a47c:	68b7f7c3          	fmadd.s	fa5,fa5,fa1,fa3
      ch[t9-1]=wa1[i-2]*dr2-wa1[i-1]*di2;
    83f4a480:	1000f053          	fmul.s	ft0,ft1,ft0
    83f4a484:	00c57547          	fmsub.s	fa0,fa0,fa2,ft0
    83f4a488:	feaf2e27          	fsw	fa0,-4(t5)
      ch[t9]=wa1[i-2]*di2+wa1[i-1]*dr2;
    83f4a48c:	ffc5a507          	flw	fa0,-4(a1)
    83f4a490:	ff85a687          	flw	fa3,-8(a1)
    83f4a494:	10a67653          	fmul.s	fa2,fa2,fa0
    83f4a498:	6016f643          	fmadd.s	fa2,fa3,ft1,fa2
    83f4a49c:	00cf2027          	fsw	fa2,0(t5)
      ch[t10-1]=wa2[i-2]*dr3-wa2[i-1]*di3;
    83f4a4a0:	ffc8a607          	flw	fa2,-4(a7)
    83f4a4a4:	ff88a687          	flw	fa3,-8(a7)
    83f4a4a8:	10c77653          	fmul.s	fa2,fa4,fa2
    83f4a4ac:	60f6f6c7          	fmsub.s	fa3,fa3,fa5,fa2
    83f4a4b0:	fedeae27          	fsw	fa3,-4(t4)
      ch[t10]=wa2[i-2]*di3+wa2[i-1]*dr3;
    83f4a4b4:	ffc8a607          	flw	fa2,-4(a7)
    83f4a4b8:	ff88a687          	flw	fa3,-8(a7)
    83f4a4bc:	10c7f7d3          	fmul.s	fa5,fa5,fa2
    83f4a4c0:	78e6f7c3          	fmadd.s	fa5,fa3,fa4,fa5
    83f4a4c4:	00fea027          	fsw	fa5,0(t4)
    for(i=2;i<ido;i+=2){
    83f4a4c8:	f4bf90e3          	bne	t6,a1,83f4a408 <dradb3+0xe4>
    }
    t1+=ido;
    83f4a4cc:	007503bb          	addw	t2,a0,t2
  for(k=0;k<l1;k++){
    83f4a4d0:	0017069b          	addiw	a3,a4,1
    83f4a4d4:	92b2                	add	t0,t0,a2
    83f4a4d6:	00e78463          	beq	a5,a4,83f4a4de <dradb3+0x1ba>
    83f4a4da:	8736                	mv	a4,a3
    83f4a4dc:	b711                	j	83f4a3e0 <dradb3+0xbc>
  }
}
    83f4a4de:	7462                	ld	s0,56(sp)
    83f4a4e0:	74c2                	ld	s1,48(sp)
    83f4a4e2:	7922                	ld	s2,40(sp)
    83f4a4e4:	7982                	ld	s3,32(sp)
    83f4a4e6:	6a62                	ld	s4,24(sp)
    83f4a4e8:	6ac2                	ld	s5,16(sp)
    83f4a4ea:	6b22                	ld	s6,8(sp)
    83f4a4ec:	6121                	addi	sp,sp,64
    83f4a4ee:	8082                	ret

0000000083f4a4f0 <dradb4>:

static void dradb4(int ido,int l1,float *cc,float *ch,float *wa1,
			  float *wa2,float *wa3){
    83f4a4f0:	7175                	addi	sp,sp,-144
  int i,k,t0,t1,t2,t3,t4,t5,t6,t7,t8;
  float ci2,ci3,ci4,cr2,cr3,cr4,ti1,ti2,ti3,ti4,tr1,tr2,tr3,tr4;
  t0=l1*ido;

  t1=0;
  t2=ido<<2;
    83f4a4f2:	0025189b          	slliw	a7,a0,0x2
			  float *wa2,float *wa3){
    83f4a4f6:	fc6a                	sd	s10,56(sp)
    83f4a4f8:	e436                	sd	a3,8(sp)
  t3=0;
  t6=ido<<1;
    83f4a4fa:	00151d1b          	slliw	s10,a0,0x1
  t2=ido<<2;
    83f4a4fe:	0008869b          	sext.w	a3,a7
			  float *wa2,float *wa3){
    83f4a502:	e0e6                	sd	s9,64(sp)
    83f4a504:	e522                	sd	s0,136(sp)
    83f4a506:	e126                	sd	s1,128(sp)
    83f4a508:	fcca                	sd	s2,120(sp)
    83f4a50a:	f8ce                	sd	s3,112(sp)
    83f4a50c:	f4d2                	sd	s4,104(sp)
    83f4a50e:	f0d6                	sd	s5,96(sp)
    83f4a510:	ecda                	sd	s6,88(sp)
    83f4a512:	e8de                	sd	s7,80(sp)
    83f4a514:	e4e2                	sd	s8,72(sp)
    83f4a516:	f86e                	sd	s11,48(sp)
  t6=ido<<1;
    83f4a518:	ce6a                	sw	s10,28(sp)
  t2=ido<<2;
    83f4a51a:	e836                	sd	a3,16(sp)
  t0=l1*ido;
    83f4a51c:	02a58cbb          	mulw	s9,a1,a0
  for(k=0;k<l1;k++){
    83f4a520:	08b05863          	blez	a1,83f4a5b0 <dradb4+0xc0>
    83f4a524:	001c9693          	slli	a3,s9,0x1
    83f4a528:	01968fb3          	add	t6,a3,s9
    83f4a52c:	66c2                	ld	a3,16(sp)
    83f4a52e:	002d1293          	slli	t0,s10,0x2
    83f4a532:	41a00f33          	neg	t5,s10
    83f4a536:	00269393          	slli	t2,a3,0x2
    83f4a53a:	66a2                	ld	a3,8(sp)
    83f4a53c:	005608b3          	add	a7,a2,t0
    83f4a540:	00251a13          	slli	s4,a0,0x2
    83f4a544:	0f0a                	slli	t5,t5,0x2
    83f4a546:	002c9a93          	slli	s5,s9,0x2
    83f4a54a:	003c9b13          	slli	s6,s9,0x3
    83f4a54e:	0f8a                	slli	t6,t6,0x2
    83f4a550:	4301                	li	t1,0
    83f4a552:	00008417          	auipc	s0,0x8
    83f4a556:	d3a42607          	flw	fa2,-710(s0) # 83f5228c <__func__.1+0x94>
    t4=t3+t6;
    t5=t1;
    tr3=cc[t4-1]+cc[t4-1];
    tr4=cc[t4]+cc[t4];
    tr1=cc[t3]-cc[(t4+=t6)-1];
    83f4a55a:	01e88eb3          	add	t4,a7,t5
    83f4a55e:	00588e33          	add	t3,a7,t0
    83f4a562:	000ea787          	flw	fa5,0(t4)
    83f4a566:	ffce2507          	flw	fa0,-4(t3)
    tr3=cc[t4-1]+cc[t4-1];
    83f4a56a:	ffc8a687          	flw	fa3,-4(a7)
    tr4=cc[t4]+cc[t4];
    83f4a56e:	0008a707          	flw	fa4,0(a7)
    tr2=cc[t3]+cc[t4-1];
    83f4a572:	00a7f5d3          	fadd.s	fa1,fa5,fa0
    tr1=cc[t3]-cc[(t4+=t6)-1];
    83f4a576:	08a7f7d3          	fsub.s	fa5,fa5,fa0
    ch[t5]=tr2+tr3;
    ch[t5+=t0]=tr1-tr4;
    83f4a57a:	01568433          	add	s0,a3,s5
    ch[t5+=t0]=tr2-tr3;
    83f4a57e:	01668eb3          	add	t4,a3,s6
    ch[t5+=t0]=tr1+tr4;
    83f4a582:	01f68e33          	add	t3,a3,t6
    ch[t5]=tr2+tr3;
    83f4a586:	58c6f043          	fmadd.s	ft0,fa3,fa2,fa1
    ch[t5+=t0]=tr1-tr4;
    83f4a58a:	78c7754b          	fnmsub.s	fa0,fa4,fa2,fa5
    ch[t5+=t0]=tr2-tr3;
    83f4a58e:	58c6f6cb          	fnmsub.s	fa3,fa3,fa2,fa1
    ch[t5+=t0]=tr1+tr4;
    83f4a592:	78c777c3          	fmadd.s	fa5,fa4,fa2,fa5
  for(k=0;k<l1;k++){
    83f4a596:	2305                	addiw	t1,t1,1
    ch[t5]=tr2+tr3;
    83f4a598:	0006a027          	fsw	ft0,0(a3)
    ch[t5+=t0]=tr1-tr4;
    83f4a59c:	00a42027          	fsw	fa0,0(s0)
    ch[t5+=t0]=tr2-tr3;
    83f4a5a0:	00dea027          	fsw	fa3,0(t4)
    ch[t5+=t0]=tr1+tr4;
    83f4a5a4:	00fe2027          	fsw	fa5,0(t3)
  for(k=0;k<l1;k++){
    83f4a5a8:	989e                	add	a7,a7,t2
    83f4a5aa:	96d2                	add	a3,a3,s4
    83f4a5ac:	fa6597e3          	bne	a1,t1,83f4a55a <dradb4+0x6a>
    t1+=ido;
    t3+=t2;
  }

  if(ido<2)return;
    83f4a5b0:	4685                	li	a3,1
    83f4a5b2:	20a6d363          	bge	a3,a0,83f4a7b8 <dradb4+0x2c8>
  if(ido==2)goto L105;
    83f4a5b6:	4689                	li	a3,2
    83f4a5b8:	20d50e63          	beq	a0,a3,83f4a7d4 <dradb4+0x2e4>
      ch[t8]=wa3[i-2]*ci4+wa3[i-1]*cr4;
    }
    t1+=ido;
  }

  if(ido%2 == 1)return;
    83f4a5bc:	00157693          	andi	a3,a0,1
    83f4a5c0:	f436                	sd	a3,40(sp)
  for(k=0;k<l1;k++){
    83f4a5c2:	1eb05b63          	blez	a1,83f4a7b8 <dradb4+0x2c8>
    83f4a5c6:	001c9693          	slli	a3,s9,0x1
    83f4a5ca:	69a2                	ld	s3,8(sp)
    83f4a5cc:	01968db3          	add	s11,a3,s9
    83f4a5d0:	f036                	sd	a3,32(sp)
    83f4a5d2:	00251a13          	slli	s4,a0,0x2
    83f4a5d6:	002c9a93          	slli	s5,s9,0x2
    83f4a5da:	003c9b13          	slli	s6,s9,0x3
    83f4a5de:	0d8a                	slli	s11,s11,0x2
  t1=0;
    83f4a5e0:	4c01                	li	s8,0
  for(k=0;k<l1;k++){
    83f4a5e2:	4b81                	li	s7,0
    t5=(t4=(t3=(t2=t1<<2)+t6))+t6;
    83f4a5e4:	002c1e9b          	slliw	t4,s8,0x2
    83f4a5e8:	01dd0f3b          	addw	t5,s10,t4
    for(i=2;i<ido;i+=2){
    83f4a5ec:	01af0e3b          	addw	t3,t5,s10
    83f4a5f0:	0f0a                	slli	t5,t5,0x2
    83f4a5f2:	0e8a                	slli	t4,t4,0x2
    83f4a5f4:	0e0a                	slli	t3,t3,0x2
    83f4a5f6:	9f32                	add	t5,t5,a2
    83f4a5f8:	9eb2                	add	t4,t4,a2
    83f4a5fa:	9e32                	add	t3,t3,a2
    83f4a5fc:	833a                	mv	t1,a4
    83f4a5fe:	013a84b3          	add	s1,s5,s3
    83f4a602:	88be                	mv	a7,a5
    83f4a604:	013b0433          	add	s0,s6,s3
    83f4a608:	86c2                	mv	a3,a6
    83f4a60a:	013d83b3          	add	t2,s11,s3
    t5=(t4=(t3=(t2=t1<<2)+t6))+t6;
    83f4a60e:	82ce                	mv	t0,s3
    83f4a610:	8ffa                	mv	t6,t5
    for(i=2;i<ido;i+=2){
    83f4a612:	4909                	li	s2,2
      ti1=cc[t2]+cc[t5];
    83f4a614:	ff8e2287          	flw	ft5,-8(t3)
      ti3=cc[t3]-cc[t4];
    83f4a618:	ff8fa107          	flw	ft2,-8(t6)
      tr1=cc[t2-1]-cc[t5-1];
    83f4a61c:	ff4e2087          	flw	ft1,-12(t3)
      ti4=cc[t3-1]-cc[t4-1];
    83f4a620:	ff4fa187          	flw	ft3,-12(t6)
      ti1=cc[t2]+cc[t5];
    83f4a624:	008ea707          	flw	fa4,8(t4)
      ti3=cc[t3]-cc[t4];
    83f4a628:	008f2787          	flw	fa5,8(t5)
      tr1=cc[t2-1]-cc[t5-1];
    83f4a62c:	004ea587          	flw	fa1,4(t4)
      ti4=cc[t3-1]-cc[t4-1];
    83f4a630:	004f2507          	flw	fa0,4(t5)
      ti3=cc[t3]-cc[t4];
    83f4a634:	0827f053          	fsub.s	ft0,fa5,ft2
      tr2=cc[t2-1]+cc[t5-1];
    83f4a638:	0015f6d3          	fadd.s	fa3,fa1,ft1
      tr3=cc[t3-1]+cc[t4-1];
    83f4a63c:	00357253          	fadd.s	ft4,fa0,ft3
      ti2=cc[t2]-cc[t5];
    83f4a640:	08577653          	fsub.s	fa2,fa4,ft5
      ti4=cc[t3-1]-cc[t4-1];
    83f4a644:	08357553          	fsub.s	fa0,fa0,ft3
      ti1=cc[t2]+cc[t5];
    83f4a648:	00577753          	fadd.s	fa4,fa4,ft5
      tr4=cc[t3]+cc[t4];
    83f4a64c:	0027f7d3          	fadd.s	fa5,fa5,ft2
      ch[t7-1]=tr2+tr3;
    83f4a650:	0046f153          	fadd.s	ft2,fa3,ft4
      ch[t7]=ti2+ti3;
    83f4a654:	000672d3          	fadd.s	ft5,fa2,ft0
      tr1=cc[t2-1]-cc[t5-1];
    83f4a658:	0815f5d3          	fsub.s	fa1,fa1,ft1
      ci2=ti1+ti4;
    83f4a65c:	00a771d3          	fadd.s	ft3,fa4,fa0
      ci3=ti2-ti3;
    83f4a660:	08067653          	fsub.s	fa2,fa2,ft0
      ch[t7-1]=tr2+tr3;
    83f4a664:	0022a227          	fsw	ft2,4(t0)
      ch[t7]=ti2+ti3;
    83f4a668:	0052a427          	fsw	ft5,8(t0)
      ch[(t8=t7+t0)-1]=wa1[i-2]*cr2-wa1[i-1]*ci2;
    83f4a66c:	00432107          	flw	ft2,4(t1)
      cr2=tr1-tr4;
    83f4a670:	08f5f053          	fsub.s	ft0,fa1,fa5
      ch[(t8=t7+t0)-1]=wa1[i-2]*cr2-wa1[i-1]*ci2;
    83f4a674:	00032087          	flw	ft1,0(t1)
    83f4a678:	1021f153          	fmul.s	ft2,ft3,ft2
      ci4=ti1-ti4;
    83f4a67c:	08a77753          	fsub.s	fa4,fa4,fa0
      cr4=tr1+tr4;
    83f4a680:	00b7f7d3          	fadd.s	fa5,fa5,fa1
    for(i=2;i<ido;i+=2){
    83f4a684:	04a1                	addi	s1,s1,8
    83f4a686:	08a1                	addi	a7,a7,8
      ch[(t8=t7+t0)-1]=wa1[i-2]*cr2-wa1[i-1]*ci2;
    83f4a688:	1000f0c7          	fmsub.s	ft1,ft1,ft0,ft2
      cr3=tr2-tr3;
    83f4a68c:	0846f6d3          	fsub.s	fa3,fa3,ft4
    for(i=2;i<ido;i+=2){
    83f4a690:	0421                	addi	s0,s0,8
    83f4a692:	06a1                	addi	a3,a3,8
    83f4a694:	03a1                	addi	t2,t2,8
      ch[(t8=t7+t0)-1]=wa1[i-2]*cr2-wa1[i-1]*ci2;
    83f4a696:	fe14ae27          	fsw	ft1,-4(s1)
      ch[t8]=wa1[i-2]*ci2+wa1[i-1]*cr2;
    83f4a69a:	00432507          	flw	fa0,4(t1)
    83f4a69e:	00032587          	flw	fa1,0(t1)
    for(i=2;i<ido;i+=2){
    83f4a6a2:	2909                	addiw	s2,s2,2
      ch[t8]=wa1[i-2]*ci2+wa1[i-1]*cr2;
    83f4a6a4:	10a07053          	fmul.s	ft0,ft0,fa0
    for(i=2;i<ido;i+=2){
    83f4a6a8:	0ea1                	addi	t4,t4,8
    83f4a6aa:	1e61                	addi	t3,t3,-8
    83f4a6ac:	0f21                	addi	t5,t5,8
    83f4a6ae:	1fe1                	addi	t6,t6,-8
      ch[t8]=wa1[i-2]*ci2+wa1[i-1]*cr2;
    83f4a6b0:	0035f043          	fmadd.s	ft0,fa1,ft3,ft0
    for(i=2;i<ido;i+=2){
    83f4a6b4:	02a1                	addi	t0,t0,8
    83f4a6b6:	0321                	addi	t1,t1,8
      ch[t8]=wa1[i-2]*ci2+wa1[i-1]*cr2;
    83f4a6b8:	0004a027          	fsw	ft0,0(s1)
      ch[(t8+=t0)-1]=wa2[i-2]*cr3-wa2[i-1]*ci3;
    83f4a6bc:	ffc8a507          	flw	fa0,-4(a7)
    83f4a6c0:	ff88a587          	flw	fa1,-8(a7)
    83f4a6c4:	10a67553          	fmul.s	fa0,fa2,fa0
    83f4a6c8:	50d5f5c7          	fmsub.s	fa1,fa1,fa3,fa0
    83f4a6cc:	feb42e27          	fsw	fa1,-4(s0)
      ch[t8]=wa2[i-2]*ci3+wa2[i-1]*cr3;
    83f4a6d0:	ffc8a507          	flw	fa0,-4(a7)
    83f4a6d4:	ff88a587          	flw	fa1,-8(a7)
    83f4a6d8:	10a6f6d3          	fmul.s	fa3,fa3,fa0
    83f4a6dc:	68c5f6c3          	fmadd.s	fa3,fa1,fa2,fa3
    83f4a6e0:	00d42027          	fsw	fa3,0(s0)
      ch[(t8+=t0)-1]=wa3[i-2]*cr4-wa3[i-1]*ci4;
    83f4a6e4:	ffc6a607          	flw	fa2,-4(a3)
    83f4a6e8:	ff86a687          	flw	fa3,-8(a3)
    83f4a6ec:	10c77653          	fmul.s	fa2,fa4,fa2
    83f4a6f0:	60f6f6c7          	fmsub.s	fa3,fa3,fa5,fa2
    83f4a6f4:	fed3ae27          	fsw	fa3,-4(t2)
      ch[t8]=wa3[i-2]*ci4+wa3[i-1]*cr4;
    83f4a6f8:	ffc6a607          	flw	fa2,-4(a3)
    83f4a6fc:	ff86a687          	flw	fa3,-8(a3)
    83f4a700:	10c7f7d3          	fmul.s	fa5,fa5,fa2
    83f4a704:	78e6f7c3          	fmadd.s	fa5,fa3,fa4,fa5
    83f4a708:	00f3a027          	fsw	fa5,0(t2)
    for(i=2;i<ido;i+=2){
    83f4a70c:	f0a944e3          	blt	s2,a0,83f4a614 <dradb4+0x124>
  for(k=0;k<l1;k++){
    83f4a710:	2b85                	addiw	s7,s7,1
    t1+=ido;
    83f4a712:	01850c3b          	addw	s8,a0,s8
  for(k=0;k<l1;k++){
    83f4a716:	99d2                	add	s3,s3,s4
    83f4a718:	ed7596e3          	bne	a1,s7,83f4a5e4 <dradb4+0xf4>
  if(ido%2 == 1)return;
    83f4a71c:	77a2                	ld	a5,40(sp)
    83f4a71e:	efc9                	bnez	a5,83f4a7b8 <dradb4+0x2c8>
 L105:

  t1=ido;
  t2=ido<<2;
  t3=ido-1;
  t4=ido+(ido<<1);
    83f4a720:	4772                	lw	a4,28(sp)
  t3=ido-1;
    83f4a722:	fff5079b          	addiw	a5,a0,-1
  t4=ido+(ido<<1);
    83f4a726:	9d39                	addw	a0,a0,a4
  for(k=0;k<l1;k++){
    83f4a728:	7702                	ld	a4,32(sp)
    83f4a72a:	00251693          	slli	a3,a0,0x2
    83f4a72e:	078a                	slli	a5,a5,0x2
    83f4a730:	01970e33          	add	t3,a4,s9
    83f4a734:	6742                	ld	a4,16(sp)
    83f4a736:	0e0a                	slli	t3,t3,0x2
    83f4a738:	00008417          	auipc	s0,0x8
    83f4a73c:	d2442007          	flw	ft0,-732(s0) # 83f5245c <__func__.1+0x264>
    83f4a740:	00271513          	slli	a0,a4,0x2
    83f4a744:	01460733          	add	a4,a2,s4
    83f4a748:	9636                	add	a2,a2,a3
    83f4a74a:	66a2                	ld	a3,8(sp)
    83f4a74c:	00008417          	auipc	s0,0x8
    83f4a750:	d1442507          	flw	fa0,-748(s0) # 83f52460 <__func__.1+0x268>
    83f4a754:	97b6                	add	a5,a5,a3
  t3=ido-1;
    83f4a756:	4681                	li	a3,0
    t5=t3;
    ti1=cc[t1]+cc[t4];
    83f4a758:	00072587          	flw	fa1,0(a4)
    ti2=cc[t4]-cc[t1];
    tr1=cc[t1-1]-cc[t4-1];
    83f4a75c:	ffc62607          	flw	fa2,-4(a2)
    ti1=cc[t1]+cc[t4];
    83f4a760:	00062787          	flw	fa5,0(a2)
    tr1=cc[t1-1]-cc[t4-1];
    83f4a764:	ffc72707          	flw	fa4,-4(a4)
    tr2=cc[t1-1]+cc[t4-1];
    ch[t5]=tr2+tr2;
    ch[t5+=t0]=sqrt2*(tr1-ti1);
    83f4a768:	01578333          	add	t1,a5,s5
    ti1=cc[t1]+cc[t4];
    83f4a76c:	00f5f6d3          	fadd.s	fa3,fa1,fa5
    ti2=cc[t4]-cc[t1];
    83f4a770:	08b7f7d3          	fsub.s	fa5,fa5,fa1
    tr1=cc[t1-1]-cc[t4-1];
    83f4a774:	08c775d3          	fsub.s	fa1,fa4,fa2
    tr2=cc[t1-1]+cc[t4-1];
    83f4a778:	00c77753          	fadd.s	fa4,fa4,fa2
    ch[t5+=t0]=ti2+ti2;
    83f4a77c:	016788b3          	add	a7,a5,s6
    ch[t5+=t0]=-sqrt2*(tr1+ti1);
    83f4a780:	01c78833          	add	a6,a5,t3
    ch[t5+=t0]=ti2+ti2;
    83f4a784:	00f7f7d3          	fadd.s	fa5,fa5,fa5
    ch[t5+=t0]=sqrt2*(tr1-ti1);
    83f4a788:	08d5f653          	fsub.s	fa2,fa1,fa3
    ch[t5+=t0]=-sqrt2*(tr1+ti1);
    83f4a78c:	00b6f6d3          	fadd.s	fa3,fa3,fa1
    ch[t5]=tr2+tr2;
    83f4a790:	00e77753          	fadd.s	fa4,fa4,fa4
  for(k=0;k<l1;k++){
    83f4a794:	2685                	addiw	a3,a3,1
    83f4a796:	972a                	add	a4,a4,a0
    ch[t5+=t0]=sqrt2*(tr1-ti1);
    83f4a798:	10067653          	fmul.s	fa2,fa2,ft0
    ch[t5+=t0]=-sqrt2*(tr1+ti1);
    83f4a79c:	10a6f6d3          	fmul.s	fa3,fa3,fa0
    ch[t5]=tr2+tr2;
    83f4a7a0:	00e7a027          	fsw	fa4,0(a5)
  for(k=0;k<l1;k++){
    83f4a7a4:	962a                	add	a2,a2,a0
    83f4a7a6:	97d2                	add	a5,a5,s4
    ch[t5+=t0]=sqrt2*(tr1-ti1);
    83f4a7a8:	00c32027          	fsw	fa2,0(t1)
    ch[t5+=t0]=ti2+ti2;
    83f4a7ac:	00f8a027          	fsw	fa5,0(a7)
    ch[t5+=t0]=-sqrt2*(tr1+ti1);
    83f4a7b0:	00d82027          	fsw	fa3,0(a6)
  for(k=0;k<l1;k++){
    83f4a7b4:	fab6c2e3          	blt	a3,a1,83f4a758 <dradb4+0x268>

    t3+=ido;
    t1+=t2;
    t4+=t2;
  }
}
    83f4a7b8:	642a                	ld	s0,136(sp)
    83f4a7ba:	648a                	ld	s1,128(sp)
    83f4a7bc:	7966                	ld	s2,120(sp)
    83f4a7be:	79c6                	ld	s3,112(sp)
    83f4a7c0:	7a26                	ld	s4,104(sp)
    83f4a7c2:	7a86                	ld	s5,96(sp)
    83f4a7c4:	6b66                	ld	s6,88(sp)
    83f4a7c6:	6bc6                	ld	s7,80(sp)
    83f4a7c8:	6c26                	ld	s8,72(sp)
    83f4a7ca:	6c86                	ld	s9,64(sp)
    83f4a7cc:	7d62                	ld	s10,56(sp)
    83f4a7ce:	7dc2                	ld	s11,48(sp)
    83f4a7d0:	6149                	addi	sp,sp,144
    83f4a7d2:	8082                	ret
  for(k=0;k<l1;k++){
    83f4a7d4:	feb052e3          	blez	a1,83f4a7b8 <dradb4+0x2c8>
  t4=ido+(ido<<1);
    83f4a7d8:	47f2                	lw	a5,28(sp)
    83f4a7da:	001c9713          	slli	a4,s9,0x1
    83f4a7de:	4a21                	li	s4,8
    83f4a7e0:	0027851b          	addiw	a0,a5,2
    83f4a7e4:	002c9a93          	slli	s5,s9,0x2
  t3=ido-1;
    83f4a7e8:	4785                	li	a5,1
    83f4a7ea:	003c9b13          	slli	s6,s9,0x3
    83f4a7ee:	f03a                	sd	a4,32(sp)
    83f4a7f0:	bf25                	j	83f4a728 <dradb4+0x238>

0000000083f4a7f2 <dradfg>:
                          float *c2,float *ch,float *ch2,float *wa){
    83f4a7f2:	7155                	addi	sp,sp,-208
    83f4a7f4:	aca2                	fsd	fs0,88(sp)
  arg=tpi/(float)ip;
    83f4a7f6:	d005f453          	fcvt.s.w	fs0,a1
                          float *c2,float *ch,float *ch2,float *wa){
    83f4a7fa:	ed56                	sd	s5,152(sp)
    83f4a7fc:	8aae                	mv	s5,a1
  arg=tpi/(float)ip;
    83f4a7fe:	00008597          	auipc	a1,0x8
    83f4a802:	c665a787          	flw	fa5,-922(a1) # 83f52464 <__func__.1+0x26c>
    83f4a806:	1887f453          	fdiv.s	fs0,fa5,fs0
                          float *c2,float *ch,float *ch2,float *wa){
    83f4a80a:	e1a2                	sd	s0,192(sp)
    83f4a80c:	fd26                	sd	s1,184(sp)
    83f4a80e:	8432                	mv	s0,a2
    83f4a810:	84aa                	mv	s1,a0
    83f4a812:	e55e                	sd	s7,136(sp)
  t0=l1*ido;
    83f4a814:	02848bbb          	mulw	s7,s1,s0
                          float *c2,float *ch,float *ch2,float *wa){
    83f4a818:	e586                	sd	ra,200(sp)
    83f4a81a:	f94a                	sd	s2,176(sp)
    83f4a81c:	f54e                	sd	s3,168(sp)
    83f4a81e:	f152                	sd	s4,160(sp)
    83f4a820:	89b6                	mv	s3,a3
    83f4a822:	8a3e                	mv	s4,a5
    83f4a824:	e95a                	sd	s6,144(sp)
    83f4a826:	fce6                	sd	s9,120(sp)
    83f4a828:	f8ea                	sd	s10,112(sp)
    83f4a82a:	f4ee                	sd	s11,104(sp)
    83f4a82c:	8d3a                	mv	s10,a4
    83f4a82e:	8b42                	mv	s6,a6
    83f4a830:	8946                	mv	s2,a7
  dcp=(float)cos(arg);
    83f4a832:	42040453          	fcvt.d.s	fs0,fs0
                          float *c2,float *ch,float *ch2,float *wa){
    83f4a836:	6cce                	ld	s9,208(sp)
    83f4a838:	6dee                	ld	s11,216(sp)
  dcp=(float)cos(arg);
    83f4a83a:	22840553          	fmv.d	fa0,fs0
                          float *c2,float *ch,float *ch2,float *wa){
    83f4a83e:	e162                	sd	s8,128(sp)
  dcp=(float)cos(arg);
    83f4a840:	892f60ef          	jal	ra,83f408d2 <cos>
    83f4a844:	22a507d3          	fmv.d	fa5,fa0
  dsp=(float)sin(arg);
    83f4a848:	22840553          	fmv.d	fa0,fs0
  dcp=(float)cos(arg);
    83f4a84c:	4017f453          	fcvt.s.d	fs0,fa5
  dsp=(float)sin(arg);
    83f4a850:	b16f60ef          	jal	ra,83f40b66 <sin>
  nbd=(ido-1)>>1;
    83f4a854:	fff4869b          	addiw	a3,s1,-1
    83f4a858:	c4b6                	sw	a3,72(sp)
    83f4a85a:	4016d69b          	sraiw	a3,a3,0x1
  t2=ipp2*t0;
    83f4a85e:	035b873b          	mulw	a4,s7,s5
  nbd=(ido-1)>>1;
    83f4a862:	fc36                	sd	a3,56(sp)
  ipph=(ip+1)>>1;
    83f4a864:	001a8e1b          	addiw	t3,s5,1
  t0=l1*ido;
    83f4a868:	d25e                	sw	s7,36(sp)
  if(ido==1)goto L119;
    83f4a86a:	4785                	li	a5,1
  dsp=(float)sin(arg);
    83f4a86c:	401576d3          	fcvt.s.d	fa3,fa0
  ipph=(ip+1)>>1;
    83f4a870:	401e5e1b          	sraiw	t3,t3,0x1
  t10=ip*ido;
    83f4a874:	029a86bb          	mulw	a3,s5,s1
  t2=ipp2*t0;
    83f4a878:	f83a                	sd	a4,48(sp)
  t10=ip*ido;
    83f4a87a:	f436                	sd	a3,40(sp)
  if(ido==1)goto L119;
    83f4a87c:	04f48ce3          	beq	s1,a5,83f4b0d4 <dradfg+0x8e2>
  for(ik=0;ik<idl1;ik++)ch2[ik]=c2[ik];
    83f4a880:	03305563          	blez	s3,83f4a8aa <dradfg+0xb8>
    83f4a884:	fff9869b          	addiw	a3,s3,-1
    83f4a888:	02069793          	slli	a5,a3,0x20
    83f4a88c:	01e7d693          	srli	a3,a5,0x1e
    83f4a890:	004b0613          	addi	a2,s6,4
    83f4a894:	87da                	mv	a5,s6
    83f4a896:	8766                	mv	a4,s9
    83f4a898:	96b2                	add	a3,a3,a2
    83f4a89a:	0007a787          	flw	fa5,0(a5)
    83f4a89e:	0791                	addi	a5,a5,4
    83f4a8a0:	0711                	addi	a4,a4,4
    83f4a8a2:	fef72e27          	fsw	fa5,-4(a4)
    83f4a8a6:	fed79ae3          	bne	a5,a3,83f4a89a <dradfg+0xa8>
  for(j=1;j<ip;j++){
    83f4a8aa:	4785                	li	a5,1
  is=-ido;
    83f4a8ac:	40900fbb          	negw	t6,s1
  for(j=1;j<ip;j++){
    83f4a8b0:	6957d263          	bge	a5,s5,83f4af34 <dradfg+0x742>
    83f4a8b4:	002b9e93          	slli	t4,s7,0x2
    83f4a8b8:	01da0533          	add	a0,s4,t4
    83f4a8bc:	01d905b3          	add	a1,s2,t4
    83f4a8c0:	00249793          	slli	a5,s1,0x2
    83f4a8c4:	4f05                	li	t5,1
    for(k=0;k<l1;k++){
    83f4a8c6:	862e                	mv	a2,a1
    83f4a8c8:	86aa                	mv	a3,a0
    83f4a8ca:	4701                	li	a4,0
    83f4a8cc:	00805b63          	blez	s0,83f4a8e2 <dradfg+0xf0>
      ch[t2]=c1[t2];
    83f4a8d0:	0006a787          	flw	fa5,0(a3)
    for(k=0;k<l1;k++){
    83f4a8d4:	2705                	addiw	a4,a4,1
    83f4a8d6:	96be                	add	a3,a3,a5
      ch[t2]=c1[t2];
    83f4a8d8:	00f62027          	fsw	fa5,0(a2)
    for(k=0;k<l1;k++){
    83f4a8dc:	963e                	add	a2,a2,a5
    83f4a8de:	fee419e3          	bne	s0,a4,83f4a8d0 <dradfg+0xde>
  for(j=1;j<ip;j++){
    83f4a8e2:	001f071b          	addiw	a4,t5,1
    83f4a8e6:	9576                	add	a0,a0,t4
    83f4a8e8:	95f6                	add	a1,a1,t4
    83f4a8ea:	00ea8463          	beq	s5,a4,83f4a8f2 <dradfg+0x100>
    83f4a8ee:	8f3a                	mv	t5,a4
    83f4a8f0:	bfd9                	j	83f4a8c6 <dradfg+0xd4>
  if(nbd>l1){
    83f4a8f2:	7762                	ld	a4,56(sp)
    83f4a8f4:	0ae45863          	bge	s0,a4,83f4a9a4 <dradfg+0x1b2>
    83f4a8f8:	ffd4871b          	addiw	a4,s1,-3
    83f4a8fc:	0017571b          	srliw	a4,a4,0x1
    83f4a900:	0706                	slli	a4,a4,0x1
    83f4a902:	0004869b          	sext.w	a3,s1
    83f4a906:	e83a                	sd	a4,16(sp)
    83f4a908:	008d8713          	addi	a4,s11,8 # ffffffff80000008 <_end+0xfffffffefc0002c8>
    83f4a90c:	e436                	sd	a3,8(sp)
    83f4a90e:	9fa6                	add	t6,t6,s1
    83f4a910:	8c76                	mv	s8,t4
    83f4a912:	53fd                	li	t2,-1
    83f4a914:	4285                	li	t0,1
    83f4a916:	ec3a                	sd	a4,24(sp)
        for(i=2;i<ido;i+=2){
    83f4a918:	4309                	li	t1,2
      for(k=0;k<l1;k++){
    83f4a91a:	06805a63          	blez	s0,83f4a98e <dradfg+0x19c>
    83f4a91e:	6742                	ld	a4,16(sp)
    83f4a920:	00239893          	slli	a7,t2,0x2
    83f4a924:	0891                	addi	a7,a7,4
    83f4a926:	01f705b3          	add	a1,a4,t6
    83f4a92a:	6762                	ld	a4,24(sp)
    83f4a92c:	058a                	slli	a1,a1,0x2
    83f4a92e:	98ee                	add	a7,a7,s11
    83f4a930:	95ba                	add	a1,a1,a4
        idij=is-1;
    83f4a932:	8562                	mv	a0,s8
      for(k=0;k<l1;k++){
    83f4a934:	4801                	li	a6,0
        for(i=2;i<ido;i+=2){
    83f4a936:	00aa06b3          	add	a3,s4,a0
    83f4a93a:	00a90633          	add	a2,s2,a0
    83f4a93e:	8746                	mv	a4,a7
    83f4a940:	04935363          	bge	t1,s1,83f4a986 <dradfg+0x194>
          ch[t3-1]=wa[idij-1]*c1[t3-1]+wa[idij]*c1[t3];
    83f4a944:	00472707          	flw	fa4,4(a4)
    83f4a948:	0086a587          	flw	fa1,8(a3)
    83f4a94c:	00072787          	flw	fa5,0(a4)
    83f4a950:	0046a607          	flw	fa2,4(a3)
    83f4a954:	10b77753          	fmul.s	fa4,fa4,fa1
        for(i=2;i<ido;i+=2){
    83f4a958:	0621                	addi	a2,a2,8
    83f4a95a:	0721                	addi	a4,a4,8
    83f4a95c:	06a1                	addi	a3,a3,8
          ch[t3-1]=wa[idij-1]*c1[t3-1]+wa[idij]*c1[t3];
    83f4a95e:	70c7f7c3          	fmadd.s	fa5,fa5,fa2,fa4
    83f4a962:	fef62e27          	fsw	fa5,-4(a2)
          ch[t3]=wa[idij-1]*c1[t3]-wa[idij]*c1[t3-1];
    83f4a966:	ffc72707          	flw	fa4,-4(a4)
    83f4a96a:	ffc6a587          	flw	fa1,-4(a3)
    83f4a96e:	ff872787          	flw	fa5,-8(a4)
    83f4a972:	0006a607          	flw	fa2,0(a3)
    83f4a976:	10b77753          	fmul.s	fa4,fa4,fa1
    83f4a97a:	70c7f7c7          	fmsub.s	fa5,fa5,fa2,fa4
    83f4a97e:	00f62027          	fsw	fa5,0(a2)
        for(i=2;i<ido;i+=2){
    83f4a982:	fcb711e3          	bne	a4,a1,83f4a944 <dradfg+0x152>
      for(k=0;k<l1;k++){
    83f4a986:	2805                	addiw	a6,a6,1
    83f4a988:	953e                	add	a0,a0,a5
    83f4a98a:	fb0416e3          	bne	s0,a6,83f4a936 <dradfg+0x144>
    for(j=1;j<ip;j++){
    83f4a98e:	66a2                	ld	a3,8(sp)
    83f4a990:	0012871b          	addiw	a4,t0,1
    83f4a994:	9fa6                	add	t6,t6,s1
    83f4a996:	00d383bb          	addw	t2,t2,a3
    83f4a99a:	9c76                	add	s8,s8,t4
    83f4a99c:	585f0f63          	beq	t5,t0,83f4af3a <dradfg+0x748>
    83f4a9a0:	82ba                	mv	t0,a4
    83f4a9a2:	bfa5                	j	83f4a91a <dradfg+0x128>
    for(j=1;j<ip;j++){
    83f4a9a4:	ffd4829b          	addiw	t0,s1,-3
    83f4a9a8:	ffe2f293          	andi	t0,t0,-2
    83f4a9ac:	00048f9b          	sext.w	t6,s1
  if(nbd>l1){
    83f4a9b0:	537d                	li	t1,-1
  t1=0;
    83f4a9b2:	4e81                	li	t4,0
    for(j=1;j<ip;j++){
    83f4a9b4:	4885                	li	a7,1
      for(i=2;i<ido;i+=2){
    83f4a9b6:	4f09                	li	t5,2
    83f4a9b8:	2289                	addiw	t0,t0,2
      t1+=t0;
    83f4a9ba:	01db8ebb          	addw	t4,s7,t4
      idij=is-1;
    83f4a9be:	0003071b          	sext.w	a4,t1
      for(i=2;i<ido;i+=2){
    83f4a9c2:	069f5663          	bge	t5,s1,83f4aa2e <dradfg+0x23c>
    83f4a9c6:	00271613          	slli	a2,a4,0x2
    83f4a9ca:	0611                	addi	a2,a2,4
    83f4a9cc:	966e                	add	a2,a2,s11
    83f4a9ce:	01d2883b          	addw	a6,t0,t4
      t2=t1;
    83f4a9d2:	8576                	mv	a0,t4
        t2+=2;
    83f4a9d4:	2509                	addiw	a0,a0,2
        for(k=0;k<l1;k++){
    83f4a9d6:	04805963          	blez	s0,83f4aa28 <dradfg+0x236>
    83f4a9da:	00251693          	slli	a3,a0,0x2
    83f4a9de:	00da0733          	add	a4,s4,a3
    83f4a9e2:	4581                	li	a1,0
    83f4a9e4:	96ca                	add	a3,a3,s2
          ch[t3-1]=wa[idij-1]*c1[t3-1]+wa[idij]*c1[t3];
    83f4a9e6:	00072587          	flw	fa1,0(a4)
    83f4a9ea:	00462707          	flw	fa4,4(a2)
    83f4a9ee:	ffc72607          	flw	fa2,-4(a4)
    83f4a9f2:	00062787          	flw	fa5,0(a2)
    83f4a9f6:	10b77753          	fmul.s	fa4,fa4,fa1
        for(k=0;k<l1;k++){
    83f4a9fa:	2585                	addiw	a1,a1,1
          ch[t3-1]=wa[idij-1]*c1[t3-1]+wa[idij]*c1[t3];
    83f4a9fc:	70c7f7c3          	fmadd.s	fa5,fa5,fa2,fa4
    83f4aa00:	fef6ae27          	fsw	fa5,-4(a3)
          ch[t3]=wa[idij-1]*c1[t3]-wa[idij]*c1[t3-1];
    83f4aa04:	ffc72587          	flw	fa1,-4(a4)
    83f4aa08:	00462707          	flw	fa4,4(a2)
    83f4aa0c:	00072607          	flw	fa2,0(a4)
    83f4aa10:	00062787          	flw	fa5,0(a2)
    83f4aa14:	10b77753          	fmul.s	fa4,fa4,fa1
        for(k=0;k<l1;k++){
    83f4aa18:	973e                	add	a4,a4,a5
          ch[t3]=wa[idij-1]*c1[t3]-wa[idij]*c1[t3-1];
    83f4aa1a:	70c7f7c7          	fmsub.s	fa5,fa5,fa2,fa4
    83f4aa1e:	00f6a027          	fsw	fa5,0(a3)
        for(k=0;k<l1;k++){
    83f4aa22:	96be                	add	a3,a3,a5
    83f4aa24:	fcb411e3          	bne	s0,a1,83f4a9e6 <dradfg+0x1f4>
      for(i=2;i<ido;i+=2){
    83f4aa28:	0621                	addi	a2,a2,8
    83f4aa2a:	fb0515e3          	bne	a0,a6,83f4a9d4 <dradfg+0x1e2>
    for(j=1;j<ip;j++){
    83f4aa2e:	2885                	addiw	a7,a7,1
    83f4aa30:	01f3033b          	addw	t1,t1,t6
    83f4aa34:	f91a93e3          	bne	s5,a7,83f4a9ba <dradfg+0x1c8>
  if(nbd<l1){
    83f4aa38:	77e2                	ld	a5,56(sp)
    83f4aa3a:	5087d063          	bge	a5,s0,83f4af3a <dradfg+0x748>
    for(j=1;j<ipph;j++){
    83f4aa3e:	4785                	li	a5,1
    83f4aa40:	69c7df63          	bge	a5,t3,83f4b0de <dradfg+0x8ec>
    83f4aa44:	77c2                	ld	a5,48(sp)
    83f4aa46:	5692                	lw	a3,36(sp)
    83f4aa48:	ffd4871b          	addiw	a4,s1,-3
    83f4aa4c:	41778fb3          	sub	t6,a5,s7
    83f4aa50:	40d00dbb          	negw	s11,a3
    83f4aa54:	001b9e93          	slli	t4,s7,0x1
    83f4aa58:	9b79                	andi	a4,a4,-2
    83f4aa5a:	41bb8c33          	sub	s8,s7,s11
    83f4aa5e:	40fe8eb3          	sub	t4,t4,a5
    83f4aa62:	0f89                	addi	t6,t6,2
    83f4aa64:	2711                	addiw	a4,a4,4
    83f4aa66:	c86e                	sw	s11,16(sp)
    83f4aa68:	0c0a                	slli	s8,s8,0x2
    83f4aa6a:	0e8a                	slli	t4,t4,0x2
    83f4aa6c:	409682bb          	subw	t0,a3,s1
    83f4aa70:	0d8a                	slli	s11,s11,0x2
    83f4aa72:	0f8a                	slli	t6,t6,0x2
    83f4aa74:	00249793          	slli	a5,s1,0x2
    83f4aa78:	4385                	li	t2,1
    83f4aa7a:	c43a                	sw	a4,8(sp)
      for(i=2;i<ido;i+=2){
    83f4aa7c:	4709                	li	a4,2
    83f4aa7e:	08975063          	bge	a4,s1,83f4aafe <dradfg+0x30c>
    83f4aa82:	4722                	lw	a4,8(sp)
    83f4aa84:	0022831b          	addiw	t1,t0,2
    83f4aa88:	01f908b3          	add	a7,s2,t6
    83f4aa8c:	01fa0833          	add	a6,s4,t6
    83f4aa90:	00570f3b          	addw	t5,a4,t0
        for(k=0;k<l1;k++){
    83f4aa94:	06805063          	blez	s0,83f4aaf4 <dradfg+0x302>
    83f4aa98:	01d886b3          	add	a3,a7,t4
    83f4aa9c:	01d805b3          	add	a1,a6,t4
    83f4aaa0:	8642                	mv	a2,a6
    83f4aaa2:	8746                	mv	a4,a7
    83f4aaa4:	4501                	li	a0,0
          c1[t5-1]=ch[t5-1]+ch[t6-1];
    83f4aaa6:	ffc72707          	flw	fa4,-4(a4)
    83f4aaaa:	ffc6a787          	flw	fa5,-4(a3)
        for(k=0;k<l1;k++){
    83f4aaae:	2505                	addiw	a0,a0,1
          c1[t5-1]=ch[t5-1]+ch[t6-1];
    83f4aab0:	00e7f7d3          	fadd.s	fa5,fa5,fa4
    83f4aab4:	fef5ae27          	fsw	fa5,-4(a1)
          c1[t6-1]=ch[t5]-ch[t6];
    83f4aab8:	00072707          	flw	fa4,0(a4)
    83f4aabc:	0006a787          	flw	fa5,0(a3)
    83f4aac0:	08e7f7d3          	fsub.s	fa5,fa5,fa4
    83f4aac4:	fef62e27          	fsw	fa5,-4(a2)
          c1[t5]=ch[t5]+ch[t6];
    83f4aac8:	00072707          	flw	fa4,0(a4)
    83f4aacc:	0006a787          	flw	fa5,0(a3)
    83f4aad0:	00e7f7d3          	fadd.s	fa5,fa5,fa4
    83f4aad4:	00f5a027          	fsw	fa5,0(a1)
          c1[t6]=ch[t6-1]-ch[t5-1];
    83f4aad8:	ffc72787          	flw	fa5,-4(a4)
    83f4aadc:	ffc6a707          	flw	fa4,-4(a3)
        for(k=0;k<l1;k++){
    83f4aae0:	973e                	add	a4,a4,a5
    83f4aae2:	96be                	add	a3,a3,a5
          c1[t6]=ch[t6-1]-ch[t5-1];
    83f4aae4:	08e7f7d3          	fsub.s	fa5,fa5,fa4
        for(k=0;k<l1;k++){
    83f4aae8:	95be                	add	a1,a1,a5
          c1[t6]=ch[t6-1]-ch[t5-1];
    83f4aaea:	00f62027          	fsw	fa5,0(a2)
        for(k=0;k<l1;k++){
    83f4aaee:	963e                	add	a2,a2,a5
    83f4aaf0:	faa41be3          	bne	s0,a0,83f4aaa6 <dradfg+0x2b4>
      for(i=2;i<ido;i+=2){
    83f4aaf4:	2309                	addiw	t1,t1,2
    83f4aaf6:	08a1                	addi	a7,a7,8
    83f4aaf8:	0821                	addi	a6,a6,8
    83f4aafa:	f9e31de3          	bne	t1,t5,83f4aa94 <dradfg+0x2a2>
    for(j=1;j<ipph;j++){
    83f4aafe:	2385                	addiw	t2,t2,1
    83f4ab00:	9ee2                	add	t4,t4,s8
    83f4ab02:	017282bb          	addw	t0,t0,s7
    83f4ab06:	9fee                	add	t6,t6,s11
    83f4ab08:	f67e1ae3          	bne	t3,t2,83f4aa7c <dradfg+0x28a>
  t2=ipp2*idl1;
    83f4ab0c:	033a8c3b          	mulw	s8,s5,s3
  for(ik=0;ik<idl1;ik++)c2[ik]=ch2[ik];
    83f4ab10:	03305763          	blez	s3,83f4ab3e <dradfg+0x34c>
    83f4ab14:	86e6                	mv	a3,s9
    83f4ab16:	875a                	mv	a4,s6
      for(k=0;k<l1;k++){
    83f4ab18:	4781                	li	a5,0
  for(ik=0;ik<idl1;ik++)c2[ik]=ch2[ik];
    83f4ab1a:	0006a787          	flw	fa5,0(a3)
    83f4ab1e:	2785                	addiw	a5,a5,1
    83f4ab20:	0691                	addi	a3,a3,4
    83f4ab22:	00f72027          	fsw	fa5,0(a4)
    83f4ab26:	0711                	addi	a4,a4,4
    83f4ab28:	ff37c9e3          	blt	a5,s3,83f4ab1a <dradfg+0x328>
  for(j=1;j<ipph;j++){
    83f4ab2c:	5692                	lw	a3,36(sp)
    83f4ab2e:	4705                	li	a4,1
    83f4ab30:	00249793          	slli	a5,s1,0x2
    83f4ab34:	40d006bb          	negw	a3,a3
    83f4ab38:	c836                	sw	a3,16(sp)
    83f4ab3a:	1fc75763          	bge	a4,t3,83f4ad28 <dradfg+0x536>
    83f4ab3e:	4f42                	lw	t5,16(sp)
    83f4ab40:	009b88b3          	add	a7,s7,s1
    83f4ab44:	418888b3          	sub	a7,a7,s8
    83f4ab48:	41e00fb3          	neg	t6,t5
    83f4ab4c:	409b8833          	sub	a6,s7,s1
    83f4ab50:	417c0733          	sub	a4,s8,s7
    83f4ab54:	0f8a                	slli	t6,t6,0x2
    83f4ab56:	088a                	slli	a7,a7,0x2
    83f4ab58:	002b9293          	slli	t0,s7,0x2
    83f4ab5c:	080a                	slli	a6,a6,0x2
    83f4ab5e:	0f0a                	slli	t5,t5,0x2
    83f4ab60:	00271313          	slli	t1,a4,0x2
    83f4ab64:	00f903b3          	add	t2,s2,a5
      for(k=0;k<l1;k++){
    83f4ab68:	4e85                	li	t4,1
    for(k=0;k<l1;k++){
    83f4ab6a:	04805263          	blez	s0,83f4abae <dradfg+0x3bc>
    83f4ab6e:	00780633          	add	a2,a6,t2
    83f4ab72:	006906b3          	add	a3,s2,t1
    83f4ab76:	006a0733          	add	a4,s4,t1
    83f4ab7a:	4501                	li	a0,0
      c1[t3]=ch[t3]+ch[t4];
    83f4ab7c:	0006a707          	flw	fa4,0(a3)
    83f4ab80:	00062787          	flw	fa5,0(a2)
    83f4ab84:	011705b3          	add	a1,a4,a7
    83f4ab88:	95c2                	add	a1,a1,a6
    83f4ab8a:	00e7f7d3          	fadd.s	fa5,fa5,fa4
    for(k=0;k<l1;k++){
    83f4ab8e:	2505                	addiw	a0,a0,1
      c1[t3]=ch[t3]+ch[t4];
    83f4ab90:	00f5a027          	fsw	fa5,0(a1)
      c1[t4]=ch[t4]-ch[t3];
    83f4ab94:	0006a787          	flw	fa5,0(a3)
    83f4ab98:	00062707          	flw	fa4,0(a2)
    for(k=0;k<l1;k++){
    83f4ab9c:	96be                	add	a3,a3,a5
    83f4ab9e:	963e                	add	a2,a2,a5
      c1[t4]=ch[t4]-ch[t3];
    83f4aba0:	08e7f7d3          	fsub.s	fa5,fa5,fa4
    83f4aba4:	00f72027          	fsw	fa5,0(a4)
    for(k=0;k<l1;k++){
    83f4aba8:	973e                	add	a4,a4,a5
    83f4abaa:	fca419e3          	bne	s0,a0,83f4ab7c <dradfg+0x38a>
  for(j=1;j<ipph;j++){
    83f4abae:	2e85                	addiw	t4,t4,1
    83f4abb0:	98fe                	add	a7,a7,t6
    83f4abb2:	9816                	add	a6,a6,t0
    83f4abb4:	937a                	add	t1,t1,t5
    83f4abb6:	fbcecae3          	blt	t4,t3,83f4ab6a <dradfg+0x378>
  t3=(ip-1)*idl1;
    83f4abba:	fffa8f9b          	addiw	t6,s5,-1
    83f4abbe:	033f8fbb          	mulw	t6,t6,s3
    83f4abc2:	fff98a1b          	addiw	s4,s3,-1
    83f4abc6:	1a02                	slli	s4,s4,0x20
    83f4abc8:	020a5a13          	srli	s4,s4,0x20
    83f4abcc:	0019979b          	slliw	a5,s3,0x1
    83f4abd0:	01478533          	add	a0,a5,s4
    83f4abd4:	40f007b3          	neg	a5,a5
    83f4abd8:	078a                	slli	a5,a5,0x2
    83f4abda:	413c0eb3          	sub	t4,s8,s3
    83f4abde:	004b0713          	addi	a4,s6,4
    83f4abe2:	413f86b3          	sub	a3,t6,s3
    83f4abe6:	4130083b          	negw	a6,s3
    83f4abea:	050a                	slli	a0,a0,0x2
    83f4abec:	ec3e                	sd	a5,24(sp)
    83f4abee:	f0000053          	fmv.w.x	ft0,zero
    83f4abf2:	00269793          	slli	a5,a3,0x2
    83f4abf6:	002a1893          	slli	a7,s4,0x2
    83f4abfa:	00299313          	slli	t1,s3,0x2
    83f4abfe:	0e8a                	slli	t4,t4,0x2
    83f4ac00:	413005b3          	neg	a1,s3
    83f4ac04:	fffa4a13          	not	s4,s4
    83f4ac08:	00281d93          	slli	s11,a6,0x2
    83f4ac0c:	e43e                	sd	a5,8(sp)
    83f4ac0e:	00e507b3          	add	a5,a0,a4
    83f4ac12:	e83e                	sd	a5,16(sp)
    83f4ac14:	e0c6                	sd	a7,64(sp)
    83f4ac16:	006c8f33          	add	t5,s9,t1
    83f4ac1a:	9ee6                	add	t4,t4,s9
    83f4ac1c:	01170ab3          	add	s5,a4,a7
    83f4ac20:	0f8a                	slli	t6,t6,0x2
    83f4ac22:	00259393          	slli	t2,a1,0x2
    83f4ac26:	82ee                	mv	t0,s11
    83f4ac28:	00007797          	auipc	a5,0x7
    83f4ac2c:	6287a507          	flw	fa0,1576(a5) # 83f52250 <__func__.1+0x58>
    83f4ac30:	4c05                	li	s8,1
    83f4ac32:	0a0a                	slli	s4,s4,0x2
    ar1h=dcp*ar1-dsp*ai1;
    83f4ac34:	1006f753          	fmul.s	fa4,fa3,ft0
    ai1=dcp*ai1+dsp*ar1;
    83f4ac38:	10a6f7d3          	fmul.s	fa5,fa3,fa0
    for(ik=0;ik<idl1;ik++){
    83f4ac3c:	86f6                	mv	a3,t4
    83f4ac3e:	877a                	mv	a4,t5
    83f4ac40:	87da                	mv	a5,s6
    ar1h=dcp*ar1-dsp*ai1;
    83f4ac42:	70a47547          	fmsub.s	fa0,fs0,fa0,fa4
    ai1=dcp*ai1+dsp*ar1;
    83f4ac46:	78047043          	fmadd.s	ft0,fs0,ft0,fa5
    for(ik=0;ik<idl1;ik++){
    83f4ac4a:	03305963          	blez	s3,83f4ac7c <dradfg+0x48a>
      ch2[t4++]=c2[ik]+ar1*c2[t7++];
    83f4ac4e:	00678633          	add	a2,a5,t1
    83f4ac52:	0007a707          	flw	fa4,0(a5)
    83f4ac56:	00062787          	flw	fa5,0(a2)
    for(ik=0;ik<idl1;ik++){
    83f4ac5a:	0711                	addi	a4,a4,4
      ch2[t5++]=ai1*c2[t6++];
    83f4ac5c:	01f78633          	add	a2,a5,t6
      ch2[t4++]=c2[ik]+ar1*c2[t7++];
    83f4ac60:	70a7f7c3          	fmadd.s	fa5,fa5,fa0,fa4
    for(ik=0;ik<idl1;ik++){
    83f4ac64:	0691                	addi	a3,a3,4
    83f4ac66:	0791                	addi	a5,a5,4
      ch2[t4++]=c2[ik]+ar1*c2[t7++];
    83f4ac68:	fef72e27          	fsw	fa5,-4(a4)
      ch2[t5++]=ai1*c2[t6++];
    83f4ac6c:	00062787          	flw	fa5,0(a2)
    83f4ac70:	1007f7d3          	fmul.s	fa5,fa5,ft0
    83f4ac74:	fef6ae27          	fsw	fa5,-4(a3)
    for(ik=0;ik<idl1;ik++){
    83f4ac78:	fd579be3          	bne	a5,s5,83f4ac4e <dradfg+0x45c>
    for(j=2;j<ipph;j++){
    83f4ac7c:	4789                	li	a5,2
    83f4ac7e:	07c7d663          	bge	a5,t3,83f4acea <dradfg+0x4f8>
    ar2=ar1;
    83f4ac82:	20a505d3          	fmv.s	fa1,fa0
    ai2=ai1;
    83f4ac86:	20000653          	fmv.s	fa2,ft0
    for(j=2;j<ipph;j++){
    83f4ac8a:	65c2                	ld	a1,16(sp)
    83f4ac8c:	6822                	ld	a6,8(sp)
    83f4ac8e:	6562                	ld	a0,24(sp)
    83f4ac90:	4889                	li	a7,2
      ar2h=dc2*ar2-ds2*ai2;
    83f4ac92:	10c07753          	fmul.s	fa4,ft0,fa2
      ai2=dc2*ai2+ds2*ar2;
    83f4ac96:	10b077d3          	fmul.s	fa5,ft0,fa1
    83f4ac9a:	00ba07b3          	add	a5,s4,a1
      for(ik=0;ik<idl1;ik++){
    83f4ac9e:	86f6                	mv	a3,t4
    83f4aca0:	877a                	mv	a4,t5
      ar2h=dc2*ar2-ds2*ai2;
    83f4aca2:	70b575c7          	fmsub.s	fa1,fa0,fa1,fa4
      ai2=dc2*ai2+ds2*ar2;
    83f4aca6:	78c57643          	fmadd.s	fa2,fa0,fa2,fa5
      for(ik=0;ik<idl1;ik++){
    83f4acaa:	03305a63          	blez	s3,83f4acde <dradfg+0x4ec>
        ch2[t6++]+=ar2*c2[t8++];
    83f4acae:	00072707          	flw	fa4,0(a4)
    83f4acb2:	0007a787          	flw	fa5,0(a5)
        ch2[t7++]+=ai2*c2[t9++];
    83f4acb6:	00a78633          	add	a2,a5,a0
      for(ik=0;ik<idl1;ik++){
    83f4acba:	0711                	addi	a4,a4,4
        ch2[t6++]+=ar2*c2[t8++];
    83f4acbc:	70b7f7c3          	fmadd.s	fa5,fa5,fa1,fa4
      for(ik=0;ik<idl1;ik++){
    83f4acc0:	0691                	addi	a3,a3,4
        ch2[t7++]+=ai2*c2[t9++];
    83f4acc2:	9642                	add	a2,a2,a6
      for(ik=0;ik<idl1;ik++){
    83f4acc4:	0791                	addi	a5,a5,4
        ch2[t6++]+=ar2*c2[t8++];
    83f4acc6:	fef72e27          	fsw	fa5,-4(a4)
        ch2[t7++]+=ai2*c2[t9++];
    83f4acca:	ffc6a707          	flw	fa4,-4(a3)
    83f4acce:	00062787          	flw	fa5,0(a2)
    83f4acd2:	70c7f7c3          	fmadd.s	fa5,fa5,fa2,fa4
    83f4acd6:	fef6ae27          	fsw	fa5,-4(a3)
      for(ik=0;ik<idl1;ik++){
    83f4acda:	fcb79ae3          	bne	a5,a1,83f4acae <dradfg+0x4bc>
    for(j=2;j<ipph;j++){
    83f4acde:	2885                	addiw	a7,a7,1
    83f4ace0:	951e                	add	a0,a0,t2
    83f4ace2:	9816                	add	a6,a6,t0
    83f4ace4:	959a                	add	a1,a1,t1
    83f4ace6:	fb1e16e3          	bne	t3,a7,83f4ac92 <dradfg+0x4a0>
  for(l=1;l<ipph;l++){
    83f4acea:	2c05                	addiw	s8,s8,1
    83f4acec:	9f1a                	add	t5,t5,t1
    83f4acee:	9eee                	add	t4,t4,s11
    83f4acf0:	f5cc42e3          	blt	s8,t3,83f4ac34 <dradfg+0x442>
    83f4acf4:	6786                	ld	a5,64(sp)
    83f4acf6:	004c8693          	addi	a3,s9,4
    83f4acfa:	9b1a                	add	s6,s6,t1
    83f4acfc:	96be                	add	a3,a3,a5
    83f4acfe:	4605                	li	a2,1
    for(ik=0;ik<idl1;ik++)ch2[ik]+=c2[t2++];
    83f4ad00:	87e6                	mv	a5,s9
    83f4ad02:	875a                	mv	a4,s6
    83f4ad04:	01305e63          	blez	s3,83f4ad20 <dradfg+0x52e>
    83f4ad08:	0007a787          	flw	fa5,0(a5)
    83f4ad0c:	00072707          	flw	fa4,0(a4)
    83f4ad10:	0791                	addi	a5,a5,4
    83f4ad12:	0711                	addi	a4,a4,4
    83f4ad14:	00e7f7d3          	fadd.s	fa5,fa5,fa4
    83f4ad18:	fef7ae27          	fsw	fa5,-4(a5)
    83f4ad1c:	fef696e3          	bne	a3,a5,83f4ad08 <dradfg+0x516>
  for(j=1;j<ipph;j++){
    83f4ad20:	2605                	addiw	a2,a2,1
    83f4ad22:	9b1a                	add	s6,s6,t1
    83f4ad24:	fdc64ee3          	blt	a2,t3,83f4ad00 <dradfg+0x50e>
  if(ido<l1)goto L132;
    83f4ad28:	1c84d163          	bge	s1,s0,83f4aeea <dradfg+0x6f8>
  for(i=0;i<ido;i++){
    83f4ad2c:	02905d63          	blez	s1,83f4ad66 <dradfg+0x574>
    83f4ad30:	77a2                	ld	a5,40(sp)
    83f4ad32:	88ca                	mv	a7,s2
    83f4ad34:	886a                	mv	a6,s10
    83f4ad36:	00249593          	slli	a1,s1,0x2
    83f4ad3a:	00279613          	slli	a2,a5,0x2
    83f4ad3e:	4501                	li	a0,0
    for(k=0;k<l1;k++){
    83f4ad40:	86c2                	mv	a3,a6
    83f4ad42:	8746                	mv	a4,a7
    83f4ad44:	4781                	li	a5,0
    83f4ad46:	00805b63          	blez	s0,83f4ad5c <dradfg+0x56a>
      cc[t2]=ch[t1];
    83f4ad4a:	00072787          	flw	fa5,0(a4)
    for(k=0;k<l1;k++){
    83f4ad4e:	2785                	addiw	a5,a5,1
    83f4ad50:	972e                	add	a4,a4,a1
      cc[t2]=ch[t1];
    83f4ad52:	00f6a027          	fsw	fa5,0(a3)
    for(k=0;k<l1;k++){
    83f4ad56:	96b2                	add	a3,a3,a2
    83f4ad58:	fef419e3          	bne	s0,a5,83f4ad4a <dradfg+0x558>
  for(i=0;i<ido;i++){
    83f4ad5c:	2505                	addiw	a0,a0,1
    83f4ad5e:	0891                	addi	a7,a7,4
    83f4ad60:	0811                	addi	a6,a6,4
    83f4ad62:	fca49fe3          	bne	s1,a0,83f4ad40 <dradfg+0x54e>
  t2=ido<<1;
    83f4ad66:	00149c1b          	slliw	s8,s1,0x1
  for(j=1;j<ipph;j++){
    83f4ad6a:	4785                	li	a5,1
  t2=ido<<1;
    83f4ad6c:	82e2                	mv	t0,s8
  for(j=1;j<ipph;j++){
    83f4ad6e:	07c7d863          	bge	a5,t3,83f4adde <dradfg+0x5ec>
    83f4ad72:	5792                	lw	a5,36(sp)
    83f4ad74:	41700fb3          	neg	t6,s7
    83f4ad78:	002b9a13          	slli	s4,s7,0x2
    83f4ad7c:	40f003bb          	negw	t2,a5
    83f4ad80:	77c2                	ld	a5,48(sp)
    83f4ad82:	002c1993          	slli	s3,s8,0x2
    83f4ad86:	0f8a                	slli	t6,t6,0x2
    83f4ad88:	417785b3          	sub	a1,a5,s7
    83f4ad8c:	77a2                	ld	a5,40(sp)
    83f4ad8e:	01490f33          	add	t5,s2,s4
    83f4ad92:	013d0eb3          	add	t4,s10,s3
    83f4ad96:	038a                	slli	t2,t2,0x2
    83f4ad98:	058a                	slli	a1,a1,0x2
    83f4ad9a:	00249893          	slli	a7,s1,0x2
    83f4ad9e:	00279813          	slli	a6,a5,0x2
    83f4ada2:	857e                	mv	a0,t6
    83f4ada4:	4305                	li	t1,1
    for(k=0;k<l1;k++){
    83f4ada6:	8776                	mv	a4,t4
    83f4ada8:	87fa                	mv	a5,t5
    83f4adaa:	4601                	li	a2,0
    83f4adac:	02805263          	blez	s0,83f4add0 <dradfg+0x5de>
      cc[t5-1]=ch[t6];
    83f4adb0:	0007a787          	flw	fa5,0(a5)
      cc[t5]=ch[t7];
    83f4adb4:	00f506b3          	add	a3,a0,a5
    83f4adb8:	96ae                	add	a3,a3,a1
      cc[t5-1]=ch[t6];
    83f4adba:	fef72e27          	fsw	fa5,-4(a4)
      cc[t5]=ch[t7];
    83f4adbe:	0006a787          	flw	fa5,0(a3)
    for(k=0;k<l1;k++){
    83f4adc2:	2605                	addiw	a2,a2,1
    83f4adc4:	97c6                	add	a5,a5,a7
      cc[t5]=ch[t7];
    83f4adc6:	00f72027          	fsw	fa5,0(a4)
    for(k=0;k<l1;k++){
    83f4adca:	9742                	add	a4,a4,a6
    83f4adcc:	fec412e3          	bne	s0,a2,83f4adb0 <dradfg+0x5be>
  for(j=1;j<ipph;j++){
    83f4add0:	2305                	addiw	t1,t1,1
    83f4add2:	9f52                	add	t5,t5,s4
    83f4add4:	9ece                	add	t4,t4,s3
    83f4add6:	957e                	add	a0,a0,t6
    83f4add8:	959e                	add	a1,a1,t2
    83f4adda:	fc6e16e3          	bne	t3,t1,83f4ada6 <dradfg+0x5b4>
  if(ido==1)return;
    83f4adde:	4785                	li	a5,1
    83f4ade0:	0ef48563          	beq	s1,a5,83f4aeca <dradfg+0x6d8>
  if(nbd<l1)goto L141;
    83f4ade4:	7762                	ld	a4,56(sp)
  is=-ido;
    83f4ade6:	40900cbb          	negw	s9,s1
  if(nbd<l1)goto L141;
    83f4adea:	20874563          	blt	a4,s0,83f4aff4 <dradfg+0x802>
  for(j=1;j<ipph;j++){
    83f4adee:	0dc7de63          	bge	a5,t3,83f4aeca <dradfg+0x6d8>
    83f4adf2:	5792                	lw	a5,36(sp)
    83f4adf4:	7742                	ld	a4,48(sp)
    83f4adf6:	ffd4829b          	addiw	t0,s1,-3
    83f4adfa:	40f007bb          	negw	a5,a5
    83f4adfe:	417787b3          	sub	a5,a5,s7
    83f4ae02:	078a                	slli	a5,a5,0x2
    83f4ae04:	e43e                	sd	a5,8(sp)
    83f4ae06:	77a2                	ld	a5,40(sp)
    83f4ae08:	41770f33          	sub	t5,a4,s7
    83f4ae0c:	417f0f33          	sub	t5,t5,s7
    83f4ae10:	9ce2                	add	s9,s9,s8
    83f4ae12:	0012d29b          	srliw	t0,t0,0x1
    83f4ae16:	0f0a                	slli	t5,t5,0x2
    83f4ae18:	9ca6                	add	s9,s9,s1
    83f4ae1a:	00249993          	slli	s3,s1,0x2
    83f4ae1e:	00279393          	slli	t2,a5,0x2
    83f4ae22:	0286                	slli	t0,t0,0x1
    83f4ae24:	8b62                	mv	s6,s8
    83f4ae26:	8ade                	mv	s5,s7
    83f4ae28:	4d85                	li	s11,1
      for(i=2;i<ido;i+=2){
    83f4ae2a:	4f89                	li	t6,2
    83f4ae2c:	00890a13          	addi	s4,s2,8
    for(k=0;k<l1;k++){
    83f4ae30:	08805563          	blez	s0,83f4aeba <dradfg+0x6c8>
    83f4ae34:	002a9813          	slli	a6,s5,0x2
    83f4ae38:	002b1513          	slli	a0,s6,0x2
    83f4ae3c:	416c8eb3          	sub	t4,s9,s6
    83f4ae40:	984a                	add	a6,a6,s2
    83f4ae42:	956a                	add	a0,a0,s10
    83f4ae44:	0e8a                	slli	t4,t4,0x2
    83f4ae46:	8356                	mv	t1,s5
    83f4ae48:	4881                	li	a7,0
      for(i=2;i<ido;i+=2){
    83f4ae4a:	069fd263          	bge	t6,s1,83f4aeae <dradfg+0x6bc>
    83f4ae4e:	005305b3          	add	a1,t1,t0
    83f4ae52:	058a                	slli	a1,a1,0x2
    83f4ae54:	010f0733          	add	a4,t5,a6
    83f4ae58:	00ae8633          	add	a2,t4,a0
    83f4ae5c:	95d2                	add	a1,a1,s4
    83f4ae5e:	86aa                	mv	a3,a0
    83f4ae60:	87c2                	mv	a5,a6
        cc[i+t7-1]=ch[i+t8-1]+ch[i+t9-1];
    83f4ae62:	0047a787          	flw	fa5,4(a5)
    83f4ae66:	00472707          	flw	fa4,4(a4)
      for(i=2;i<ido;i+=2){
    83f4ae6a:	06a1                	addi	a3,a3,8
    83f4ae6c:	07a1                	addi	a5,a5,8
        cc[i+t7-1]=ch[i+t8-1]+ch[i+t9-1];
    83f4ae6e:	00e7f7d3          	fadd.s	fa5,fa5,fa4
      for(i=2;i<ido;i+=2){
    83f4ae72:	0721                	addi	a4,a4,8
    83f4ae74:	1661                	addi	a2,a2,-8
        cc[i+t7-1]=ch[i+t8-1]+ch[i+t9-1];
    83f4ae76:	fef6ae27          	fsw	fa5,-4(a3)
        cc[ic+t6-1]=ch[i+t8-1]-ch[i+t9-1];
    83f4ae7a:	ffc72707          	flw	fa4,-4(a4)
    83f4ae7e:	ffc7a787          	flw	fa5,-4(a5)
    83f4ae82:	08e7f7d3          	fsub.s	fa5,fa5,fa4
    83f4ae86:	fef62e27          	fsw	fa5,-4(a2)
        cc[i+t7]=ch[i+t8]+ch[i+t9];
    83f4ae8a:	00072707          	flw	fa4,0(a4)
    83f4ae8e:	0007a787          	flw	fa5,0(a5)
    83f4ae92:	00e7f7d3          	fadd.s	fa5,fa5,fa4
    83f4ae96:	00f6a027          	fsw	fa5,0(a3)
        cc[ic+t6]=ch[i+t9]-ch[i+t8];
    83f4ae9a:	00072787          	flw	fa5,0(a4)
    83f4ae9e:	0007a707          	flw	fa4,0(a5)
    83f4aea2:	08e7f7d3          	fsub.s	fa5,fa5,fa4
    83f4aea6:	00f62027          	fsw	fa5,0(a2)
      for(i=2;i<ido;i+=2){
    83f4aeaa:	faf59ce3          	bne	a1,a5,83f4ae62 <dradfg+0x670>
    for(k=0;k<l1;k++){
    83f4aeae:	2885                	addiw	a7,a7,1
    83f4aeb0:	984e                	add	a6,a6,s3
    83f4aeb2:	951e                	add	a0,a0,t2
    83f4aeb4:	9326                	add	t1,t1,s1
    83f4aeb6:	f9141ae3          	bne	s0,a7,83f4ae4a <dradfg+0x658>
  for(j=1;j<ipph;j++){
    83f4aeba:	67a2                	ld	a5,8(sp)
    83f4aebc:	2d85                	addiw	s11,s11,1
    83f4aebe:	9ade                	add	s5,s5,s7
    83f4aec0:	9f3e                	add	t5,t5,a5
    83f4aec2:	9ce2                	add	s9,s9,s8
    83f4aec4:	9b62                	add	s6,s6,s8
    83f4aec6:	f7be15e3          	bne	t3,s11,83f4ae30 <dradfg+0x63e>
}
    83f4aeca:	60ae                	ld	ra,200(sp)
    83f4aecc:	640e                	ld	s0,192(sp)
    83f4aece:	74ea                	ld	s1,184(sp)
    83f4aed0:	794a                	ld	s2,176(sp)
    83f4aed2:	79aa                	ld	s3,168(sp)
    83f4aed4:	7a0a                	ld	s4,160(sp)
    83f4aed6:	6aea                	ld	s5,152(sp)
    83f4aed8:	6b4a                	ld	s6,144(sp)
    83f4aeda:	6baa                	ld	s7,136(sp)
    83f4aedc:	6c0a                	ld	s8,128(sp)
    83f4aede:	7ce6                	ld	s9,120(sp)
    83f4aee0:	7d46                	ld	s10,112(sp)
    83f4aee2:	7da6                	ld	s11,104(sp)
    83f4aee4:	2466                	fld	fs0,88(sp)
    83f4aee6:	6169                	addi	sp,sp,208
    83f4aee8:	8082                	ret
  for(k=0;k<l1;k++){
    83f4aeea:	e6805ee3          	blez	s0,83f4ad66 <dradfg+0x574>
    83f4aeee:	67a6                	ld	a5,72(sp)
    83f4aef0:	00249813          	slli	a6,s1,0x2
    83f4aef4:	854a                	mv	a0,s2
    83f4aef6:	02079713          	slli	a4,a5,0x20
    83f4aefa:	01e75693          	srli	a3,a4,0x1e
    83f4aefe:	7722                	ld	a4,40(sp)
    83f4af00:	00490793          	addi	a5,s2,4
    83f4af04:	85ea                	mv	a1,s10
    83f4af06:	00271893          	slli	a7,a4,0x2
    83f4af0a:	96be                	add	a3,a3,a5
    83f4af0c:	4601                	li	a2,0
    for(i=0;i<ido;i++)cc[t4++]=ch[t3++];
    83f4af0e:	872e                	mv	a4,a1
    83f4af10:	87aa                	mv	a5,a0
    83f4af12:	00905a63          	blez	s1,83f4af26 <dradfg+0x734>
    83f4af16:	0007a787          	flw	fa5,0(a5)
    83f4af1a:	0791                	addi	a5,a5,4
    83f4af1c:	0711                	addi	a4,a4,4
    83f4af1e:	fef72e27          	fsw	fa5,-4(a4)
    83f4af22:	fef69ae3          	bne	a3,a5,83f4af16 <dradfg+0x724>
  for(k=0;k<l1;k++){
    83f4af26:	2605                	addiw	a2,a2,1
    83f4af28:	9542                	add	a0,a0,a6
    83f4af2a:	95c6                	add	a1,a1,a7
    83f4af2c:	96c2                	add	a3,a3,a6
    83f4af2e:	fec410e3          	bne	s0,a2,83f4af0e <dradfg+0x71c>
    83f4af32:	bd15                	j	83f4ad66 <dradfg+0x574>
  if(nbd>l1){
    83f4af34:	77e2                	ld	a5,56(sp)
    83f4af36:	b0f451e3          	bge	s0,a5,83f4aa38 <dradfg+0x246>
    for(j=1;j<ipph;j++){
    83f4af3a:	4785                	li	a5,1
    83f4af3c:	1bc7d163          	bge	a5,t3,83f4b0de <dradfg+0x8ec>
    83f4af40:	5792                	lw	a5,36(sp)
    83f4af42:	ffd48e9b          	addiw	t4,s1,-3
    83f4af46:	001ede9b          	srliw	t4,t4,0x1
    83f4af4a:	40f00dbb          	negw	s11,a5
    83f4af4e:	77c2                	ld	a5,48(sp)
    83f4af50:	c86e                	sw	s11,16(sp)
    83f4af52:	0e86                	slli	t4,t4,0x1
    83f4af54:	417782b3          	sub	t0,a5,s7
    83f4af58:	0d8a                	slli	s11,s11,0x2
    83f4af5a:	028a                	slli	t0,t0,0x2
    83f4af5c:	00249793          	slli	a5,s1,0x2
    83f4af60:	8c5e                	mv	s8,s7
    83f4af62:	4385                	li	t2,1
        for(i=2;i<ido;i+=2){
    83f4af64:	4f09                	li	t5,2
    83f4af66:	008a0f93          	addi	t6,s4,8
      for(k=0;k<l1;k++){
    83f4af6a:	8896                	mv	a7,t0
    83f4af6c:	8862                	mv	a6,s8
    83f4af6e:	4301                	li	t1,0
    83f4af70:	06805c63          	blez	s0,83f4afe8 <dradfg+0x7f6>
        for(i=2;i<ido;i+=2){
    83f4af74:	069f5563          	bge	t5,s1,83f4afde <dradfg+0x7ec>
    83f4af78:	010e8533          	add	a0,t4,a6
    83f4af7c:	00281613          	slli	a2,a6,0x2
    83f4af80:	050a                	slli	a0,a0,0x2
    83f4af82:	00c906b3          	add	a3,s2,a2
    83f4af86:	01288733          	add	a4,a7,s2
    83f4af8a:	9652                	add	a2,a2,s4
    83f4af8c:	014885b3          	add	a1,a7,s4
    83f4af90:	957e                	add	a0,a0,t6
          c1[t5-1]=ch[t5-1]+ch[t6-1];
    83f4af92:	0046a787          	flw	fa5,4(a3)
    83f4af96:	00472707          	flw	fa4,4(a4)
        for(i=2;i<ido;i+=2){
    83f4af9a:	0621                	addi	a2,a2,8
    83f4af9c:	06a1                	addi	a3,a3,8
          c1[t5-1]=ch[t5-1]+ch[t6-1];
    83f4af9e:	00e7f7d3          	fadd.s	fa5,fa5,fa4
        for(i=2;i<ido;i+=2){
    83f4afa2:	0721                	addi	a4,a4,8
    83f4afa4:	05a1                	addi	a1,a1,8
          c1[t5-1]=ch[t5-1]+ch[t6-1];
    83f4afa6:	fef62e27          	fsw	fa5,-4(a2)
          c1[t6-1]=ch[t5]-ch[t6];
    83f4afaa:	00072707          	flw	fa4,0(a4)
    83f4afae:	0006a787          	flw	fa5,0(a3)
    83f4afb2:	08e7f7d3          	fsub.s	fa5,fa5,fa4
    83f4afb6:	fef5ae27          	fsw	fa5,-4(a1)
          c1[t5]=ch[t5]+ch[t6];
    83f4afba:	00072707          	flw	fa4,0(a4)
    83f4afbe:	0006a787          	flw	fa5,0(a3)
    83f4afc2:	00e7f7d3          	fadd.s	fa5,fa5,fa4
    83f4afc6:	00f62027          	fsw	fa5,0(a2)
          c1[t6]=ch[t6-1]-ch[t5-1];
    83f4afca:	ffc72787          	flw	fa5,-4(a4)
    83f4afce:	ffc6a707          	flw	fa4,-4(a3)
    83f4afd2:	08e7f7d3          	fsub.s	fa5,fa5,fa4
    83f4afd6:	00f5a027          	fsw	fa5,0(a1)
        for(i=2;i<ido;i+=2){
    83f4afda:	faa61ce3          	bne	a2,a0,83f4af92 <dradfg+0x7a0>
      for(k=0;k<l1;k++){
    83f4afde:	2305                	addiw	t1,t1,1
    83f4afe0:	9826                	add	a6,a6,s1
    83f4afe2:	98be                	add	a7,a7,a5
    83f4afe4:	f86418e3          	bne	s0,t1,83f4af74 <dradfg+0x782>
    for(j=1;j<ipph;j++){
    83f4afe8:	2385                	addiw	t2,t2,1
    83f4afea:	9c5e                	add	s8,s8,s7
    83f4afec:	92ee                	add	t0,t0,s11
    83f4afee:	f67e1ee3          	bne	t3,t2,83f4af6a <dradfg+0x778>
    83f4aff2:	be29                	j	83f4ab0c <dradfg+0x31a>
  for(j=1;j<ipph;j++){
    83f4aff4:	edc7dbe3          	bge	a5,t3,83f4aeca <dradfg+0x6d8>
    83f4aff8:	76c2                	ld	a3,48(sp)
    83f4affa:	5792                	lw	a5,36(sp)
    83f4affc:	001b9f13          	slli	t5,s7,0x1
    83f4b000:	41768733          	sub	a4,a3,s7
    83f4b004:	0709                	addi	a4,a4,2
    83f4b006:	070a                	slli	a4,a4,0x2
    83f4b008:	993a                	add	s2,s2,a4
    83f4b00a:	7722                	ld	a4,40(sp)
    83f4b00c:	40f00abb          	negw	s5,a5
    83f4b010:	ffd4879b          	addiw	a5,s1,-3
    83f4b014:	415b8b33          	sub	s6,s7,s5
    83f4b018:	40df0f33          	sub	t5,t5,a3
    83f4b01c:	9bf9                	andi	a5,a5,-2
    83f4b01e:	5bf1                	li	s7,-4
    83f4b020:	0b0a                	slli	s6,s6,0x2
    83f4b022:	0f0a                	slli	t5,t5,0x2
    83f4b024:	0a8a                	slli	s5,s5,0x2
    83f4b026:	00249513          	slli	a0,s1,0x2
    83f4b02a:	00271393          	slli	t2,a4,0x2
    83f4b02e:	8a62                	mv	s4,s8
    83f4b030:	4985                	li	s3,1
    for(i=2;i<ido;i+=2){
    83f4b032:	4c89                	li	s9,2
    83f4b034:	40fb8bbb          	subw	s7,s7,a5
    83f4b038:	089cd563          	bge	s9,s1,83f4b0c2 <dradfg+0x8d0>
    83f4b03c:	005a0eb3          	add	t4,s4,t0
    83f4b040:	ffe28813          	addi	a6,t0,-2
    83f4b044:	0e86                	slli	t4,t4,0x1
    83f4b046:	080a                	slli	a6,a6,0x2
    83f4b048:	9eea                	add	t4,t4,s10
    83f4b04a:	ffe2831b          	addiw	t1,t0,-2
    83f4b04e:	986a                	add	a6,a6,s10
    83f4b050:	005b8fbb          	addw	t6,s7,t0
    83f4b054:	0e86                	slli	t4,t4,0x1
      t6=idp2+t1-i;
    83f4b056:	88ca                	mv	a7,s2
      for(k=0;k<l1;k++){
    83f4b058:	06805063          	blez	s0,83f4b0b8 <dradfg+0x8c6>
    83f4b05c:	011f0733          	add	a4,t5,a7
    83f4b060:	410e8633          	sub	a2,t4,a6
    83f4b064:	86c2                	mv	a3,a6
    83f4b066:	87c6                	mv	a5,a7
    83f4b068:	4581                	li	a1,0
        cc[t7-1]=ch[t8-1]+ch[t9-1];
    83f4b06a:	ffc7a707          	flw	fa4,-4(a5)
    83f4b06e:	ffc72787          	flw	fa5,-4(a4)
      for(k=0;k<l1;k++){
    83f4b072:	2585                	addiw	a1,a1,1
        cc[t7-1]=ch[t8-1]+ch[t9-1];
    83f4b074:	00e7f7d3          	fadd.s	fa5,fa5,fa4
    83f4b078:	fef62e27          	fsw	fa5,-4(a2)
        cc[t6-1]=ch[t8-1]-ch[t9-1];
    83f4b07c:	ffc7a707          	flw	fa4,-4(a5)
    83f4b080:	ffc72787          	flw	fa5,-4(a4)
    83f4b084:	08e7f7d3          	fsub.s	fa5,fa5,fa4
    83f4b088:	fef6ae27          	fsw	fa5,-4(a3)
        cc[t7]=ch[t8]+ch[t9];
    83f4b08c:	0007a707          	flw	fa4,0(a5)
    83f4b090:	00072787          	flw	fa5,0(a4)
    83f4b094:	00e7f7d3          	fadd.s	fa5,fa5,fa4
    83f4b098:	00f62027          	fsw	fa5,0(a2)
        cc[t6]=ch[t9]-ch[t8];
    83f4b09c:	0007a787          	flw	fa5,0(a5)
    83f4b0a0:	00072707          	flw	fa4,0(a4)
      for(k=0;k<l1;k++){
    83f4b0a4:	97aa                	add	a5,a5,a0
    83f4b0a6:	972a                	add	a4,a4,a0
        cc[t6]=ch[t9]-ch[t8];
    83f4b0a8:	08e7f7d3          	fsub.s	fa5,fa5,fa4
      for(k=0;k<l1;k++){
    83f4b0ac:	961e                	add	a2,a2,t2
        cc[t6]=ch[t9]-ch[t8];
    83f4b0ae:	00f6a027          	fsw	fa5,0(a3)
      for(k=0;k<l1;k++){
    83f4b0b2:	969e                	add	a3,a3,t2
    83f4b0b4:	fab41be3          	bne	s0,a1,83f4b06a <dradfg+0x878>
    for(i=2;i<ido;i+=2){
    83f4b0b8:	3379                	addiw	t1,t1,-2
    83f4b0ba:	08a1                	addi	a7,a7,8
    83f4b0bc:	1861                	addi	a6,a6,-8
    83f4b0be:	f86f9de3          	bne	t6,t1,83f4b058 <dradfg+0x866>
  for(j=1;j<ipph;j++){
    83f4b0c2:	2985                	addiw	s3,s3,1
    83f4b0c4:	9f5a                	add	t5,t5,s6
    83f4b0c6:	005c02bb          	addw	t0,s8,t0
    83f4b0ca:	9a62                	add	s4,s4,s8
    83f4b0cc:	9956                	add	s2,s2,s5
    83f4b0ce:	f73e15e3          	bne	t3,s3,83f4b038 <dradfg+0x846>
    83f4b0d2:	bbe5                	j	83f4aeca <dradfg+0x6d8>
  t2=ipp2*idl1;
    83f4b0d4:	033a8c3b          	mulw	s8,s5,s3
  for(ik=0;ik<idl1;ik++)c2[ik]=ch2[ik];
    83f4b0d8:	a3304ee3          	bgtz	s3,83f4ab14 <dradfg+0x322>
    83f4b0dc:	bc81                	j	83f4ab2c <dradfg+0x33a>
  t2=ipp2*idl1;
    83f4b0de:	033a8c3b          	mulw	s8,s5,s3
  for(ik=0;ik<idl1;ik++)c2[ik]=ch2[ik];
    83f4b0e2:	a33049e3          	bgtz	s3,83f4ab14 <dradfg+0x322>
    83f4b0e6:	b189                	j	83f4ad28 <dradfg+0x536>

0000000083f4b0e8 <dradbg>:

static void dradbg(int ido,int ip,int l1,int idl1,float *cc,float *c1,
            float *c2,float *ch,float *ch2,float *wa){
    83f4b0e8:	7115                	addi	sp,sp,-224
    83f4b0ea:	b4a2                	fsd	fs0,104(sp)
  float dcp,arg,dsp,ar1h,ar2h;
  int ipp2;

  t10=ip*ido;
  t0=l1*ido;
  arg=tpi/(float)ip;
    83f4b0ec:	d005f453          	fcvt.s.w	fs0,a1
            float *c2,float *ch,float *ch2,float *wa){
    83f4b0f0:	e9a2                	sd	s0,208(sp)
  arg=tpi/(float)ip;
    83f4b0f2:	00007417          	auipc	s0,0x7
    83f4b0f6:	37242787          	flw	fa5,882(s0) # 83f52464 <__func__.1+0x26c>
    83f4b0fa:	1887f453          	fdiv.s	fs0,fa5,fs0
            float *c2,float *ch,float *ch2,float *wa){
    83f4b0fe:	e566                	sd	s9,136(sp)
  t0=l1*ido;
    83f4b100:	02c50cbb          	mulw	s9,a0,a2
            float *c2,float *ch,float *ch2,float *wa){
    83f4b104:	ed86                	sd	ra,216(sp)
    83f4b106:	e5a6                	sd	s1,200(sp)
    83f4b108:	e1ca                	sd	s2,192(sp)
    83f4b10a:	fd4e                	sd	s3,184(sp)
    83f4b10c:	892a                	mv	s2,a0
    83f4b10e:	89be                	mv	s3,a5
    83f4b110:	f952                	sd	s4,176(sp)
    83f4b112:	f556                	sd	s5,168(sp)
    83f4b114:	f15a                	sd	s6,160(sp)
    83f4b116:	8aba                	mv	s5,a4
    83f4b118:	ed5e                	sd	s7,152(sp)
    83f4b11a:	e962                	sd	s8,144(sp)
  t10=ip*ido;
    83f4b11c:	02a58bbb          	mulw	s7,a1,a0
            float *c2,float *ch,float *ch2,float *wa){
    83f4b120:	e16a                	sd	s10,128(sp)
    83f4b122:	e42e                	sd	a1,8(sp)
    83f4b124:	8d2e                	mv	s10,a1
    83f4b126:	8432                	mv	s0,a2
  dcp=(float)cos(arg);
    83f4b128:	42040453          	fcvt.d.s	fs0,fs0
            float *c2,float *ch,float *ch2,float *wa){
    83f4b12c:	8a36                	mv	s4,a3
    83f4b12e:	e8c2                	sd	a6,80(sp)
  dcp=(float)cos(arg);
    83f4b130:	22840553          	fmv.d	fa0,fs0
            float *c2,float *ch,float *ch2,float *wa){
    83f4b134:	84c6                	mv	s1,a7
    83f4b136:	7c0e                	ld	s8,224(sp)
    83f4b138:	fcee                	sd	s11,120(sp)
  dcp=(float)cos(arg);
    83f4b13a:	f98f50ef          	jal	ra,83f408d2 <cos>
    83f4b13e:	22a507d3          	fmv.d	fa5,fa0
  dsp=(float)sin(arg);
    83f4b142:	22840553          	fmv.d	fa0,fs0
  t0=l1*ido;
    83f4b146:	8b66                	mv	s6,s9
  dcp=(float)cos(arg);
    83f4b148:	4017f453          	fcvt.s.d	fs0,fa5
  dsp=(float)sin(arg);
    83f4b14c:	a1bf50ef          	jal	ra,83f40b66 <sin>
  nbd=(ido-1)>>1;
    83f4b150:	fff9079b          	addiw	a5,s2,-1
    83f4b154:	4017d71b          	sraiw	a4,a5,0x1
  ipp2=ip;
  ipph=(ip+1)>>1;
    83f4b158:	001d0f1b          	addiw	t5,s10,1
  nbd=(ido-1)>>1;
    83f4b15c:	fc3a                	sd	a4,56(sp)
  dsp=(float)sin(arg);
    83f4b15e:	401575d3          	fcvt.s.d	fa1,fa0
  ipph=(ip+1)>>1;
    83f4b162:	401f5f1b          	sraiw	t5,t5,0x1
  if(ido<l1)goto L103;
    83f4b166:	52894663          	blt	s2,s0,83f4b692 <dradbg+0x5aa>

  t1=0;
  t2=0;
  for(k=0;k<l1;k++){
    83f4b16a:	04805263          	blez	s0,83f4b1ae <dradbg+0xc6>
    83f4b16e:	02079713          	slli	a4,a5,0x20
    83f4b172:	01e75793          	srli	a5,a4,0x1e
    83f4b176:	004a8693          	addi	a3,s5,4
    83f4b17a:	002b9813          	slli	a6,s7,0x2
    83f4b17e:	8556                	mv	a0,s5
    83f4b180:	00291893          	slli	a7,s2,0x2
    83f4b184:	85a6                	mv	a1,s1
    83f4b186:	96be                	add	a3,a3,a5
    83f4b188:	4601                	li	a2,0
    t3=t1;
    t4=t2;
    for(i=0;i<ido;i++){
    83f4b18a:	872e                	mv	a4,a1
    83f4b18c:	87aa                	mv	a5,a0
    83f4b18e:	01205a63          	blez	s2,83f4b1a2 <dradbg+0xba>
      ch[t3]=cc[t4];
    83f4b192:	0007a787          	flw	fa5,0(a5)
    for(i=0;i<ido;i++){
    83f4b196:	0791                	addi	a5,a5,4
    83f4b198:	0711                	addi	a4,a4,4
      ch[t3]=cc[t4];
    83f4b19a:	fef72e27          	fsw	fa5,-4(a4)
    for(i=0;i<ido;i++){
    83f4b19e:	fed79ae3          	bne	a5,a3,83f4b192 <dradbg+0xaa>
  for(k=0;k<l1;k++){
    83f4b1a2:	2605                	addiw	a2,a2,1
    83f4b1a4:	9542                	add	a0,a0,a6
    83f4b1a6:	95c6                	add	a1,a1,a7
    83f4b1a8:	96c2                	add	a3,a3,a6
    83f4b1aa:	fec410e3          	bne	s0,a2,83f4b18a <dradbg+0xa2>
    t1++;
  }

 L106:
  t1=0;
  t2=ipp2*t0;
    83f4b1ae:	6722                	ld	a4,8(sp)
  t7=(t5=ido<<1);
  for(j=1;j<ipph;j++){
    83f4b1b0:	4785                	li	a5,1
  t7=(t5=ido<<1);
    83f4b1b2:	00191d9b          	slliw	s11,s2,0x1
  t2=ipp2*t0;
    83f4b1b6:	02eb073b          	mulw	a4,s6,a4
    83f4b1ba:	e83a                	sd	a4,16(sp)
  for(j=1;j<ipph;j++){
    83f4b1bc:	53e7d063          	bge	a5,t5,83f4b6dc <dradbg+0x5f4>
    83f4b1c0:	419007b3          	neg	a5,s9
    83f4b1c4:	41600fbb          	negw	t6,s6
    83f4b1c8:	00279293          	slli	t0,a5,0x2
    83f4b1cc:	ecbe                	sd	a5,88(sp)
    83f4b1ce:	002d9b13          	slli	s6,s11,0x2
    83f4b1d2:	419707b3          	sub	a5,a4,s9
    83f4b1d6:	002c9d13          	slli	s10,s9,0x2
    83f4b1da:	c2fe                	sw	t6,68(sp)
    83f4b1dc:	e4be                	sd	a5,72(sp)
    83f4b1de:	016a8eb3          	add	t4,s5,s6
    83f4b1e2:	01a48e33          	add	t3,s1,s10
    83f4b1e6:	0f8a                	slli	t6,t6,0x2
    83f4b1e8:	00279893          	slli	a7,a5,0x2
    83f4b1ec:	002b9513          	slli	a0,s7,0x2
    83f4b1f0:	00291713          	slli	a4,s2,0x2
    83f4b1f4:	8816                	mv	a6,t0
    83f4b1f6:	4305                	li	t1,1
    t1+=t0;
    t2-=t0;
    t3=t1;
    t4=t2;
    t6=t5;
    for(k=0;k<l1;k++){
    83f4b1f8:	86f2                	mv	a3,t3
    83f4b1fa:	87f6                	mv	a5,t4
    83f4b1fc:	4581                	li	a1,0
    83f4b1fe:	02805663          	blez	s0,83f4b22a <dradbg+0x142>
      ch[t3]=cc[t6-1]+cc[t6-1];
    83f4b202:	ffc7a787          	flw	fa5,-4(a5)
      ch[t4]=cc[t6]+cc[t6];
    83f4b206:	01068633          	add	a2,a3,a6
    83f4b20a:	9646                	add	a2,a2,a7
      ch[t3]=cc[t6-1]+cc[t6-1];
    83f4b20c:	00f7f7d3          	fadd.s	fa5,fa5,fa5
    for(k=0;k<l1;k++){
    83f4b210:	2585                	addiw	a1,a1,1
      ch[t3]=cc[t6-1]+cc[t6-1];
    83f4b212:	00f6a027          	fsw	fa5,0(a3)
      ch[t4]=cc[t6]+cc[t6];
    83f4b216:	0007a787          	flw	fa5,0(a5)
    for(k=0;k<l1;k++){
    83f4b21a:	96ba                	add	a3,a3,a4
    83f4b21c:	97aa                	add	a5,a5,a0
      ch[t4]=cc[t6]+cc[t6];
    83f4b21e:	00f7f7d3          	fadd.s	fa5,fa5,fa5
    83f4b222:	00f62027          	fsw	fa5,0(a2)
    for(k=0;k<l1;k++){
    83f4b226:	fcb41ee3          	bne	s0,a1,83f4b202 <dradbg+0x11a>
  for(j=1;j<ipph;j++){
    83f4b22a:	2305                	addiw	t1,t1,1
    83f4b22c:	9eda                	add	t4,t4,s6
    83f4b22e:	9e6a                	add	t3,t3,s10
    83f4b230:	9816                	add	a6,a6,t0
    83f4b232:	98fe                	add	a7,a7,t6
    83f4b234:	fc6f12e3          	bne	t5,t1,83f4b1f8 <dradbg+0x110>
      t6+=t10;
    }
    t5+=t7;
  }

  if (ido == 1)goto L116;
    83f4b238:	4785                	li	a5,1
    83f4b23a:	0af90d63          	beq	s2,a5,83f4b2f4 <dradbg+0x20c>
  if(nbd<l1)goto L112;
    83f4b23e:	77e2                	ld	a5,56(sp)
    83f4b240:	5487d763          	bge	a5,s0,83f4b78e <dradbg+0x6a6>
    83f4b244:	ffd9079b          	addiw	a5,s2,-3
    83f4b248:	9bf9                	andi	a5,a5,-2
  }
  goto L116;

 L112:
  t1=0;
  t2=ipp2*t0;
    83f4b24a:	6b42                	ld	s6,16(sp)
    83f4b24c:	2789                	addiw	a5,a5,2
  t7=0;
    83f4b24e:	4281                	li	t0,0
  t1=0;
    83f4b250:	4b81                	li	s7,0
  for(j=1;j<ipph;j++){
    83f4b252:	4385                	li	t2,1
    83f4b254:	cc3e                	sw	a5,24(sp)
    t3=t1;
    t4=t2;
    t7+=(ido<<1);
    t8=t7;
    t9=t7;
    for(i=2;i<ido;i+=2){
    83f4b256:	4789                	li	a5,2
    t1+=t0;
    83f4b258:	017c8bbb          	addw	s7,s9,s7
    t2-=t0;
    83f4b25c:	419b0b3b          	subw	s6,s6,s9
    t7+=(ido<<1);
    83f4b260:	005d82bb          	addw	t0,s11,t0
    for(i=2;i<ido;i+=2){
    83f4b264:	0927d563          	bge	a5,s2,83f4b2ee <dradbg+0x206>
    83f4b268:	47e2                	lw	a5,24(sp)
    t9=t7;
    83f4b26a:	8e96                	mv	t4,t0
    t8=t7;
    83f4b26c:	8e16                	mv	t3,t0
    83f4b26e:	01778fbb          	addw	t6,a5,s7
    t4=t2;
    83f4b272:	835a                	mv	t1,s6
    t3=t1;
    83f4b274:	88de                	mv	a7,s7
      t3+=2;
    83f4b276:	2889                	addiw	a7,a7,2
      t4+=2;
    83f4b278:	2309                	addiw	t1,t1,2
      t8+=2;
    83f4b27a:	2e09                	addiw	t3,t3,2
      t9-=2;
    83f4b27c:	3ef9                	addiw	t4,t4,-2
      t5=t3;
      t6=t4;
      t11=t8;
      t12=t9;
      for(k=0;k<l1;k++){
    83f4b27e:	06805663          	blez	s0,83f4b2ea <dradbg+0x202>
    83f4b282:	002e1693          	slli	a3,t3,0x2
    83f4b286:	002e9793          	slli	a5,t4,0x2
    83f4b28a:	00289593          	slli	a1,a7,0x2
    83f4b28e:	00231613          	slli	a2,t1,0x2
    83f4b292:	96d6                	add	a3,a3,s5
    83f4b294:	97d6                	add	a5,a5,s5
    83f4b296:	95a6                	add	a1,a1,s1
    83f4b298:	9626                	add	a2,a2,s1
    83f4b29a:	4801                	li	a6,0
        ch[t5-1]=cc[t11-1]+cc[t12-1];
    83f4b29c:	ffc7a707          	flw	fa4,-4(a5)
    83f4b2a0:	ffc6a787          	flw	fa5,-4(a3)
      for(k=0;k<l1;k++){
    83f4b2a4:	2805                	addiw	a6,a6,1
        ch[t5-1]=cc[t11-1]+cc[t12-1];
    83f4b2a6:	00e7f7d3          	fadd.s	fa5,fa5,fa4
    83f4b2aa:	fef5ae27          	fsw	fa5,-4(a1)
        ch[t6-1]=cc[t11-1]-cc[t12-1];
    83f4b2ae:	ffc7a707          	flw	fa4,-4(a5)
    83f4b2b2:	ffc6a787          	flw	fa5,-4(a3)
    83f4b2b6:	08e7f7d3          	fsub.s	fa5,fa5,fa4
    83f4b2ba:	fef62e27          	fsw	fa5,-4(a2)
        ch[t5]=cc[t11]-cc[t12];
    83f4b2be:	0007a707          	flw	fa4,0(a5)
    83f4b2c2:	0006a787          	flw	fa5,0(a3)
    83f4b2c6:	08e7f7d3          	fsub.s	fa5,fa5,fa4
    83f4b2ca:	00f5a027          	fsw	fa5,0(a1)
        ch[t6]=cc[t11]+cc[t12];
    83f4b2ce:	0006a787          	flw	fa5,0(a3)
    83f4b2d2:	0007a707          	flw	fa4,0(a5)
      for(k=0;k<l1;k++){
    83f4b2d6:	96aa                	add	a3,a3,a0
    83f4b2d8:	97aa                	add	a5,a5,a0
        ch[t6]=cc[t11]+cc[t12];
    83f4b2da:	00e7f7d3          	fadd.s	fa5,fa5,fa4
      for(k=0;k<l1;k++){
    83f4b2de:	95ba                	add	a1,a1,a4
        ch[t6]=cc[t11]+cc[t12];
    83f4b2e0:	00f62027          	fsw	fa5,0(a2)
      for(k=0;k<l1;k++){
    83f4b2e4:	963a                	add	a2,a2,a4
    83f4b2e6:	fb041be3          	bne	s0,a6,83f4b29c <dradbg+0x1b4>
    for(i=2;i<ido;i+=2){
    83f4b2ea:	f9f896e3          	bne	a7,t6,83f4b276 <dradbg+0x18e>
  for(j=1;j<ipph;j++){
    83f4b2ee:	2385                	addiw	t2,t2,1
    83f4b2f0:	f67f13e3          	bne	t5,t2,83f4b256 <dradbg+0x16e>
  ar1=1.f;
  ai1=0.f;
  t1=0;
  t9=(t2=ipp2*idl1);
  t3=(ip-1)*idl1;
  for(l=1;l<ipph;l++){
    83f4b2f4:	67a2                	ld	a5,8(sp)
    83f4b2f6:	fffa061b          	addiw	a2,s4,-1
    83f4b2fa:	1602                	slli	a2,a2,0x20
    83f4b2fc:	0347853b          	mulw	a0,a5,s4
    83f4b300:	9201                	srli	a2,a2,0x20
    83f4b302:	001a169b          	slliw	a3,s4,0x1
    83f4b306:	00c688b3          	add	a7,a3,a2
    83f4b30a:	6fc6                	ld	t6,80(sp)
    83f4b30c:	40d006b3          	neg	a3,a3
    83f4b310:	004c0793          	addi	a5,s8,4 # 8004 <_EL1_STACK_SIZE+0x7804>
    83f4b314:	00261e93          	slli	t4,a2,0x2
    83f4b318:	068a                	slli	a3,a3,0x2
    83f4b31a:	4140083b          	negw	a6,s4
    83f4b31e:	41450533          	sub	a0,a0,s4
    83f4b322:	00251b13          	slli	s6,a0,0x2
    83f4b326:	088a                	slli	a7,a7,0x2
    83f4b328:	41450533          	sub	a0,a0,s4
  t9=(t2=ipp2*idl1);
    83f4b32c:	f0000053          	fmv.w.x	ft0,zero
    83f4b330:	080a                	slli	a6,a6,0x2
    83f4b332:	002a1e13          	slli	t3,s4,0x2
    83f4b336:	414005b3          	neg	a1,s4
    83f4b33a:	fff64613          	not	a2,a2
    83f4b33e:	9ebe                	add	t4,t4,a5
    83f4b340:	f836                	sd	a3,48(sp)
    83f4b342:	97c6                	add	a5,a5,a7
    83f4b344:	00251693          	slli	a3,a0,0x2
    83f4b348:	01cf82b3          	add	t0,t6,t3
    83f4b34c:	f03e                	sd	a5,32(sp)
    83f4b34e:	f442                	sd	a6,40(sp)
    83f4b350:	9fda                	add	t6,t6,s6
    83f4b352:	00259a93          	slli	s5,a1,0x2
    83f4b356:	83c2                	mv	t2,a6
    83f4b358:	ec36                	sd	a3,24(sp)
    83f4b35a:	00007797          	auipc	a5,0x7
    83f4b35e:	ef67a507          	flw	fa0,-266(a5) # 83f52250 <__func__.1+0x58>
    83f4b362:	4d85                	li	s11,1
    83f4b364:	00261b93          	slli	s7,a2,0x2
    t1+=idl1;
    t2-=idl1;

    ar1h=dcp*ar1-dsp*ai1;
    83f4b368:	1005f753          	fmul.s	fa4,fa1,ft0
    ai1=dcp*ai1+dsp*ar1;
    83f4b36c:	10a5f7d3          	fmul.s	fa5,fa1,fa0
    t4=t1;
    t5=t2;
    t6=0;
    t7=idl1;
    t8=t3;
    for(ik=0;ik<idl1;ik++){
    83f4b370:	867e                	mv	a2,t6
    83f4b372:	8696                	mv	a3,t0
    83f4b374:	87e2                	mv	a5,s8
    ar1h=dcp*ar1-dsp*ai1;
    83f4b376:	70a47547          	fmsub.s	fa0,fs0,fa0,fa4
    ai1=dcp*ai1+dsp*ar1;
    83f4b37a:	78047043          	fmadd.s	ft0,fs0,ft0,fa5
    for(ik=0;ik<idl1;ik++){
    83f4b37e:	03405963          	blez	s4,83f4b3b0 <dradbg+0x2c8>
      c2[t4++]=ch2[t6++]+ar1*ch2[t7++];
    83f4b382:	01c785b3          	add	a1,a5,t3
    83f4b386:	0007a707          	flw	fa4,0(a5)
    83f4b38a:	0005a787          	flw	fa5,0(a1)
    for(ik=0;ik<idl1;ik++){
    83f4b38e:	0691                	addi	a3,a3,4
      c2[t5++]=ai1*ch2[t8++];
    83f4b390:	016785b3          	add	a1,a5,s6
      c2[t4++]=ch2[t6++]+ar1*ch2[t7++];
    83f4b394:	70a7f7c3          	fmadd.s	fa5,fa5,fa0,fa4
    for(ik=0;ik<idl1;ik++){
    83f4b398:	0611                	addi	a2,a2,4
    83f4b39a:	0791                	addi	a5,a5,4
      c2[t4++]=ch2[t6++]+ar1*ch2[t7++];
    83f4b39c:	fef6ae27          	fsw	fa5,-4(a3)
      c2[t5++]=ai1*ch2[t8++];
    83f4b3a0:	0005a787          	flw	fa5,0(a1)
    83f4b3a4:	1007f7d3          	fmul.s	fa5,fa5,ft0
    83f4b3a8:	fef62e27          	fsw	fa5,-4(a2)
    for(ik=0;ik<idl1;ik++){
    83f4b3ac:	fdd79be3          	bne	a5,t4,83f4b382 <dradbg+0x29a>
    ar2=ar1;
    ai2=ai1;

    t6=idl1;
    t7=t9-idl1;
    for(j=2;j<ipph;j++){
    83f4b3b0:	4789                	li	a5,2
    83f4b3b2:	07e7dc63          	bge	a5,t5,83f4b42a <dradbg+0x342>
    ar2=ar1;
    83f4b3b6:	20a50653          	fmv.s	fa2,fa0
    ai2=ai1;
    83f4b3ba:	200006d3          	fmv.s	fa3,ft0
    for(j=2;j<ipph;j++){
    83f4b3be:	7502                	ld	a0,32(sp)
    83f4b3c0:	68e2                	ld	a7,24(sp)
    83f4b3c2:	7842                	ld	a6,48(sp)
    83f4b3c4:	4309                	li	t1,2
      t6+=idl1;
      t7-=idl1;
      ar2h=dc2*ar2-ds2*ai2;
    83f4b3c6:	10d07753          	fmul.s	fa4,ft0,fa3
      ai2=dc2*ai2+ds2*ar2;
    83f4b3ca:	10c077d3          	fmul.s	fa5,ft0,fa2
    83f4b3ce:	00ab87b3          	add	a5,s7,a0
      ar2=ar2h;
      t4=t1;
      t5=t2;
      t11=t6;
      t12=t7;
      for(ik=0;ik<idl1;ik++){
    83f4b3d2:	867e                	mv	a2,t6
    83f4b3d4:	8696                	mv	a3,t0
      ar2h=dc2*ar2-ds2*ai2;
    83f4b3d6:	70c57647          	fmsub.s	fa2,fa0,fa2,fa4
      ai2=dc2*ai2+ds2*ar2;
    83f4b3da:	78d576c3          	fmadd.s	fa3,fa0,fa3,fa5
      for(ik=0;ik<idl1;ik++){
    83f4b3de:	03405a63          	blez	s4,83f4b412 <dradbg+0x32a>
        c2[t4++]+=ar2*ch2[t11++];
    83f4b3e2:	0006a707          	flw	fa4,0(a3)
    83f4b3e6:	0007a787          	flw	fa5,0(a5)
        c2[t5++]+=ai2*ch2[t12++];
    83f4b3ea:	010785b3          	add	a1,a5,a6
      for(ik=0;ik<idl1;ik++){
    83f4b3ee:	0691                	addi	a3,a3,4
        c2[t4++]+=ar2*ch2[t11++];
    83f4b3f0:	70c7f7c3          	fmadd.s	fa5,fa5,fa2,fa4
      for(ik=0;ik<idl1;ik++){
    83f4b3f4:	0611                	addi	a2,a2,4
        c2[t5++]+=ai2*ch2[t12++];
    83f4b3f6:	95c6                	add	a1,a1,a7
      for(ik=0;ik<idl1;ik++){
    83f4b3f8:	0791                	addi	a5,a5,4
        c2[t4++]+=ar2*ch2[t11++];
    83f4b3fa:	fef6ae27          	fsw	fa5,-4(a3)
        c2[t5++]+=ai2*ch2[t12++];
    83f4b3fe:	ffc62707          	flw	fa4,-4(a2)
    83f4b402:	0005a787          	flw	fa5,0(a1)
    83f4b406:	70d7f7c3          	fmadd.s	fa5,fa5,fa3,fa4
    83f4b40a:	fef62e27          	fsw	fa5,-4(a2)
      for(ik=0;ik<idl1;ik++){
    83f4b40e:	fca79ae3          	bne	a5,a0,83f4b3e2 <dradbg+0x2fa>
    for(j=2;j<ipph;j++){
    83f4b412:	2305                	addiw	t1,t1,1
    83f4b414:	9856                	add	a6,a6,s5
    83f4b416:	989e                	add	a7,a7,t2
    83f4b418:	9572                	add	a0,a0,t3
    83f4b41a:	fa6f16e3          	bne	t5,t1,83f4b3c6 <dradbg+0x2de>
  for(l=1;l<ipph;l++){
    83f4b41e:	77a2                	ld	a5,40(sp)
    83f4b420:	2d85                	addiw	s11,s11,1
    83f4b422:	92f2                	add	t0,t0,t3
    83f4b424:	9fbe                	add	t6,t6,a5
    83f4b426:	f5edc1e3          	blt	s11,t5,83f4b368 <dradbg+0x280>
      for(ik=0;ik<idl1;ik++){
    83f4b42a:	8672                	mv	a2,t3
    83f4b42c:	4585                	li	a1,1

  t1=0;
  for(j=1;j<ipph;j++){
    t1+=idl1;
    t2=t1;
    for(ik=0;ik<idl1;ik++)ch2[ik]+=ch2[t2++];
    83f4b42e:	87e2                	mv	a5,s8
    83f4b430:	01405f63          	blez	s4,83f4b44e <dradbg+0x366>
    83f4b434:	00c786b3          	add	a3,a5,a2
    83f4b438:	0007a787          	flw	fa5,0(a5)
    83f4b43c:	0006a707          	flw	fa4,0(a3)
    83f4b440:	0791                	addi	a5,a5,4
    83f4b442:	00e7f7d3          	fadd.s	fa5,fa5,fa4
    83f4b446:	fef7ae27          	fsw	fa5,-4(a5)
    83f4b44a:	ffd795e3          	bne	a5,t4,83f4b434 <dradbg+0x34c>
  for(j=1;j<ipph;j++){
    83f4b44e:	2585                	addiw	a1,a1,1
    83f4b450:	9672                	add	a2,a2,t3
    83f4b452:	fde5cee3          	blt	a1,t5,83f4b42e <dradbg+0x346>
    83f4b456:	67e6                	ld	a5,88(sp)
    83f4b458:	4f96                	lw	t6,68(sp)
    83f4b45a:	01a98eb3          	add	t4,s3,s10
    83f4b45e:	00279293          	slli	t0,a5,0x2
    83f4b462:	67a6                	ld	a5,72(sp)
    83f4b464:	01a48e33          	add	t3,s1,s10
    83f4b468:	0f8a                	slli	t6,t6,0x2
    83f4b46a:	00279813          	slli	a6,a5,0x2
    83f4b46e:	8896                	mv	a7,t0
    83f4b470:	4305                	li	t1,1
  for(j=1;j<ipph;j++){
    t1+=t0;
    t2-=t0;
    t3=t1;
    t4=t2;
    for(k=0;k<l1;k++){
    83f4b472:	04805063          	blez	s0,83f4b4b2 <dradbg+0x3ca>
    83f4b476:	01098633          	add	a2,s3,a6
    83f4b47a:	86f2                	mv	a3,t3
    83f4b47c:	87f6                	mv	a5,t4
    83f4b47e:	4501                	li	a0,0
      ch[t3]=c1[t3]-c1[t4];
    83f4b480:	00062707          	flw	fa4,0(a2)
    83f4b484:	0007a787          	flw	fa5,0(a5)
      ch[t4]=c1[t3]+c1[t4];
    83f4b488:	00d885b3          	add	a1,a7,a3
    83f4b48c:	95c2                	add	a1,a1,a6
      ch[t3]=c1[t3]-c1[t4];
    83f4b48e:	08e7f7d3          	fsub.s	fa5,fa5,fa4
    for(k=0;k<l1;k++){
    83f4b492:	2505                	addiw	a0,a0,1
      ch[t3]=c1[t3]-c1[t4];
    83f4b494:	00f6a027          	fsw	fa5,0(a3)
      ch[t4]=c1[t3]+c1[t4];
    83f4b498:	0007a787          	flw	fa5,0(a5)
    83f4b49c:	00062707          	flw	fa4,0(a2)
    for(k=0;k<l1;k++){
    83f4b4a0:	97ba                	add	a5,a5,a4
    83f4b4a2:	963a                	add	a2,a2,a4
      ch[t4]=c1[t3]+c1[t4];
    83f4b4a4:	00e7f7d3          	fadd.s	fa5,fa5,fa4
    for(k=0;k<l1;k++){
    83f4b4a8:	96ba                	add	a3,a3,a4
      ch[t4]=c1[t3]+c1[t4];
    83f4b4aa:	00f5a027          	fsw	fa5,0(a1)
    for(k=0;k<l1;k++){
    83f4b4ae:	fca419e3          	bne	s0,a0,83f4b480 <dradbg+0x398>
  for(j=1;j<ipph;j++){
    83f4b4b2:	2305                	addiw	t1,t1,1
    83f4b4b4:	9eea                	add	t4,t4,s10
    83f4b4b6:	9e6a                	add	t3,t3,s10
    83f4b4b8:	9896                	add	a7,a7,t0
    83f4b4ba:	987e                	add	a6,a6,t6
    83f4b4bc:	fbe34be3          	blt	t1,t5,83f4b472 <dradbg+0x38a>
      t3+=ido;
      t4+=ido;
    }
  }

  if(ido==1)goto L132;
    83f4b4c0:	4785                	li	a5,1
    83f4b4c2:	1af90863          	beq	s2,a5,83f4b672 <dradbg+0x58a>
  if(nbd<l1)goto L128;
    83f4b4c6:	76e2                	ld	a3,56(sp)
    83f4b4c8:	2086dd63          	bge	a3,s0,83f4b6e2 <dradbg+0x5fa>
  goto L132;

 L128:
  t1=0;
  t2=ipp2*t0;
  for(j=1;j<ipph;j++){
    83f4b4cc:	4e05                	li	t3,1
  t1=0;
    83f4b4ce:	4e81                	li	t4,0
  for(j=1;j<ipph;j++){
    83f4b4d0:	09ee5f63          	bge	t3,t5,83f4b56e <dradbg+0x486>
    83f4b4d4:	ffd90f9b          	addiw	t6,s2,-3
    83f4b4d8:	ffefff93          	andi	t6,t6,-2
    t1+=t0;
    t2-=t0;
    t3=t1;
    t4=t2;
    for(i=2;i<ido;i+=2){
    83f4b4dc:	4289                	li	t0,2
    83f4b4de:	2f89                	addiw	t6,t6,2
    t2-=t0;
    83f4b4e0:	67c2                	ld	a5,16(sp)
    t1+=t0;
    83f4b4e2:	01dc8ebb          	addw	t4,s9,t4
    t2-=t0;
    83f4b4e6:	419787bb          	subw	a5,a5,s9
    83f4b4ea:	e83e                	sd	a5,16(sp)
    for(i=2;i<ido;i+=2){
    83f4b4ec:	0722de63          	bge	t0,s2,83f4b568 <dradbg+0x480>
    t4=t2;
    83f4b4f0:	68c2                	ld	a7,16(sp)
    83f4b4f2:	01df833b          	addw	t1,t6,t4
    t3=t1;
    83f4b4f6:	8876                	mv	a6,t4
      t3+=2;
    83f4b4f8:	2809                	addiw	a6,a6,2
      t4+=2;
    83f4b4fa:	2889                	addiw	a7,a7,2
      t5=t3;
      t6=t4;
      for(k=0;k<l1;k++){
    83f4b4fc:	06805463          	blez	s0,83f4b564 <dradbg+0x47c>
    83f4b500:	00281593          	slli	a1,a6,0x2
    83f4b504:	00289613          	slli	a2,a7,0x2
    83f4b508:	00b986b3          	add	a3,s3,a1
    83f4b50c:	00c987b3          	add	a5,s3,a2
    83f4b510:	95a6                	add	a1,a1,s1
    83f4b512:	9626                	add	a2,a2,s1
    83f4b514:	4501                	li	a0,0
        ch[t5-1]=c1[t5-1]-c1[t6];
    83f4b516:	0007a707          	flw	fa4,0(a5)
    83f4b51a:	ffc6a787          	flw	fa5,-4(a3)
      for(k=0;k<l1;k++){
    83f4b51e:	2505                	addiw	a0,a0,1
        ch[t5-1]=c1[t5-1]-c1[t6];
    83f4b520:	08e7f7d3          	fsub.s	fa5,fa5,fa4
    83f4b524:	fef5ae27          	fsw	fa5,-4(a1)
        ch[t6-1]=c1[t5-1]+c1[t6];
    83f4b528:	0007a707          	flw	fa4,0(a5)
    83f4b52c:	ffc6a787          	flw	fa5,-4(a3)
    83f4b530:	00e7f7d3          	fadd.s	fa5,fa5,fa4
    83f4b534:	fef62e27          	fsw	fa5,-4(a2)
        ch[t5]=c1[t5]+c1[t6-1];
    83f4b538:	ffc7a707          	flw	fa4,-4(a5)
    83f4b53c:	0006a787          	flw	fa5,0(a3)
    83f4b540:	00e7f7d3          	fadd.s	fa5,fa5,fa4
    83f4b544:	00f5a027          	fsw	fa5,0(a1)
        ch[t6]=c1[t5]-c1[t6-1];
    83f4b548:	0006a787          	flw	fa5,0(a3)
    83f4b54c:	ffc7a707          	flw	fa4,-4(a5)
      for(k=0;k<l1;k++){
    83f4b550:	96ba                	add	a3,a3,a4
    83f4b552:	97ba                	add	a5,a5,a4
        ch[t6]=c1[t5]-c1[t6-1];
    83f4b554:	08e7f7d3          	fsub.s	fa5,fa5,fa4
      for(k=0;k<l1;k++){
    83f4b558:	95ba                	add	a1,a1,a4
        ch[t6]=c1[t5]-c1[t6-1];
    83f4b55a:	00f62027          	fsw	fa5,0(a2)
      for(k=0;k<l1;k++){
    83f4b55e:	963a                	add	a2,a2,a4
    83f4b560:	faa41be3          	bne	s0,a0,83f4b516 <dradbg+0x42e>
    for(i=2;i<ido;i+=2){
    83f4b564:	f9031ae3          	bne	t1,a6,83f4b4f8 <dradbg+0x410>
  for(j=1;j<ipph;j++){
    83f4b568:	2e05                	addiw	t3,t3,1
    83f4b56a:	f7cf1be3          	bne	t5,t3,83f4b4e0 <dradbg+0x3f8>
  }

L132:
  if(ido==1)return;

  for(ik=0;ik<idl1;ik++)c2[ik]=ch2[ik];
    83f4b56e:	03405463          	blez	s4,83f4b596 <dradbg+0x4ae>
    83f4b572:	fffa071b          	addiw	a4,s4,-1
    83f4b576:	02071793          	slli	a5,a4,0x20
    83f4b57a:	01e7d713          	srli	a4,a5,0x1e
    83f4b57e:	67c6                	ld	a5,80(sp)
    83f4b580:	004c0693          	addi	a3,s8,4
    83f4b584:	9736                	add	a4,a4,a3
    83f4b586:	000c2787          	flw	fa5,0(s8)
    83f4b58a:	0c11                	addi	s8,s8,4
    83f4b58c:	0791                	addi	a5,a5,4
    83f4b58e:	fef7ae27          	fsw	fa5,-4(a5)
    83f4b592:	ff871ae3          	bne	a4,s8,83f4b586 <dradbg+0x49e>

  t1=0;
  for(j=1;j<ip;j++){
    83f4b596:	6722                	ld	a4,8(sp)
    83f4b598:	4785                	li	a5,1
    83f4b59a:	0ce7dc63          	bge	a5,a4,83f4b672 <dradbg+0x58a>
    83f4b59e:	002c9513          	slli	a0,s9,0x2
    83f4b5a2:	00a48333          	add	t1,s1,a0
    83f4b5a6:	00a988b3          	add	a7,s3,a0
    83f4b5aa:	00291713          	slli	a4,s2,0x2
    83f4b5ae:	8e46                	mv	t3,a7
    83f4b5b0:	859a                	mv	a1,t1
    83f4b5b2:	4805                	li	a6,1
    t2=(t1+=t0);
    for(k=0;k<l1;k++){
    83f4b5b4:	8672                	mv	a2,t3
    83f4b5b6:	86ae                	mv	a3,a1
    83f4b5b8:	4781                	li	a5,0
    83f4b5ba:	00805b63          	blez	s0,83f4b5d0 <dradbg+0x4e8>
      c1[t2]=ch[t2];
    83f4b5be:	0006a787          	flw	fa5,0(a3)
    for(k=0;k<l1;k++){
    83f4b5c2:	2785                	addiw	a5,a5,1
    83f4b5c4:	96ba                	add	a3,a3,a4
      c1[t2]=ch[t2];
    83f4b5c6:	00f62027          	fsw	fa5,0(a2)
    for(k=0;k<l1;k++){
    83f4b5ca:	963a                	add	a2,a2,a4
    83f4b5cc:	fef419e3          	bne	s0,a5,83f4b5be <dradbg+0x4d6>
  for(j=1;j<ip;j++){
    83f4b5d0:	66a2                	ld	a3,8(sp)
    83f4b5d2:	0018079b          	addiw	a5,a6,1
    83f4b5d6:	95aa                	add	a1,a1,a0
    83f4b5d8:	9e2a                	add	t3,t3,a0
    83f4b5da:	00f68463          	beq	a3,a5,83f4b5e2 <dradbg+0x4fa>
    83f4b5de:	883e                	mv	a6,a5
    83f4b5e0:	bfd1                	j	83f4b5b4 <dradbg+0x4cc>
      t2+=ido;
    }
  }

  if(nbd>l1)goto L139;
    83f4b5e2:	77e2                	ld	a5,56(sp)
    83f4b5e4:	26f44563          	blt	s0,a5,83f4b84e <dradbg+0x766>

  is= -ido-1;
  t1=0;
  for(j=1;j<ip;j++){
    83f4b5e8:	77ae                	ld	a5,232(sp)
    83f4b5ea:	ffd90e9b          	addiw	t4,s2,-3
    83f4b5ee:	ffeefe93          	andi	t4,t4,-2
    83f4b5f2:	ffc78e13          	addi	t3,a5,-4
  t1=0;
    83f4b5f6:	4301                	li	t1,0
  for(j=1;j<ip;j++){
    83f4b5f8:	4885                	li	a7,1
    is+=ido;
    t1+=t0;
    idij=is;
    t2=t1;
    for(i=2;i<ido;i+=2){
    83f4b5fa:	4f09                	li	t5,2
    83f4b5fc:	2e89                	addiw	t4,t4,2
    t1+=t0;
    83f4b5fe:	006c833b          	addw	t1,s9,t1
    for(i=2;i<ido;i+=2){
    83f4b602:	072f5363          	bge	t5,s2,83f4b668 <dradbg+0x580>
    83f4b606:	006e883b          	addw	a6,t4,t1
    83f4b60a:	8672                	mv	a2,t3
    t2=t1;
    83f4b60c:	851a                	mv	a0,t1
      t2+=2;
    83f4b60e:	2509                	addiw	a0,a0,2
      idij+=2;
      t3=t2;
      for(k=0;k<l1;k++){
    83f4b610:	04805963          	blez	s0,83f4b662 <dradbg+0x57a>
    83f4b614:	00251693          	slli	a3,a0,0x2
    83f4b618:	00d487b3          	add	a5,s1,a3
    83f4b61c:	4581                	li	a1,0
    83f4b61e:	96ce                	add	a3,a3,s3
        c1[t3-1]=wa[idij-1]*ch[t3-1]-wa[idij]*ch[t3];
    83f4b620:	0007a607          	flw	fa2,0(a5)
    83f4b624:	00862707          	flw	fa4,8(a2)
    83f4b628:	ffc7a687          	flw	fa3,-4(a5)
    83f4b62c:	00462787          	flw	fa5,4(a2)
    83f4b630:	10c77753          	fmul.s	fa4,fa4,fa2
      for(k=0;k<l1;k++){
    83f4b634:	2585                	addiw	a1,a1,1
        c1[t3-1]=wa[idij-1]*ch[t3-1]-wa[idij]*ch[t3];
    83f4b636:	70d7f7c7          	fmsub.s	fa5,fa5,fa3,fa4
    83f4b63a:	fef6ae27          	fsw	fa5,-4(a3)
        c1[t3]=wa[idij-1]*ch[t3]+wa[idij]*ch[t3-1];
    83f4b63e:	ffc7a607          	flw	fa2,-4(a5)
    83f4b642:	00862707          	flw	fa4,8(a2)
    83f4b646:	0007a687          	flw	fa3,0(a5)
    83f4b64a:	00462787          	flw	fa5,4(a2)
    83f4b64e:	10c77753          	fmul.s	fa4,fa4,fa2
      for(k=0;k<l1;k++){
    83f4b652:	97ba                	add	a5,a5,a4
        c1[t3]=wa[idij-1]*ch[t3]+wa[idij]*ch[t3-1];
    83f4b654:	70d7f7c3          	fmadd.s	fa5,fa5,fa3,fa4
    83f4b658:	00f6a027          	fsw	fa5,0(a3)
      for(k=0;k<l1;k++){
    83f4b65c:	96ba                	add	a3,a3,a4
    83f4b65e:	fcb411e3          	bne	s0,a1,83f4b620 <dradbg+0x538>
    for(i=2;i<ido;i+=2){
    83f4b662:	0621                	addi	a2,a2,8
    83f4b664:	fb0515e3          	bne	a0,a6,83f4b60e <dradbg+0x526>
  for(j=1;j<ip;j++){
    83f4b668:	67a2                	ld	a5,8(sp)
    83f4b66a:	2885                	addiw	a7,a7,1
    83f4b66c:	9e3a                	add	t3,t3,a4
    83f4b66e:	f91798e3          	bne	a5,a7,83f4b5fe <dradbg+0x516>
        c1[t3]=wa[idij-1]*ch[t3]+wa[idij]*ch[t3-1];
      }
      t2+=ido;
    }
  }
}
    83f4b672:	60ee                	ld	ra,216(sp)
    83f4b674:	644e                	ld	s0,208(sp)
    83f4b676:	64ae                	ld	s1,200(sp)
    83f4b678:	690e                	ld	s2,192(sp)
    83f4b67a:	79ea                	ld	s3,184(sp)
    83f4b67c:	7a4a                	ld	s4,176(sp)
    83f4b67e:	7aaa                	ld	s5,168(sp)
    83f4b680:	7b0a                	ld	s6,160(sp)
    83f4b682:	6bea                	ld	s7,152(sp)
    83f4b684:	6c4a                	ld	s8,144(sp)
    83f4b686:	6caa                	ld	s9,136(sp)
    83f4b688:	6d0a                	ld	s10,128(sp)
    83f4b68a:	7de6                	ld	s11,120(sp)
    83f4b68c:	3426                	fld	fs0,104(sp)
    83f4b68e:	612d                	addi	sp,sp,224
    83f4b690:	8082                	ret
  for(i=0;i<ido;i++){
    83f4b692:	b1205ee3          	blez	s2,83f4b1ae <dradbg+0xc6>
    83f4b696:	88d6                	mv	a7,s5
    83f4b698:	8826                	mv	a6,s1
    83f4b69a:	002b9593          	slli	a1,s7,0x2
    83f4b69e:	00291613          	slli	a2,s2,0x2
    83f4b6a2:	4501                	li	a0,0
    for(k=0;k<l1;k++){
    83f4b6a4:	86c2                	mv	a3,a6
    83f4b6a6:	8746                	mv	a4,a7
    83f4b6a8:	4781                	li	a5,0
    83f4b6aa:	00805b63          	blez	s0,83f4b6c0 <dradbg+0x5d8>
      ch[t2]=cc[t3];
    83f4b6ae:	00072787          	flw	fa5,0(a4)
    for(k=0;k<l1;k++){
    83f4b6b2:	2785                	addiw	a5,a5,1
    83f4b6b4:	972e                	add	a4,a4,a1
      ch[t2]=cc[t3];
    83f4b6b6:	00f6a027          	fsw	fa5,0(a3)
    for(k=0;k<l1;k++){
    83f4b6ba:	96b2                	add	a3,a3,a2
    83f4b6bc:	fef419e3          	bne	s0,a5,83f4b6ae <dradbg+0x5c6>
    t1++;
    83f4b6c0:	2505                	addiw	a0,a0,1
  for(i=0;i<ido;i++){
    83f4b6c2:	0891                	addi	a7,a7,4
    83f4b6c4:	0811                	addi	a6,a6,4
    83f4b6c6:	fca91fe3          	bne	s2,a0,83f4b6a4 <dradbg+0x5bc>
  t2=ipp2*t0;
    83f4b6ca:	6722                	ld	a4,8(sp)
  for(j=1;j<ipph;j++){
    83f4b6cc:	4785                	li	a5,1
  t7=(t5=ido<<1);
    83f4b6ce:	00191d9b          	slliw	s11,s2,0x1
  t2=ipp2*t0;
    83f4b6d2:	02eb073b          	mulw	a4,s6,a4
    83f4b6d6:	e83a                	sd	a4,16(sp)
  for(j=1;j<ipph;j++){
    83f4b6d8:	afe7c4e3          	blt	a5,t5,83f4b1c0 <dradbg+0xd8>
  if (ido == 1)goto L116;
    83f4b6dc:	e8f919e3          	bne	s2,a5,83f4b56e <dradbg+0x486>
    83f4b6e0:	bf49                	j	83f4b672 <dradbg+0x58a>
  for(j=1;j<ipph;j++){
    83f4b6e2:	e9e7d6e3          	bge	a5,t5,83f4b56e <dradbg+0x486>
    83f4b6e6:	4a96                	lw	s5,68(sp)
    83f4b6e8:	67a6                	ld	a5,72(sp)
    83f4b6ea:	ffd90e1b          	addiw	t3,s2,-3
    83f4b6ee:	001e5e1b          	srliw	t3,t3,0x1
    83f4b6f2:	0a8a                	slli	s5,s5,0x2
    83f4b6f4:	00279b13          	slli	s6,a5,0x2
    83f4b6f8:	0e06                	slli	t3,t3,0x1
    83f4b6fa:	83e6                	mv	t2,s9
    83f4b6fc:	4285                	li	t0,1
      for(i=2;i<ido;i+=2){
    83f4b6fe:	4e89                	li	t4,2
    83f4b700:	00848f93          	addi	t6,s1,8
    for(k=0;k<l1;k++){
    83f4b704:	88da                	mv	a7,s6
    83f4b706:	881e                	mv	a6,t2
    83f4b708:	4301                	li	t1,0
    83f4b70a:	06805c63          	blez	s0,83f4b782 <dradbg+0x69a>
      for(i=2;i<ido;i+=2){
    83f4b70e:	072ed563          	bge	t4,s2,83f4b778 <dradbg+0x690>
    83f4b712:	01c80533          	add	a0,a6,t3
    83f4b716:	00281613          	slli	a2,a6,0x2
    83f4b71a:	050a                	slli	a0,a0,0x2
    83f4b71c:	013606b3          	add	a3,a2,s3
    83f4b720:	011987b3          	add	a5,s3,a7
    83f4b724:	9626                	add	a2,a2,s1
    83f4b726:	011485b3          	add	a1,s1,a7
    83f4b72a:	957e                	add	a0,a0,t6
        ch[t5-1]=c1[t5-1]-c1[t6];
    83f4b72c:	0046a787          	flw	fa5,4(a3)
    83f4b730:	0087a707          	flw	fa4,8(a5)
      for(i=2;i<ido;i+=2){
    83f4b734:	0621                	addi	a2,a2,8
    83f4b736:	06a1                	addi	a3,a3,8
        ch[t5-1]=c1[t5-1]-c1[t6];
    83f4b738:	08e7f7d3          	fsub.s	fa5,fa5,fa4
      for(i=2;i<ido;i+=2){
    83f4b73c:	07a1                	addi	a5,a5,8
    83f4b73e:	05a1                	addi	a1,a1,8
        ch[t5-1]=c1[t5-1]-c1[t6];
    83f4b740:	fef62e27          	fsw	fa5,-4(a2)
        ch[t6-1]=c1[t5-1]+c1[t6];
    83f4b744:	0007a707          	flw	fa4,0(a5)
    83f4b748:	ffc6a787          	flw	fa5,-4(a3)
    83f4b74c:	00e7f7d3          	fadd.s	fa5,fa5,fa4
    83f4b750:	fef5ae27          	fsw	fa5,-4(a1)
        ch[t5]=c1[t5]+c1[t6-1];
    83f4b754:	ffc7a707          	flw	fa4,-4(a5)
    83f4b758:	0006a787          	flw	fa5,0(a3)
    83f4b75c:	00e7f7d3          	fadd.s	fa5,fa5,fa4
    83f4b760:	00f62027          	fsw	fa5,0(a2)
        ch[t6]=c1[t5]-c1[t6-1];
    83f4b764:	0006a787          	flw	fa5,0(a3)
    83f4b768:	ffc7a707          	flw	fa4,-4(a5)
    83f4b76c:	08e7f7d3          	fsub.s	fa5,fa5,fa4
    83f4b770:	00f5a027          	fsw	fa5,0(a1)
      for(i=2;i<ido;i+=2){
    83f4b774:	fac51ce3          	bne	a0,a2,83f4b72c <dradbg+0x644>
    for(k=0;k<l1;k++){
    83f4b778:	2305                	addiw	t1,t1,1
    83f4b77a:	984a                	add	a6,a6,s2
    83f4b77c:	98ba                	add	a7,a7,a4
    83f4b77e:	f86418e3          	bne	s0,t1,83f4b70e <dradbg+0x626>
  for(j=1;j<ipph;j++){
    83f4b782:	2285                	addiw	t0,t0,1
    83f4b784:	93e6                	add	t2,t2,s9
    83f4b786:	9b56                	add	s6,s6,s5
    83f4b788:	f65f1ee3          	bne	t5,t0,83f4b704 <dradbg+0x61c>
    83f4b78c:	b3cd                	j	83f4b56e <dradbg+0x486>
  for(j=1;j<ipph;j++){
    83f4b78e:	4696                	lw	a3,68(sp)
    83f4b790:	67a6                	ld	a5,72(sp)
    83f4b792:	ffd9029b          	addiw	t0,s2,-3
    83f4b796:	419686b3          	sub	a3,a3,s9
    83f4b79a:	016a8633          	add	a2,s5,s6
    83f4b79e:	419787b3          	sub	a5,a5,s9
    83f4b7a2:	0012d29b          	srliw	t0,t0,0x1
    83f4b7a6:	068a                	slli	a3,a3,0x2
    83f4b7a8:	ec32                	sd	a2,24(sp)
    83f4b7aa:	f036                	sd	a3,32(sp)
    83f4b7ac:	00279f93          	slli	t6,a5,0x2
    83f4b7b0:	0286                	slli	t0,t0,0x1
  if(nbd<l1)goto L112;
    83f4b7b2:	8be6                	mv	s7,s9
  for(j=1;j<ipph;j++){
    83f4b7b4:	4d85                	li	s11,1
      for(i=2;i<ido;i+=2){
    83f4b7b6:	4389                	li	t2,2
    83f4b7b8:	00848a93          	addi	s5,s1,8
    for(k=0;k<l1;k++){
    83f4b7bc:	06805f63          	blez	s0,83f4b83a <dradbg+0x752>
    83f4b7c0:	6362                	ld	t1,24(sp)
    83f4b7c2:	002b9893          	slli	a7,s7,0x2
    83f4b7c6:	98a6                	add	a7,a7,s1
    83f4b7c8:	8ede                	mv	t4,s7
    83f4b7ca:	4e01                	li	t3,0
      for(i=2;i<ido;i+=2){
    83f4b7cc:	0723d163          	bge	t2,s2,83f4b82e <dradbg+0x746>
    83f4b7d0:	01d28833          	add	a6,t0,t4
    83f4b7d4:	080a                	slli	a6,a6,0x2
    83f4b7d6:	01f885b3          	add	a1,a7,t6
    83f4b7da:	9856                	add	a6,a6,s5
    83f4b7dc:	8646                	mv	a2,a7
    83f4b7de:	869a                	mv	a3,t1
    83f4b7e0:	879a                	mv	a5,t1
        ch[t5-1]=cc[t9-1]+cc[t11-1];
    83f4b7e2:	0047a787          	flw	fa5,4(a5)
    83f4b7e6:	ff46a707          	flw	fa4,-12(a3)
      for(i=2;i<ido;i+=2){
    83f4b7ea:	0621                	addi	a2,a2,8
    83f4b7ec:	07a1                	addi	a5,a5,8
        ch[t5-1]=cc[t9-1]+cc[t11-1];
    83f4b7ee:	00e7f7d3          	fadd.s	fa5,fa5,fa4
      for(i=2;i<ido;i+=2){
    83f4b7f2:	16e1                	addi	a3,a3,-8
    83f4b7f4:	05a1                	addi	a1,a1,8
        ch[t5-1]=cc[t9-1]+cc[t11-1];
    83f4b7f6:	fef62e27          	fsw	fa5,-4(a2)
        ch[t6-1]=cc[t9-1]-cc[t11-1];
    83f4b7fa:	ffc6a707          	flw	fa4,-4(a3)
    83f4b7fe:	ffc7a787          	flw	fa5,-4(a5)
    83f4b802:	08e7f7d3          	fsub.s	fa5,fa5,fa4
    83f4b806:	fef5ae27          	fsw	fa5,-4(a1)
        ch[t5]=cc[t9]-cc[t11];
    83f4b80a:	0006a707          	flw	fa4,0(a3)
    83f4b80e:	0007a787          	flw	fa5,0(a5)
    83f4b812:	08e7f7d3          	fsub.s	fa5,fa5,fa4
    83f4b816:	00f62027          	fsw	fa5,0(a2)
        ch[t6]=cc[t9]+cc[t11];
    83f4b81a:	0007a787          	flw	fa5,0(a5)
    83f4b81e:	0006a707          	flw	fa4,0(a3)
    83f4b822:	00e7f7d3          	fadd.s	fa5,fa5,fa4
    83f4b826:	00f5a027          	fsw	fa5,0(a1)
      for(i=2;i<ido;i+=2){
    83f4b82a:	fb061ce3          	bne	a2,a6,83f4b7e2 <dradbg+0x6fa>
    for(k=0;k<l1;k++){
    83f4b82e:	2e05                	addiw	t3,t3,1
    83f4b830:	932a                	add	t1,t1,a0
    83f4b832:	98ba                	add	a7,a7,a4
    83f4b834:	9eca                	add	t4,t4,s2
    83f4b836:	f9c41be3          	bne	s0,t3,83f4b7cc <dradbg+0x6e4>
  for(j=1;j<ipph;j++){
    83f4b83a:	67e2                	ld	a5,24(sp)
    83f4b83c:	2d85                	addiw	s11,s11,1
    83f4b83e:	9be6                	add	s7,s7,s9
    83f4b840:	97da                	add	a5,a5,s6
    83f4b842:	ec3e                	sd	a5,24(sp)
    83f4b844:	7782                	ld	a5,32(sp)
    83f4b846:	9fbe                	add	t6,t6,a5
    83f4b848:	f7bf1ae3          	bne	t5,s11,83f4b7bc <dradbg+0x6d4>
    83f4b84c:	b465                	j	83f4b2f4 <dradbg+0x20c>
    83f4b84e:	77ae                	ld	a5,232(sp)
    83f4b850:	ffd9049b          	addiw	s1,s2,-3
    83f4b854:	0014d49b          	srliw	s1,s1,0x1
    83f4b858:	ffc78f13          	addi	t5,a5,-4
    83f4b85c:	0486                	slli	s1,s1,0x1
  if(nbd>l1)goto L139;
    83f4b85e:	53fd                	li	t2,-1
    83f4b860:	4285                	li	t0,1
    83f4b862:	00878993          	addi	s3,a5,8
      for(i=2;i<ido;i+=2){
    83f4b866:	4f89                	li	t6,2
    for(k=0;k<l1;k++){
    83f4b868:	06805463          	blez	s0,83f4b8d0 <dradbg+0x7e8>
    83f4b86c:	007485b3          	add	a1,s1,t2
    83f4b870:	058a                	slli	a1,a1,0x2
    83f4b872:	95ce                	add	a1,a1,s3
    83f4b874:	8a46                	mv	s4,a7
    83f4b876:	8e9a                	mv	t4,t1
    83f4b878:	4e01                	li	t3,0
      for(i=2;i<ido;i+=2){
    83f4b87a:	8652                	mv	a2,s4
    83f4b87c:	86f6                	mv	a3,t4
    83f4b87e:	87fa                	mv	a5,t5
    83f4b880:	052fd363          	bge	t6,s2,83f4b8c6 <dradbg+0x7de>
        c1[t3-1]=wa[idij-1]*ch[t3-1]-wa[idij]*ch[t3];
    83f4b884:	0087a707          	flw	fa4,8(a5)
    83f4b888:	0086a607          	flw	fa2,8(a3)
    83f4b88c:	0047a787          	flw	fa5,4(a5)
    83f4b890:	0046a687          	flw	fa3,4(a3)
    83f4b894:	10c77753          	fmul.s	fa4,fa4,fa2
      for(i=2;i<ido;i+=2){
    83f4b898:	0621                	addi	a2,a2,8
    83f4b89a:	07a1                	addi	a5,a5,8
    83f4b89c:	06a1                	addi	a3,a3,8
        c1[t3-1]=wa[idij-1]*ch[t3-1]-wa[idij]*ch[t3];
    83f4b89e:	70d7f7c7          	fmsub.s	fa5,fa5,fa3,fa4
    83f4b8a2:	fef62e27          	fsw	fa5,-4(a2)
        c1[t3]=wa[idij-1]*ch[t3]+wa[idij]*ch[t3-1];
    83f4b8a6:	0007a707          	flw	fa4,0(a5)
    83f4b8aa:	ffc6a607          	flw	fa2,-4(a3)
    83f4b8ae:	ffc7a787          	flw	fa5,-4(a5)
    83f4b8b2:	0006a687          	flw	fa3,0(a3)
    83f4b8b6:	10c77753          	fmul.s	fa4,fa4,fa2
    83f4b8ba:	70d7f7c3          	fmadd.s	fa5,fa5,fa3,fa4
    83f4b8be:	00f62027          	fsw	fa5,0(a2)
      for(i=2;i<ido;i+=2){
    83f4b8c2:	fcb791e3          	bne	a5,a1,83f4b884 <dradbg+0x79c>
    for(k=0;k<l1;k++){
    83f4b8c6:	2e05                	addiw	t3,t3,1
    83f4b8c8:	9eba                	add	t4,t4,a4
    83f4b8ca:	9a3a                	add	s4,s4,a4
    83f4b8cc:	fbc417e3          	bne	s0,t3,83f4b87a <dradbg+0x792>
  for(j=1;j<ip;j++){
    83f4b8d0:	0012879b          	addiw	a5,t0,1
    83f4b8d4:	932a                	add	t1,t1,a0
    83f4b8d6:	98aa                	add	a7,a7,a0
    83f4b8d8:	9f3a                	add	t5,t5,a4
    83f4b8da:	93ca                	add	t2,t2,s2
    83f4b8dc:	d8580be3          	beq	a6,t0,83f4b672 <dradbg+0x58a>
    83f4b8e0:	82be                	mv	t0,a5
    83f4b8e2:	b759                	j	83f4b868 <dradbg+0x780>

0000000083f4b8e4 <core_drft_forward>:
  if(na==0)return;

  for(i=0;i<n;i++)c[i]=ch[i];
}

void core_drft_forward(struct drft_lookup *l,float *data){
    83f4b8e4:	7119                	addi	sp,sp,-128
    83f4b8e6:	fc86                	sd	ra,120(sp)
    83f4b8e8:	f8a2                	sd	s0,112(sp)
    83f4b8ea:	f4a6                	sd	s1,104(sp)
    83f4b8ec:	f0ca                	sd	s2,96(sp)
    83f4b8ee:	ecce                	sd	s3,88(sp)
    83f4b8f0:	e8d2                	sd	s4,80(sp)
    83f4b8f2:	e4d6                	sd	s5,72(sp)
    83f4b8f4:	e0da                	sd	s6,64(sp)
    83f4b8f6:	fc5e                	sd	s7,56(sp)
    83f4b8f8:	f862                	sd	s8,48(sp)
    83f4b8fa:	f466                	sd	s9,40(sp)
    83f4b8fc:	f06a                	sd	s10,32(sp)
    83f4b8fe:	ec6e                	sd	s11,24(sp)
  if(l->n==1)return;
    83f4b900:	4100                	lw	s0,0(a0)
    83f4b902:	4785                	li	a5,1
    83f4b904:	0ef40a63          	beq	s0,a5,83f4b9f8 <core_drft_forward+0x114>
  drftf1(l->n,data,l->trigcache,l->trigcache+l->n,l->splitcache);
    83f4b908:	01053c83          	ld	s9,16(a0)
    83f4b90c:	00853b83          	ld	s7,8(a0)
    83f4b910:	00241493          	slli	s1,s0,0x2
  nf=ifac[1];
    83f4b914:	004ca783          	lw	a5,4(s9)
  drftf1(l->n,data,l->trigcache,l->trigcache+l->n,l->splitcache);
    83f4b918:	94de                	add	s1,s1,s7
  for(k1=0;k1<nf;k1++){
    83f4b91a:	0cf05f63          	blez	a5,83f4b9f8 <core_drft_forward+0x114>
    83f4b91e:	00178713          	addi	a4,a5,1
    83f4b922:	070a                	slli	a4,a4,0x2
    83f4b924:	37fd                	addiw	a5,a5,-1
    83f4b926:	ffc70913          	addi	s2,a4,-4
    83f4b92a:	02079693          	slli	a3,a5,0x20
    83f4b92e:	9966                	add	s2,s2,s9
    83f4b930:	01e6d793          	srli	a5,a3,0x1e
    83f4b934:	8c2e                	mv	s8,a1
    83f4b936:	9cba                	add	s9,s9,a4
    83f4b938:	40f90933          	sub	s2,s2,a5
    83f4b93c:	8d22                	mv	s10,s0
    83f4b93e:	8da2                	mv	s11,s0
  na=1;
    83f4b940:	4605                	li	a2,1
    na=1-na;
    83f4b942:	4a05                	li	s4,1
    if(ip!=4)goto L102;
    83f4b944:	4991                	li	s3,4
    if(ip!=2)goto L104;
    83f4b946:	4a89                	li	s5,2
    83f4b948:	a805                	j	83f4b978 <core_drft_forward+0x94>
    83f4b94a:	0d558663          	beq	a1,s5,83f4ba16 <core_drft_forward+0x132>
    if(ido==1)na=1-na;
    83f4b94e:	4805                	li	a6,1
    83f4b950:	01051363          	bne	a0,a6,83f4b956 <core_drft_forward+0x72>
    83f4b954:	8b32                	mv	s6,a2
    dradfg(ido,ip,l1,idl1,ch,ch,ch,c,c,wa+iw-1);
    83f4b956:	e43a                	sd	a4,8(sp)
    idl1=ido*l1;
    83f4b958:	02d786bb          	mulw	a3,a5,a3
    if(na!=0)goto L109;
    83f4b95c:	0e0b0463          	beqz	s6,83f4ba44 <core_drft_forward+0x160>
    dradfg(ido,ip,l1,idl1,ch,ch,ch,c,c,wa+iw-1);
    83f4b960:	866e                	mv	a2,s11
    83f4b962:	e062                	sd	s8,0(sp)
    83f4b964:	88e2                	mv	a7,s8
    83f4b966:	885e                	mv	a6,s7
    83f4b968:	87de                	mv	a5,s7
    83f4b96a:	875e                	mv	a4,s7
    83f4b96c:	e87fe0ef          	jal	ra,83f4a7f2 <dradfg>
    na=0;
    83f4b970:	4601                	li	a2,0
  for(k1=0;k1<nf;k1++){
    83f4b972:	1cf1                	addi	s9,s9,-4
    83f4b974:	052c8d63          	beq	s9,s2,83f4b9ce <core_drft_forward+0xea>
    ido=n/l2;
    83f4b978:	03b4453b          	divw	a0,s0,s11
    ip=ifac[kh+1];
    83f4b97c:	000ca583          	lw	a1,0(s9)
    na=1-na;
    83f4b980:	40ca0b3b          	subw	s6,s4,a2
    iw-=(ip-1)*ido;
    83f4b984:	fff5831b          	addiw	t1,a1,-1
    l1=l2/ip;
    83f4b988:	02bdcdbb          	divw	s11,s11,a1
    ido=n/l2;
    83f4b98c:	86aa                	mv	a3,a0
    iw-=(ip-1)*ido;
    83f4b98e:	02a3033b          	mulw	t1,t1,a0
    l1=l2/ip;
    83f4b992:	87ee                	mv	a5,s11
    iw-=(ip-1)*ido;
    83f4b994:	406d0d3b          	subw	s10,s10,t1
    dradfg(ido,ip,l1,idl1,ch,ch,ch,c,c,wa+iw-1);
    83f4b998:	002d1713          	slli	a4,s10,0x2
    83f4b99c:	1771                	addi	a4,a4,-4
    83f4b99e:	9726                	add	a4,a4,s1
    if(ip!=4)goto L102;
    83f4b9a0:	fb3595e3          	bne	a1,s3,83f4b94a <core_drft_forward+0x66>
    ix2=iw+ido;
    83f4b9a4:	01a507bb          	addw	a5,a0,s10
      dradf4(ido,l1,ch,c,wa+iw-1,wa+ix2-1,wa+ix3-1);
    83f4b9a8:	00f5083b          	addw	a6,a0,a5
    83f4b9ac:	080a                	slli	a6,a6,0x2
    83f4b9ae:	078a                	slli	a5,a5,0x2
    83f4b9b0:	17f1                	addi	a5,a5,-4
    83f4b9b2:	1871                	addi	a6,a6,-4
    83f4b9b4:	97a6                	add	a5,a5,s1
    83f4b9b6:	9826                	add	a6,a6,s1
    if(na!=0)
    83f4b9b8:	060b0863          	beqz	s6,83f4ba28 <core_drft_forward+0x144>
      dradf4(ido,l1,ch,c,wa+iw-1,wa+ix2-1,wa+ix3-1);
    83f4b9bc:	865e                	mv	a2,s7
    83f4b9be:	86e2                	mv	a3,s8
    83f4b9c0:	85ee                	mv	a1,s11
    83f4b9c2:	ce4fe0ef          	jal	ra,83f49ea6 <dradf4>
  for(k1=0;k1<nf;k1++){
    83f4b9c6:	1cf1                	addi	s9,s9,-4
    83f4b9c8:	865a                	mv	a2,s6
    83f4b9ca:	fb2c97e3          	bne	s9,s2,83f4b978 <core_drft_forward+0x94>
  if(na==1)return;
    83f4b9ce:	4785                	li	a5,1
    83f4b9d0:	02f60463          	beq	a2,a5,83f4b9f8 <core_drft_forward+0x114>
  for(i=0;i<n;i++)c[i]=ch[i];
    83f4b9d4:	02805263          	blez	s0,83f4b9f8 <core_drft_forward+0x114>
    83f4b9d8:	347d                	addiw	s0,s0,-1
    83f4b9da:	02041793          	slli	a5,s0,0x20
    83f4b9de:	01e7d413          	srli	s0,a5,0x1e
    83f4b9e2:	004b8793          	addi	a5,s7,4
    83f4b9e6:	943e                	add	s0,s0,a5
    83f4b9e8:	000ba787          	flw	fa5,0(s7)
    83f4b9ec:	0b91                	addi	s7,s7,4
    83f4b9ee:	0c11                	addi	s8,s8,4
    83f4b9f0:	fefc2e27          	fsw	fa5,-4(s8)
    83f4b9f4:	ff741ae3          	bne	s0,s7,83f4b9e8 <core_drft_forward+0x104>
}
    83f4b9f8:	70e6                	ld	ra,120(sp)
    83f4b9fa:	7446                	ld	s0,112(sp)
    83f4b9fc:	74a6                	ld	s1,104(sp)
    83f4b9fe:	7906                	ld	s2,96(sp)
    83f4ba00:	69e6                	ld	s3,88(sp)
    83f4ba02:	6a46                	ld	s4,80(sp)
    83f4ba04:	6aa6                	ld	s5,72(sp)
    83f4ba06:	6b06                	ld	s6,64(sp)
    83f4ba08:	7be2                	ld	s7,56(sp)
    83f4ba0a:	7c42                	ld	s8,48(sp)
    83f4ba0c:	7ca2                	ld	s9,40(sp)
    83f4ba0e:	7d02                	ld	s10,32(sp)
    83f4ba10:	6de2                	ld	s11,24(sp)
    83f4ba12:	6109                	addi	sp,sp,128
    83f4ba14:	8082                	ret
    if(na!=0)goto L103;
    83f4ba16:	020b0063          	beqz	s6,83f4ba36 <core_drft_forward+0x152>
    dradf2(ido,l1,ch,c,wa+iw-1);
    83f4ba1a:	865e                	mv	a2,s7
    83f4ba1c:	86e2                	mv	a3,s8
    83f4ba1e:	85ee                	mv	a1,s11
    83f4ba20:	b12fe0ef          	jal	ra,83f49d32 <dradf2>
    goto L110;
    83f4ba24:	865a                	mv	a2,s6
    83f4ba26:	b7b1                	j	83f4b972 <core_drft_forward+0x8e>
      dradf4(ido,l1,c,ch,wa+iw-1,wa+ix2-1,wa+ix3-1);
    83f4ba28:	8662                	mv	a2,s8
    83f4ba2a:	86de                	mv	a3,s7
    83f4ba2c:	85ee                	mv	a1,s11
    83f4ba2e:	c78fe0ef          	jal	ra,83f49ea6 <dradf4>
    83f4ba32:	4601                	li	a2,0
    83f4ba34:	bf3d                	j	83f4b972 <core_drft_forward+0x8e>
    dradf2(ido,l1,c,ch,wa+iw-1);
    83f4ba36:	8662                	mv	a2,s8
    83f4ba38:	86de                	mv	a3,s7
    83f4ba3a:	85ee                	mv	a1,s11
    83f4ba3c:	af6fe0ef          	jal	ra,83f49d32 <dradf2>
    na=1-na;
    83f4ba40:	4601                	li	a2,0
    goto L110;
    83f4ba42:	bf05                	j	83f4b972 <core_drft_forward+0x8e>
    dradfg(ido,ip,l1,idl1,c,c,c,ch,ch,wa+iw-1);
    83f4ba44:	866e                	mv	a2,s11
    83f4ba46:	e05e                	sd	s7,0(sp)
    83f4ba48:	88de                	mv	a7,s7
    83f4ba4a:	8862                	mv	a6,s8
    83f4ba4c:	87e2                	mv	a5,s8
    83f4ba4e:	8762                	mv	a4,s8
    83f4ba50:	da3fe0ef          	jal	ra,83f4a7f2 <dradfg>
    na=1;
    83f4ba54:	4605                	li	a2,1
    goto L110;
    83f4ba56:	bf31                	j	83f4b972 <core_drft_forward+0x8e>

0000000083f4ba58 <core_drft_backward>:

void core_drft_backward(struct drft_lookup *l,float *data){
    83f4ba58:	7175                	addi	sp,sp,-144
    83f4ba5a:	e506                	sd	ra,136(sp)
    83f4ba5c:	e122                	sd	s0,128(sp)
    83f4ba5e:	fca6                	sd	s1,120(sp)
    83f4ba60:	f8ca                	sd	s2,112(sp)
    83f4ba62:	f4ce                	sd	s3,104(sp)
    83f4ba64:	f0d2                	sd	s4,96(sp)
    83f4ba66:	ecd6                	sd	s5,88(sp)
    83f4ba68:	e8da                	sd	s6,80(sp)
    83f4ba6a:	e4de                	sd	s7,72(sp)
    83f4ba6c:	e0e2                	sd	s8,64(sp)
    83f4ba6e:	fc66                	sd	s9,56(sp)
    83f4ba70:	f86a                	sd	s10,48(sp)
    83f4ba72:	f46e                	sd	s11,40(sp)
  if (l->n==1)return;
    83f4ba74:	4104                	lw	s1,0(a0)
    83f4ba76:	4785                	li	a5,1
    83f4ba78:	10f48063          	beq	s1,a5,83f4bb78 <core_drft_backward+0x120>
  drftb1(l->n,data,l->trigcache,l->trigcache+l->n,l->splitcache);
    83f4ba7c:	01053c83          	ld	s9,16(a0)
    83f4ba80:	00853d03          	ld	s10,8(a0)
    83f4ba84:	00249913          	slli	s2,s1,0x2
  nf=ifac[1];
    83f4ba88:	004ca983          	lw	s3,4(s9)
  drftb1(l->n,data,l->trigcache,l->trigcache+l->n,l->splitcache);
    83f4ba8c:	996a                	add	s2,s2,s10
  for(k1=0;k1<nf;k1++){
    83f4ba8e:	0f305563          	blez	s3,83f4bb78 <core_drft_backward+0x120>
    83f4ba92:	39fd                	addiw	s3,s3,-1
    83f4ba94:	02099793          	slli	a5,s3,0x20
    83f4ba98:	01e7d993          	srli	s3,a5,0x1e
    83f4ba9c:	00cc8793          	addi	a5,s9,12
    83f4baa0:	8dae                	mv	s11,a1
    83f4baa2:	0ca1                	addi	s9,s9,8
    83f4baa4:	99be                	add	s3,s3,a5
  na=0;
    83f4baa6:	4c01                	li	s8,0
  iw=1;
    83f4baa8:	4b05                	li	s6,1
  l1=1;
    83f4baaa:	4b85                	li	s7,1
    if(ip!=4)goto L103;
    83f4baac:	4a11                	li	s4,4
    83f4baae:	a0a1                	j	83f4baf6 <core_drft_backward+0x9e>
    if(ip!=2)goto L106;
    83f4bab0:	4789                	li	a5,2
    83f4bab2:	0ef40263          	beq	s0,a5,83f4bb96 <core_drft_backward+0x13e>
    if(ip!=3)goto L109;
    83f4bab6:	478d                	li	a5,3
    83f4bab8:	0ef40b63          	beq	s0,a5,83f4bbae <core_drft_backward+0x156>
    idl1=ido*l1;
    83f4babc:	02b506bb          	mulw	a3,a0,a1
    if(na!=0)
    83f4bac0:	100c0363          	beqz	s8,83f4bbc6 <core_drft_backward+0x16e>
      dradbg(ido,ip,l1,idl1,ch,ch,ch,c,c,wa+iw-1);
    83f4bac4:	e43a                	sd	a4,8(sp)
    83f4bac6:	e06e                	sd	s11,0(sp)
    83f4bac8:	88ee                	mv	a7,s11
    83f4baca:	886a                	mv	a6,s10
    83f4bacc:	87ea                	mv	a5,s10
    83f4bace:	876a                	mv	a4,s10
      dradbg(ido,ip,l1,idl1,c,c,c,ch,ch,wa+iw-1);
    83f4bad0:	862e                	mv	a2,a1
    83f4bad2:	85a2                	mv	a1,s0
    83f4bad4:	ec2a                	sd	a0,24(sp)
    83f4bad6:	e12ff0ef          	jal	ra,83f4b0e8 <dradbg>
    83f4bada:	6562                	ld	a0,24(sp)
    if(ido==1)na=1-na;
    83f4badc:	4785                	li	a5,1
    83f4bade:	00f51463          	bne	a0,a5,83f4bae6 <core_drft_backward+0x8e>
    83f4bae2:	41878c3b          	subw	s8,a5,s8
    iw+=(ip-1)*ido;
    83f4bae6:	347d                	addiw	s0,s0,-1
    83f4bae8:	0354043b          	mulw	s0,s0,s5
  for(k1=0;k1<nf;k1++){
    83f4baec:	0c91                	addi	s9,s9,4
    iw+=(ip-1)*ido;
    83f4baee:	01640b3b          	addw	s6,s0,s6
  for(k1=0;k1<nf;k1++){
    83f4baf2:	053c8e63          	beq	s9,s3,83f4bb4e <core_drft_backward+0xf6>
    ip=ifac[k1 + 2];
    83f4baf6:	000ca403          	lw	s0,0(s9)
      dradbg(ido,ip,l1,idl1,ch,ch,ch,c,c,wa+iw-1);
    83f4bafa:	002b1713          	slli	a4,s6,0x2
    83f4bafe:	1771                	addi	a4,a4,-4
    l2=ip*l1;
    83f4bb00:	037407bb          	mulw	a5,s0,s7
    83f4bb04:	85de                	mv	a1,s7
      dradbg(ido,ip,l1,idl1,ch,ch,ch,c,c,wa+iw-1);
    83f4bb06:	974a                	add	a4,a4,s2
    ido=n/l2;
    83f4bb08:	02f4c53b          	divw	a0,s1,a5
    l2=ip*l1;
    83f4bb0c:	00078b9b          	sext.w	s7,a5
    ido=n/l2;
    83f4bb10:	8aaa                	mv	s5,a0
    if(ip!=4)goto L103;
    83f4bb12:	f9441fe3          	bne	s0,s4,83f4bab0 <core_drft_backward+0x58>
    ix2=iw+ido;
    83f4bb16:	016506bb          	addw	a3,a0,s6
      dradb4(ido,l1,ch,c,wa+iw-1,wa+ix2-1,wa+ix3-1);
    83f4bb1a:	00d5083b          	addw	a6,a0,a3
      dradb3(ido,l1,ch,c,wa+iw-1,wa+ix2-1);
    83f4bb1e:	00269793          	slli	a5,a3,0x2
      dradb4(ido,l1,ch,c,wa+iw-1,wa+ix2-1,wa+ix3-1);
    83f4bb22:	080a                	slli	a6,a6,0x2
      dradb3(ido,l1,ch,c,wa+iw-1,wa+ix2-1);
    83f4bb24:	17f1                	addi	a5,a5,-4
      dradb4(ido,l1,ch,c,wa+iw-1,wa+ix2-1,wa+ix3-1);
    83f4bb26:	1871                	addi	a6,a6,-4
      dradb3(ido,l1,ch,c,wa+iw-1,wa+ix2-1);
    83f4bb28:	97ca                	add	a5,a5,s2
      dradb4(ido,l1,ch,c,wa+iw-1,wa+ix2-1,wa+ix3-1);
    83f4bb2a:	984a                	add	a6,a6,s2
    if(na!=0)
    83f4bb2c:	060c0c63          	beqz	s8,83f4bba4 <core_drft_backward+0x14c>
      dradb4(ido,l1,ch,c,wa+iw-1,wa+ix2-1,wa+ix3-1);
    83f4bb30:	86ee                	mv	a3,s11
    83f4bb32:	866a                	mv	a2,s10
    83f4bb34:	9bdfe0ef          	jal	ra,83f4a4f0 <dradb4>
    iw+=(ip-1)*ido;
    83f4bb38:	347d                	addiw	s0,s0,-1
    83f4bb3a:	0354043b          	mulw	s0,s0,s5
    na=1-na;
    83f4bb3e:	4785                	li	a5,1
  for(k1=0;k1<nf;k1++){
    83f4bb40:	0c91                	addi	s9,s9,4
    na=1-na;
    83f4bb42:	41878c3b          	subw	s8,a5,s8
    iw+=(ip-1)*ido;
    83f4bb46:	01640b3b          	addw	s6,s0,s6
  for(k1=0;k1<nf;k1++){
    83f4bb4a:	fb3c96e3          	bne	s9,s3,83f4baf6 <core_drft_backward+0x9e>
  if(na==0)return;
    83f4bb4e:	020c0563          	beqz	s8,83f4bb78 <core_drft_backward+0x120>
  for(i=0;i<n;i++)c[i]=ch[i];
    83f4bb52:	02905363          	blez	s1,83f4bb78 <core_drft_backward+0x120>
    83f4bb56:	34fd                	addiw	s1,s1,-1
    83f4bb58:	02049793          	slli	a5,s1,0x20
    83f4bb5c:	01e7d493          	srli	s1,a5,0x1e
    83f4bb60:	004d0793          	addi	a5,s10,4
    83f4bb64:	856a                	mv	a0,s10
    83f4bb66:	94be                	add	s1,s1,a5
    83f4bb68:	00052787          	flw	fa5,0(a0)
    83f4bb6c:	0511                	addi	a0,a0,4
    83f4bb6e:	0d91                	addi	s11,s11,4
    83f4bb70:	fefdae27          	fsw	fa5,-4(s11)
    83f4bb74:	fea49ae3          	bne	s1,a0,83f4bb68 <core_drft_backward+0x110>
}
    83f4bb78:	60aa                	ld	ra,136(sp)
    83f4bb7a:	640a                	ld	s0,128(sp)
    83f4bb7c:	74e6                	ld	s1,120(sp)
    83f4bb7e:	7946                	ld	s2,112(sp)
    83f4bb80:	79a6                	ld	s3,104(sp)
    83f4bb82:	7a06                	ld	s4,96(sp)
    83f4bb84:	6ae6                	ld	s5,88(sp)
    83f4bb86:	6b46                	ld	s6,80(sp)
    83f4bb88:	6ba6                	ld	s7,72(sp)
    83f4bb8a:	6c06                	ld	s8,64(sp)
    83f4bb8c:	7ce2                	ld	s9,56(sp)
    83f4bb8e:	7d42                	ld	s10,48(sp)
    83f4bb90:	7da2                	ld	s11,40(sp)
    83f4bb92:	6149                	addi	sp,sp,144
    83f4bb94:	8082                	ret
    if(na!=0)
    83f4bb96:	020c0f63          	beqz	s8,83f4bbd4 <core_drft_backward+0x17c>
      dradb2(ido,l1,ch,c,wa+iw-1);
    83f4bb9a:	86ee                	mv	a3,s11
    83f4bb9c:	866a                	mv	a2,s10
    83f4bb9e:	e12fe0ef          	jal	ra,83f4a1b0 <dradb2>
    83f4bba2:	bf59                	j	83f4bb38 <core_drft_backward+0xe0>
      dradb4(ido,l1,c,ch,wa+iw-1,wa+ix2-1,wa+ix3-1);
    83f4bba4:	86ea                	mv	a3,s10
    83f4bba6:	866e                	mv	a2,s11
    83f4bba8:	949fe0ef          	jal	ra,83f4a4f0 <dradb4>
    83f4bbac:	b771                	j	83f4bb38 <core_drft_backward+0xe0>
      dradb3(ido,l1,ch,c,wa+iw-1,wa+ix2-1);
    83f4bbae:	016507bb          	addw	a5,a0,s6
    83f4bbb2:	078a                	slli	a5,a5,0x2
    83f4bbb4:	17f1                	addi	a5,a5,-4
    83f4bbb6:	97ca                	add	a5,a5,s2
    if(na!=0)
    83f4bbb8:	020c0363          	beqz	s8,83f4bbde <core_drft_backward+0x186>
      dradb3(ido,l1,ch,c,wa+iw-1,wa+ix2-1);
    83f4bbbc:	86ee                	mv	a3,s11
    83f4bbbe:	866a                	mv	a2,s10
    83f4bbc0:	f64fe0ef          	jal	ra,83f4a324 <dradb3>
    83f4bbc4:	bf95                	j	83f4bb38 <core_drft_backward+0xe0>
      dradbg(ido,ip,l1,idl1,c,c,c,ch,ch,wa+iw-1);
    83f4bbc6:	e43a                	sd	a4,8(sp)
    83f4bbc8:	e06a                	sd	s10,0(sp)
    83f4bbca:	88ea                	mv	a7,s10
    83f4bbcc:	886e                	mv	a6,s11
    83f4bbce:	87ee                	mv	a5,s11
    83f4bbd0:	876e                	mv	a4,s11
    83f4bbd2:	bdfd                	j	83f4bad0 <core_drft_backward+0x78>
      dradb2(ido,l1,c,ch,wa+iw-1);
    83f4bbd4:	86ea                	mv	a3,s10
    83f4bbd6:	866e                	mv	a2,s11
    83f4bbd8:	dd8fe0ef          	jal	ra,83f4a1b0 <dradb2>
    83f4bbdc:	bfb1                	j	83f4bb38 <core_drft_backward+0xe0>
      dradb3(ido,l1,c,ch,wa+iw-1,wa+ix2-1);
    83f4bbde:	86ea                	mv	a3,s10
    83f4bbe0:	866e                	mv	a2,s11
    83f4bbe2:	f42fe0ef          	jal	ra,83f4a324 <dradb3>
    83f4bbe6:	bf89                	j	83f4bb38 <core_drft_backward+0xe0>

0000000083f4bbe8 <core_drft_init>:

void core_drft_init(struct drft_lookup *l,int n)
{
  l->n=n;
  l->trigcache=(float*)mem_alloc(3*n*sizeof(*l->trigcache));
    83f4bbe8:	0015979b          	slliw	a5,a1,0x1
{
    83f4bbec:	7115                	addi	sp,sp,-224
  l->trigcache=(float*)mem_alloc(3*n*sizeof(*l->trigcache));
    83f4bbee:	9fad                	addw	a5,a5,a1
{
    83f4bbf0:	ed86                	sd	ra,216(sp)
    83f4bbf2:	e9a2                	sd	s0,208(sp)
    83f4bbf4:	e5a6                	sd	s1,200(sp)
   uintptr_t *ptr =  pvPortMalloc(size);
    83f4bbf6:	0027941b          	slliw	s0,a5,0x2
    83f4bbfa:	e1ca                	sd	s2,192(sp)
    83f4bbfc:	fd4e                	sd	s3,184(sp)
    83f4bbfe:	f952                	sd	s4,176(sp)
    83f4bc00:	f556                	sd	s5,168(sp)
    83f4bc02:	f15a                	sd	s6,160(sp)
    83f4bc04:	ed5e                	sd	s7,152(sp)
    83f4bc06:	e962                	sd	s8,144(sp)
    83f4bc08:	e566                	sd	s9,136(sp)
    83f4bc0a:	e16a                	sd	s10,128(sp)
    83f4bc0c:	fcee                	sd	s11,120(sp)
    83f4bc0e:	b4a2                	fsd	fs0,104(sp)
    83f4bc10:	b0a6                	fsd	fs1,96(sp)
    83f4bc12:	acca                	fsd	fs2,88(sp)
    83f4bc14:	a8ce                	fsd	fs3,80(sp)
    83f4bc16:	a4d2                	fsd	fs4,72(sp)
    83f4bc18:	84aa                	mv	s1,a0
  l->n=n;
    83f4bc1a:	c10c                	sw	a1,0(a0)
    83f4bc1c:	8522                	mv	a0,s0
{
    83f4bc1e:	892e                	mv	s2,a1
    83f4bc20:	f82e                	sd	a1,48(sp)
    83f4bc22:	163020ef          	jal	ra,83f4e584 <pvPortMalloc>
   memset(ptr, 0, size);
    83f4bc26:	8622                	mv	a2,s0
    83f4bc28:	4581                	li	a1,0
   uintptr_t *ptr =  pvPortMalloc(size);
    83f4bc2a:	842a                	mv	s0,a0
   memset(ptr, 0, size);
    83f4bc2c:	350000ef          	jal	ra,83f4bf7c <memset>
   uintptr_t *ptr =  pvPortMalloc(size);
    83f4bc30:	08000513          	li	a0,128
  l->trigcache=(float*)mem_alloc(3*n*sizeof(*l->trigcache));
    83f4bc34:	e480                	sd	s0,8(s1)
    83f4bc36:	14f020ef          	jal	ra,83f4e584 <pvPortMalloc>
   memset(ptr, 0, size);
    83f4bc3a:	08000613          	li	a2,128
    83f4bc3e:	4581                	li	a1,0
   uintptr_t *ptr =  pvPortMalloc(size);
    83f4bc40:	842a                	mv	s0,a0
   memset(ptr, 0, size);
    83f4bc42:	33a000ef          	jal	ra,83f4bf7c <memset>
  if (n == 1) return;
    83f4bc46:	4785                	li	a5,1
  l->splitcache=(int*)mem_alloc(32*sizeof(*l->splitcache));
    83f4bc48:	e880                	sd	s0,16(s1)
  if (n == 1) return;
    83f4bc4a:	16f90a63          	beq	s2,a5,83f4bdbe <core_drft_init+0x1d6>
  fdrffti(n, l->trigcache, l->splitcache);
    83f4bc4e:	6484                	ld	s1,8(s1)
  int nf=0;
    83f4bc50:	00006297          	auipc	t0,0x6
    83f4bc54:	34828293          	addi	t0,t0,840 # 83f51f98 <ntryh.1>
  fdrffti(n, l->trigcache, l->splitcache);
    83f4bc58:	8a4a                	mv	s4,s2
  int nf=0;
    83f4bc5a:	4581                	li	a1,0
  int ntry=0,i,j=-1;
    83f4bc5c:	5ffd                	li	t6,-1
    83f4bc5e:	4501                	li	a0,0
  if (j < 4)
    83f4bc60:	438d                	li	t2,3
  if(ntry!=2)goto L107;
    83f4bc62:	4e89                	li	t4,2
  if(nf==1)goto L107;
    83f4bc64:	4e05                	li	t3,1
  j++;
    83f4bc66:	2f85                	addiw	t6,t6,1
  if (j < 4)
    83f4bc68:	19f3c363          	blt	t2,t6,83f4bdee <core_drft_init+0x206>
    ntry=ntryh[j];
    83f4bc6c:	0002a503          	lw	a0,0(t0)
    83f4bc70:	00259813          	slli	a6,a1,0x2
    83f4bc74:	832e                	mv	t1,a1
    83f4bc76:	9822                	add	a6,a6,s0
  nq=nl/ntry;
    83f4bc78:	02aa673b          	remw	a4,s4,a0
    83f4bc7c:	87d2                	mv	a5,s4
    83f4bc7e:	8f2e                	mv	t5,a1
  nf++;
    83f4bc80:	2585                	addiw	a1,a1,1
  nq=nl/ntry;
    83f4bc82:	02aa4a3b          	divw	s4,s4,a0
  if (nr!=0) goto L101;
    83f4bc86:	16071063          	bnez	a4,83f4bde6 <core_drft_init+0x1fe>
  ifac[nf+1]=ntry;
    83f4bc8a:	00a82423          	sw	a0,8(a6)
  if(ntry!=2)goto L107;
    83f4bc8e:	03d51463          	bne	a0,t4,83f4bcb6 <core_drft_init+0xce>
  if(nf==1)goto L107;
    83f4bc92:	03c58263          	beq	a1,t3,83f4bcb6 <core_drft_init+0xce>
    83f4bc96:	00259793          	slli	a5,a1,0x2
    83f4bc9a:	97a2                	add	a5,a5,s0
    83f4bc9c:	4701                	li	a4,0
    83f4bc9e:	0003089b          	sext.w	a7,t1
    ifac[ib+1]=ifac[ib];
    83f4bca2:	4390                	lw	a2,0(a5)
  for (i=1;i<nf;i++){
    83f4bca4:	0705                	addi	a4,a4,1
    83f4bca6:	0007069b          	sext.w	a3,a4
    ifac[ib+1]=ifac[ib];
    83f4bcaa:	c3d0                	sw	a2,4(a5)
  for (i=1;i<nf;i++){
    83f4bcac:	17f1                	addi	a5,a5,-4
    83f4bcae:	ff16cae3          	blt	a3,a7,83f4bca2 <core_drft_init+0xba>
  ifac[2] = 2;
    83f4bcb2:	01d42423          	sw	t4,8(s0)
  if(nl!=1)goto L104;
    83f4bcb6:	0305                	addi	t1,t1,1
    83f4bcb8:	0811                	addi	a6,a6,4
    83f4bcba:	fbca1fe3          	bne	s4,t3,83f4bc78 <core_drft_init+0x90>
  ifac[0]=n;
    83f4bcbe:	77c2                	ld	a5,48(sp)
  ifac[1]=nf;
    83f4bcc0:	c04c                	sw	a1,4(s0)
  ifac[0]=n;
    83f4bcc2:	c01c                	sw	a5,0(s0)
  if(nfm1==0)return;
    83f4bcc4:	0e0f0d63          	beqz	t5,83f4bdbe <core_drft_init+0x1d6>
  argh=tpi/n;
    83f4bcc8:	d007f7d3          	fcvt.s.w	fa5,a5
    83f4bccc:	00006717          	auipc	a4,0x6
    83f4bcd0:	79872a07          	flw	fs4,1944(a4) # 83f52464 <__func__.1+0x26c>
  drfti1(n, wsave+n, ifac);
    83f4bcd4:	00279713          	slli	a4,a5,0x2
  argh=tpi/n;
    83f4bcd8:	18fa7a53          	fdiv.s	fs4,fs4,fa5
    83f4bcdc:	ffff079b          	addiw	a5,t5,-1
  drfti1(n, wsave+n, ifac);
    83f4bce0:	00e48d33          	add	s10,s1,a4
    83f4bce4:	02079713          	slli	a4,a5,0x20
    83f4bce8:	01e75793          	srli	a5,a4,0x1e
    83f4bcec:	00c40713          	addi	a4,s0,12
    83f4bcf0:	97ba                	add	a5,a5,a4
    83f4bcf2:	00840693          	addi	a3,s0,8
    83f4bcf6:	fc3e                	sd	a5,56(sp)
    83f4bcf8:	008d0793          	addi	a5,s10,8
    83f4bcfc:	e43e                	sd	a5,8(sp)
    83f4bcfe:	e836                	sd	a3,16(sp)
  is=0;
    83f4bd00:	ec02                	sd	zero,24(sp)
      for (ii=2;ii<ido;ii+=2){
    83f4bd02:	4c89                	li	s9,2
    83f4bd04:	00006797          	auipc	a5,0x6
    83f4bd08:	54c7a987          	flw	fs3,1356(a5) # 83f52250 <__func__.1+0x58>
    ip=ifac[k1+2];
    83f4bd0c:	67c2                	ld	a5,16(sp)
    83f4bd0e:	8c52                	mv	s8,s4
    ido=n/l2;
    83f4bd10:	7742                	ld	a4,48(sp)
    ip=ifac[k1+2];
    83f4bd12:	439c                	lw	a5,0(a5)
    l2=l1*ip;
    83f4bd14:	03478a3b          	mulw	s4,a5,s4
    ipm=ip-1;
    83f4bd18:	fff78b9b          	addiw	s7,a5,-1
    ido=n/l2;
    83f4bd1c:	03474abb          	divw	s5,a4,s4
    83f4bd20:	d256                	sw	s5,36(sp)
    for (j=0;j<ipm;j++){
    83f4bd22:	09705863          	blez	s7,83f4bdb2 <core_drft_init+0x1ca>
    83f4bd26:	ffda8b1b          	addiw	s6,s5,-3
    83f4bd2a:	6962                	ld	s2,24(sp)
    83f4bd2c:	001b5b1b          	srliw	s6,s6,0x1
    83f4bd30:	2781                	sext.w	a5,a5
    83f4bd32:	f43e                	sd	a5,40(sp)
    83f4bd34:	0b06                	slli	s6,s6,0x1
    83f4bd36:	4981                	li	s3,0
    ld=0;
    83f4bd38:	4481                	li	s1,0
      ld+=l1;
    83f4bd3a:	018484bb          	addw	s1,s1,s8
      argld=(float)ld*argh;
    83f4bd3e:	d004f953          	fcvt.s.w	fs2,s1
    83f4bd42:	11497953          	fmul.s	fs2,fs2,fs4
      for (ii=2;ii<ido;ii+=2){
    83f4bd46:	055cd863          	bge	s9,s5,83f4bd96 <core_drft_init+0x1ae>
    83f4bd4a:	00291793          	slli	a5,s2,0x2
    83f4bd4e:	01a78db3          	add	s11,a5,s10
    83f4bd52:	67a2                	ld	a5,8(sp)
    83f4bd54:	01690433          	add	s0,s2,s6
      fi=0.f;
    83f4bd58:	f00004d3          	fmv.w.x	fs1,zero
    83f4bd5c:	040a                	slli	s0,s0,0x2
    83f4bd5e:	943e                	add	s0,s0,a5
	fi+=1.f;
    83f4bd60:	0134f4d3          	fadd.s	fs1,fs1,fs3
      for (ii=2;ii<ido;ii+=2){
    83f4bd64:	0da1                	addi	s11,s11,8
	arg=fi*argld;
    83f4bd66:	10997453          	fmul.s	fs0,fs2,fs1
	wa[i++]=(float)cos(arg);
    83f4bd6a:	42040453          	fcvt.d.s	fs0,fs0
    83f4bd6e:	22840553          	fmv.d	fa0,fs0
    83f4bd72:	b61f40ef          	jal	ra,83f408d2 <cos>
    83f4bd76:	22a507d3          	fmv.d	fa5,fa0
	wa[i++]=(float)sin(arg);
    83f4bd7a:	22840553          	fmv.d	fa0,fs0
	wa[i++]=(float)cos(arg);
    83f4bd7e:	4017f7d3          	fcvt.s.d	fa5,fa5
    83f4bd82:	fefdac27          	fsw	fa5,-8(s11)
	wa[i++]=(float)sin(arg);
    83f4bd86:	de1f40ef          	jal	ra,83f40b66 <sin>
    83f4bd8a:	40157553          	fcvt.s.d	fa0,fa0
    83f4bd8e:	feadae27          	fsw	fa0,-4(s11)
      for (ii=2;ii<ido;ii+=2){
    83f4bd92:	fdb417e3          	bne	s0,s11,83f4bd60 <core_drft_init+0x178>
    for (j=0;j<ipm;j++){
    83f4bd96:	2985                	addiw	s3,s3,1
    83f4bd98:	9956                	add	s2,s2,s5
    83f4bd9a:	fb3b90e3          	bne	s7,s3,83f4bd3a <core_drft_init+0x152>
      is+=ido;
    83f4bd9e:	77a2                	ld	a5,40(sp)
    83f4bda0:	66e2                	ld	a3,24(sp)
    83f4bda2:	ffe7871b          	addiw	a4,a5,-2
    83f4bda6:	5792                	lw	a5,36(sp)
    83f4bda8:	02f7073b          	mulw	a4,a4,a5
    83f4bdac:	9fb5                	addw	a5,a5,a3
    83f4bdae:	9fb9                	addw	a5,a5,a4
    83f4bdb0:	ec3e                	sd	a5,24(sp)
  for (k1=0;k1<nfm1;k1++){
    83f4bdb2:	67c2                	ld	a5,16(sp)
    83f4bdb4:	7762                	ld	a4,56(sp)
    83f4bdb6:	0791                	addi	a5,a5,4
    83f4bdb8:	e83e                	sd	a5,16(sp)
    83f4bdba:	f4e799e3          	bne	a5,a4,83f4bd0c <core_drft_init+0x124>
}
    83f4bdbe:	60ee                	ld	ra,216(sp)
    83f4bdc0:	644e                	ld	s0,208(sp)
    83f4bdc2:	64ae                	ld	s1,200(sp)
    83f4bdc4:	690e                	ld	s2,192(sp)
    83f4bdc6:	79ea                	ld	s3,184(sp)
    83f4bdc8:	7a4a                	ld	s4,176(sp)
    83f4bdca:	7aaa                	ld	s5,168(sp)
    83f4bdcc:	7b0a                	ld	s6,160(sp)
    83f4bdce:	6bea                	ld	s7,152(sp)
    83f4bdd0:	6c4a                	ld	s8,144(sp)
    83f4bdd2:	6caa                	ld	s9,136(sp)
    83f4bdd4:	6d0a                	ld	s10,128(sp)
    83f4bdd6:	7de6                	ld	s11,120(sp)
    83f4bdd8:	3426                	fld	fs0,104(sp)
    83f4bdda:	3486                	fld	fs1,96(sp)
    83f4bddc:	2966                	fld	fs2,88(sp)
    83f4bdde:	29c6                	fld	fs3,80(sp)
    83f4bde0:	2a26                	fld	fs4,72(sp)
    83f4bde2:	612d                	addi	sp,sp,224
    83f4bde4:	8082                	ret
    83f4bde6:	0291                	addi	t0,t0,4
  if (nr!=0) goto L101;
    83f4bde8:	85fa                	mv	a1,t5
    83f4bdea:	8a3e                	mv	s4,a5
    83f4bdec:	bdad                	j	83f4bc66 <core_drft_init+0x7e>
    ntry+=2;
    83f4bdee:	2509                	addiw	a0,a0,2
    83f4bdf0:	b541                	j	83f4bc70 <core_drft_init+0x88>

0000000083f4bdf2 <core_drft_clear>:

void core_drft_clear(struct drft_lookup *l)
{
  if(l)
    83f4bdf2:	c505                	beqz	a0,83f4be1a <core_drft_clear+0x28>
{
    83f4bdf4:	1141                	addi	sp,sp,-16
    83f4bdf6:	e022                	sd	s0,0(sp)
    83f4bdf8:	e406                	sd	ra,8(sp)
    83f4bdfa:	842a                	mv	s0,a0
  {
    if(l->trigcache)
    83f4bdfc:	6508                	ld	a0,8(a0)
    83f4bdfe:	c119                	beqz	a0,83f4be04 <core_drft_clear+0x12>
   vPortFree(ptr);
    83f4be00:	0eb020ef          	jal	ra,83f4e6ea <vPortFree>
      mem_free(l->trigcache);
    if(l->splitcache)
    83f4be04:	6808                	ld	a0,16(s0)
    83f4be06:	c511                	beqz	a0,83f4be12 <core_drft_clear+0x20>
      mem_free(l->splitcache);
  }
}
    83f4be08:	6402                	ld	s0,0(sp)
    83f4be0a:	60a2                	ld	ra,8(sp)
    83f4be0c:	0141                	addi	sp,sp,16
    83f4be0e:	0dd0206f          	j	83f4e6ea <vPortFree>
    83f4be12:	60a2                	ld	ra,8(sp)
    83f4be14:	6402                	ld	s0,0(sp)
    83f4be16:	0141                	addi	sp,sp,16
    83f4be18:	8082                	ret
    83f4be1a:	8082                	ret

0000000083f4be1c <b_log>:
 }
#endif

/* Function Definitions */
void b_log(float x[321])
{
    83f4be1c:	1101                	addi	sp,sp,-32
    83f4be1e:	e822                	sd	s0,16(sp)
    83f4be20:	e426                	sd	s1,8(sp)
    83f4be22:	ec06                	sd	ra,24(sp)
    83f4be24:	842a                	mv	s0,a0
    83f4be26:	50450493          	addi	s1,a0,1284
  int k;
  for (k = 0; k < 321; k++) {
#ifdef FAST_MATH_CALC
    x[k] = (float)fast_log(x[k]);
#else
    x[k] = (float)log(x[k]);
    83f4be2a:	00042507          	flw	fa0,0(s0)
  for (k = 0; k < 321; k++) {
    83f4be2e:	0411                	addi	s0,s0,4
    x[k] = (float)log(x[k]);
    83f4be30:	42050553          	fcvt.d.s	fa0,fa0
    83f4be34:	e27f40ef          	jal	ra,83f40c5a <log>
    83f4be38:	40157553          	fcvt.s.d	fa0,fa0
    83f4be3c:	fea42e27          	fsw	fa0,-4(s0)
  for (k = 0; k < 321; k++) {
    83f4be40:	fe9415e3          	bne	s0,s1,83f4be2a <b_log+0xe>
#endif 
  }
}
    83f4be44:	60e2                	ld	ra,24(sp)
    83f4be46:	6442                	ld	s0,16(sp)
    83f4be48:	64a2                	ld	s1,8(sp)
    83f4be4a:	6105                	addi	sp,sp,32
    83f4be4c:	8082                	ret

0000000083f4be4e <rt_hypotf>:

  return y;
}

float rt_hypotf(float u0, float u1)
{
    83f4be4e:	1101                	addi	sp,sp,-32
    83f4be50:	a422                	fsd	fs0,8(sp)
    83f4be52:	20a50453          	fmv.s	fs0,fa0
  float b;
  
  #if 1
  a = u0;
  b = u1;
  y =  (float)sqrt(a * a + b * b);
    83f4be56:	10b5f553          	fmul.s	fa0,fa1,fa1
{
    83f4be5a:	a026                	fsd	fs1,0(sp)
    83f4be5c:	ec06                	sd	ra,24(sp)
    83f4be5e:	20b584d3          	fmv.s	fs1,fa1
  y =  (float)sqrt(a * a + b * b);
    83f4be62:	50847543          	fmadd.s	fa0,fs0,fs0,fa0
    83f4be66:	42050553          	fcvt.d.s	fa0,fa0
    83f4be6a:	f89f40ef          	jal	ra,83f40df2 <sqrt>
    83f4be6e:	40157553          	fcvt.s.d	fa0,fa0
  if (y == 0.0F)    /* can avoid y to be zero if as denominator */
    83f4be72:	f00007d3          	fmv.w.x	fa5,zero
    83f4be76:	a0f527d3          	feq.s	a5,fa0,fa5
    83f4be7a:	e791                	bnez	a5,83f4be86 <rt_hypotf+0x38>
    y = a * 1.41421354F;
  }
  #endif

  return y;
}
    83f4be7c:	60e2                	ld	ra,24(sp)
    83f4be7e:	2422                	fld	fs0,8(sp)
    83f4be80:	2482                	fld	fs1,0(sp)
    83f4be82:	6105                	addi	sp,sp,32
    83f4be84:	8082                	ret
      a = (float)fabs(u0);
    83f4be86:	42040553          	fcvt.d.s	fa0,fs0
    83f4be8a:	abff40ef          	jal	ra,83f40948 <fabs>
    83f4be8e:	22a50453          	fmv.d	fs0,fa0
      b = (float)fabs(u1);
    83f4be92:	42048553          	fcvt.d.s	fa0,fs1
      a = (float)fabs(u0);
    83f4be96:	40147453          	fcvt.s.d	fs0,fs0
      b = (float)fabs(u1);
    83f4be9a:	aaff40ef          	jal	ra,83f40948 <fabs>
    83f4be9e:	401574d3          	fcvt.s.d	fs1,fa0
      if (a < b) {
    83f4bea2:	a09417d3          	flt.s	a5,fs0,fs1
    83f4bea6:	e3a1                	bnez	a5,83f4bee6 <rt_hypotf+0x98>
      } else if (a > b) {
    83f4bea8:	a08497d3          	flt.s	a5,fs1,fs0
    83f4beac:	ef81                	bnez	a5,83f4bec4 <rt_hypotf+0x76>
}
    83f4beae:	60e2                	ld	ra,24(sp)
          y = a * 1.41421354F;
    83f4beb0:	00006797          	auipc	a5,0x6
    83f4beb4:	5ac7a507          	flw	fa0,1452(a5) # 83f5245c <__func__.1+0x264>
    83f4beb8:	10a47553          	fmul.s	fa0,fs0,fa0
}
    83f4bebc:	2482                	fld	fs1,0(sp)
    83f4bebe:	2422                	fld	fs0,8(sp)
    83f4bec0:	6105                	addi	sp,sp,32
    83f4bec2:	8082                	ret
          b /= a;
    83f4bec4:	1884f553          	fdiv.s	fa0,fs1,fs0
          y = a * (float)sqrt(b * b + 1.0F);
    83f4bec8:	00006797          	auipc	a5,0x6
    83f4becc:	3887a487          	flw	fs1,904(a5) # 83f52250 <__func__.1+0x58>
    83f4bed0:	48a57543          	fmadd.s	fa0,fa0,fa0,fs1
    83f4bed4:	42050553          	fcvt.d.s	fa0,fa0
    83f4bed8:	f1bf40ef          	jal	ra,83f40df2 <sqrt>
    83f4bedc:	40157553          	fcvt.s.d	fa0,fa0
    83f4bee0:	10857553          	fmul.s	fa0,fa0,fs0
    83f4bee4:	bf61                	j	83f4be7c <rt_hypotf+0x2e>
          a /= b;
    83f4bee6:	18947553          	fdiv.s	fa0,fs0,fs1
          y = b * (float)sqrt(a * a + 1.0F);
    83f4beea:	00006797          	auipc	a5,0x6
    83f4beee:	3667a407          	flw	fs0,870(a5) # 83f52250 <__func__.1+0x58>
    83f4bef2:	40a57543          	fmadd.s	fa0,fa0,fa0,fs0
    83f4bef6:	42050553          	fcvt.d.s	fa0,fa0
    83f4befa:	ef9f40ef          	jal	ra,83f40df2 <sqrt>
}
    83f4befe:	60e2                	ld	ra,24(sp)
          y = b * (float)sqrt(a * a + 1.0F);
    83f4bf00:	40157553          	fcvt.s.d	fa0,fa0
}
    83f4bf04:	2422                	fld	fs0,8(sp)
          y = b * (float)sqrt(a * a + 1.0F);
    83f4bf06:	10957553          	fmul.s	fa0,fa0,fs1
}
    83f4bf0a:	2482                	fld	fs1,0(sp)
    83f4bf0c:	6105                	addi	sp,sp,32
    83f4bf0e:	8082                	ret

0000000083f4bf10 <inv_dcache_range>:
    83f4bf10:	03f58793          	addi	a5,a1,63
    83f4bf14:	97aa                	add	a5,a5,a0
    83f4bf16:	fc07f793          	andi	a5,a5,-64
    83f4bf1a:	fc057513          	andi	a0,a0,-64
    83f4bf1e:	00f57863          	bgeu	a0,a5,83f4bf2e <inv_dcache_range+0x1e>
    83f4bf22:	02a5000b          	dcache.ipa	a0
    83f4bf26:	04050513          	addi	a0,a0,64
    83f4bf2a:	fef56ce3          	bltu	a0,a5,83f4bf22 <inv_dcache_range+0x12>
    83f4bf2e:	0190000b          	sync.s
    83f4bf32:	8082                	ret

0000000083f4bf34 <clean_dcache_range>:
    83f4bf34:	03f58793          	addi	a5,a1,63
    83f4bf38:	97aa                	add	a5,a5,a0
    83f4bf3a:	fc07f793          	andi	a5,a5,-64
    83f4bf3e:	fc057513          	andi	a0,a0,-64
    83f4bf42:	00f57863          	bgeu	a0,a5,83f4bf52 <clean_dcache_range+0x1e>
    83f4bf46:	0295000b          	dcache.cpa	a0
    83f4bf4a:	04050513          	addi	a0,a0,64
    83f4bf4e:	fef56ce3          	bltu	a0,a5,83f4bf46 <clean_dcache_range+0x12>
    83f4bf52:	0190000b          	sync.s
    83f4bf56:	8082                	ret

0000000083f4bf58 <flush_dcache_range>:
    83f4bf58:	03f58793          	addi	a5,a1,63
    83f4bf5c:	97aa                	add	a5,a5,a0
    83f4bf5e:	fc07f793          	andi	a5,a5,-64
    83f4bf62:	fc057513          	andi	a0,a0,-64
    83f4bf66:	00f57863          	bgeu	a0,a5,83f4bf76 <flush_dcache_range+0x1e>
    83f4bf6a:	02b5000b          	dcache.cipa	a0
    83f4bf6e:	04050513          	addi	a0,a0,64
    83f4bf72:	fef56ce3          	bltu	a0,a5,83f4bf6a <flush_dcache_range+0x12>
    83f4bf76:	0190000b          	sync.s
    83f4bf7a:	8082                	ret

0000000083f4bf7c <memset>:
    83f4bf7c:	0ff5f593          	andi	a1,a1,255
    83f4bf80:	00c507b3          	add	a5,a0,a2
    83f4bf84:	c611                	beqz	a2,83f4bf90 <memset+0x14>
    83f4bf86:	0505                	addi	a0,a0,1
    83f4bf88:	feb50fa3          	sb	a1,-1(a0)
    83f4bf8c:	fef51de3          	bne	a0,a5,83f4bf86 <memset+0xa>
    83f4bf90:	4501                	li	a0,0
    83f4bf92:	8082                	ret

0000000083f4bf94 <printf>:
    83f4bf94:	7111                	addi	sp,sp,-256
    83f4bf96:	f526                	sd	s1,168(sp)
    83f4bf98:	e5ae                	sd	a1,200(sp)
    83f4bf9a:	84aa                	mv	s1,a0
    83f4bf9c:	4581                	li	a1,0
    83f4bf9e:	0808                	addi	a0,sp,16
    83f4bfa0:	fd06                	sd	ra,184(sp)
    83f4bfa2:	f922                	sd	s0,176(sp)
    83f4bfa4:	f9c2                	sd	a6,240(sp)
    83f4bfa6:	fdc6                	sd	a7,248(sp)
    83f4bfa8:	f5be                	sd	a5,232(sp)
    83f4bfaa:	e9b2                	sd	a2,208(sp)
    83f4bfac:	edb6                	sd	a3,216(sp)
    83f4bfae:	f1ba                	sd	a4,224(sp)
    83f4bfb0:	2e0000ef          	jal	ra,83f4c290 <gettimeofday>
    83f4bfb4:	6762                	ld	a4,24(sp)
    83f4bfb6:	66c2                	ld	a3,16(sp)
    83f4bfb8:	00006617          	auipc	a2,0x6
    83f4bfbc:	ff060613          	addi	a2,a2,-16 # 83f51fa8 <ntryh.1+0x10>
    83f4bfc0:	07f00593          	li	a1,127
    83f4bfc4:	1008                	addi	a0,sp,32
    83f4bfc6:	2aa000ef          	jal	ra,83f4c270 <snprintf>
    83f4bfca:	101c                	addi	a5,sp,32
    83f4bfcc:	07f00593          	li	a1,127
    83f4bfd0:	01b4                	addi	a3,sp,200
    83f4bfd2:	842a                	mv	s0,a0
    83f4bfd4:	8626                	mv	a2,s1
    83f4bfd6:	8d89                	sub	a1,a1,a0
    83f4bfd8:	953e                	add	a0,a0,a5
    83f4bfda:	e436                	sd	a3,8(sp)
    83f4bfdc:	01e000ef          	jal	ra,83f4bffa <vsnprintf>
    83f4bfe0:	1008                	addi	a0,sp,32
    83f4bfe2:	08010fa3          	sb	zero,159(sp)
    83f4bfe6:	776000ef          	jal	ra,83f4c75c <uart_put_buff>
    83f4bfea:	70ea                	ld	ra,184(sp)
    83f4bfec:	9d21                	addw	a0,a0,s0
    83f4bfee:	744a                	ld	s0,176(sp)
    83f4bff0:	74aa                	ld	s1,168(sp)
    83f4bff2:	6111                	addi	sp,sp,256
    83f4bff4:	8082                	ret

0000000083f4bff6 <usleep>:
    83f4bff6:	0f80406f          	j	83f500ee <arch_usleep>

0000000083f4bffa <vsnprintf>:
    83f4bffa:	00064703          	lbu	a4,0(a2)
    83f4bffe:	832a                	mv	t1,a0
    83f4c000:	24070a63          	beqz	a4,83f4c254 <vsnprintf+0x25a>
    83f4c004:	7139                	addi	sp,sp,-64
    83f4c006:	fc22                	sd	s0,56(sp)
    83f4c008:	f826                	sd	s1,48(sp)
    83f4c00a:	f44a                	sd	s2,40(sp)
    83f4c00c:	f04e                	sd	s3,32(sp)
    83f4c00e:	ec52                	sd	s4,24(sp)
    83f4c010:	e856                	sd	s5,16(sp)
    83f4c012:	e45a                	sd	s6,8(sp)
    83f4c014:	4501                	li	a0,0
    83f4c016:	4801                	li	a6,0
    83f4c018:	4981                	li	s3,0
    83f4c01a:	4881                	li	a7,0
    83f4c01c:	02500393          	li	t2,37
    83f4c020:	42d5                	li	t0,21
    83f4c022:	00006f17          	auipc	t5,0x6
    83f4c026:	f92f0f13          	addi	t5,t5,-110 # 83f51fb4 <ntryh.1+0x1c>
    83f4c02a:	4e29                	li	t3,10
    83f4c02c:	03000413          	li	s0,48
    83f4c030:	02d00913          	li	s2,45
    83f4c034:	4fa5                	li	t6,9
    83f4c036:	5ef1                	li	t4,-4
    83f4c038:	07800493          	li	s1,120
    83f4c03c:	16088363          	beqz	a7,83f4c1a2 <vsnprintf+0x1a8>
    83f4c040:	f9d7079b          	addiw	a5,a4,-99
    83f4c044:	0ff7f793          	andi	a5,a5,255
    83f4c048:	00f2e763          	bltu	t0,a5,83f4c056 <vsnprintf+0x5c>
    83f4c04c:	078a                	slli	a5,a5,0x2
    83f4c04e:	97fa                	add	a5,a5,t5
    83f4c050:	439c                	lw	a5,0(a5)
    83f4c052:	97fa                	add	a5,a5,t5
    83f4c054:	8782                	jr	a5
    83f4c056:	fd07051b          	addiw	a0,a4,-48
    83f4c05a:	00164703          	lbu	a4,1(a2)
    83f4c05e:	0605                	addi	a2,a2,1
    83f4c060:	ff71                	bnez	a4,83f4c03c <vsnprintf+0x42>
    83f4c062:	0008051b          	sext.w	a0,a6
    83f4c066:	14b86d63          	bltu	a6,a1,83f4c1c0 <vsnprintf+0x1c6>
    83f4c06a:	c589                	beqz	a1,83f4c074 <vsnprintf+0x7a>
    83f4c06c:	00b30833          	add	a6,t1,a1
    83f4c070:	fe080fa3          	sb	zero,-1(a6)
    83f4c074:	7462                	ld	s0,56(sp)
    83f4c076:	74c2                	ld	s1,48(sp)
    83f4c078:	7922                	ld	s2,40(sp)
    83f4c07a:	7982                	ld	s3,32(sp)
    83f4c07c:	6a62                	ld	s4,24(sp)
    83f4c07e:	6ac2                	ld	s5,16(sp)
    83f4c080:	6b22                	ld	s6,8(sp)
    83f4c082:	6121                	addi	sp,sp,64
    83f4c084:	8082                	ret
    83f4c086:	00868793          	addi	a5,a3,8
    83f4c08a:	14099d63          	bnez	s3,83f4c1e4 <vsnprintf+0x1ea>
    83f4c08e:	0006aa83          	lw	s5,0(a3)
    83f4c092:	4b1d                	li	s6,7
    83f4c094:	86be                	mv	a3,a5
    83f4c096:	002b1713          	slli	a4,s6,0x2
    83f4c09a:	87c2                	mv	a5,a6
    83f4c09c:	0785                	addi	a5,a5,1
    83f4c09e:	02b7f063          	bgeu	a5,a1,83f4c0be <vsnprintf+0xc4>
    83f4c0a2:	40ead8b3          	sra	a7,s5,a4
    83f4c0a6:	00f8fa13          	andi	s4,a7,15
    83f4c0aa:	057a0993          	addi	s3,s4,87
    83f4c0ae:	014fc463          	blt	t6,s4,83f4c0b6 <vsnprintf+0xbc>
    83f4c0b2:	030a0993          	addi	s3,s4,48
    83f4c0b6:	00f308b3          	add	a7,t1,a5
    83f4c0ba:	ff388fa3          	sb	s3,-1(a7)
    83f4c0be:	3771                	addiw	a4,a4,-4
    83f4c0c0:	fdd71ee3          	bne	a4,t4,83f4c09c <vsnprintf+0xa2>
    83f4c0c4:	0805                	addi	a6,a6,1
    83f4c0c6:	985a                	add	a6,a6,s6
    83f4c0c8:	4981                	li	s3,0
    83f4c0ca:	4881                	li	a7,0
    83f4c0cc:	b779                	j	83f4c05a <vsnprintf+0x60>
    83f4c0ce:	0006b883          	ld	a7,0(a3)
    83f4c0d2:	06a1                	addi	a3,a3,8
    83f4c0d4:	0008c703          	lbu	a4,0(a7)
    83f4c0d8:	c305                	beqz	a4,83f4c0f8 <vsnprintf+0xfe>
    83f4c0da:	87c2                	mv	a5,a6
    83f4c0dc:	0785                	addi	a5,a5,1
    83f4c0de:	00b7f663          	bgeu	a5,a1,83f4c0ea <vsnprintf+0xf0>
    83f4c0e2:	00f309b3          	add	s3,t1,a5
    83f4c0e6:	fee98fa3          	sb	a4,-1(s3) # ffffffffffffefff <_end+0xffffffff7bfff2bf>
    83f4c0ea:	41078733          	sub	a4,a5,a6
    83f4c0ee:	9746                	add	a4,a4,a7
    83f4c0f0:	00074703          	lbu	a4,0(a4)
    83f4c0f4:	f765                	bnez	a4,83f4c0dc <vsnprintf+0xe2>
    83f4c0f6:	883e                	mv	a6,a5
    83f4c0f8:	4981                	li	s3,0
    83f4c0fa:	4881                	li	a7,0
    83f4c0fc:	bfb9                	j	83f4c05a <vsnprintf+0x60>
    83f4c0fe:	00180793          	addi	a5,a6,1
    83f4c102:	00b7f663          	bgeu	a5,a1,83f4c10e <vsnprintf+0x114>
    83f4c106:	01030733          	add	a4,t1,a6
    83f4c10a:	00870023          	sb	s0,0(a4)
    83f4c10e:	0809                	addi	a6,a6,2
    83f4c110:	00868713          	addi	a4,a3,8
    83f4c114:	00b87563          	bgeu	a6,a1,83f4c11e <vsnprintf+0x124>
    83f4c118:	979a                	add	a5,a5,t1
    83f4c11a:	00978023          	sb	s1,0(a5)
    83f4c11e:	0006ba83          	ld	s5,0(a3)
    83f4c122:	4b3d                	li	s6,15
    83f4c124:	86ba                	mv	a3,a4
    83f4c126:	bf85                	j	83f4c096 <vsnprintf+0x9c>
    83f4c128:	00868893          	addi	a7,a3,8
    83f4c12c:	08098e63          	beqz	s3,83f4c1c8 <vsnprintf+0x1ce>
    83f4c130:	6294                	ld	a3,0(a3)
    83f4c132:	0806ce63          	bltz	a3,83f4c1ce <vsnprintf+0x1d4>
    83f4c136:	03c6c7b3          	div	a5,a3,t3
    83f4c13a:	4705                	li	a4,1
    83f4c13c:	cbdd                	beqz	a5,83f4c1f2 <vsnprintf+0x1f8>
    83f4c13e:	03c7c7b3          	div	a5,a5,t3
    83f4c142:	0705                	addi	a4,a4,1
    83f4c144:	ffed                	bnez	a5,83f4c13e <vsnprintf+0x144>
    83f4c146:	e55d                	bnez	a0,83f4c1f4 <vsnprintf+0x1fa>
    83f4c148:	fff7051b          	addiw	a0,a4,-1
    83f4c14c:	02054863          	bltz	a0,83f4c17c <vsnprintf+0x182>
    83f4c150:	00180a13          	addi	s4,a6,1
    83f4c154:	00aa07b3          	add	a5,s4,a0
    83f4c158:	00b7fb63          	bgeu	a5,a1,83f4c16e <vsnprintf+0x174>
    83f4c15c:	03c6e7b3          	rem	a5,a3,t3
    83f4c160:	00a809b3          	add	s3,a6,a0
    83f4c164:	999a                	add	s3,s3,t1
    83f4c166:	0307879b          	addiw	a5,a5,48
    83f4c16a:	00f98023          	sb	a5,0(s3)
    83f4c16e:	157d                	addi	a0,a0,-1
    83f4c170:	0005079b          	sext.w	a5,a0
    83f4c174:	03c6c6b3          	div	a3,a3,t3
    83f4c178:	fc07dee3          	bgez	a5,83f4c154 <vsnprintf+0x15a>
    83f4c17c:	86c6                	mv	a3,a7
    83f4c17e:	983a                	add	a6,a6,a4
    83f4c180:	4501                	li	a0,0
    83f4c182:	4981                	li	s3,0
    83f4c184:	4881                	li	a7,0
    83f4c186:	bdd1                	j	83f4c05a <vsnprintf+0x60>
    83f4c188:	00180793          	addi	a5,a6,1
    83f4c18c:	f6b7f5e3          	bgeu	a5,a1,83f4c0f6 <vsnprintf+0xfc>
    83f4c190:	4298                	lw	a4,0(a3)
    83f4c192:	981a                	add	a6,a6,t1
    83f4c194:	06a1                	addi	a3,a3,8
    83f4c196:	00e80023          	sb	a4,0(a6)
    83f4c19a:	4981                	li	s3,0
    83f4c19c:	883e                	mv	a6,a5
    83f4c19e:	4881                	li	a7,0
    83f4c1a0:	bd6d                	j	83f4c05a <vsnprintf+0x60>
    83f4c1a2:	00770b63          	beq	a4,t2,83f4c1b8 <vsnprintf+0x1be>
    83f4c1a6:	00180793          	addi	a5,a6,1
    83f4c1aa:	00b7f963          	bgeu	a5,a1,83f4c1bc <vsnprintf+0x1c2>
    83f4c1ae:	981a                	add	a6,a6,t1
    83f4c1b0:	00e80023          	sb	a4,0(a6)
    83f4c1b4:	883e                	mv	a6,a5
    83f4c1b6:	b555                	j	83f4c05a <vsnprintf+0x60>
    83f4c1b8:	4885                	li	a7,1
    83f4c1ba:	b545                	j	83f4c05a <vsnprintf+0x60>
    83f4c1bc:	883e                	mv	a6,a5
    83f4c1be:	bd71                	j	83f4c05a <vsnprintf+0x60>
    83f4c1c0:	981a                	add	a6,a6,t1
    83f4c1c2:	00080023          	sb	zero,0(a6)
    83f4c1c6:	b57d                	j	83f4c074 <vsnprintf+0x7a>
    83f4c1c8:	4294                	lw	a3,0(a3)
    83f4c1ca:	f606d6e3          	bgez	a3,83f4c136 <vsnprintf+0x13c>
    83f4c1ce:	00180793          	addi	a5,a6,1
    83f4c1d2:	40d006b3          	neg	a3,a3
    83f4c1d6:	06b7fd63          	bgeu	a5,a1,83f4c250 <vsnprintf+0x256>
    83f4c1da:	981a                	add	a6,a6,t1
    83f4c1dc:	01280023          	sb	s2,0(a6)
    83f4c1e0:	883e                	mv	a6,a5
    83f4c1e2:	bf91                	j	83f4c136 <vsnprintf+0x13c>
    83f4c1e4:	0006ba83          	ld	s5,0(a3)
    83f4c1e8:	4b3d                	li	s6,15
    83f4c1ea:	86be                	mv	a3,a5
    83f4c1ec:	b56d                	j	83f4c096 <vsnprintf+0x9c>
    83f4c1ee:	89c6                	mv	s3,a7
    83f4c1f0:	b5ad                	j	83f4c05a <vsnprintf+0x60>
    83f4c1f2:	dd39                	beqz	a0,83f4c150 <vsnprintf+0x156>
    83f4c1f4:	fff5079b          	addiw	a5,a0,-1
    83f4c1f8:	0407c663          	bltz	a5,83f4c244 <vsnprintf+0x24a>
    83f4c1fc:	00f809b3          	add	s3,a6,a5
    83f4c200:	999a                	add	s3,s3,t1
    83f4c202:	00180a13          	addi	s4,a6,1
    83f4c206:	40e50733          	sub	a4,a0,a4
    83f4c20a:	a839                	j	83f4c228 <vsnprintf+0x22e>
    83f4c20c:	03c6eab3          	rem	s5,a3,t3
    83f4c210:	03c6c6b3          	div	a3,a3,t3
    83f4c214:	030a8a9b          	addiw	s5,s5,48
    83f4c218:	01598023          	sb	s5,0(s3)
    83f4c21c:	17fd                	addi	a5,a5,-1
    83f4c21e:	00078a9b          	sext.w	s5,a5
    83f4c222:	19fd                	addi	s3,s3,-1
    83f4c224:	020ac063          	bltz	s5,83f4c244 <vsnprintf+0x24a>
    83f4c228:	00fa0ab3          	add	s5,s4,a5
    83f4c22c:	febaf8e3          	bgeu	s5,a1,83f4c21c <vsnprintf+0x222>
    83f4c230:	fce7dee3          	bge	a5,a4,83f4c20c <vsnprintf+0x212>
    83f4c234:	17fd                	addi	a5,a5,-1
    83f4c236:	00898023          	sb	s0,0(s3)
    83f4c23a:	00078a9b          	sext.w	s5,a5
    83f4c23e:	19fd                	addi	s3,s3,-1
    83f4c240:	fe0ad4e3          	bgez	s5,83f4c228 <vsnprintf+0x22e>
    83f4c244:	982a                	add	a6,a6,a0
    83f4c246:	86c6                	mv	a3,a7
    83f4c248:	4501                	li	a0,0
    83f4c24a:	4981                	li	s3,0
    83f4c24c:	4881                	li	a7,0
    83f4c24e:	b531                	j	83f4c05a <vsnprintf+0x60>
    83f4c250:	883e                	mv	a6,a5
    83f4c252:	b5d5                	j	83f4c136 <vsnprintf+0x13c>
    83f4c254:	4801                	li	a6,0
    83f4c256:	4501                	li	a0,0
    83f4c258:	00b87663          	bgeu	a6,a1,83f4c264 <vsnprintf+0x26a>
    83f4c25c:	981a                	add	a6,a6,t1
    83f4c25e:	00080023          	sb	zero,0(a6)
    83f4c262:	8082                	ret
    83f4c264:	c589                	beqz	a1,83f4c26e <vsnprintf+0x274>
    83f4c266:	00b30833          	add	a6,t1,a1
    83f4c26a:	fe080fa3          	sb	zero,-1(a6)
    83f4c26e:	8082                	ret

0000000083f4c270 <snprintf>:
    83f4c270:	715d                	addi	sp,sp,-80
    83f4c272:	02810313          	addi	t1,sp,40
    83f4c276:	f436                	sd	a3,40(sp)
    83f4c278:	869a                	mv	a3,t1
    83f4c27a:	ec06                	sd	ra,24(sp)
    83f4c27c:	f83a                	sd	a4,48(sp)
    83f4c27e:	fc3e                	sd	a5,56(sp)
    83f4c280:	e0c2                	sd	a6,64(sp)
    83f4c282:	e4c6                	sd	a7,72(sp)
    83f4c284:	e41a                	sd	t1,8(sp)
    83f4c286:	d75ff0ef          	jal	ra,83f4bffa <vsnprintf>
    83f4c28a:	60e2                	ld	ra,24(sp)
    83f4c28c:	6161                	addi	sp,sp,80
    83f4c28e:	8082                	ret

0000000083f4c290 <gettimeofday>:
    83f4c290:	86aa                	mv	a3,a0
    83f4c292:	c0102773          	rdtime	a4
    83f4c296:	017d87b7          	lui	a5,0x17d8
    83f4c29a:	84078793          	addi	a5,a5,-1984 # 17d7840 <CVIMMAP_FSBL_UNZIP_SIZE+0x8d7840>
    83f4c29e:	02f757b3          	divu	a5,a4,a5
    83f4c2a2:	4665                	li	a2,25
    83f4c2a4:	00b035b3          	snez	a1,a1
    83f4c2a8:	40b00533          	neg	a0,a1
    83f4c2ac:	02c75733          	divu	a4,a4,a2
    83f4c2b0:	000f4637          	lui	a2,0xf4
    83f4c2b4:	24060613          	addi	a2,a2,576 # f4240 <CVIMMAP_FREERTOS_SIZE+0x34240>
    83f4c2b8:	e29c                	sd	a5,0(a3)
    83f4c2ba:	02c787b3          	mul	a5,a5,a2
    83f4c2be:	40f707b3          	sub	a5,a4,a5
    83f4c2c2:	e69c                	sd	a5,8(a3)
    83f4c2c4:	8082                	ret

0000000083f4c2c6 <plic_ack_irq>:
    83f4c2c6:	702007b7          	lui	a5,0x70200
    83f4c2ca:	43c8                	lw	a0,4(a5)
    83f4c2cc:	2501                	sext.w	a0,a0
    83f4c2ce:	0820000f          	fence	i,r
    83f4c2d2:	8082                	ret

0000000083f4c2d4 <plic_eoi_irq>:
    83f4c2d4:	0140000f          	fence	w,o
    83f4c2d8:	702007b7          	lui	a5,0x70200
    83f4c2dc:	c3c8                	sw	a0,4(a5)
    83f4c2de:	8082                	ret

0000000083f4c2e0 <plic_set_priority_irq>:
    83f4c2e0:	0140000f          	fence	w,o
    83f4c2e4:	1c0007b7          	lui	a5,0x1c000
    83f4c2e8:	9d3d                	addw	a0,a0,a5
    83f4c2ea:	0025151b          	slliw	a0,a0,0x2
    83f4c2ee:	c10c                	sw	a1,0(a0)
    83f4c2f0:	8082                	ret

0000000083f4c2f2 <plic_set_threshold>:
    83f4c2f2:	0140000f          	fence	w,o
    83f4c2f6:	702007b7          	lui	a5,0x70200
    83f4c2fa:	c388                	sw	a0,0(a5)
    83f4c2fc:	8082                	ret

0000000083f4c2fe <plic_unmask_irq>:
    83f4c2fe:	47bd                	li	a5,15
    83f4c300:	0005059b          	sext.w	a1,a0
    83f4c304:	02a7da63          	bge	a5,a0,83f4c338 <plic_unmask_irq+0x3a>
    83f4c308:	1c001637          	lui	a2,0x1c001
    83f4c30c:	0055d79b          	srliw	a5,a1,0x5
    83f4c310:	8006061b          	addiw	a2,a2,-2048
    83f4c314:	9fb1                	addw	a5,a5,a2
    83f4c316:	0027979b          	slliw	a5,a5,0x2
    83f4c31a:	1782                	slli	a5,a5,0x20
    83f4c31c:	9381                	srli	a5,a5,0x20
    83f4c31e:	4398                	lw	a4,0(a5)
    83f4c320:	2701                	sext.w	a4,a4
    83f4c322:	0820000f          	fence	i,r
    83f4c326:	4685                	li	a3,1
    83f4c328:	00b696bb          	sllw	a3,a3,a1
    83f4c32c:	8f55                	or	a4,a4,a3
    83f4c32e:	2701                	sext.w	a4,a4
    83f4c330:	0140000f          	fence	w,o
    83f4c334:	c398                	sw	a4,0(a5)
    83f4c336:	8082                	ret
    83f4c338:	85aa                	mv	a1,a0
    83f4c33a:	00006517          	auipc	a0,0x6
    83f4c33e:	cd650513          	addi	a0,a0,-810 # 83f52010 <ntryh.1+0x78>
    83f4c342:	c53ff06f          	j	83f4bf94 <printf>

0000000083f4c346 <GetCommInfo>:
    83f4c346:	1101                	addi	sp,sp,-32
    83f4c348:	e822                	sd	s0,16(sp)
    83f4c34a:	e426                	sd	s1,8(sp)
    83f4c34c:	01900437          	lui	s0,0x1900
    83f4c350:	00011497          	auipc	s1,0x11
    83f4c354:	13048493          	addi	s1,s1,304 # 83f5d480 <transfer_config>
    83f4c358:	04000613          	li	a2,64
    83f4c35c:	40040593          	addi	a1,s0,1024 # 1900400 <CVIMMAP_FSBL_UNZIP_SIZE+0xa00400>
    83f4c360:	8526                	mv	a0,s1
    83f4c362:	ec06                	sd	ra,24(sp)
    83f4c364:	d9df30ef          	jal	ra,83f40100 <memcpy>
    83f4c368:	04000613          	li	a2,64
    83f4c36c:	4581                	li	a1,0
    83f4c36e:	40040513          	addi	a0,s0,1024
    83f4c372:	c0bff0ef          	jal	ra,83f4bf7c <memset>
    83f4c376:	40d4                	lw	a3,4(s1)
    83f4c378:	cec1                	beqz	a3,83f4c410 <GetCommInfo+0xca>
    83f4c37a:	1682                	slli	a3,a3,0x20
    83f4c37c:	9281                	srli	a3,a3,0x20
    83f4c37e:	96a6                	add	a3,a3,s1
    83f4c380:	87a6                	mv	a5,s1
    83f4c382:	4401                	li	s0,0
    83f4c384:	0007c703          	lbu	a4,0(a5) # 70200000 <CVIMMAP_DRAM_SIZE+0x6c200000>
    83f4c388:	0785                	addi	a5,a5,1
    83f4c38a:	9c39                	addw	s0,s0,a4
    83f4c38c:	1442                	slli	s0,s0,0x30
    83f4c38e:	9041                	srli	s0,s0,0x30
    83f4c390:	fef69ae3          	bne	a3,a5,83f4c384 <GetCommInfo+0x3e>
    83f4c394:	0244d583          	lhu	a1,36(s1)
    83f4c398:	0004061b          	sext.w	a2,s0
    83f4c39c:	04858763          	beq	a1,s0,83f4c3ea <GetCommInfo+0xa4>
    83f4c3a0:	00006517          	auipc	a0,0x6
    83f4c3a4:	c8850513          	addi	a0,a0,-888 # 83f52028 <ntryh.1+0x90>
    83f4c3a8:	bedff0ef          	jal	ra,83f4bf94 <printf>
    83f4c3ac:	00006517          	auipc	a0,0x6
    83f4c3b0:	c9450513          	addi	a0,a0,-876 # 83f52040 <ntryh.1+0xa8>
    83f4c3b4:	be1ff0ef          	jal	ra,83f4bf94 <printf>
    83f4c3b8:	00006797          	auipc	a5,0x6
    83f4c3bc:	0b07b783          	ld	a5,176(a5) # 83f52468 <__func__.1+0x270>
    83f4c3c0:	e09c                	sd	a5,0(s1)
    83f4c3c2:	00006797          	auipc	a5,0x6
    83f4c3c6:	0ae7b783          	ld	a5,174(a5) # 83f52470 <__func__.1+0x278>
    83f4c3ca:	e49c                	sd	a5,8(s1)
    83f4c3cc:	00006797          	auipc	a5,0x6
    83f4c3d0:	0ac7b783          	ld	a5,172(a5) # 83f52478 <__func__.1+0x280>
    83f4c3d4:	e89c                	sd	a5,16(s1)
    83f4c3d6:	008297b7          	lui	a5,0x829
    83f4c3da:	07a2                	slli	a5,a5,0x8
    83f4c3dc:	ec9c                	sd	a5,24(s1)
    83f4c3de:	6785                	lui	a5,0x1
    83f4c3e0:	c0078793          	addi	a5,a5,-1024 # c00 <_EL1_STACK_SIZE+0x400>
    83f4c3e4:	d09c                	sw	a5,32(s1)
    83f4c3e6:	02849223          	sh	s0,36(s1)
    83f4c3ea:	1fe000ef          	jal	ra,83f4c5e8 <dump_uart_init>
    83f4c3ee:	6785                	lui	a5,0x1
    83f4c3f0:	6442                	ld	s0,16(sp)
    83f4c3f2:	80478793          	addi	a5,a5,-2044 # 804 <_EL1_STACK_SIZE+0x4>
    83f4c3f6:	60e2                	ld	ra,24(sp)
    83f4c3f8:	02f49323          	sh	a5,38(s1)
    83f4c3fc:	64a2                	ld	s1,8(sp)
    83f4c3fe:	04000593          	li	a1,64
    83f4c402:	00011517          	auipc	a0,0x11
    83f4c406:	07e50513          	addi	a0,a0,126 # 83f5d480 <transfer_config>
    83f4c40a:	6105                	addi	sp,sp,32
    83f4c40c:	b4dff06f          	j	83f4bf58 <flush_dcache_range>
    83f4c410:	4401                	li	s0,0
    83f4c412:	b749                	j	83f4c394 <GetCommInfo+0x4e>

0000000083f4c414 <post_system_init>:
    83f4c414:	1141                	addi	sp,sp,-16
    83f4c416:	00006517          	auipc	a0,0x6
    83f4c41a:	c4a50513          	addi	a0,a0,-950 # 83f52060 <ntryh.1+0xc8>
    83f4c41e:	e406                	sd	ra,8(sp)
    83f4c420:	b75ff0ef          	jal	ra,83f4bf94 <printf>
    83f4c424:	60a2                	ld	ra,8(sp)
    83f4c426:	0141                	addi	sp,sp,16
    83f4c428:	f1fff06f          	j	83f4c346 <GetCommInfo>

0000000083f4c42c <irq_init>:
    83f4c42c:	1141                	addi	sp,sp,-16
    83f4c42e:	e406                	sd	ra,8(sp)
    83f4c430:	30405073          	csrwi	mie,0
    83f4c434:	34405073          	csrwi	mip,0
    83f4c438:	700007b7          	lui	a5,0x70000
    83f4c43c:	02078713          	addi	a4,a5,32 # 70000020 <CVIMMAP_DRAM_SIZE+0x6c000020>
    83f4c440:	0140000f          	fence	w,o
    83f4c444:	0007a023          	sw	zero,0(a5)
    83f4c448:	0791                	addi	a5,a5,4
    83f4c44a:	fee79be3          	bne	a5,a4,83f4c440 <irq_init+0x14>
    83f4c44e:	700017b7          	lui	a5,0x70001
    83f4c452:	6605                	lui	a2,0x1
    83f4c454:	01478693          	addi	a3,a5,20 # 70001014 <CVIMMAP_DRAM_SIZE+0x6c001014>
    83f4c458:	0140000f          	fence	w,o
    83f4c45c:	0007a023          	sw	zero,0(a5)
    83f4c460:	0140000f          	fence	w,o
    83f4c464:	00c78733          	add	a4,a5,a2
    83f4c468:	00072023          	sw	zero,0(a4)
    83f4c46c:	0791                	addi	a5,a5,4
    83f4c46e:	fed795e3          	bne	a5,a3,83f4c458 <irq_init+0x2c>
    83f4c472:	40060613          	addi	a2,a2,1024 # 1400 <_EL1_STACK_SIZE+0xc00>
    83f4c476:	4581                	li	a1,0
    83f4c478:	00010517          	auipc	a0,0x10
    83f4c47c:	c0850513          	addi	a0,a0,-1016 # 83f5c080 <g_irq_action>
    83f4c480:	afdff0ef          	jal	ra,83f4bf7c <memset>
    83f4c484:	4501                	li	a0,0
    83f4c486:	e6dff0ef          	jal	ra,83f4c2f2 <plic_set_threshold>
    83f4c48a:	300467f3          	csrrsi	a5,mstatus,8
    83f4c48e:	60a2                	ld	ra,8(sp)
    83f4c490:	0141                	addi	sp,sp,16
    83f4c492:	8082                	ret

0000000083f4c494 <pre_system_init>:
    83f4c494:	1141                	addi	sp,sp,-16
    83f4c496:	e406                	sd	ra,8(sp)
    83f4c498:	0f0000ef          	jal	ra,83f4c588 <pinmux_init>
    83f4c49c:	0ee000ef          	jal	ra,83f4c58a <uart_init>
    83f4c4a0:	f8dff0ef          	jal	ra,83f4c42c <irq_init>
    83f4c4a4:	60a2                	ld	ra,8(sp)
    83f4c4a6:	00006517          	auipc	a0,0x6
    83f4c4aa:	bd250513          	addi	a0,a0,-1070 # 83f52078 <ntryh.1+0xe0>
    83f4c4ae:	0141                	addi	sp,sp,16
    83f4c4b0:	ae5ff06f          	j	83f4bf94 <printf>

0000000083f4c4b4 <request_irq>:
    83f4c4b4:	7139                	addi	sp,sp,-64
    83f4c4b6:	f04a                	sd	s2,32(sp)
    83f4c4b8:	00251913          	slli	s2,a0,0x2
    83f4c4bc:	f822                	sd	s0,48(sp)
    83f4c4be:	842a                	mv	s0,a0
    83f4c4c0:	954a                	add	a0,a0,s2
    83f4c4c2:	f426                	sd	s1,40(sp)
    83f4c4c4:	050e                	slli	a0,a0,0x3
    83f4c4c6:	00010497          	auipc	s1,0x10
    83f4c4ca:	bba48493          	addi	s1,s1,-1094 # 83f5c080 <g_irq_action>
    83f4c4ce:	ec4e                	sd	s3,24(sp)
    83f4c4d0:	e852                	sd	s4,16(sp)
    83f4c4d2:	e456                	sd	s5,8(sp)
    83f4c4d4:	fc06                	sd	ra,56(sp)
    83f4c4d6:	00a48ab3          	add	s5,s1,a0
    83f4c4da:	00bab023          	sd	a1,0(s5)
    83f4c4de:	8a32                	mv	s4,a2
    83f4c4e0:	89ba                	mv	s3,a4
    83f4c4e2:	ca89                	beqz	a3,83f4c4f4 <request_irq+0x40>
    83f4c4e4:	0561                	addi	a0,a0,24
    83f4c4e6:	4641                	li	a2,16
    83f4c4e8:	85b6                	mv	a1,a3
    83f4c4ea:	9526                	add	a0,a0,s1
    83f4c4ec:	c15f30ef          	jal	ra,83f40100 <memcpy>
    83f4c4f0:	020a83a3          	sb	zero,39(s5)
    83f4c4f4:	008907b3          	add	a5,s2,s0
    83f4c4f8:	078e                	slli	a5,a5,0x3
    83f4c4fa:	97a6                	add	a5,a5,s1
    83f4c4fc:	8522                	mv	a0,s0
    83f4c4fe:	c7c0                	sw	s0,12(a5)
    83f4c500:	0147a423          	sw	s4,8(a5)
    83f4c504:	0137b823          	sd	s3,16(a5)
    83f4c508:	459d                	li	a1,7
    83f4c50a:	dd7ff0ef          	jal	ra,83f4c2e0 <plic_set_priority_irq>
    83f4c50e:	8522                	mv	a0,s0
    83f4c510:	defff0ef          	jal	ra,83f4c2fe <plic_unmask_irq>
    83f4c514:	70e2                	ld	ra,56(sp)
    83f4c516:	7442                	ld	s0,48(sp)
    83f4c518:	74a2                	ld	s1,40(sp)
    83f4c51a:	7902                	ld	s2,32(sp)
    83f4c51c:	69e2                	ld	s3,24(sp)
    83f4c51e:	6a42                	ld	s4,16(sp)
    83f4c520:	6aa2                	ld	s5,8(sp)
    83f4c522:	4501                	li	a0,0
    83f4c524:	6121                	addi	sp,sp,64
    83f4c526:	8082                	ret

0000000083f4c528 <do_irq>:
    83f4c528:	1101                	addi	sp,sp,-32
    83f4c52a:	e426                	sd	s1,8(sp)
    83f4c52c:	e04a                	sd	s2,0(sp)
    83f4c52e:	ec06                	sd	ra,24(sp)
    83f4c530:	e822                	sd	s0,16(sp)
    83f4c532:	00010497          	auipc	s1,0x10
    83f4c536:	b4e48493          	addi	s1,s1,-1202 # 83f5c080 <g_irq_action>
    83f4c53a:	00006917          	auipc	s2,0x6
    83f4c53e:	b5690913          	addi	s2,s2,-1194 # 83f52090 <ntryh.1+0xf8>
    83f4c542:	d85ff0ef          	jal	ra,83f4c2c6 <plic_ack_irq>
    83f4c546:	00251793          	slli	a5,a0,0x2
    83f4c54a:	97aa                	add	a5,a5,a0
    83f4c54c:	078e                	slli	a5,a5,0x3
    83f4c54e:	97a6                	add	a5,a5,s1
    83f4c550:	6398                	ld	a4,0(a5)
    83f4c552:	842a                	mv	s0,a0
    83f4c554:	cf09                	beqz	a4,83f4c56e <do_irq+0x46>
    83f4c556:	e50d                	bnez	a0,83f4c580 <do_irq+0x58>
    83f4c558:	6785                	lui	a5,0x1
    83f4c55a:	8007879b          	addiw	a5,a5,-2048
    83f4c55e:	3447b7f3          	csrrc	a5,mip,a5
    83f4c562:	60e2                	ld	ra,24(sp)
    83f4c564:	6442                	ld	s0,16(sp)
    83f4c566:	64a2                	ld	s1,8(sp)
    83f4c568:	6902                	ld	s2,0(sp)
    83f4c56a:	6105                	addi	sp,sp,32
    83f4c56c:	8082                	ret
    83f4c56e:	85aa                	mv	a1,a0
    83f4c570:	854a                	mv	a0,s2
    83f4c572:	d07d                	beqz	s0,83f4c558 <do_irq+0x30>
    83f4c574:	a21ff0ef          	jal	ra,83f4bf94 <printf>
    83f4c578:	8522                	mv	a0,s0
    83f4c57a:	d5bff0ef          	jal	ra,83f4c2d4 <plic_eoi_irq>
    83f4c57e:	b7d1                	j	83f4c542 <do_irq+0x1a>
    83f4c580:	6b8c                	ld	a1,16(a5)
    83f4c582:	47c8                	lw	a0,12(a5)
    83f4c584:	9702                	jalr	a4
    83f4c586:	bfcd                	j	83f4c578 <do_irq+0x50>

0000000083f4c588 <pinmux_init>:
    83f4c588:	8082                	ret

0000000083f4c58a <uart_init>:
    83f4c58a:	017d8637          	lui	a2,0x17d8
    83f4c58e:	65f1                	lui	a1,0x1c
    83f4c590:	84060613          	addi	a2,a2,-1984 # 17d7840 <CVIMMAP_FSBL_UNZIP_SIZE+0x8d7840>
    83f4c594:	20058593          	addi	a1,a1,512 # 1c200 <_EL1_STACK_SIZE+0x1ba00>
    83f4c598:	4501                	li	a0,0
    83f4c59a:	6f70106f          	j	83f4e490 <hal_uart_init>

0000000083f4c59e <uart_puts>:
    83f4c59e:	c521                	beqz	a0,83f4c5e6 <uart_puts+0x48>
    83f4c5a0:	1101                	addi	sp,sp,-32
    83f4c5a2:	e426                	sd	s1,8(sp)
    83f4c5a4:	ec06                	sd	ra,24(sp)
    83f4c5a6:	e822                	sd	s0,16(sp)
    83f4c5a8:	e04a                	sd	s2,0(sp)
    83f4c5aa:	00054403          	lbu	s0,0(a0)
    83f4c5ae:	84aa                	mv	s1,a0
    83f4c5b0:	c40d                	beqz	s0,83f4c5da <uart_puts+0x3c>
    83f4c5b2:	4929                	li	s2,10
    83f4c5b4:	a039                	j	83f4c5c2 <uart_puts+0x24>
    83f4c5b6:	8522                	mv	a0,s0
    83f4c5b8:	767010ef          	jal	ra,83f4e51e <hal_uart_putc>
    83f4c5bc:	0004c403          	lbu	s0,0(s1)
    83f4c5c0:	cc09                	beqz	s0,83f4c5da <uart_puts+0x3c>
    83f4c5c2:	0485                	addi	s1,s1,1
    83f4c5c4:	ff2419e3          	bne	s0,s2,83f4c5b6 <uart_puts+0x18>
    83f4c5c8:	4535                	li	a0,13
    83f4c5ca:	755010ef          	jal	ra,83f4e51e <hal_uart_putc>
    83f4c5ce:	8522                	mv	a0,s0
    83f4c5d0:	74f010ef          	jal	ra,83f4e51e <hal_uart_putc>
    83f4c5d4:	0004c403          	lbu	s0,0(s1)
    83f4c5d8:	f46d                	bnez	s0,83f4c5c2 <uart_puts+0x24>
    83f4c5da:	60e2                	ld	ra,24(sp)
    83f4c5dc:	6442                	ld	s0,16(sp)
    83f4c5de:	64a2                	ld	s1,8(sp)
    83f4c5e0:	6902                	ld	s2,0(sp)
    83f4c5e2:	6105                	addi	sp,sp,32
    83f4c5e4:	8082                	ret
    83f4c5e6:	8082                	ret

0000000083f4c5e8 <dump_uart_init>:
    83f4c5e8:	7179                	addi	sp,sp,-48
    83f4c5ea:	ec26                	sd	s1,24(sp)
    83f4c5ec:	00013497          	auipc	s1,0x13
    83f4c5f0:	63c48493          	addi	s1,s1,1596 # 83f5fc28 <init_enable.0>
    83f4c5f4:	4090                	lw	a2,0(s1)
    83f4c5f6:	f022                	sd	s0,32(sp)
    83f4c5f8:	f406                	sd	ra,40(sp)
    83f4c5fa:	e84a                	sd	s2,16(sp)
    83f4c5fc:	e44e                	sd	s3,8(sp)
    83f4c5fe:	00011417          	auipc	s0,0x11
    83f4c602:	e8240413          	addi	s0,s0,-382 # 83f5d480 <transfer_config>
    83f4c606:	ea3d                	bnez	a2,83f4c67c <dump_uart_init+0x94>
    83f4c608:	02144703          	lbu	a4,33(s0)
    83f4c60c:	4695                	li	a3,5
    83f4c60e:	ff47079b          	addiw	a5,a4,-12
    83f4c612:	0ff7f793          	andi	a5,a5,255
    83f4c616:	04f6ee63          	bltu	a3,a5,83f4c672 <dump_uart_init+0x8a>
    83f4c61a:	4505                	li	a0,1
    83f4c61c:	00e5193b          	sllw	s2,a0,a4
    83f4c620:	0409051b          	addiw	a0,s2,64
    83f4c624:	761010ef          	jal	ra,83f4e584 <pvPortMalloc>
    83f4c628:	cd15                	beqz	a0,83f4c664 <dump_uart_init+0x7c>
    83f4c62a:	03f50513          	addi	a0,a0,63
    83f4c62e:	57fd                	li	a5,-1
    83f4c630:	fc057513          	andi	a0,a0,-64
    83f4c634:	9381                	srli	a5,a5,0x20
    83f4c636:	00013997          	auipc	s3,0x13
    83f4c63a:	5ea98993          	addi	s3,s3,1514 # 83f5fc20 <dump_uart>
    83f4c63e:	8fe9                	and	a5,a5,a0
    83f4c640:	07c9                	addi	a5,a5,18
    83f4c642:	00a9b023          	sd	a0,0(s3)
    83f4c646:	3939                	addiw	s2,s2,-18
    83f4c648:	e11c                	sd	a5,0(a0)
    83f4c64a:	00052623          	sw	zero,12(a0)
    83f4c64e:	4785                	li	a5,1
    83f4c650:	000508a3          	sb	zero,17(a0)
    83f4c654:	01252423          	sw	s2,8(a0)
    83f4c658:	c09c                	sw	a5,0(s1)
    83f4c65a:	02044783          	lbu	a5,32(s0)
    83f4c65e:	ef95                	bnez	a5,83f4c69a <dump_uart_init+0xb2>
    83f4c660:	0009b503          	ld	a0,0(s3)
    83f4c664:	70a2                	ld	ra,40(sp)
    83f4c666:	7402                	ld	s0,32(sp)
    83f4c668:	64e2                	ld	s1,24(sp)
    83f4c66a:	6942                	ld	s2,16(sp)
    83f4c66c:	69a2                	ld	s3,8(sp)
    83f4c66e:	6145                	addi	sp,sp,48
    83f4c670:	8082                	ret
    83f4c672:	6505                	lui	a0,0x1
    83f4c674:	04050513          	addi	a0,a0,64 # 1040 <_EL1_STACK_SIZE+0x840>
    83f4c678:	6905                	lui	s2,0x1
    83f4c67a:	b76d                	j	83f4c624 <dump_uart_init+0x3c>
    83f4c67c:	02044583          	lbu	a1,32(s0)
    83f4c680:	00006517          	auipc	a0,0x6
    83f4c684:	a2850513          	addi	a0,a0,-1496 # 83f520a8 <ntryh.1+0x110>
    83f4c688:	00013997          	auipc	s3,0x13
    83f4c68c:	59898993          	addi	s3,s3,1432 # 83f5fc20 <dump_uart>
    83f4c690:	905ff0ef          	jal	ra,83f4bf94 <printf>
    83f4c694:	02044783          	lbu	a5,32(s0)
    83f4c698:	d7e1                	beqz	a5,83f4c660 <dump_uart_init+0x78>
    83f4c69a:	00006517          	auipc	a0,0x6
    83f4c69e:	a4650513          	addi	a0,a0,-1466 # 83f520e0 <ntryh.1+0x148>
    83f4c6a2:	8f3ff0ef          	jal	ra,83f4bf94 <printf>
    83f4c6a6:	0009b503          	ld	a0,0(s3)
    83f4c6aa:	00007797          	auipc	a5,0x7
    83f4c6ae:	b007ad23          	sw	zero,-1254(a5) # 83f531c4 <uart_putc_enable>
    83f4c6b2:	4785                	li	a5,1
    83f4c6b4:	00f50823          	sb	a5,16(a0)
    83f4c6b8:	70a2                	ld	ra,40(sp)
    83f4c6ba:	7402                	ld	s0,32(sp)
    83f4c6bc:	64e2                	ld	s1,24(sp)
    83f4c6be:	6942                	ld	s2,16(sp)
    83f4c6c0:	69a2                	ld	s3,8(sp)
    83f4c6c2:	6145                	addi	sp,sp,48
    83f4c6c4:	8082                	ret

0000000083f4c6c6 <dump_uart_enable>:
    83f4c6c6:	00013797          	auipc	a5,0x13
    83f4c6ca:	55a7b783          	ld	a5,1370(a5) # 83f5fc20 <dump_uart>
    83f4c6ce:	4705                	li	a4,1
    83f4c6d0:	00e78823          	sb	a4,16(a5)
    83f4c6d4:	00007797          	auipc	a5,0x7
    83f4c6d8:	ae07a823          	sw	zero,-1296(a5) # 83f531c4 <uart_putc_enable>
    83f4c6dc:	8082                	ret

0000000083f4c6de <dump_uart_disable>:
    83f4c6de:	00013797          	auipc	a5,0x13
    83f4c6e2:	5427b783          	ld	a5,1346(a5) # 83f5fc20 <dump_uart>
    83f4c6e6:	00078823          	sb	zero,16(a5)
    83f4c6ea:	4785                	li	a5,1
    83f4c6ec:	00007717          	auipc	a4,0x7
    83f4c6f0:	acf72c23          	sw	a5,-1320(a4) # 83f531c4 <uart_putc_enable>
    83f4c6f4:	8082                	ret

0000000083f4c6f6 <dump_uart_msg>:
    83f4c6f6:	00011717          	auipc	a4,0x11
    83f4c6fa:	dab74703          	lbu	a4,-597(a4) # 83f5d4a1 <transfer_config+0x21>
    83f4c6fe:	1101                	addi	sp,sp,-32
    83f4c700:	ff47079b          	addiw	a5,a4,-12
    83f4c704:	e426                	sd	s1,8(sp)
    83f4c706:	ec06                	sd	ra,24(sp)
    83f4c708:	e822                	sd	s0,16(sp)
    83f4c70a:	e04a                	sd	s2,0(sp)
    83f4c70c:	0ff7f793          	andi	a5,a5,255
    83f4c710:	4695                	li	a3,5
    83f4c712:	6485                	lui	s1,0x1
    83f4c714:	00f6e563          	bltu	a3,a5,83f4c71e <dump_uart_msg+0x28>
    83f4c718:	4485                	li	s1,1
    83f4c71a:	00e494bb          	sllw	s1,s1,a4
    83f4c71e:	00013517          	auipc	a0,0x13
    83f4c722:	51250513          	addi	a0,a0,1298 # 83f5fc30 <printf_lock>
    83f4c726:	4fc000ef          	jal	ra,83f4cc22 <_hw_raw_spin_lock_irqsave>
    83f4c72a:	00013917          	auipc	s2,0x13
    83f4c72e:	4f690913          	addi	s2,s2,1270 # 83f5fc20 <dump_uart>
    83f4c732:	842a                	mv	s0,a0
    83f4c734:	00093503          	ld	a0,0(s2)
    83f4c738:	85a6                	mv	a1,s1
    83f4c73a:	81fff0ef          	jal	ra,83f4bf58 <flush_dcache_range>
    83f4c73e:	85a2                	mv	a1,s0
    83f4c740:	00013517          	auipc	a0,0x13
    83f4c744:	4f050513          	addi	a0,a0,1264 # 83f5fc30 <printf_lock>
    83f4c748:	540000ef          	jal	ra,83f4cc88 <_hw_raw_spin_unlock_irqrestore>
    83f4c74c:	60e2                	ld	ra,24(sp)
    83f4c74e:	6442                	ld	s0,16(sp)
    83f4c750:	00093503          	ld	a0,0(s2)
    83f4c754:	64a2                	ld	s1,8(sp)
    83f4c756:	6902                	ld	s2,0(sp)
    83f4c758:	6105                	addi	sp,sp,32
    83f4c75a:	8082                	ret

0000000083f4c75c <uart_put_buff>:
    83f4c75c:	7179                	addi	sp,sp,-48
    83f4c75e:	e84a                	sd	s2,16(sp)
    83f4c760:	892a                	mv	s2,a0
    83f4c762:	00013517          	auipc	a0,0x13
    83f4c766:	4ce50513          	addi	a0,a0,1230 # 83f5fc30 <printf_lock>
    83f4c76a:	f022                	sd	s0,32(sp)
    83f4c76c:	f406                	sd	ra,40(sp)
    83f4c76e:	ec26                	sd	s1,24(sp)
    83f4c770:	e44e                	sd	s3,8(sp)
    83f4c772:	e052                	sd	s4,0(sp)
    83f4c774:	4ae000ef          	jal	ra,83f4cc22 <_hw_raw_spin_lock_irqsave>
    83f4c778:	00007797          	auipc	a5,0x7
    83f4c77c:	a4c7a783          	lw	a5,-1460(a5) # 83f531c4 <uart_putc_enable>
    83f4c780:	842a                	mv	s0,a0
    83f4c782:	30079463          	bnez	a5,83f4ca8a <uart_put_buff+0x32e>
    83f4c786:	00013897          	auipc	a7,0x13
    83f4c78a:	49a88893          	addi	a7,a7,1178 # 83f5fc20 <dump_uart>
    83f4c78e:	0008b783          	ld	a5,0(a7)
    83f4c792:	0017ce83          	lbu	t4,1(a5)
    83f4c796:	0007c683          	lbu	a3,0(a5)
    83f4c79a:	0027ce03          	lbu	t3,2(a5)
    83f4c79e:	00d7c503          	lbu	a0,13(a5)
    83f4c7a2:	0037c303          	lbu	t1,3(a5)
    83f4c7a6:	00c7cf03          	lbu	t5,12(a5)
    83f4c7aa:	00e7c583          	lbu	a1,14(a5)
    83f4c7ae:	0047c603          	lbu	a2,4(a5)
    83f4c7b2:	0ea2                	slli	t4,t4,0x8
    83f4c7b4:	00f7c703          	lbu	a4,15(a5)
    83f4c7b8:	0057c803          	lbu	a6,5(a5)
    83f4c7bc:	00deeeb3          	or	t4,t4,a3
    83f4c7c0:	0e42                	slli	t3,t3,0x10
    83f4c7c2:	0067c683          	lbu	a3,6(a5)
    83f4c7c6:	01de6e33          	or	t3,t3,t4
    83f4c7ca:	0362                	slli	t1,t1,0x18
    83f4c7cc:	0522                	slli	a0,a0,0x8
    83f4c7ce:	0077ce83          	lbu	t4,7(a5)
    83f4c7d2:	01e56533          	or	a0,a0,t5
    83f4c7d6:	01c36333          	or	t1,t1,t3
    83f4c7da:	1602                	slli	a2,a2,0x20
    83f4c7dc:	05c2                	slli	a1,a1,0x10
    83f4c7de:	8dc9                	or	a1,a1,a0
    83f4c7e0:	00666633          	or	a2,a2,t1
    83f4c7e4:	1822                	slli	a6,a6,0x28
    83f4c7e6:	0762                	slli	a4,a4,0x18
    83f4c7e8:	8f4d                	or	a4,a4,a1
    83f4c7ea:	00c86833          	or	a6,a6,a2
    83f4c7ee:	16c2                	slli	a3,a3,0x30
    83f4c7f0:	0017061b          	addiw	a2,a4,1
    83f4c7f4:	0106e6b3          	or	a3,a3,a6
    83f4c7f8:	038e9813          	slli	a6,t4,0x38
    83f4c7fc:	00d86833          	or	a6,a6,a3
    83f4c800:	0086551b          	srliw	a0,a2,0x8
    83f4c804:	0106559b          	srliw	a1,a2,0x10
    83f4c808:	0186569b          	srliw	a3,a2,0x18
    83f4c80c:	00a786a3          	sb	a0,13(a5)
    83f4c810:	00c78623          	sb	a2,12(a5)
    83f4c814:	00b78723          	sb	a1,14(a5)
    83f4c818:	00d787a3          	sb	a3,15(a5)
    83f4c81c:	9742                	add	a4,a4,a6
    83f4c81e:	05200793          	li	a5,82
    83f4c822:	00f70023          	sb	a5,0(a4)
    83f4c826:	0008b703          	ld	a4,0(a7)
    83f4c82a:	00d74603          	lbu	a2,13(a4)
    83f4c82e:	00c74583          	lbu	a1,12(a4)
    83f4c832:	00e74683          	lbu	a3,14(a4)
    83f4c836:	00f74783          	lbu	a5,15(a4)
    83f4c83a:	0622                	slli	a2,a2,0x8
    83f4c83c:	8e4d                	or	a2,a2,a1
    83f4c83e:	06c2                	slli	a3,a3,0x10
    83f4c840:	8ed1                	or	a3,a3,a2
    83f4c842:	07e2                	slli	a5,a5,0x18
    83f4c844:	8fd5                	or	a5,a5,a3
    83f4c846:	0017869b          	addiw	a3,a5,1
    83f4c84a:	0086d51b          	srliw	a0,a3,0x8
    83f4c84e:	0106d59b          	srliw	a1,a3,0x10
    83f4c852:	0186d61b          	srliw	a2,a3,0x18
    83f4c856:	00d70623          	sb	a3,12(a4)
    83f4c85a:	00a706a3          	sb	a0,13(a4)
    83f4c85e:	00b70723          	sb	a1,14(a4)
    83f4c862:	00c707a3          	sb	a2,15(a4)
    83f4c866:	97c2                	add	a5,a5,a6
    83f4c868:	05400713          	li	a4,84
    83f4c86c:	00e78023          	sb	a4,0(a5)
    83f4c870:	0008b703          	ld	a4,0(a7)
    83f4c874:	00d74603          	lbu	a2,13(a4)
    83f4c878:	00c74583          	lbu	a1,12(a4)
    83f4c87c:	00e74683          	lbu	a3,14(a4)
    83f4c880:	00f74783          	lbu	a5,15(a4)
    83f4c884:	0622                	slli	a2,a2,0x8
    83f4c886:	8e4d                	or	a2,a2,a1
    83f4c888:	06c2                	slli	a3,a3,0x10
    83f4c88a:	8ed1                	or	a3,a3,a2
    83f4c88c:	07e2                	slli	a5,a5,0x18
    83f4c88e:	8fd5                	or	a5,a5,a3
    83f4c890:	0017869b          	addiw	a3,a5,1
    83f4c894:	0086d51b          	srliw	a0,a3,0x8
    83f4c898:	0106d59b          	srliw	a1,a3,0x10
    83f4c89c:	0186d61b          	srliw	a2,a3,0x18
    83f4c8a0:	00d70623          	sb	a3,12(a4)
    83f4c8a4:	00a706a3          	sb	a0,13(a4)
    83f4c8a8:	00b70723          	sb	a1,14(a4)
    83f4c8ac:	00c707a3          	sb	a2,15(a4)
    83f4c8b0:	97c2                	add	a5,a5,a6
    83f4c8b2:	04400713          	li	a4,68
    83f4c8b6:	00e78023          	sb	a4,0(a5)
    83f4c8ba:	0008b703          	ld	a4,0(a7)
    83f4c8be:	00d74603          	lbu	a2,13(a4)
    83f4c8c2:	00c74583          	lbu	a1,12(a4)
    83f4c8c6:	00e74683          	lbu	a3,14(a4)
    83f4c8ca:	00f74783          	lbu	a5,15(a4)
    83f4c8ce:	0622                	slli	a2,a2,0x8
    83f4c8d0:	8e4d                	or	a2,a2,a1
    83f4c8d2:	06c2                	slli	a3,a3,0x10
    83f4c8d4:	8ed1                	or	a3,a3,a2
    83f4c8d6:	07e2                	slli	a5,a5,0x18
    83f4c8d8:	8fd5                	or	a5,a5,a3
    83f4c8da:	0017869b          	addiw	a3,a5,1
    83f4c8de:	0086d51b          	srliw	a0,a3,0x8
    83f4c8e2:	0106d59b          	srliw	a1,a3,0x10
    83f4c8e6:	0186d61b          	srliw	a2,a3,0x18
    83f4c8ea:	00d70623          	sb	a3,12(a4)
    83f4c8ee:	00a706a3          	sb	a0,13(a4)
    83f4c8f2:	00b70723          	sb	a1,14(a4)
    83f4c8f6:	00c707a3          	sb	a2,15(a4)
    83f4c8fa:	97c2                	add	a5,a5,a6
    83f4c8fc:	03a00713          	li	a4,58
    83f4c900:	00e78023          	sb	a4,0(a5)
    83f4c904:	0008b703          	ld	a4,0(a7)
    83f4c908:	00d74603          	lbu	a2,13(a4)
    83f4c90c:	00c74583          	lbu	a1,12(a4)
    83f4c910:	00e74683          	lbu	a3,14(a4)
    83f4c914:	00f74783          	lbu	a5,15(a4)
    83f4c918:	0622                	slli	a2,a2,0x8
    83f4c91a:	8e4d                	or	a2,a2,a1
    83f4c91c:	06c2                	slli	a3,a3,0x10
    83f4c91e:	8ed1                	or	a3,a3,a2
    83f4c920:	07e2                	slli	a5,a5,0x18
    83f4c922:	8fd5                	or	a5,a5,a3
    83f4c924:	0017869b          	addiw	a3,a5,1
    83f4c928:	0106d59b          	srliw	a1,a3,0x10
    83f4c92c:	0086d51b          	srliw	a0,a3,0x8
    83f4c930:	0186d61b          	srliw	a2,a3,0x18
    83f4c934:	00d70623          	sb	a3,12(a4)
    83f4c938:	00a706a3          	sb	a0,13(a4)
    83f4c93c:	00b70723          	sb	a1,14(a4)
    83f4c940:	00c707a3          	sb	a2,15(a4)
    83f4c944:	97c2                	add	a5,a5,a6
    83f4c946:	02000713          	li	a4,32
    83f4c94a:	00e78023          	sb	a4,0(a5)
    83f4c94e:	00094583          	lbu	a1,0(s2)
    83f4c952:	18058c63          	beqz	a1,83f4caea <uart_put_buff+0x38e>
    83f4c956:	0008b783          	ld	a5,0(a7)
    83f4c95a:	4305                	li	t1,1
    83f4c95c:	854a                	mv	a0,s2
    83f4c95e:	4e29                	li	t3,10
    83f4c960:	4f35                	li	t5,13
    83f4c962:	4123033b          	subw	t1,t1,s2
    83f4c966:	4e85                	li	t4,1
    83f4c968:	00d7c603          	lbu	a2,13(a5)
    83f4c96c:	00c7cf83          	lbu	t6,12(a5)
    83f4c970:	00e7c683          	lbu	a3,14(a5)
    83f4c974:	00f7c703          	lbu	a4,15(a5)
    83f4c978:	0622                	slli	a2,a2,0x8
    83f4c97a:	01f66633          	or	a2,a2,t6
    83f4c97e:	06c2                	slli	a3,a3,0x10
    83f4c980:	8ed1                	or	a3,a3,a2
    83f4c982:	0762                	slli	a4,a4,0x18
    83f4c984:	8f55                	or	a4,a4,a3
    83f4c986:	0017061b          	addiw	a2,a4,1
    83f4c98a:	0006069b          	sext.w	a3,a2
    83f4c98e:	9742                	add	a4,a4,a6
    83f4c990:	05c59563          	bne	a1,t3,83f4c9da <uart_put_buff+0x27e>
    83f4c994:	0106559b          	srliw	a1,a2,0x10
    83f4c998:	0186569b          	srliw	a3,a2,0x18
    83f4c99c:	00865f9b          	srliw	t6,a2,0x8
    83f4c9a0:	00c78623          	sb	a2,12(a5)
    83f4c9a4:	00b78723          	sb	a1,14(a5)
    83f4c9a8:	00d787a3          	sb	a3,15(a5)
    83f4c9ac:	01f786a3          	sb	t6,13(a5)
    83f4c9b0:	01e70023          	sb	t5,0(a4)
    83f4c9b4:	0008b783          	ld	a5,0(a7)
    83f4c9b8:	00d7c603          	lbu	a2,13(a5)
    83f4c9bc:	00c7c583          	lbu	a1,12(a5)
    83f4c9c0:	00e7c683          	lbu	a3,14(a5)
    83f4c9c4:	00f7c703          	lbu	a4,15(a5)
    83f4c9c8:	0622                	slli	a2,a2,0x8
    83f4c9ca:	8e4d                	or	a2,a2,a1
    83f4c9cc:	06c2                	slli	a3,a3,0x10
    83f4c9ce:	8ed1                	or	a3,a3,a2
    83f4c9d0:	0762                	slli	a4,a4,0x18
    83f4c9d2:	8f55                	or	a4,a4,a3
    83f4c9d4:	0017069b          	addiw	a3,a4,1
    83f4c9d8:	9742                	add	a4,a4,a6
    83f4c9da:	0086df9b          	srliw	t6,a3,0x8
    83f4c9de:	0106d59b          	srliw	a1,a3,0x10
    83f4c9e2:	0186d61b          	srliw	a2,a3,0x18
    83f4c9e6:	00d78623          	sb	a3,12(a5)
    83f4c9ea:	01f786a3          	sb	t6,13(a5)
    83f4c9ee:	00c787a3          	sb	a2,15(a5)
    83f4c9f2:	00b78723          	sb	a1,14(a5)
    83f4c9f6:	00054783          	lbu	a5,0(a0)
    83f4c9fa:	00a304bb          	addw	s1,t1,a0
    83f4c9fe:	0505                	addi	a0,a0,1
    83f4ca00:	00f70023          	sb	a5,0(a4)
    83f4ca04:	0008b783          	ld	a5,0(a7)
    83f4ca08:	00d7c283          	lbu	t0,13(a5)
    83f4ca0c:	0097cf83          	lbu	t6,9(a5)
    83f4ca10:	00c7c083          	lbu	ra,12(a5)
    83f4ca14:	00e7c583          	lbu	a1,14(a5)
    83f4ca18:	0087c383          	lbu	t2,8(a5)
    83f4ca1c:	00a7c603          	lbu	a2,10(a5)
    83f4ca20:	00f7c683          	lbu	a3,15(a5)
    83f4ca24:	00b7c703          	lbu	a4,11(a5)
    83f4ca28:	02a2                	slli	t0,t0,0x8
    83f4ca2a:	0fa2                	slli	t6,t6,0x8
    83f4ca2c:	0012e2b3          	or	t0,t0,ra
    83f4ca30:	05c2                	slli	a1,a1,0x10
    83f4ca32:	007fefb3          	or	t6,t6,t2
    83f4ca36:	0642                	slli	a2,a2,0x10
    83f4ca38:	0055e5b3          	or	a1,a1,t0
    83f4ca3c:	06e2                	slli	a3,a3,0x18
    83f4ca3e:	01f66633          	or	a2,a2,t6
    83f4ca42:	0762                	slli	a4,a4,0x18
    83f4ca44:	8ecd                	or	a3,a3,a1
    83f4ca46:	8f51                	or	a4,a4,a2
    83f4ca48:	2681                	sext.w	a3,a3
    83f4ca4a:	2701                	sext.w	a4,a4
    83f4ca4c:	00e6ec63          	bltu	a3,a4,83f4ca64 <uart_put_buff+0x308>
    83f4ca50:	01d788a3          	sb	t4,17(a5)
    83f4ca54:	00078623          	sb	zero,12(a5)
    83f4ca58:	000786a3          	sb	zero,13(a5)
    83f4ca5c:	00078723          	sb	zero,14(a5)
    83f4ca60:	000787a3          	sb	zero,15(a5)
    83f4ca64:	00054583          	lbu	a1,0(a0)
    83f4ca68:	f181                	bnez	a1,83f4c968 <uart_put_buff+0x20c>
    83f4ca6a:	85a2                	mv	a1,s0
    83f4ca6c:	00013517          	auipc	a0,0x13
    83f4ca70:	1c450513          	addi	a0,a0,452 # 83f5fc30 <printf_lock>
    83f4ca74:	214000ef          	jal	ra,83f4cc88 <_hw_raw_spin_unlock_irqrestore>
    83f4ca78:	70a2                	ld	ra,40(sp)
    83f4ca7a:	7402                	ld	s0,32(sp)
    83f4ca7c:	6942                	ld	s2,16(sp)
    83f4ca7e:	69a2                	ld	s3,8(sp)
    83f4ca80:	6a02                	ld	s4,0(sp)
    83f4ca82:	8526                	mv	a0,s1
    83f4ca84:	64e2                	ld	s1,24(sp)
    83f4ca86:	6145                	addi	sp,sp,48
    83f4ca88:	8082                	ret
    83f4ca8a:	05200493          	li	s1,82
    83f4ca8e:	00005997          	auipc	s3,0x5
    83f4ca92:	67b98993          	addi	s3,s3,1659 # 83f52109 <ntryh.1+0x171>
    83f4ca96:	4a29                	li	s4,10
    83f4ca98:	8526                	mv	a0,s1
    83f4ca9a:	285010ef          	jal	ra,83f4e51e <hal_uart_putc>
    83f4ca9e:	0009c483          	lbu	s1,0(s3)
    83f4caa2:	0985                	addi	s3,s3,1
    83f4caa4:	cc89                	beqz	s1,83f4cabe <uart_put_buff+0x362>
    83f4caa6:	ff4499e3          	bne	s1,s4,83f4ca98 <uart_put_buff+0x33c>
    83f4caaa:	4535                	li	a0,13
    83f4caac:	273010ef          	jal	ra,83f4e51e <hal_uart_putc>
    83f4cab0:	8526                	mv	a0,s1
    83f4cab2:	26d010ef          	jal	ra,83f4e51e <hal_uart_putc>
    83f4cab6:	0009c483          	lbu	s1,0(s3)
    83f4caba:	0985                	addi	s3,s3,1
    83f4cabc:	f4ed                	bnez	s1,83f4caa6 <uart_put_buff+0x34a>
    83f4cabe:	00094503          	lbu	a0,0(s2)
    83f4cac2:	49a9                	li	s3,10
    83f4cac4:	0905                	addi	s2,s2,1
    83f4cac6:	e901                	bnez	a0,83f4cad6 <uart_put_buff+0x37a>
    83f4cac8:	a00d                	j	83f4caea <uart_put_buff+0x38e>
    83f4caca:	255010ef          	jal	ra,83f4e51e <hal_uart_putc>
    83f4cace:	fff94503          	lbu	a0,-1(s2)
    83f4cad2:	2485                	addiw	s1,s1,1
    83f4cad4:	d959                	beqz	a0,83f4ca6a <uart_put_buff+0x30e>
    83f4cad6:	0905                	addi	s2,s2,1
    83f4cad8:	ff3519e3          	bne	a0,s3,83f4caca <uart_put_buff+0x36e>
    83f4cadc:	4535                	li	a0,13
    83f4cade:	241010ef          	jal	ra,83f4e51e <hal_uart_putc>
    83f4cae2:	4529                	li	a0,10
    83f4cae4:	23b010ef          	jal	ra,83f4e51e <hal_uart_putc>
    83f4cae8:	b749                	j	83f4ca6a <uart_put_buff+0x30e>
    83f4caea:	4481                	li	s1,0
    83f4caec:	bfbd                	j	83f4ca6a <uart_put_buff+0x30e>

0000000083f4caee <cvi_spinlock_init>:
    83f4caee:	1141                	addi	sp,sp,-16
    83f4caf0:	460d                	li	a2,3
    83f4caf2:	4581                	li	a1,0
    83f4caf4:	4505                	li	a0,1
    83f4caf6:	e022                	sd	s0,0(sp)
    83f4caf8:	e406                	sd	ra,8(sp)
    83f4cafa:	00013417          	auipc	s0,0x13
    83f4cafe:	13e40413          	addi	s0,s0,318 # 83f5fc38 <reg_write_lock>
    83f4cb02:	6d9010ef          	jal	ra,83f4e9da <xQueueGenericCreate>
    83f4cb06:	e008                	sd	a0,0(s0)
    83f4cb08:	c51d                	beqz	a0,83f4cb36 <cvi_spinlock_init+0x48>
    83f4cb0a:	4581                	li	a1,0
    83f4cb0c:	4681                	li	a3,0
    83f4cb0e:	4601                	li	a2,0
    83f4cb10:	00013797          	auipc	a5,0x13
    83f4cb14:	12078223          	sb	zero,292(a5) # 83f5fc34 <lockCount>
    83f4cb18:	72f010ef          	jal	ra,83f4ea46 <xQueueGenericSend>
    83f4cb1c:	6402                	ld	s0,0(sp)
    83f4cb1e:	60a2                	ld	ra,8(sp)
    83f4cb20:	00005597          	auipc	a1,0x5
    83f4cb24:	6a058593          	addi	a1,a1,1696 # 83f521c0 <__func__.0>
    83f4cb28:	00005517          	auipc	a0,0x5
    83f4cb2c:	60850513          	addi	a0,a0,1544 # 83f52130 <ntryh.1+0x198>
    83f4cb30:	0141                	addi	sp,sp,16
    83f4cb32:	c62ff06f          	j	83f4bf94 <printf>
    83f4cb36:	00005517          	auipc	a0,0x5
    83f4cb3a:	5da50513          	addi	a0,a0,1498 # 83f52110 <ntryh.1+0x178>
    83f4cb3e:	c56ff0ef          	jal	ra,83f4bf94 <printf>
    83f4cb42:	6008                	ld	a0,0(s0)
    83f4cb44:	b7d9                	j	83f4cb0a <cvi_spinlock_init+0x1c>

0000000083f4cb46 <hw_spin_lock>:
    83f4cb46:	1101                	addi	sp,sp,-32
    83f4cb48:	e822                	sd	s0,16(sp)
    83f4cb4a:	ec06                	sd	ra,24(sp)
    83f4cb4c:	e426                	sd	s1,8(sp)
    83f4cb4e:	e04a                	sd	s2,0(sp)
    83f4cb50:	00255703          	lhu	a4,2(a0)
    83f4cb54:	478d                	li	a5,3
    83f4cb56:	842a                	mv	s0,a0
    83f4cb58:	06e7eb63          	bltu	a5,a4,83f4cbce <hw_spin_lock+0x88>
    83f4cb5c:	c01027f3          	rdtime	a5
    83f4cb60:	03079713          	slli	a4,a5,0x30
    83f4cb64:	9341                	srli	a4,a4,0x30
    83f4cb66:	c335                	beqz	a4,83f4cbca <hw_spin_lock+0x84>
    83f4cb68:	00f41023          	sh	a5,0(s0)
    83f4cb6c:	000f44b7          	lui	s1,0xf4
    83f4cb70:	24048493          	addi	s1,s1,576 # f4240 <CVIMMAP_FREERTOS_SIZE+0x34240>
    83f4cb74:	00006917          	auipc	s2,0x6
    83f4cb78:	65490913          	addi	s2,s2,1620 # 83f531c8 <reg_base>
    83f4cb7c:	a021                	j	83f4cb84 <hw_spin_lock+0x3e>
    83f4cb7e:	c78ff0ef          	jal	ra,83f4bff6 <usleep>
    83f4cb82:	c0d9                	beqz	s1,83f4cc08 <hw_spin_lock+0xc2>
    83f4cb84:	0140000f          	fence	w,o
    83f4cb88:	00245703          	lhu	a4,2(s0)
    83f4cb8c:	00093683          	ld	a3,0(s2)
    83f4cb90:	00045783          	lhu	a5,0(s0)
    83f4cb94:	070a                	slli	a4,a4,0x2
    83f4cb96:	9736                	add	a4,a4,a3
    83f4cb98:	00f71023          	sh	a5,0(a4)
    83f4cb9c:	00245783          	lhu	a5,2(s0)
    83f4cba0:	078a                	slli	a5,a5,0x2
    83f4cba2:	97b6                	add	a5,a5,a3
    83f4cba4:	0007d783          	lhu	a5,0(a5)
    83f4cba8:	17c2                	slli	a5,a5,0x30
    83f4cbaa:	93c1                	srli	a5,a5,0x30
    83f4cbac:	0820000f          	fence	i,r
    83f4cbb0:	00045703          	lhu	a4,0(s0)
    83f4cbb4:	4505                	li	a0,1
    83f4cbb6:	14fd                	addi	s1,s1,-1
    83f4cbb8:	fcf713e3          	bne	a4,a5,83f4cb7e <hw_spin_lock+0x38>
    83f4cbbc:	60e2                	ld	ra,24(sp)
    83f4cbbe:	6442                	ld	s0,16(sp)
    83f4cbc0:	64a2                	ld	s1,8(sp)
    83f4cbc2:	6902                	ld	s2,0(sp)
    83f4cbc4:	4505                	li	a0,1
    83f4cbc6:	6105                	addi	sp,sp,32
    83f4cbc8:	8082                	ret
    83f4cbca:	4785                	li	a5,1
    83f4cbcc:	bf71                	j	83f4cb68 <hw_spin_lock+0x22>
    83f4cbce:	00013497          	auipc	s1,0x13
    83f4cbd2:	06a48493          	addi	s1,s1,106 # 83f5fc38 <reg_write_lock>
    83f4cbd6:	6088                	ld	a0,0(s1)
    83f4cbd8:	4581                	li	a1,0
    83f4cbda:	4601                	li	a2,0
    83f4cbdc:	19c020ef          	jal	ra,83f4ed78 <xQueueReceiveFromISR>
    83f4cbe0:	00013697          	auipc	a3,0x13
    83f4cbe4:	05468693          	addi	a3,a3,84 # 83f5fc34 <lockCount>
    83f4cbe8:	0006c783          	lbu	a5,0(a3)
    83f4cbec:	4581                	li	a1,0
    83f4cbee:	0087971b          	slliw	a4,a5,0x8
    83f4cbf2:	00276713          	ori	a4,a4,2
    83f4cbf6:	00e41023          	sh	a4,0(s0)
    83f4cbfa:	6088                	ld	a0,0(s1)
    83f4cbfc:	2785                	addiw	a5,a5,1
    83f4cbfe:	00f68023          	sb	a5,0(a3)
    83f4cc02:	7e9010ef          	jal	ra,83f4ebea <xQueueGiveFromISR>
    83f4cc06:	b79d                	j	83f4cb6c <hw_spin_lock+0x26>
    83f4cc08:	00005517          	auipc	a0,0x5
    83f4cc0c:	53850513          	addi	a0,a0,1336 # 83f52140 <ntryh.1+0x1a8>
    83f4cc10:	98fff0ef          	jal	ra,83f4c59e <uart_puts>
    83f4cc14:	60e2                	ld	ra,24(sp)
    83f4cc16:	6442                	ld	s0,16(sp)
    83f4cc18:	64a2                	ld	s1,8(sp)
    83f4cc1a:	6902                	ld	s2,0(sp)
    83f4cc1c:	557d                	li	a0,-1
    83f4cc1e:	6105                	addi	sp,sp,32
    83f4cc20:	8082                	ret

0000000083f4cc22 <_hw_raw_spin_lock_irqsave>:
    83f4cc22:	1101                	addi	sp,sp,-32
    83f4cc24:	e04a                	sd	s2,0(sp)
    83f4cc26:	ec06                	sd	ra,24(sp)
    83f4cc28:	e822                	sd	s0,16(sp)
    83f4cc2a:	e426                	sd	s1,8(sp)
    83f4cc2c:	892a                	mv	s2,a0
    83f4cc2e:	30002473          	csrr	s0,mstatus
    83f4cc32:	8821                	andi	s0,s0,8
    83f4cc34:	30047073          	csrci	mstatus,8
    83f4cc38:	f0fff0ef          	jal	ra,83f4cb46 <hw_spin_lock>
    83f4cc3c:	57fd                	li	a5,-1
    83f4cc3e:	00f50963          	beq	a0,a5,83f4cc50 <_hw_raw_spin_lock_irqsave+0x2e>
    83f4cc42:	60e2                	ld	ra,24(sp)
    83f4cc44:	8522                	mv	a0,s0
    83f4cc46:	6442                	ld	s0,16(sp)
    83f4cc48:	64a2                	ld	s1,8(sp)
    83f4cc4a:	6902                	ld	s2,0(sp)
    83f4cc4c:	6105                	addi	sp,sp,32
    83f4cc4e:	8082                	ret
    83f4cc50:	84aa                	mv	s1,a0
    83f4cc52:	c019                	beqz	s0,83f4cc58 <_hw_raw_spin_lock_irqsave+0x36>
    83f4cc54:	30046073          	csrsi	mstatus,8
    83f4cc58:	00295783          	lhu	a5,2(s2)
    83f4cc5c:	00006717          	auipc	a4,0x6
    83f4cc60:	56c73703          	ld	a4,1388(a4) # 83f531c8 <reg_base>
    83f4cc64:	078a                	slli	a5,a5,0x2
    83f4cc66:	97ba                	add	a5,a5,a4
    83f4cc68:	0007d583          	lhu	a1,0(a5)
    83f4cc6c:	15c2                	slli	a1,a1,0x30
    83f4cc6e:	91c1                	srli	a1,a1,0x30
    83f4cc70:	0820000f          	fence	i,r
    83f4cc74:	00095603          	lhu	a2,0(s2)
    83f4cc78:	00005517          	auipc	a0,0x5
    83f4cc7c:	4e050513          	addi	a0,a0,1248 # 83f52158 <ntryh.1+0x1c0>
    83f4cc80:	8426                	mv	s0,s1
    83f4cc82:	91dff0ef          	jal	ra,83f4c59e <uart_puts>
    83f4cc86:	bf75                	j	83f4cc42 <_hw_raw_spin_lock_irqsave+0x20>

0000000083f4cc88 <_hw_raw_spin_unlock_irqrestore>:
    83f4cc88:	00255783          	lhu	a5,2(a0)
    83f4cc8c:	00006717          	auipc	a4,0x6
    83f4cc90:	53c70713          	addi	a4,a4,1340 # 83f531c8 <reg_base>
    83f4cc94:	6314                	ld	a3,0(a4)
    83f4cc96:	078a                	slli	a5,a5,0x2
    83f4cc98:	97b6                	add	a5,a5,a3
    83f4cc9a:	0007d783          	lhu	a5,0(a5)
    83f4cc9e:	17c2                	slli	a5,a5,0x30
    83f4cca0:	93c1                	srli	a5,a5,0x30
    83f4cca2:	0820000f          	fence	i,r
    83f4cca6:	00055683          	lhu	a3,0(a0)
    83f4ccaa:	02f69263          	bne	a3,a5,83f4ccce <_hw_raw_spin_unlock_irqrestore+0x46>
    83f4ccae:	0140000f          	fence	w,o
    83f4ccb2:	00255783          	lhu	a5,2(a0)
    83f4ccb6:	6314                	ld	a3,0(a4)
    83f4ccb8:	00055703          	lhu	a4,0(a0)
    83f4ccbc:	078a                	slli	a5,a5,0x2
    83f4ccbe:	97b6                	add	a5,a5,a3
    83f4ccc0:	00e79023          	sh	a4,0(a5)
    83f4ccc4:	c581                	beqz	a1,83f4cccc <_hw_raw_spin_unlock_irqrestore+0x44>
    83f4ccc6:	30046073          	csrsi	mstatus,8
    83f4ccca:	8082                	ret
    83f4cccc:	8082                	ret
    83f4ccce:	00255783          	lhu	a5,2(a0)
    83f4ccd2:	6318                	ld	a4,0(a4)
    83f4ccd4:	078a                	slli	a5,a5,0x2
    83f4ccd6:	97ba                	add	a5,a5,a4
    83f4ccd8:	0007d583          	lhu	a1,0(a5)
    83f4ccdc:	15c2                	slli	a1,a1,0x30
    83f4ccde:	91c1                	srli	a1,a1,0x30
    83f4cce0:	0820000f          	fence	i,r
    83f4cce4:	00055603          	lhu	a2,0(a0)
    83f4cce8:	00005517          	auipc	a0,0x5
    83f4ccec:	4a050513          	addi	a0,a0,1184 # 83f52188 <ntryh.1+0x1f0>
    83f4ccf0:	8afff06f          	j	83f4c59e <uart_puts>

0000000083f4ccf4 <CVI_OSDC_EstCmprCanvasSize>:
    83f4ccf4:	7ef0006f          	j	83f4dce2 <CVI_OSDC_est_cmpr_canvas_size>

0000000083f4ccf8 <CVI_OSDC_DrawCmprCanvas>:
    83f4ccf8:	00a0106f          	j	83f4dd02 <CVI_OSDC_draw_cmpr_canvas>

0000000083f4ccfc <CVI_OSDC_SetRectObjAttr>:
    83f4ccfc:	4302                	lw	t1,0(sp)
    83f4ccfe:	e01a                	sd	t1,0(sp)
    83f4cd00:	0060106f          	j	83f4dd06 <CVI_OSDC_set_rect_obj_attr>

0000000083f4cd04 <CVI_OSDC_SetBitmapObjAttr>:
    83f4cd04:	06e0106f          	j	83f4dd72 <CVI_OSDC_set_bitmap_obj_attr>

0000000083f4cd08 <CVI_OSDC_SetLineObjAttr>:
    83f4cd08:	0b60106f          	j	83f4ddbe <CVI_OSDC_set_line_obj_attr>

0000000083f4cd0c <recycle_obj_slices>:
    83f4cd0c:	7139                	addi	sp,sp,-64
    83f4cd0e:	f822                	sd	s0,48(sp)
    83f4cd10:	f04a                	sd	s2,32(sp)
    83f4cd12:	ec4e                	sd	s3,24(sp)
    83f4cd14:	e852                	sd	s4,16(sp)
    83f4cd16:	fc06                	sd	ra,56(sp)
    83f4cd18:	f426                	sd	s1,40(sp)
    83f4cd1a:	e456                	sd	s5,8(sp)
    83f4cd1c:	651c                	ld	a5,8(a0)
    83f4cd1e:	892a                	mv	s2,a0
    83f4cd20:	89ae                	mv	s3,a1
    83f4cd22:	8a32                	mv	s4,a2
    83f4cd24:	ff078513          	addi	a0,a5,-16
    83f4cd28:	4401                	li	s0,0
    83f4cd2a:	c391                	beqz	a5,83f4cd2e <recycle_obj_slices+0x22>
    83f4cd2c:	6780                	ld	s0,8(a5)
    83f4cd2e:	04f90963          	beq	s2,a5,83f4cd80 <recycle_obj_slices+0x74>
    83f4cd32:	415c                	lw	a5,4(a0)
    83f4cd34:	4481                	li	s1,0
    83f4cd36:	4a81                	li	s5,0
    83f4cd38:	2485                	addiw	s1,s1,1
    83f4cd3a:	02fa5063          	bge	s4,a5,83f4cd5a <recycle_obj_slices+0x4e>
    83f4cd3e:	0299c763          	blt	s3,s1,83f4cd6c <recycle_obj_slices+0x60>
    83f4cd42:	4781                	li	a5,0
    83f4cd44:	ff040513          	addi	a0,s0,-16
    83f4cd48:	c011                	beqz	s0,83f4cd4c <recycle_obj_slices+0x40>
    83f4cd4a:	641c                	ld	a5,8(s0)
    83f4cd4c:	02890063          	beq	s2,s0,83f4cd6c <recycle_obj_slices+0x60>
    83f4cd50:	843e                	mv	s0,a5
    83f4cd52:	415c                	lw	a5,4(a0)
    83f4cd54:	2485                	addiw	s1,s1,1
    83f4cd56:	fefa44e3          	blt	s4,a5,83f4cd3e <recycle_obj_slices+0x32>
    83f4cd5a:	6918                	ld	a4,16(a0)
    83f4cd5c:	6d1c                	ld	a5,24(a0)
    83f4cd5e:	2a85                	addiw	s5,s5,1
    83f4cd60:	e71c                	sd	a5,8(a4)
    83f4cd62:	e398                	sd	a4,0(a5)
    83f4cd64:	187010ef          	jal	ra,83f4e6ea <vPortFree>
    83f4cd68:	fc99dde3          	bge	s3,s1,83f4cd42 <recycle_obj_slices+0x36>
    83f4cd6c:	70e2                	ld	ra,56(sp)
    83f4cd6e:	7442                	ld	s0,48(sp)
    83f4cd70:	74a2                	ld	s1,40(sp)
    83f4cd72:	7902                	ld	s2,32(sp)
    83f4cd74:	69e2                	ld	s3,24(sp)
    83f4cd76:	6a42                	ld	s4,16(sp)
    83f4cd78:	8556                	mv	a0,s5
    83f4cd7a:	6aa2                	ld	s5,8(sp)
    83f4cd7c:	6121                	addi	sp,sp,64
    83f4cd7e:	8082                	ret
    83f4cd80:	4a81                	li	s5,0
    83f4cd82:	b7ed                	j	83f4cd6c <recycle_obj_slices+0x60>

0000000083f4cd84 <recycle_draw_obj>:
    83f4cd84:	419c                	lw	a5,0(a1)
    83f4cd86:	cbb5                	beqz	a5,83f4cdfa <recycle_draw_obj+0x76>
    83f4cd88:	7179                	addi	sp,sp,-48
    83f4cd8a:	f022                	sd	s0,32(sp)
    83f4cd8c:	ec26                	sd	s1,24(sp)
    83f4cd8e:	e84a                	sd	s2,16(sp)
    83f4cd90:	e44e                	sd	s3,8(sp)
    83f4cd92:	e052                	sd	s4,0(sp)
    83f4cd94:	f406                	sd	ra,40(sp)
    83f4cd96:	84ae                	mv	s1,a1
    83f4cd98:	892a                	mv	s2,a0
    83f4cd9a:	89b2                	mv	s3,a2
    83f4cd9c:	4401                	li	s0,0
    83f4cd9e:	4a05                	li	s4,1
    83f4cda0:	02041713          	slli	a4,s0,0x20
    83f4cda4:	01a75513          	srli	a0,a4,0x1a
    83f4cda8:	954a                	add	a0,a0,s2
    83f4cdaa:	5d18                	lw	a4,56(a0)
    83f4cdac:	01374e63          	blt	a4,s3,83f4cdc8 <recycle_draw_obj+0x44>
    83f4cdb0:	409c                	lw	a5,0(s1)
    83f4cdb2:	2405                	addiw	s0,s0,1
    83f4cdb4:	fef466e3          	bltu	s0,a5,83f4cda0 <recycle_draw_obj+0x1c>
    83f4cdb8:	70a2                	ld	ra,40(sp)
    83f4cdba:	7402                	ld	s0,32(sp)
    83f4cdbc:	64e2                	ld	s1,24(sp)
    83f4cdbe:	6942                	ld	s2,16(sp)
    83f4cdc0:	69a2                	ld	s3,8(sp)
    83f4cdc2:	6a02                	ld	s4,0(sp)
    83f4cdc4:	6145                	addi	sp,sp,48
    83f4cdc6:	8082                	ret
    83f4cdc8:	0014059b          	addiw	a1,s0,1
    83f4cdcc:	fff7861b          	addiw	a2,a5,-1
    83f4cdd0:	9e01                	subw	a2,a2,s0
    83f4cdd2:	02059713          	slli	a4,a1,0x20
    83f4cdd6:	01a75593          	srli	a1,a4,0x1a
    83f4cdda:	02061713          	slli	a4,a2,0x20
    83f4cdde:	01a75613          	srli	a2,a4,0x1a
    83f4cde2:	95ca                	add	a1,a1,s2
    83f4cde4:	00fa7463          	bgeu	s4,a5,83f4cdec <recycle_draw_obj+0x68>
    83f4cde8:	f33f50ef          	jal	ra,83f42d1a <memmove>
    83f4cdec:	4098                	lw	a4,0(s1)
    83f4cdee:	fff7079b          	addiw	a5,a4,-1
    83f4cdf2:	c09c                	sw	a5,0(s1)
    83f4cdf4:	faf466e3          	bltu	s0,a5,83f4cda0 <recycle_draw_obj+0x1c>
    83f4cdf8:	b7c1                	j	83f4cdb8 <recycle_draw_obj+0x34>
    83f4cdfa:	8082                	ret

0000000083f4cdfc <obj_project_on_line>:
    83f4cdfc:	7115                	addi	sp,sp,-224
    83f4cdfe:	f556                	sd	s5,168(sp)
    83f4ce00:	ed86                	sd	ra,216(sp)
    83f4ce02:	e9a2                	sd	s0,208(sp)
    83f4ce04:	e5a6                	sd	s1,200(sp)
    83f4ce06:	e1ca                	sd	s2,192(sp)
    83f4ce08:	fd4e                	sd	s3,184(sp)
    83f4ce0a:	f952                	sd	s4,176(sp)
    83f4ce0c:	f15a                	sd	s6,160(sp)
    83f4ce0e:	ed5e                	sd	s7,152(sp)
    83f4ce10:	e962                	sd	s8,144(sp)
    83f4ce12:	e566                	sd	s9,136(sp)
    83f4ce14:	e16a                	sd	s10,128(sp)
    83f4ce16:	fcee                	sd	s11,120(sp)
    83f4ce18:	b4a2                	fsd	fs0,104(sp)
    83f4ce1a:	b0a6                	fsd	fs1,96(sp)
    83f4ce1c:	acca                	fsd	fs2,88(sp)
    83f4ce1e:	8ab6                	mv	s5,a3
    83f4ce20:	08b05b63          	blez	a1,83f4ceb6 <obj_project_on_line+0xba>
    83f4ce24:	00170b9b          	addiw	s7,a4,1
    83f4ce28:	84be                	mv	s1,a5
    83f4ce2a:	8a2e                	mv	s4,a1
    83f4ce2c:	89b2                	mv	s3,a2
    83f4ce2e:	893a                	mv	s2,a4
    83f4ce30:	8d2a                	mv	s10,a0
    83f4ce32:	4d81                	li	s11,0
    83f4ce34:	8b5e                	mv	s6,s7
    83f4ce36:	4c85                	li	s9,1
    83f4ce38:	00005797          	auipc	a5,0x5
    83f4ce3c:	4d87b907          	fld	fs2,1240(a5) # 83f52310 <__func__.1+0x118>
    83f4ce40:	fff80c1b          	addiw	s8,a6,-1
    83f4ce44:	04000613          	li	a2,64
    83f4ce48:	85ea                	mv	a1,s10
    83f4ce4a:	0808                	addi	a0,sp,16
    83f4ce4c:	ab4f30ef          	jal	ra,83f40100 <memcpy>
    83f4ce50:	47b6                	lw	a5,76(sp)
    83f4ce52:	0cf94e63          	blt	s2,a5,83f4cf2e <obj_project_on_line+0x132>
    83f4ce56:	4726                	lw	a4,72(sp)
    83f4ce58:	0ce95b63          	bge	s2,a4,83f4cf2e <obj_project_on_line+0x132>
    83f4ce5c:	02000513          	li	a0,32
    83f4ce60:	724010ef          	jal	ra,83f4e584 <pvPortMalloc>
    83f4ce64:	842a                	mv	s0,a0
    83f4ce66:	2a050663          	beqz	a0,83f4d112 <obj_project_on_line+0x316>
    83f4ce6a:	4742                	lw	a4,16(sp)
    83f4ce6c:	e365                	bnez	a4,83f4cf4c <obj_project_on_line+0x150>
    83f4ce6e:	4652                	lw	a2,20(sp)
    83f4ce70:	01040713          	addi	a4,s0,16
    83f4ce74:	c010                	sw	a2,0(s0)
    83f4ce76:	47f2                	lw	a5,28(sp)
    83f4ce78:	01b41423          	sh	s11,8(s0)
    83f4ce7c:	9fb1                	addw	a5,a5,a2
    83f4ce7e:	c05c                	sw	a5,4(s0)
    83f4ce80:	0009b783          	ld	a5,0(s3)
    83f4ce84:	01343c23          	sd	s3,24(s0)
    83f4ce88:	e81c                	sd	a5,16(s0)
    83f4ce8a:	e798                	sd	a4,8(a5)
    83f4ce8c:	00e9b023          	sd	a4,0(s3)
    83f4ce90:	000aa783          	lw	a5,0(s5)
    83f4ce94:	4726                	lw	a4,72(sp)
    83f4ce96:	2785                	addiw	a5,a5,1
    83f4ce98:	00faa023          	sw	a5,0(s5)
    83f4ce9c:	409c                	lw	a5,0(s1)
    83f4ce9e:	0007059b          	sext.w	a1,a4
    83f4cea2:	0007861b          	sext.w	a2,a5
    83f4cea6:	08b64263          	blt	a2,a1,83f4cf2a <obj_project_on_line+0x12e>
    83f4ceaa:	c098                	sw	a4,0(s1)
    83f4ceac:	2d85                	addiw	s11,s11,1
    83f4ceae:	040d0d13          	addi	s10,s10,64
    83f4ceb2:	f94d99e3          	bne	s11,s4,83f4ce44 <obj_project_on_line+0x48>
    83f4ceb6:	000aa503          	lw	a0,0(s5)
    83f4ceba:	60ee                	ld	ra,216(sp)
    83f4cebc:	644e                	ld	s0,208(sp)
    83f4cebe:	64ae                	ld	s1,200(sp)
    83f4cec0:	690e                	ld	s2,192(sp)
    83f4cec2:	79ea                	ld	s3,184(sp)
    83f4cec4:	7a4a                	ld	s4,176(sp)
    83f4cec6:	7aaa                	ld	s5,168(sp)
    83f4cec8:	7b0a                	ld	s6,160(sp)
    83f4ceca:	6bea                	ld	s7,152(sp)
    83f4cecc:	6c4a                	ld	s8,144(sp)
    83f4cece:	6caa                	ld	s9,136(sp)
    83f4ced0:	6d0a                	ld	s10,128(sp)
    83f4ced2:	7de6                	ld	s11,120(sp)
    83f4ced4:	3426                	fld	fs0,104(sp)
    83f4ced6:	3486                	fld	fs1,96(sp)
    83f4ced8:	2966                	fld	fs2,88(sp)
    83f4ceda:	612d                	addi	sp,sp,224
    83f4cedc:	8082                	ret
    83f4cede:	4762                	lw	a4,24(sp)
    83f4cee0:	5612                	lw	a2,36(sp)
    83f4cee2:	00c707bb          	addw	a5,a4,a2
    83f4cee6:	0cf95163          	bge	s2,a5,83f4cfa8 <obj_project_on_line+0x1ac>
    83f4ceea:	45d2                	lw	a1,20(sp)
    83f4ceec:	01040613          	addi	a2,s0,16
    83f4cef0:	c00c                	sw	a1,0(s0)
    83f4cef2:	4772                	lw	a4,28(sp)
    83f4cef4:	01b41423          	sh	s11,8(s0)
    83f4cef8:	9f2d                	addw	a4,a4,a1
    83f4cefa:	c058                	sw	a4,4(s0)
    83f4cefc:	0009b703          	ld	a4,0(s3)
    83f4cf00:	01343c23          	sd	s3,24(s0)
    83f4cf04:	e818                	sd	a4,16(s0)
    83f4cf06:	e710                	sd	a2,8(a4)
    83f4cf08:	00c9b023          	sd	a2,0(s3)
    83f4cf0c:	000aa703          	lw	a4,0(s5)
    83f4cf10:	2705                	addiw	a4,a4,1
    83f4cf12:	00eaa023          	sw	a4,0(s5)
    83f4cf16:	0127d563          	bge	a5,s2,83f4cf20 <obj_project_on_line+0x124>
    83f4cf1a:	4762                	lw	a4,24(sp)
    83f4cf1c:	5782                	lw	a5,32(sp)
    83f4cf1e:	9fb9                	addw	a5,a5,a4
    83f4cf20:	4098                	lw	a4,0(s1)
    83f4cf22:	0007061b          	sext.w	a2,a4
    83f4cf26:	f8c7d2e3          	bge	a5,a2,83f4ceaa <obj_project_on_line+0xae>
    83f4cf2a:	873e                	mv	a4,a5
    83f4cf2c:	bfbd                	j	83f4ceaa <obj_project_on_line+0xae>
    83f4cf2e:	885a                	mv	a6,s6
    83f4cf30:	00fbd363          	bge	s7,a5,83f4cf36 <obj_project_on_line+0x13a>
    83f4cf34:	883e                	mv	a6,a5
    83f4cf36:	409c                	lw	a5,0(s1)
    83f4cf38:	0008061b          	sext.w	a2,a6
    83f4cf3c:	0007871b          	sext.w	a4,a5
    83f4cf40:	00c75363          	bge	a4,a2,83f4cf46 <obj_project_on_line+0x14a>
    83f4cf44:	883e                	mv	a6,a5
    83f4cf46:	0104a023          	sw	a6,0(s1)
    83f4cf4a:	b78d                	j	83f4ceac <obj_project_on_line+0xb0>
    83f4cf4c:	ffe7079b          	addiw	a5,a4,-2
    83f4cf50:	9bf5                	andi	a5,a5,-3
    83f4cf52:	2781                	sext.w	a5,a5
    83f4cf54:	cb89                	beqz	a5,83f4cf66 <obj_project_on_line+0x16a>
    83f4cf56:	f99704e3          	beq	a4,s9,83f4cede <obj_project_on_line+0xe2>
    83f4cf5a:	478d                	li	a5,3
    83f4cf5c:	0ef70563          	beq	a4,a5,83f4d046 <obj_project_on_line+0x24a>
    83f4cf60:	78a010ef          	jal	ra,83f4e6ea <vPortFree>
    83f4cf64:	b7a1                	j	83f4ceac <obj_project_on_line+0xb0>
    83f4cf66:	4752                	lw	a4,20(sp)
    83f4cf68:	c018                	sw	a4,0(s0)
    83f4cf6a:	47f2                	lw	a5,28(sp)
    83f4cf6c:	01b41423          	sh	s11,8(s0)
    83f4cf70:	9fb9                	addw	a5,a5,a4
    83f4cf72:	c05c                	sw	a5,4(s0)
    83f4cf74:	4098                	lw	a4,0(s1)
    83f4cf76:	47a6                	lw	a5,72(sp)
    83f4cf78:	0007061b          	sext.w	a2,a4
    83f4cf7c:	0007859b          	sext.w	a1,a5
    83f4cf80:	00b65363          	bge	a2,a1,83f4cf86 <obj_project_on_line+0x18a>
    83f4cf84:	87ba                	mv	a5,a4
    83f4cf86:	c09c                	sw	a5,0(s1)
    83f4cf88:	0009b703          	ld	a4,0(s3)
    83f4cf8c:	01040793          	addi	a5,s0,16
    83f4cf90:	01343c23          	sd	s3,24(s0)
    83f4cf94:	e818                	sd	a4,16(s0)
    83f4cf96:	e71c                	sd	a5,8(a4)
    83f4cf98:	00f9b023          	sd	a5,0(s3)
    83f4cf9c:	000aa783          	lw	a5,0(s5)
    83f4cfa0:	2785                	addiw	a5,a5,1
    83f4cfa2:	00faa023          	sw	a5,0(s5)
    83f4cfa6:	b719                	j	83f4ceac <obj_project_on_line+0xb0>
    83f4cfa8:	5582                	lw	a1,32(sp)
    83f4cfaa:	9f2d                	addw	a4,a4,a1
    83f4cfac:	40c705bb          	subw	a1,a4,a2
    83f4cfb0:	f2b95de3          	bge	s2,a1,83f4ceea <obj_project_on_line+0xee>
    83f4cfb4:	02000513          	li	a0,32
    83f4cfb8:	e42e                	sd	a1,8(sp)
    83f4cfba:	c22e                	sw	a1,4(sp)
    83f4cfbc:	5c8010ef          	jal	ra,83f4e584 <pvPortMalloc>
    83f4cfc0:	4712                	lw	a4,4(sp)
    83f4cfc2:	65a2                	ld	a1,8(sp)
    83f4cfc4:	1c050f63          	beqz	a0,83f4d1a2 <obj_project_on_line+0x3a6>
    83f4cfc8:	4352                	lw	t1,20(sp)
    83f4cfca:	030d9613          	slli	a2,s11,0x30
    83f4cfce:	9241                	srli	a2,a2,0x30
    83f4cfd0:	00642023          	sw	t1,0(s0)
    83f4cfd4:	5792                	lw	a5,36(sp)
    83f4cfd6:	01040893          	addi	a7,s0,16
    83f4cfda:	01050813          	addi	a6,a0,16
    83f4cfde:	006787bb          	addw	a5,a5,t1
    83f4cfe2:	c05c                	sw	a5,4(s0)
    83f4cfe4:	4372                	lw	t1,28(sp)
    83f4cfe6:	47d2                	lw	a5,20(sp)
    83f4cfe8:	006787bb          	addw	a5,a5,t1
    83f4cfec:	c15c                	sw	a5,4(a0)
    83f4cfee:	5312                	lw	t1,36(sp)
    83f4cff0:	406787bb          	subw	a5,a5,t1
    83f4cff4:	c11c                	sw	a5,0(a0)
    83f4cff6:	00c41423          	sh	a2,8(s0)
    83f4cffa:	00c51423          	sh	a2,8(a0)
    83f4cffe:	0009b783          	ld	a5,0(s3)
    83f4d002:	01343c23          	sd	s3,24(s0)
    83f4d006:	e81c                	sd	a5,16(s0)
    83f4d008:	0117b423          	sd	a7,8(a5)
    83f4d00c:	0119b023          	sd	a7,0(s3)
    83f4d010:	000aa783          	lw	a5,0(s5)
    83f4d014:	2785                	addiw	a5,a5,1
    83f4d016:	00faa023          	sw	a5,0(s5)
    83f4d01a:	0009b783          	ld	a5,0(s3)
    83f4d01e:	01353c23          	sd	s3,24(a0)
    83f4d022:	e91c                	sd	a5,16(a0)
    83f4d024:	0107b423          	sd	a6,8(a5)
    83f4d028:	0109b023          	sd	a6,0(s3)
    83f4d02c:	000aa783          	lw	a5,0(s5)
    83f4d030:	2785                	addiw	a5,a5,1
    83f4d032:	00faa023          	sw	a5,0(s5)
    83f4d036:	409c                	lw	a5,0(s1)
    83f4d038:	0007861b          	sext.w	a2,a5
    83f4d03c:	00c5d363          	bge	a1,a2,83f4d042 <obj_project_on_line+0x246>
    83f4d040:	87ba                	mv	a5,a4
    83f4d042:	c09c                	sw	a5,0(s1)
    83f4d044:	b5a5                	j	83f4ceac <obj_project_on_line+0xb0>
    83f4d046:	02012507          	flw	fa0,32(sp)
    83f4d04a:	42050553          	fcvt.d.s	fa0,fa0
    83f4d04e:	a53f30ef          	jal	ra,83f40aa0 <round>
    83f4d052:	22a50453          	fmv.d	fs0,fa0
    83f4d056:	02412507          	flw	fa0,36(sp)
    83f4d05a:	42050553          	fcvt.d.s	fa0,fa0
    83f4d05e:	a43f30ef          	jal	ra,83f40aa0 <round>
    83f4d062:	c20417d3          	fcvt.w.d	a5,fs0,rtz
    83f4d066:	2781                	sext.w	a5,a5
    83f4d068:	0af94763          	blt	s2,a5,83f4d116 <obj_project_on_line+0x31a>
    83f4d06c:	c20517d3          	fcvt.w.d	a5,fa0,rtz
    83f4d070:	02412507          	flw	fa0,36(sp)
    83f4d074:	2781                	sext.w	a5,a5
    83f4d076:	0af95263          	bge	s2,a5,83f4d11a <obj_project_on_line+0x31e>
    83f4d07a:	02012787          	flw	fa5,32(sp)
    83f4d07e:	d0097453          	fcvt.s.w	fs0,s2
    83f4d082:	01412487          	flw	fs1,20(sp)
    83f4d086:	08f57553          	fsub.s	fa0,fa0,fa5
    83f4d08a:	08f47453          	fsub.s	fs0,fs0,fa5
    83f4d08e:	03812787          	flw	fa5,56(sp)
    83f4d092:	18a7f553          	fdiv.s	fa0,fa5,fa0
    83f4d096:	01812787          	flw	fa5,24(sp)
    83f4d09a:	7884f4c3          	fmadd.s	fs1,fs1,fs0,fa5
    83f4d09e:	48a4744b          	fnmsub.s	fs0,fs0,fa0,fs1
    83f4d0a2:	a08497d3          	flt.s	a5,fs1,fs0
    83f4d0a6:	20948553          	fmv.s	fa0,fs1
    83f4d0aa:	e399                	bnez	a5,83f4d0b0 <obj_project_on_line+0x2b4>
    83f4d0ac:	20840553          	fmv.s	fa0,fs0
    83f4d0b0:	42050553          	fcvt.d.s	fa0,fa0
    83f4d0b4:	9edf30ef          	jal	ra,83f40aa0 <round>
    83f4d0b8:	c2051553          	fcvt.w.d	a0,fa0,rtz
    83f4d0bc:	8662                	mv	a2,s8
    83f4d0be:	4581                	li	a1,0
    83f4d0c0:	2501                	sext.w	a0,a0
    83f4d0c2:	507000ef          	jal	ra,83f4ddc8 <clip>
    83f4d0c6:	a09417d3          	flt.s	a5,fs0,fs1
    83f4d0ca:	c008                	sw	a0,0(s0)
    83f4d0cc:	e399                	bnez	a5,83f4d0d2 <obj_project_on_line+0x2d6>
    83f4d0ce:	208404d3          	fmv.s	fs1,fs0
    83f4d0d2:	42048553          	fcvt.d.s	fa0,fs1
    83f4d0d6:	9cbf30ef          	jal	ra,83f40aa0 <round>
    83f4d0da:	c2051553          	fcvt.w.d	a0,fa0,rtz
    83f4d0de:	8662                	mv	a2,s8
    83f4d0e0:	4581                	li	a1,0
    83f4d0e2:	2501                	sext.w	a0,a0
    83f4d0e4:	4e5000ef          	jal	ra,83f4ddc8 <clip>
    83f4d0e8:	c048                	sw	a0,4(s0)
    83f4d0ea:	01b41423          	sh	s11,8(s0)
    83f4d0ee:	0009b703          	ld	a4,0(s3)
    83f4d0f2:	01040793          	addi	a5,s0,16
    83f4d0f6:	01343c23          	sd	s3,24(s0)
    83f4d0fa:	e818                	sd	a4,16(s0)
    83f4d0fc:	e71c                	sd	a5,8(a4)
    83f4d0fe:	00f9b023          	sd	a5,0(s3)
    83f4d102:	000aa783          	lw	a5,0(s5)
    83f4d106:	2785                	addiw	a5,a5,1
    83f4d108:	00faa023          	sw	a5,0(s5)
    83f4d10c:	0164a023          	sw	s6,0(s1)
    83f4d110:	bb71                	j	83f4ceac <obj_project_on_line+0xb0>
    83f4d112:	557d                	li	a0,-1
    83f4d114:	b35d                	j	83f4ceba <obj_project_on_line+0xbe>
    83f4d116:	02412507          	flw	fa0,36(sp)
    83f4d11a:	42050553          	fcvt.d.s	fa0,fa0
    83f4d11e:	983f30ef          	jal	ra,83f40aa0 <round>
    83f4d122:	03012787          	flw	fa5,48(sp)
    83f4d126:	22a50453          	fmv.d	fs0,fa0
    83f4d12a:	420787d3          	fcvt.d.s	fa5,fa5
    83f4d12e:	0327f553          	fadd.d	fa0,fa5,fs2
    83f4d132:	96ff30ef          	jal	ra,83f40aa0 <round>
    83f4d136:	c20417d3          	fcvt.w.d	a5,fs0,rtz
    83f4d13a:	2781                	sext.w	a5,a5
    83f4d13c:	02f95d63          	bge	s2,a5,83f4d176 <obj_project_on_line+0x37a>
    83f4d140:	01412487          	flw	fs1,20(sp)
    83f4d144:	d0097453          	fcvt.s.w	fs0,s2
    83f4d148:	03812707          	flw	fa4,56(sp)
    83f4d14c:	03412787          	flw	fa5,52(sp)
    83f4d150:	03012687          	flw	fa3,48(sp)
    83f4d154:	08d7f653          	fsub.s	fa2,fa5,fa3
    83f4d158:	02412687          	flw	fa3,36(sp)
    83f4d15c:	0887f7d3          	fsub.s	fa5,fa5,fs0
    83f4d160:	08d476d3          	fsub.s	fa3,fs0,fa3
    83f4d164:	18c77453          	fdiv.s	fs0,fa4,fa2
    83f4d168:	01c12707          	flw	fa4,28(sp)
    83f4d16c:	7096f4c3          	fmadd.s	fs1,fa3,fs1,fa4
    83f4d170:	4887f443          	fmadd.s	fs0,fa5,fs0,fs1
    83f4d174:	b73d                	j	83f4d0a2 <obj_project_on_line+0x2a6>
    83f4d176:	c20517d3          	fcvt.w.d	a5,fa0,rtz
    83f4d17a:	01412487          	flw	fs1,20(sp)
    83f4d17e:	d0097453          	fcvt.s.w	fs0,s2
    83f4d182:	2781                	sext.w	a5,a5
    83f4d184:	03812707          	flw	fa4,56(sp)
    83f4d188:	fcf952e3          	bge	s2,a5,83f4d14c <obj_project_on_line+0x350>
    83f4d18c:	02012787          	flw	fa5,32(sp)
    83f4d190:	01812687          	flw	fa3,24(sp)
    83f4d194:	08f477d3          	fsub.s	fa5,fs0,fa5
    83f4d198:	6897f4c3          	fmadd.s	fs1,fa5,fs1,fa3
    83f4d19c:	08e4f453          	fsub.s	fs0,fs1,fa4
    83f4d1a0:	b709                	j	83f4d0a2 <obj_project_on_line+0x2a6>
    83f4d1a2:	8522                	mv	a0,s0
    83f4d1a4:	546010ef          	jal	ra,83f4e6ea <vPortFree>
    83f4d1a8:	557d                	li	a0,-1
    83f4d1aa:	bb01                	j	83f4ceba <obj_project_on_line+0xbe>

0000000083f4d1ac <draw_cmpr_init>:
    83f4d1ac:	7139                	addi	sp,sp,-64
    83f4d1ae:	f822                	sd	s0,48(sp)
    83f4d1b0:	f426                	sd	s1,40(sp)
    83f4d1b2:	f04a                	sd	s2,32(sp)
    83f4d1b4:	ec4e                	sd	s3,24(sp)
    83f4d1b6:	fc06                	sd	ra,56(sp)
    83f4d1b8:	e852                	sd	s4,16(sp)
    83f4d1ba:	e456                	sd	s5,8(sp)
    83f4d1bc:	892e                	mv	s2,a1
    83f4d1be:	842a                	mv	s0,a0
    83f4d1c0:	89b2                	mv	s3,a2
    83f4d1c2:	84b6                	mv	s1,a3
    83f4d1c4:	c1c9                	beqz	a1,83f4d246 <draw_cmpr_init+0x9a>
    83f4d1c6:	00163a13          	seqz	s4,a2
    83f4d1ca:	8ad2                	mv	s5,s4
    83f4d1cc:	04800613          	li	a2,72
    83f4d1d0:	4581                	li	a1,0
    83f4d1d2:	8522                	mv	a0,s0
    83f4d1d4:	da9fe0ef          	jal	ra,83f4bf7c <memset>
    83f4d1d8:	4098                	lw	a4,0(s1)
    83f4d1da:	478d                	li	a5,3
    83f4d1dc:	1782                	slli	a5,a5,0x20
    83f4d1de:	c018                	sw	a4,0(s0)
    83f4d1e0:	40d8                	lw	a4,4(s1)
    83f4d1e2:	0799                	addi	a5,a5,6
    83f4d1e4:	ec1c                	sd	a5,24(s0)
    83f4d1e6:	c058                	sw	a4,4(s0)
    83f4d1e8:	4705                	li	a4,1
    83f4d1ea:	00e40a23          	sb	a4,20(s0)
    83f4d1ee:	4488                	lw	a0,8(s1)
    83f4d1f0:	d008                	sw	a0,32(s0)
    83f4d1f2:	28a010ef          	jal	ra,83f4e47c <osd_cmpr_get_pixel_sz>
    83f4d1f6:	d048                	sw	a0,36(s0)
    83f4d1f8:	0004a623          	sw	zero,12(s1)
    83f4d1fc:	8522                	mv	a0,s0
    83f4d1fe:	21a010ef          	jal	ra,83f4e418 <osd_cmpr_frame_init>
    83f4d202:	4601                	li	a2,0
    83f4d204:	020a8563          	beqz	s5,83f4d22e <draw_cmpr_init+0x82>
    83f4d208:	86d2                	mv	a3,s4
    83f4d20a:	85ca                	mv	a1,s2
    83f4d20c:	04840513          	addi	a0,s0,72
    83f4d210:	3d5000ef          	jal	ra,83f4dde4 <init_stream>
    83f4d214:	4791                	li	a5,4
    83f4d216:	d43c                	sw	a5,104(s0)
    83f4d218:	57fd                	li	a5,-1
    83f4d21a:	d07c                	sw	a5,100(s0)
    83f4d21c:	70e2                	ld	ra,56(sp)
    83f4d21e:	7442                	ld	s0,48(sp)
    83f4d220:	74a2                	ld	s1,40(sp)
    83f4d222:	7902                	ld	s2,32(sp)
    83f4d224:	69e2                	ld	s3,24(sp)
    83f4d226:	6a42                	ld	s4,16(sp)
    83f4d228:	6aa2                	ld	s5,8(sp)
    83f4d22a:	6121                	addi	sp,sp,64
    83f4d22c:	8082                	ret
    83f4d22e:	854a                	mv	a0,s2
    83f4d230:	85a2                	mv	a1,s0
    83f4d232:	7a7000ef          	jal	ra,83f4e1d8 <osd_cmpr_enc_header>
    83f4d236:	256010ef          	jal	ra,83f4e48c <osd_cmpr_get_header_sz>
    83f4d23a:	0005061b          	sext.w	a2,a0
    83f4d23e:	9932                	add	s2,s2,a2
    83f4d240:	40c9863b          	subw	a2,s3,a2
    83f4d244:	b7d1                	j	83f4d208 <draw_cmpr_init+0x5c>
    83f4d246:	4a05                	li	s4,1
    83f4d248:	4a85                	li	s5,1
    83f4d24a:	b749                	j	83f4d1cc <draw_cmpr_init+0x20>

0000000083f4d24c <draw_cmpr_pixel>:
    83f4d24c:	711d                	addi	sp,sp,-96
    83f4d24e:	ec86                	sd	ra,88(sp)
    83f4d250:	e8a2                	sd	s0,80(sp)
    83f4d252:	e4a6                	sd	s1,72(sp)
    83f4d254:	e0ca                	sd	s2,64(sp)
    83f4d256:	fc4e                	sd	s3,56(sp)
    83f4d258:	f852                	sd	s4,48(sp)
    83f4d25a:	f456                	sd	s5,40(sp)
    83f4d25c:	87ae                	mv	a5,a1
    83f4d25e:	528c                	lw	a1,32(a3)
    83f4d260:	8436                	mv	s0,a3
    83f4d262:	84b2                	mv	s1,a2
    83f4d264:	06468913          	addi	s2,a3,100
    83f4d268:	00f11f23          	sh	a5,30(sp)
    83f4d26c:	06840993          	addi	s3,s0,104
    83f4d270:	41b000ef          	jal	ra,83f4de8a <get_color>
    83f4d274:	06c40a13          	addi	s4,s0,108
    83f4d278:	04840a93          	addi	s5,s0,72
    83f4d27c:	8826                	mv	a6,s1
    83f4d27e:	01e10793          	addi	a5,sp,30
    83f4d282:	e456                	sd	s5,8(sp)
    83f4d284:	e022                	sd	s0,0(sp)
    83f4d286:	04000893          	li	a7,64
    83f4d28a:	8752                	mv	a4,s4
    83f4d28c:	86ce                	mv	a3,s3
    83f4d28e:	864a                	mv	a2,s2
    83f4d290:	06040593          	addi	a1,s0,96
    83f4d294:	84aa                	mv	s1,a0
    83f4d296:	0a6010ef          	jal	ra,83f4e33c <osd_cmpr_enc_const_pixel>
    83f4d29a:	01e15783          	lhu	a5,30(sp)
    83f4d29e:	c385                	beqz	a5,83f4d2be <draw_cmpr_pixel+0x72>
    83f4d2a0:	04000793          	li	a5,64
    83f4d2a4:	88d6                	mv	a7,s5
    83f4d2a6:	8822                	mv	a6,s0
    83f4d2a8:	01e10713          	addi	a4,sp,30
    83f4d2ac:	86d2                	mv	a3,s4
    83f4d2ae:	864e                	mv	a2,s3
    83f4d2b0:	85ca                	mv	a1,s2
    83f4d2b2:	8526                	mv	a0,s1
    83f4d2b4:	7f9000ef          	jal	ra,83f4e2ac <osd_cmpr_enc_followed_run>
    83f4d2b8:	01e15783          	lhu	a5,30(sp)
    83f4d2bc:	f3f5                	bnez	a5,83f4d2a0 <draw_cmpr_pixel+0x54>
    83f4d2be:	60e6                	ld	ra,88(sp)
    83f4d2c0:	6446                	ld	s0,80(sp)
    83f4d2c2:	64a6                	ld	s1,72(sp)
    83f4d2c4:	6906                	ld	s2,64(sp)
    83f4d2c6:	79e2                	ld	s3,56(sp)
    83f4d2c8:	7a42                	ld	s4,48(sp)
    83f4d2ca:	7aa2                	ld	s5,40(sp)
    83f4d2cc:	6125                	addi	sp,sp,96
    83f4d2ce:	8082                	ret

0000000083f4d2d0 <draw_cmpr_canvas_line>:
    83f4d2d0:	7119                	addi	sp,sp,-128
    83f4d2d2:	f4a6                	sd	s1,104(sp)
    83f4d2d4:	f0ca                	sd	s2,96(sp)
    83f4d2d6:	e0da                	sd	s6,64(sp)
    83f4d2d8:	fc5e                	sd	s7,56(sp)
    83f4d2da:	f06a                	sd	s10,32(sp)
    83f4d2dc:	ec6e                	sd	s11,24(sp)
    83f4d2de:	fc86                	sd	ra,120(sp)
    83f4d2e0:	f8a2                	sd	s0,112(sp)
    83f4d2e2:	ecce                	sd	s3,88(sp)
    83f4d2e4:	e8d2                	sd	s4,80(sp)
    83f4d2e6:	e4d6                	sd	s5,72(sp)
    83f4d2e8:	f862                	sd	s8,48(sp)
    83f4d2ea:	f466                	sd	s9,40(sp)
    83f4d2ec:	671c                	ld	a5,8(a4)
    83f4d2ee:	e42e                	sd	a1,8(sp)
    83f4d2f0:	8b3a                	mv	s6,a4
    83f4d2f2:	84aa                	mv	s1,a0
    83f4d2f4:	8bb2                	mv	s7,a2
    83f4d2f6:	8d36                	mv	s10,a3
    83f4d2f8:	fd878d93          	addi	s11,a5,-40
    83f4d2fc:	4901                	li	s2,0
    83f4d2fe:	c399                	beqz	a5,83f4d304 <draw_cmpr_canvas_line+0x34>
    83f4d300:	0087b903          	ld	s2,8(a5)
    83f4d304:	4981                	li	s3,0
    83f4d306:	001d0a1b          	addiw	s4,s10,1
    83f4d30a:	16fb0663          	beq	s6,a5,83f4d476 <draw_cmpr_canvas_line+0x1a6>
    83f4d30e:	000dc783          	lbu	a5,0(s11)
    83f4d312:	002dd583          	lhu	a1,2(s11)
    83f4d316:	c39d                	beqz	a5,83f4d33c <draw_cmpr_canvas_line+0x6c>
    83f4d318:	14059563          	bnez	a1,83f4d462 <draw_cmpr_canvas_line+0x192>
    83f4d31c:	2985                	addiw	s3,s3,1
    83f4d31e:	fd890d93          	addi	s11,s2,-40
    83f4d322:	4781                	li	a5,0
    83f4d324:	00090463          	beqz	s2,83f4d32c <draw_cmpr_canvas_line+0x5c>
    83f4d328:	00893783          	ld	a5,8(s2)
    83f4d32c:	152b0563          	beq	s6,s2,83f4d476 <draw_cmpr_canvas_line+0x1a6>
    83f4d330:	893e                	mv	s2,a5
    83f4d332:	000dc783          	lbu	a5,0(s11)
    83f4d336:	002dd583          	lhu	a1,2(s11)
    83f4d33a:	fff9                	bnez	a5,83f4d318 <draw_cmpr_canvas_line+0x48>
    83f4d33c:	001dc703          	lbu	a4,1(s11)
    83f4d340:	010db403          	ld	s0,16(s11)
    83f4d344:	0005879b          	sext.w	a5,a1
    83f4d348:	e355                	bnez	a4,83f4d3ec <draw_cmpr_canvas_line+0x11c>
    83f4d34a:	013beab3          	or	s5,s7,s3
    83f4d34e:	4301                	li	t1,0
    83f4d350:	c7c1                	beqz	a5,83f4d3d8 <draw_cmpr_canvas_line+0x108>
    83f4d352:	026d053b          	mulw	a0,s10,t1
    83f4d356:	406785bb          	subw	a1,a5,t1
    83f4d35a:	fff5861b          	addiw	a2,a1,-1
    83f4d35e:	9522                	add	a0,a0,s0
    83f4d360:	07a05863          	blez	s10,83f4d3d0 <draw_cmpr_canvas_line+0x100>
    83f4d364:	4801                	li	a6,0
    83f4d366:	01a508b3          	add	a7,a0,s10
    83f4d36a:	010507b3          	add	a5,a0,a6
    83f4d36e:	0007c583          	lbu	a1,0(a5)
    83f4d372:	010887b3          	add	a5,a7,a6
    83f4d376:	ce01                	beqz	a2,83f4d38e <draw_cmpr_canvas_line+0xbe>
    83f4d378:	4701                	li	a4,0
    83f4d37a:	a021                	j	83f4d382 <draw_cmpr_canvas_line+0xb2>
    83f4d37c:	2705                	addiw	a4,a4,1
    83f4d37e:	00c70863          	beq	a4,a2,83f4d38e <draw_cmpr_canvas_line+0xbe>
    83f4d382:	0007c683          	lbu	a3,0(a5)
    83f4d386:	97ea                	add	a5,a5,s10
    83f4d388:	feb68ae3          	beq	a3,a1,83f4d37c <draw_cmpr_canvas_line+0xac>
    83f4d38c:	863a                	mv	a2,a4
    83f4d38e:	0805                	addi	a6,a6,1
    83f4d390:	0008079b          	sext.w	a5,a6
    83f4d394:	fda7cbe3          	blt	a5,s10,83f4d36a <draw_cmpr_canvas_line+0x9a>
    83f4d398:	0016059b          	addiw	a1,a2,1
    83f4d39c:	00658cbb          	addw	s9,a1,t1
    83f4d3a0:	01536633          	or	a2,t1,s5
    83f4d3a4:	2601                	sext.w	a2,a2
    83f4d3a6:	15c2                	slli	a1,a1,0x30
    83f4d3a8:	86a6                	mv	a3,s1
    83f4d3aa:	00163613          	seqz	a2,a2
    83f4d3ae:	91c1                	srli	a1,a1,0x30
    83f4d3b0:	e9dff0ef          	jal	ra,83f4d24c <draw_cmpr_pixel>
    83f4d3b4:	002dd783          	lhu	a5,2(s11)
    83f4d3b8:	00fcde63          	bge	s9,a5,83f4d3d4 <draw_cmpr_canvas_line+0x104>
    83f4d3bc:	8366                	mv	t1,s9
    83f4d3be:	026d053b          	mulw	a0,s10,t1
    83f4d3c2:	406785bb          	subw	a1,a5,t1
    83f4d3c6:	fff5861b          	addiw	a2,a1,-1
    83f4d3ca:	9522                	add	a0,a0,s0
    83f4d3cc:	f9a04ce3          	bgtz	s10,83f4d364 <draw_cmpr_canvas_line+0x94>
    83f4d3d0:	8cbe                	mv	s9,a5
    83f4d3d2:	b7f9                	j	83f4d3a0 <draw_cmpr_canvas_line+0xd0>
    83f4d3d4:	010db403          	ld	s0,16(s11)
    83f4d3d8:	008da783          	lw	a5,8(s11)
    83f4d3dc:	03a787bb          	mulw	a5,a5,s10
    83f4d3e0:	1782                	slli	a5,a5,0x20
    83f4d3e2:	9381                	srli	a5,a5,0x20
    83f4d3e4:	943e                	add	s0,s0,a5
    83f4d3e6:	008db823          	sd	s0,16(s11)
    83f4d3ea:	bf0d                	j	83f4d31c <draw_cmpr_canvas_line+0x4c>
    83f4d3ec:	c7a1                	beqz	a5,83f4d434 <draw_cmpr_canvas_line+0x164>
    83f4d3ee:	00140c13          	addi	s8,s0,1
    83f4d3f2:	013beab3          	or	s5,s7,s3
    83f4d3f6:	4401                	li	s0,0
    83f4d3f8:	fffc4c83          	lbu	s9,-1(s8)
    83f4d3fc:	01546633          	or	a2,s0,s5
    83f4d400:	408785bb          	subw	a1,a5,s0
    83f4d404:	2c85                	addiw	s9,s9,1
    83f4d406:	000c881b          	sext.w	a6,s9
    83f4d40a:	8562                	mv	a0,s8
    83f4d40c:	86a6                	mv	a3,s1
    83f4d40e:	00163613          	seqz	a2,a2
    83f4d412:	0105d363          	bge	a1,a6,83f4d418 <draw_cmpr_canvas_line+0x148>
    83f4d416:	8cae                	mv	s9,a1
    83f4d418:	030c9593          	slli	a1,s9,0x30
    83f4d41c:	91c1                	srli	a1,a1,0x30
    83f4d41e:	e2fff0ef          	jal	ra,83f4d24c <draw_cmpr_pixel>
    83f4d422:	002dd783          	lhu	a5,2(s11)
    83f4d426:	008c843b          	addw	s0,s9,s0
    83f4d42a:	9c52                	add	s8,s8,s4
    83f4d42c:	fcf446e3          	blt	s0,a5,83f4d3f8 <draw_cmpr_canvas_line+0x128>
    83f4d430:	010db403          	ld	s0,16(s11)
    83f4d434:	008db683          	ld	a3,8(s11)
    83f4d438:	018dd783          	lhu	a5,24(s11)
    83f4d43c:	6622                	ld	a2,8(sp)
    83f4d43e:	0006d703          	lhu	a4,0(a3)
    83f4d442:	079a                	slli	a5,a5,0x6
    83f4d444:	97b2                	add	a5,a5,a2
    83f4d446:	943a                	add	s0,s0,a4
    83f4d448:	008db823          	sd	s0,16(s11)
    83f4d44c:	4f98                	lw	a4,24(a5)
    83f4d44e:	0006d683          	lhu	a3,0(a3)
    83f4d452:	9f35                	addw	a4,a4,a3
    83f4d454:	cf98                	sw	a4,24(a5)
    83f4d456:	008db783          	ld	a5,8(s11)
    83f4d45a:	0789                	addi	a5,a5,2
    83f4d45c:	00fdb423          	sd	a5,8(s11)
    83f4d460:	bd75                	j	83f4d31c <draw_cmpr_canvas_line+0x4c>
    83f4d462:	013be633          	or	a2,s7,s3
    83f4d466:	86a6                	mv	a3,s1
    83f4d468:	00163613          	seqz	a2,a2
    83f4d46c:	010d8513          	addi	a0,s11,16
    83f4d470:	dddff0ef          	jal	ra,83f4d24c <draw_cmpr_pixel>
    83f4d474:	b565                	j	83f4d31c <draw_cmpr_canvas_line+0x4c>
    83f4d476:	70e6                	ld	ra,120(sp)
    83f4d478:	7446                	ld	s0,112(sp)
    83f4d47a:	74a6                	ld	s1,104(sp)
    83f4d47c:	7906                	ld	s2,96(sp)
    83f4d47e:	69e6                	ld	s3,88(sp)
    83f4d480:	6a46                	ld	s4,80(sp)
    83f4d482:	6aa6                	ld	s5,72(sp)
    83f4d484:	6b06                	ld	s6,64(sp)
    83f4d486:	7be2                	ld	s7,56(sp)
    83f4d488:	7c42                	ld	s8,48(sp)
    83f4d48a:	7ca2                	ld	s9,40(sp)
    83f4d48c:	7d02                	ld	s10,32(sp)
    83f4d48e:	6de2                	ld	s11,24(sp)
    83f4d490:	6109                	addi	sp,sp,128
    83f4d492:	8082                	ret

0000000083f4d494 <plot_segments_on_line>:
    83f4d494:	00012e17          	auipc	t3,0x12
    83f4d498:	7ade0e13          	addi	t3,t3,1965 # 83f5fc41 <slc_init.1>
    83f4d49c:	000e4e83          	lbu	t4,0(t3)
    83f4d4a0:	7135                	addi	sp,sp,-160
    83f4d4a2:	e526                	sd	s1,136(sp)
    83f4d4a4:	fcce                	sd	s3,120(sp)
    83f4d4a6:	f4d6                	sd	s5,104(sp)
    83f4d4a8:	e8e2                	sd	s8,80(sp)
    83f4d4aa:	ed06                	sd	ra,152(sp)
    83f4d4ac:	e922                	sd	s0,144(sp)
    83f4d4ae:	e14a                	sd	s2,128(sp)
    83f4d4b0:	f8d2                	sd	s4,112(sp)
    83f4d4b2:	f0da                	sd	s6,96(sp)
    83f4d4b4:	ecde                	sd	s7,88(sp)
    83f4d4b6:	e4e6                	sd	s9,72(sp)
    83f4d4b8:	e0ea                	sd	s10,64(sp)
    83f4d4ba:	fc6e                	sd	s11,56(sp)
    83f4d4bc:	d602                	sw	zero,44(sp)
    83f4d4be:	e836                	sd	a3,16(sp)
    83f4d4c0:	ec3a                	sd	a4,24(sp)
    83f4d4c2:	8aaa                	mv	s5,a0
    83f4d4c4:	84b2                	mv	s1,a2
    83f4d4c6:	8c42                	mv	s8,a6
    83f4d4c8:	89c6                	mv	s3,a7
    83f4d4ca:	000e9b63          	bnez	t4,83f4d4e0 <plot_segments_on_line+0x4c>
    83f4d4ce:	00010717          	auipc	a4,0x10
    83f4d4d2:	00270713          	addi	a4,a4,2 # 83f5d4d0 <slc_list_head>
    83f4d4d6:	e718                	sd	a4,8(a4)
    83f4d4d8:	e318                	sd	a4,0(a4)
    83f4d4da:	4705                	li	a4,1
    83f4d4dc:	00ee0023          	sb	a4,0(t3)
    83f4d4e0:	6742                	ld	a4,16(sp)
    83f4d4e2:	8826                	mv	a6,s1
    83f4d4e4:	1074                	addi	a3,sp,44
    83f4d4e6:	00010617          	auipc	a2,0x10
    83f4d4ea:	fea60613          	addi	a2,a2,-22 # 83f5d4d0 <slc_list_head>
    83f4d4ee:	8556                	mv	a0,s5
    83f4d4f0:	90dff0ef          	jal	ra,83f4cdfc <obj_project_on_line>
    83f4d4f4:	24050563          	beqz	a0,83f4d73e <plot_segments_on_line+0x2aa>
    83f4d4f8:	4b81                	li	s7,0
    83f4d4fa:	5dfd                	li	s11,-1
    83f4d4fc:	00010d17          	auipc	s10,0x10
    83f4d500:	fd4d0d13          	addi	s10,s10,-44 # 83f5d4d0 <slc_list_head>
    83f4d504:	4a05                	li	s4,1
    83f4d506:	0c905b63          	blez	s1,83f4d5dc <plot_segments_on_line+0x148>
    83f4d50a:	57b2                	lw	a5,44(sp)
    83f4d50c:	37fd                	addiw	a5,a5,-1
    83f4d50e:	0e0dc663          	bltz	s11,83f4d5fa <plot_segments_on_line+0x166>
    83f4d512:	00492c83          	lw	s9,4(s2)
    83f4d516:	1afdca63          	blt	s11,a5,83f4d6ca <plot_segments_on_line+0x236>
    83f4d51a:	03800513          	li	a0,56
    83f4d51e:	066010ef          	jal	ra,83f4e584 <pvPortMalloc>
    83f4d522:	842a                	mv	s0,a0
    83f4d524:	417c87bb          	subw	a5,s9,s7
    83f4d528:	c955                	beqz	a0,83f4d5dc <plot_segments_on_line+0x148>
    83f4d52a:	01441023          	sh	s4,0(s0)
    83f4d52e:	00f41123          	sh	a5,2(s0)
    83f4d532:	00042423          	sw	zero,8(s0)
    83f4d536:	01342823          	sw	s3,16(s0)
    83f4d53a:	00041c23          	sh	zero,24(s0)
    83f4d53e:	587d                	li	a6,-1
    83f4d540:	008d3703          	ld	a4,8(s10)
    83f4d544:	4781                	li	a5,0
    83f4d546:	ff070613          	addi	a2,a4,-16
    83f4d54a:	c311                	beqz	a4,83f4d54e <plot_segments_on_line+0xba>
    83f4d54c:	671c                	ld	a5,8(a4)
    83f4d54e:	03a70d63          	beq	a4,s10,83f4d588 <plot_segments_on_line+0xf4>
    83f4d552:	020d8b63          	beqz	s11,83f4d588 <plot_segments_on_line+0xf4>
    83f4d556:	4681                	li	a3,0
    83f4d558:	0016871b          	addiw	a4,a3,1
    83f4d55c:	ff078613          	addi	a2,a5,-16
    83f4d560:	cf89                	beqz	a5,83f4d57a <plot_segments_on_line+0xe6>
    83f4d562:	6794                	ld	a3,8(a5)
    83f4d564:	03a78263          	beq	a5,s10,83f4d588 <plot_segments_on_line+0xf4>
    83f4d568:	87b6                	mv	a5,a3
    83f4d56a:	01b70f63          	beq	a4,s11,83f4d588 <plot_segments_on_line+0xf4>
    83f4d56e:	86ba                	mv	a3,a4
    83f4d570:	0016871b          	addiw	a4,a3,1
    83f4d574:	ff078613          	addi	a2,a5,-16
    83f4d578:	f7ed                	bnez	a5,83f4d562 <plot_segments_on_line+0xce>
    83f4d57a:	21b70163          	beq	a4,s11,83f4d77c <plot_segments_on_line+0x2e8>
    83f4d57e:	0026871b          	addiw	a4,a3,2
    83f4d582:	5641                	li	a2,-16
    83f4d584:	ffb715e3          	bne	a4,s11,83f4d56e <plot_segments_on_line+0xda>
    83f4d588:	00865783          	lhu	a5,8(a2)
    83f4d58c:	079a                	slli	a5,a5,0x6
    83f4d58e:	97d6                	add	a5,a5,s5
    83f4d590:	4398                	lw	a4,0(a5)
    83f4d592:	3779                	addiw	a4,a4,-2
    83f4d594:	9b75                	andi	a4,a4,-3
    83f4d596:	2701                	sext.w	a4,a4
    83f4d598:	cb65                	beqz	a4,83f4d688 <plot_segments_on_line+0x1f4>
    83f4d59a:	5b9c                	lw	a5,48(a5)
    83f4d59c:	c81c                	sw	a5,16(s0)
    83f4d59e:	85ee                	mv	a1,s11
    83f4d5a0:	8666                	mv	a2,s9
    83f4d5a2:	856a                	mv	a0,s10
    83f4d5a4:	e442                	sd	a6,8(sp)
    83f4d5a6:	f66ff0ef          	jal	ra,83f4cd0c <recycle_obj_slices>
    83f4d5aa:	57b2                	lw	a5,44(sp)
    83f4d5ac:	6822                	ld	a6,8(sp)
    83f4d5ae:	8be6                	mv	s7,s9
    83f4d5b0:	40a80dbb          	subw	s11,a6,a0
    83f4d5b4:	40a7853b          	subw	a0,a5,a0
    83f4d5b8:	d62a                	sw	a0,44(sp)
    83f4d5ba:	120dd263          	bgez	s11,83f4d6de <plot_segments_on_line+0x24a>
    83f4d5be:	501c                	lw	a5,32(s0)
    83f4d5c0:	02840713          	addi	a4,s0,40
    83f4d5c4:	2785                	addiw	a5,a5,1
    83f4d5c6:	d01c                	sw	a5,32(s0)
    83f4d5c8:	000c3783          	ld	a5,0(s8)
    83f4d5cc:	03843823          	sd	s8,48(s0)
    83f4d5d0:	f41c                	sd	a5,40(s0)
    83f4d5d2:	e798                	sd	a4,8(a5)
    83f4d5d4:	00ec3023          	sd	a4,0(s8)
    83f4d5d8:	f29cc9e3          	blt	s9,s1,83f4d50a <plot_segments_on_line+0x76>
    83f4d5dc:	60ea                	ld	ra,152(sp)
    83f4d5de:	644a                	ld	s0,144(sp)
    83f4d5e0:	64aa                	ld	s1,136(sp)
    83f4d5e2:	690a                	ld	s2,128(sp)
    83f4d5e4:	79e6                	ld	s3,120(sp)
    83f4d5e6:	7a46                	ld	s4,112(sp)
    83f4d5e8:	7aa6                	ld	s5,104(sp)
    83f4d5ea:	7b06                	ld	s6,96(sp)
    83f4d5ec:	6be6                	ld	s7,88(sp)
    83f4d5ee:	6c46                	ld	s8,80(sp)
    83f4d5f0:	6ca6                	ld	s9,72(sp)
    83f4d5f2:	6d06                	ld	s10,64(sp)
    83f4d5f4:	7de2                	ld	s11,56(sp)
    83f4d5f6:	610d                	addi	sp,sp,160
    83f4d5f8:	8082                	ret
    83f4d5fa:	000d3683          	ld	a3,0(s10)
    83f4d5fe:	ff068713          	addi	a4,a3,-16
    83f4d602:	16dd0f63          	beq	s10,a3,83f4d780 <plot_segments_on_line+0x2ec>
    83f4d606:	8b3e                	mv	s6,a5
    83f4d608:	863a                	mv	a2,a4
    83f4d60a:	420c                	lw	a1,0(a2)
    83f4d60c:	00462c83          	lw	s9,4(a2)
    83f4d610:	02bbcd63          	blt	s7,a1,83f4d64a <plot_segments_on_line+0x1b6>
    83f4d614:	039bdb63          	bge	s7,s9,83f4d64a <plot_segments_on_line+0x1b6>
    83f4d618:	5dfd                	li	s11,-1
    83f4d61a:	04fb4463          	blt	s6,a5,83f4d662 <plot_segments_on_line+0x1ce>
    83f4d61e:	03800513          	li	a0,56
    83f4d622:	763000ef          	jal	ra,83f4e584 <pvPortMalloc>
    83f4d626:	842a                	mv	s0,a0
    83f4d628:	417c87bb          	subw	a5,s9,s7
    83f4d62c:	d945                	beqz	a0,83f4d5dc <plot_segments_on_line+0x148>
    83f4d62e:	01451023          	sh	s4,0(a0)
    83f4d632:	00f51123          	sh	a5,2(a0)
    83f4d636:	00052423          	sw	zero,8(a0)
    83f4d63a:	01352823          	sw	s3,16(a0)
    83f4d63e:	00051c23          	sh	zero,24(a0)
    83f4d642:	160b5263          	bgez	s6,83f4d7a6 <plot_segments_on_line+0x312>
    83f4d646:	8be6                	mv	s7,s9
    83f4d648:	bf9d                	j	83f4d5be <plot_segments_on_line+0x12a>
    83f4d64a:	6a0c                	ld	a1,16(a2)
    83f4d64c:	3b7d                	addiw	s6,s6,-1
    83f4d64e:	ff058613          	addi	a2,a1,-16
    83f4d652:	fabd1ce3          	bne	s10,a1,83f4d60a <plot_segments_on_line+0x176>
    83f4d656:	5b7d                	li	s6,-1
    83f4d658:	8ca6                	mv	s9,s1
    83f4d65a:	85de                	mv	a1,s7
    83f4d65c:	5dfd                	li	s11,-1
    83f4d65e:	fcfb50e3          	bge	s6,a5,83f4d61e <plot_segments_on_line+0x18a>
    83f4d662:	5dfd                	li	s11,-1
    83f4d664:	a031                	j	83f4d670 <plot_segments_on_line+0x1dc>
    83f4d666:	6b10                	ld	a2,16(a4)
    83f4d668:	ff060713          	addi	a4,a2,-16
    83f4d66c:	fba609e3          	beq	a2,s10,83f4d61e <plot_segments_on_line+0x18a>
    83f4d670:	4310                	lw	a2,0(a4)
    83f4d672:	00b64763          	blt	a2,a1,83f4d680 <plot_segments_on_line+0x1ec>
    83f4d676:	01965563          	bge	a2,s9,83f4d680 <plot_segments_on_line+0x1ec>
    83f4d67a:	8dbe                	mv	s11,a5
    83f4d67c:	893a                	mv	s2,a4
    83f4d67e:	8cb2                	mv	s9,a2
    83f4d680:	37fd                	addiw	a5,a5,-1
    83f4d682:	fefb42e3          	blt	s6,a5,83f4d666 <plot_segments_on_line+0x1d2>
    83f4d686:	bf61                	j	83f4d61e <plot_segments_on_line+0x18a>
    83f4d688:	00040023          	sb	zero,0(s0)
    83f4d68c:	4394                	lw	a3,0(a5)
    83f4d68e:	65c2                	ld	a1,16(sp)
    83f4d690:	4509                	li	a0,2
    83f4d692:	ffe68713          	addi	a4,a3,-2
    83f4d696:	00e03733          	snez	a4,a4
    83f4d69a:	00e400a3          	sb	a4,1(s0)
    83f4d69e:	4798                	lw	a4,8(a5)
    83f4d6a0:	9d99                	subw	a1,a1,a4
    83f4d6a2:	872e                	mv	a4,a1
    83f4d6a4:	06a69f63          	bne	a3,a0,83f4d722 <plot_segments_on_line+0x28e>
    83f4d6a8:	4f94                	lw	a3,24(a5)
    83f4d6aa:	02d7073b          	mulw	a4,a4,a3
    83f4d6ae:	c414                	sw	a3,8(s0)
    83f4d6b0:	4214                	lw	a3,0(a2)
    83f4d6b2:	7b90                	ld	a2,48(a5)
    83f4d6b4:	40db87bb          	subw	a5,s7,a3
    83f4d6b8:	9f3d                	addw	a4,a4,a5
    83f4d6ba:	67e2                	ld	a5,24(sp)
    83f4d6bc:	02f707bb          	mulw	a5,a4,a5
    83f4d6c0:	1782                	slli	a5,a5,0x20
    83f4d6c2:	9381                	srli	a5,a5,0x20
    83f4d6c4:	97b2                	add	a5,a5,a2
    83f4d6c6:	e81c                	sd	a5,16(s0)
    83f4d6c8:	bdd9                	j	83f4d59e <plot_segments_on_line+0x10a>
    83f4d6ca:	000d3683          	ld	a3,0(s10)
    83f4d6ce:	00092583          	lw	a1,0(s2)
    83f4d6d2:	ff068713          	addi	a4,a3,-16
    83f4d6d6:	e4dd02e3          	beq	s10,a3,83f4d51a <plot_segments_on_line+0x86>
    83f4d6da:	8b6e                	mv	s6,s11
    83f4d6dc:	b759                	j	83f4d662 <plot_segments_on_line+0x1ce>
    83f4d6de:	008d3783          	ld	a5,8(s10)
    83f4d6e2:	4701                	li	a4,0
    83f4d6e4:	c391                	beqz	a5,83f4d6e8 <plot_segments_on_line+0x254>
    83f4d6e6:	6798                	ld	a4,8(a5)
    83f4d6e8:	ff078693          	addi	a3,a5,-16
    83f4d6ec:	f5a78de3          	beq	a5,s10,83f4d646 <plot_segments_on_line+0x1b2>
    83f4d6f0:	4781                	li	a5,0
    83f4d6f2:	0a0d8763          	beqz	s11,83f4d7a0 <plot_segments_on_line+0x30c>
    83f4d6f6:	2785                	addiw	a5,a5,1
    83f4d6f8:	cf09                	beqz	a4,83f4d712 <plot_segments_on_line+0x27e>
    83f4d6fa:	6714                	ld	a3,8(a4)
    83f4d6fc:	f5a705e3          	beq	a4,s10,83f4d646 <plot_segments_on_line+0x1b2>
    83f4d700:	00fd8d63          	beq	s11,a5,83f4d71a <plot_segments_on_line+0x286>
    83f4d704:	8736                	mv	a4,a3
    83f4d706:	2785                	addiw	a5,a5,1
    83f4d708:	fb6d                	bnez	a4,83f4d6fa <plot_segments_on_line+0x266>
    83f4d70a:	a021                	j	83f4d712 <plot_segments_on_line+0x27e>
    83f4d70c:	00dd8763          	beq	s11,a3,83f4d71a <plot_segments_on_line+0x286>
    83f4d710:	2789                	addiw	a5,a5,2
    83f4d712:	0017869b          	addiw	a3,a5,1
    83f4d716:	ffb79be3          	bne	a5,s11,83f4d70c <plot_segments_on_line+0x278>
    83f4d71a:	ff070913          	addi	s2,a4,-16
    83f4d71e:	8be6                	mv	s7,s9
    83f4d720:	bd79                	j	83f4d5be <plot_segments_on_line+0x12a>
    83f4d722:	0187e683          	lwu	a3,24(a5)
    83f4d726:	7b98                	ld	a4,48(a5)
    83f4d728:	0586                	slli	a1,a1,0x1
    83f4d72a:	9736                	add	a4,a4,a3
    83f4d72c:	e818                	sd	a4,16(s0)
    83f4d72e:	7b9c                	ld	a5,48(a5)
    83f4d730:	95be                	add	a1,a1,a5
    83f4d732:	e40c                	sd	a1,8(s0)
    83f4d734:	00865783          	lhu	a5,8(a2)
    83f4d738:	00f41c23          	sh	a5,24(s0)
    83f4d73c:	b58d                	j	83f4d59e <plot_segments_on_line+0x10a>
    83f4d73e:	03800513          	li	a0,56
    83f4d742:	643000ef          	jal	ra,83f4e584 <pvPortMalloc>
    83f4d746:	e8050be3          	beqz	a0,83f4d5dc <plot_segments_on_line+0x148>
    83f4d74a:	511c                	lw	a5,32(a0)
    83f4d74c:	4705                	li	a4,1
    83f4d74e:	00e51023          	sh	a4,0(a0)
    83f4d752:	2785                	addiw	a5,a5,1
    83f4d754:	00951123          	sh	s1,2(a0)
    83f4d758:	d11c                	sw	a5,32(a0)
    83f4d75a:	00052423          	sw	zero,8(a0)
    83f4d75e:	01352823          	sw	s3,16(a0)
    83f4d762:	00051c23          	sh	zero,24(a0)
    83f4d766:	000c3703          	ld	a4,0(s8)
    83f4d76a:	02850793          	addi	a5,a0,40
    83f4d76e:	03853823          	sd	s8,48(a0)
    83f4d772:	f518                	sd	a4,40(a0)
    83f4d774:	e71c                	sd	a5,8(a4)
    83f4d776:	00fc3023          	sd	a5,0(s8)
    83f4d77a:	b58d                	j	83f4d5dc <plot_segments_on_line+0x148>
    83f4d77c:	5641                	li	a2,-16
    83f4d77e:	b529                	j	83f4d588 <plot_segments_on_line+0xf4>
    83f4d780:	03800513          	li	a0,56
    83f4d784:	601000ef          	jal	ra,83f4e584 <pvPortMalloc>
    83f4d788:	4174883b          	subw	a6,s1,s7
    83f4d78c:	e40508e3          	beqz	a0,83f4d5dc <plot_segments_on_line+0x148>
    83f4d790:	511c                	lw	a5,32(a0)
    83f4d792:	4705                	li	a4,1
    83f4d794:	00e51023          	sh	a4,0(a0)
    83f4d798:	2785                	addiw	a5,a5,1
    83f4d79a:	01051123          	sh	a6,2(a0)
    83f4d79e:	bf6d                	j	83f4d758 <plot_segments_on_line+0x2c4>
    83f4d7a0:	8936                	mv	s2,a3
    83f4d7a2:	8be6                	mv	s7,s9
    83f4d7a4:	bd29                	j	83f4d5be <plot_segments_on_line+0x12a>
    83f4d7a6:	886e                	mv	a6,s11
    83f4d7a8:	8dda                	mv	s11,s6
    83f4d7aa:	bb59                	j	83f4d540 <plot_segments_on_line+0xac>

0000000083f4d7ac <draw_cmpr_canvas>:
    83f4d7ac:	716d                	addi	sp,sp,-272
    83f4d7ae:	fda6                	sd	s1,248(sp)
    83f4d7b0:	f9ca                	sd	s2,240(sp)
    83f4d7b2:	f5ce                	sd	s3,232(sp)
    83f4d7b4:	e5de                	sd	s7,200(sp)
    83f4d7b6:	fd66                	sd	s9,184(sp)
    83f4d7b8:	e606                	sd	ra,264(sp)
    83f4d7ba:	e222                	sd	s0,256(sp)
    83f4d7bc:	f1d2                	sd	s4,224(sp)
    83f4d7be:	edd6                	sd	s5,216(sp)
    83f4d7c0:	e9da                	sd	s6,208(sp)
    83f4d7c2:	e1e2                	sd	s8,192(sp)
    83f4d7c4:	f96a                	sd	s10,176(sp)
    83f4d7c6:	f56e                	sd	s11,168(sp)
    83f4d7c8:	ce32                	sw	a2,28(sp)
    83f4d7ca:	8baa                	mv	s7,a0
    83f4d7cc:	84b6                	mv	s1,a3
    83f4d7ce:	89ba                	mv	s3,a4
    83f4d7d0:	8cbe                	mv	s9,a5
    83f4d7d2:	4901                	li	s2,0
    83f4d7d4:	16061163          	bnez	a2,83f4d936 <draw_cmpr_canvas+0x18a>
    83f4d7d8:	00012797          	auipc	a5,0x12
    83f4d7dc:	46878793          	addi	a5,a5,1128 # 83f5fc40 <seg_init.0>
    83f4d7e0:	0007c703          	lbu	a4,0(a5)
    83f4d7e4:	12070f63          	beqz	a4,83f4d922 <draw_cmpr_canvas+0x176>
    83f4d7e8:	03010a93          	addi	s5,sp,48
    83f4d7ec:	86de                	mv	a3,s7
    83f4d7ee:	864e                	mv	a2,s3
    83f4d7f0:	85a6                	mv	a1,s1
    83f4d7f2:	8556                	mv	a0,s5
    83f4d7f4:	9b9ff0ef          	jal	ra,83f4d1ac <draw_cmpr_init>
    83f4d7f8:	008ba503          	lw	a0,8(s7)
    83f4d7fc:	481000ef          	jal	ra,83f4e47c <osd_cmpr_get_pixel_sz>
    83f4d800:	004ba303          	lw	t1,4(s7)
    83f4d804:	14605963          	blez	t1,83f4d956 <draw_cmpr_canvas+0x1aa>
    83f4d808:	00010417          	auipc	s0,0x10
    83f4d80c:	cb840413          	addi	s0,s0,-840 # 83f5d4c0 <seg_list_head>
    83f4d810:	0005099b          	sext.w	s3,a0
    83f4d814:	4b01                	li	s6,0
    83f4d816:	02c10c13          	addi	s8,sp,44
    83f4d81a:	00010497          	auipc	s1,0x10
    83f4d81e:	cb648493          	addi	s1,s1,-842 # 83f5d4d0 <slc_list_head>
    83f4d822:	8a22                	mv	s4,s0
    83f4d824:	00cba883          	lw	a7,12(s7)
    83f4d828:	000ba603          	lw	a2,0(s7)
    83f4d82c:	45f2                	lw	a1,28(sp)
    83f4d82e:	86da                	mv	a3,s6
    83f4d830:	87e2                	mv	a5,s8
    83f4d832:	874e                	mv	a4,s3
    83f4d834:	8852                	mv	a6,s4
    83f4d836:	854a                	mv	a0,s2
    83f4d838:	d61a                	sw	t1,44(sp)
    83f4d83a:	c5bff0ef          	jal	ra,83f4d494 <plot_segments_on_line>
    83f4d83e:	87da                	mv	a5,s6
    83f4d840:	5b32                	lw	s6,44(sp)
    83f4d842:	00078d1b          	sext.w	s10,a5
    83f4d846:	40fb073b          	subw	a4,s6,a5
    83f4d84a:	00f70dbb          	addw	s11,a4,a5
    83f4d84e:	00e05c63          	blez	a4,83f4d866 <draw_cmpr_canvas+0xba>
    83f4d852:	866a                	mv	a2,s10
    83f4d854:	8752                	mv	a4,s4
    83f4d856:	2d05                	addiw	s10,s10,1
    83f4d858:	86ce                	mv	a3,s3
    83f4d85a:	85ca                	mv	a1,s2
    83f4d85c:	8556                	mv	a0,s5
    83f4d85e:	a73ff0ef          	jal	ra,83f4d2d0 <draw_cmpr_canvas_line>
    83f4d862:	ffad98e3          	bne	s11,s10,83f4d852 <draw_cmpr_canvas+0xa6>
    83f4d866:	854a                	mv	a0,s2
    83f4d868:	fffb061b          	addiw	a2,s6,-1
    83f4d86c:	086c                	addi	a1,sp,28
    83f4d86e:	d16ff0ef          	jal	ra,83f4cd84 <recycle_draw_obj>
    83f4d872:	6408                	ld	a0,8(s0)
    83f4d874:	02850763          	beq	a0,s0,83f4d8a2 <draw_cmpr_canvas+0xf6>
    83f4d878:	6118                	ld	a4,0(a0)
    83f4d87a:	651c                	ld	a5,8(a0)
    83f4d87c:	fd850513          	addi	a0,a0,-40
    83f4d880:	e71c                	sd	a5,8(a4)
    83f4d882:	e398                	sd	a4,0(a5)
    83f4d884:	667000ef          	jal	ra,83f4e6ea <vPortFree>
    83f4d888:	6408                	ld	a0,8(s0)
    83f4d88a:	fe8517e3          	bne	a0,s0,83f4d878 <draw_cmpr_canvas+0xcc>
    83f4d88e:	6488                	ld	a0,8(s1)
    83f4d890:	00950c63          	beq	a0,s1,83f4d8a8 <draw_cmpr_canvas+0xfc>
    83f4d894:	6118                	ld	a4,0(a0)
    83f4d896:	651c                	ld	a5,8(a0)
    83f4d898:	1541                	addi	a0,a0,-16
    83f4d89a:	e71c                	sd	a5,8(a4)
    83f4d89c:	e398                	sd	a4,0(a5)
    83f4d89e:	64d000ef          	jal	ra,83f4e6ea <vPortFree>
    83f4d8a2:	6488                	ld	a0,8(s1)
    83f4d8a4:	fe9518e3          	bne	a0,s1,83f4d894 <draw_cmpr_canvas+0xe8>
    83f4d8a8:	004ba303          	lw	t1,4(s7)
    83f4d8ac:	f66b4ce3          	blt	s6,t1,83f4d824 <draw_cmpr_canvas+0x78>
    83f4d8b0:	07810313          	addi	t1,sp,120
    83f4d8b4:	04000893          	li	a7,64
    83f4d8b8:	4805                	li	a6,1
    83f4d8ba:	87e2                	mv	a5,s8
    83f4d8bc:	0978                	addi	a4,sp,156
    83f4d8be:	0934                	addi	a3,sp,152
    83f4d8c0:	0950                	addi	a2,sp,148
    83f4d8c2:	090c                	addi	a1,sp,144
    83f4d8c4:	e41a                	sd	t1,8(sp)
    83f4d8c6:	4501                	li	a0,0
    83f4d8c8:	e056                	sd	s5,0(sp)
    83f4d8ca:	02011623          	sh	zero,44(sp)
    83f4d8ce:	26f000ef          	jal	ra,83f4e33c <osd_cmpr_enc_const_pixel>
    83f4d8d2:	440a                	lw	s0,128(sp)
    83f4d8d4:	3b9000ef          	jal	ra,83f4e48c <osd_cmpr_get_header_sz>
    83f4d8d8:	241d                	addiw	s0,s0,7
    83f4d8da:	4034541b          	sraiw	s0,s0,0x3
    83f4d8de:	1402                	slli	s0,s0,0x20
    83f4d8e0:	9001                	srli	s0,s0,0x20
    83f4d8e2:	043d                	addi	s0,s0,15
    83f4d8e4:	00a407b3          	add	a5,s0,a0
    83f4d8e8:	8391                	srli	a5,a5,0x4
    83f4d8ea:	2785                	addiw	a5,a5,1
    83f4d8ec:	0047979b          	slliw	a5,a5,0x4
    83f4d8f0:	854a                	mv	a0,s2
    83f4d8f2:	00fca023          	sw	a5,0(s9)
    83f4d8f6:	5f5000ef          	jal	ra,83f4e6ea <vPortFree>
    83f4d8fa:	6566                	ld	a0,88(sp)
    83f4d8fc:	c119                	beqz	a0,83f4d902 <draw_cmpr_canvas+0x156>
    83f4d8fe:	5ed000ef          	jal	ra,83f4e6ea <vPortFree>
    83f4d902:	452a                	lw	a0,136(sp)
    83f4d904:	60b2                	ld	ra,264(sp)
    83f4d906:	6412                	ld	s0,256(sp)
    83f4d908:	74ee                	ld	s1,248(sp)
    83f4d90a:	794e                	ld	s2,240(sp)
    83f4d90c:	79ae                	ld	s3,232(sp)
    83f4d90e:	7a0e                	ld	s4,224(sp)
    83f4d910:	6aee                	ld	s5,216(sp)
    83f4d912:	6b4e                	ld	s6,208(sp)
    83f4d914:	6bae                	ld	s7,200(sp)
    83f4d916:	6c0e                	ld	s8,192(sp)
    83f4d918:	7cea                	ld	s9,184(sp)
    83f4d91a:	7d4a                	ld	s10,176(sp)
    83f4d91c:	7daa                	ld	s11,168(sp)
    83f4d91e:	6151                	addi	sp,sp,272
    83f4d920:	8082                	ret
    83f4d922:	00010417          	auipc	s0,0x10
    83f4d926:	b9e40413          	addi	s0,s0,-1122 # 83f5d4c0 <seg_list_head>
    83f4d92a:	4705                	li	a4,1
    83f4d92c:	00e78023          	sb	a4,0(a5)
    83f4d930:	e400                	sd	s0,8(s0)
    83f4d932:	e000                	sd	s0,0(s0)
    83f4d934:	bd55                	j	83f4d7e8 <draw_cmpr_canvas+0x3c>
    83f4d936:	02061793          	slli	a5,a2,0x20
    83f4d93a:	01a7d513          	srli	a0,a5,0x1a
    83f4d93e:	e82e                	sd	a1,16(sp)
    83f4d940:	445000ef          	jal	ra,83f4e584 <pvPortMalloc>
    83f4d944:	892a                	mv	s2,a0
    83f4d946:	c919                	beqz	a0,83f4d95c <draw_cmpr_canvas+0x1b0>
    83f4d948:	01c16603          	lwu	a2,28(sp)
    83f4d94c:	65c2                	ld	a1,16(sp)
    83f4d94e:	061a                	slli	a2,a2,0x6
    83f4d950:	fb0f20ef          	jal	ra,83f40100 <memcpy>
    83f4d954:	b551                	j	83f4d7d8 <draw_cmpr_canvas+0x2c>
    83f4d956:	02c10c13          	addi	s8,sp,44
    83f4d95a:	bf99                	j	83f4d8b0 <draw_cmpr_canvas+0x104>
    83f4d95c:	557d                	li	a0,-1
    83f4d95e:	b75d                	j	83f4d904 <draw_cmpr_canvas+0x158>

0000000083f4d960 <set_rect_position>:
    83f4d960:	7179                	addi	sp,sp,-48
    83f4d962:	f406                	sd	ra,40(sp)
    83f4d964:	f022                	sd	s0,32(sp)
    83f4d966:	ec26                	sd	s1,24(sp)
    83f4d968:	e84a                	sd	s2,16(sp)
    83f4d96a:	e44e                	sd	s3,8(sp)
    83f4d96c:	e052                	sd	s4,0(sp)
    83f4d96e:	84ae                	mv	s1,a1
    83f4d970:	418c                	lw	a1,0(a1)
    83f4d972:	8832                	mv	a6,a2
    83f4d974:	842a                	mv	s0,a0
    83f4d976:	fff5861b          	addiw	a2,a1,-1
    83f4d97a:	8542                	mv	a0,a6
    83f4d97c:	4581                	li	a1,0
    83f4d97e:	8a36                	mv	s4,a3
    83f4d980:	89ba                	mv	s3,a4
    83f4d982:	893e                	mv	s2,a5
    83f4d984:	444000ef          	jal	ra,83f4ddc8 <clip>
    83f4d988:	c008                	sw	a0,0(s0)
    83f4d98a:	40d0                	lw	a2,4(s1)
    83f4d98c:	4581                	li	a1,0
    83f4d98e:	8552                	mv	a0,s4
    83f4d990:	367d                	addiw	a2,a2,-1
    83f4d992:	436000ef          	jal	ra,83f4ddc8 <clip>
    83f4d996:	c048                	sw	a0,4(s0)
    83f4d998:	401c                	lw	a5,0(s0)
    83f4d99a:	4090                	lw	a2,0(s1)
    83f4d99c:	4581                	li	a1,0
    83f4d99e:	854e                	mv	a0,s3
    83f4d9a0:	9e1d                	subw	a2,a2,a5
    83f4d9a2:	426000ef          	jal	ra,83f4ddc8 <clip>
    83f4d9a6:	c408                	sw	a0,8(s0)
    83f4d9a8:	40d0                	lw	a2,4(s1)
    83f4d9aa:	405c                	lw	a5,4(s0)
    83f4d9ac:	854a                	mv	a0,s2
    83f4d9ae:	4581                	li	a1,0
    83f4d9b0:	9e1d                	subw	a2,a2,a5
    83f4d9b2:	416000ef          	jal	ra,83f4ddc8 <clip>
    83f4d9b6:	c448                	sw	a0,12(s0)
    83f4d9b8:	70a2                	ld	ra,40(sp)
    83f4d9ba:	7402                	ld	s0,32(sp)
    83f4d9bc:	64e2                	ld	s1,24(sp)
    83f4d9be:	6942                	ld	s2,16(sp)
    83f4d9c0:	69a2                	ld	s3,8(sp)
    83f4d9c2:	6a02                	ld	s4,0(sp)
    83f4d9c4:	6145                	addi	sp,sp,48
    83f4d9c6:	8082                	ret

0000000083f4d9c8 <set_line_obj_attr>:
    83f4d9c8:	7135                	addi	sp,sp,-160
    83f4d9ca:	ed06                	sd	ra,152(sp)
    83f4d9cc:	e922                	sd	s0,144(sp)
    83f4d9ce:	e526                	sd	s1,136(sp)
    83f4d9d0:	e14a                	sd	s2,128(sp)
    83f4d9d2:	fcce                	sd	s3,120(sp)
    83f4d9d4:	f8d2                	sd	s4,112(sp)
    83f4d9d6:	f4d6                	sd	s5,104(sp)
    83f4d9d8:	f0da                	sd	s6,96(sp)
    83f4d9da:	ecde                	sd	s7,88(sp)
    83f4d9dc:	e8e2                	sd	s8,80(sp)
    83f4d9de:	e4e6                	sd	s9,72(sp)
    83f4d9e0:	bc22                	fsd	fs0,56(sp)
    83f4d9e2:	b826                	fsd	fs1,48(sp)
    83f4d9e4:	b44a                	fsd	fs2,40(sp)
    83f4d9e6:	b04e                	fsd	fs3,32(sp)
    83f4d9e8:	ac52                	fsd	fs4,24(sp)
    83f4d9ea:	a856                	fsd	fs5,16(sp)
    83f4d9ec:	a45a                	fsd	fs6,8(sp)
    83f4d9ee:	a05e                	fsd	fs7,0(sp)
    83f4d9f0:	d910                	sw	a2,48(a0)
    83f4d9f2:	8bb2                	mv	s7,a2
    83f4d9f4:	4190                	lw	a2,0(a1)
    83f4d9f6:	84ae                	mv	s1,a1
    83f4d9f8:	842a                	mv	s0,a0
    83f4d9fa:	4581                	li	a1,0
    83f4d9fc:	8536                	mv	a0,a3
    83f4d9fe:	893a                	mv	s2,a4
    83f4da00:	8abe                	mv	s5,a5
    83f4da02:	8a42                	mv	s4,a6
    83f4da04:	8b46                	mv	s6,a7
    83f4da06:	3c2000ef          	jal	ra,83f4ddc8 <clip>
    83f4da0a:	4090                	lw	a2,0(s1)
    83f4da0c:	4581                	li	a1,0
    83f4da0e:	89aa                	mv	s3,a0
    83f4da10:	8556                	mv	a0,s5
    83f4da12:	3b6000ef          	jal	ra,83f4ddc8 <clip>
    83f4da16:	40d0                	lw	a2,4(s1)
    83f4da18:	4581                	li	a1,0
    83f4da1a:	8aaa                	mv	s5,a0
    83f4da1c:	854a                	mv	a0,s2
    83f4da1e:	3aa000ef          	jal	ra,83f4ddc8 <clip>
    83f4da22:	40d0                	lw	a2,4(s1)
    83f4da24:	4581                	li	a1,0
    83f4da26:	892a                	mv	s2,a0
    83f4da28:	8552                	mv	a0,s4
    83f4da2a:	39e000ef          	jal	ra,83f4ddc8 <clip>
    83f4da2e:	8a2a                	mv	s4,a0
    83f4da30:	02000613          	li	a2,32
    83f4da34:	855a                	mv	a0,s6
    83f4da36:	4585                	li	a1,1
    83f4da38:	390000ef          	jal	ra,83f4ddc8 <clip>
    83f4da3c:	8b2a                	mv	s6,a0
    83f4da3e:	23598c63          	beq	s3,s5,83f4dc76 <set_line_obj_attr+0x2ae>
    83f4da42:	1d490163          	beq	s2,s4,83f4dc04 <set_line_obj_attr+0x23c>
    83f4da46:	478d                	li	a5,3
    83f4da48:	03742823          	sw	s7,48(s0)
    83f4da4c:	c01c                	sw	a5,0(s0)
    83f4da4e:	00090c9b          	sext.w	s9,s2
    83f4da52:	012a5463          	bge	s4,s2,83f4da5a <set_line_obj_attr+0x92>
    83f4da56:	000a0c9b          	sext.w	s9,s4
    83f4da5a:	01495563          	bge	s2,s4,83f4da64 <set_line_obj_attr+0x9c>
    83f4da5e:	87ce                	mv	a5,s3
    83f4da60:	89d6                	mv	s3,s5
    83f4da62:	8abe                	mv	s5,a5
    83f4da64:	86ca                	mv	a3,s2
    83f4da66:	01495363          	bge	s2,s4,83f4da6c <set_line_obj_attr+0xa4>
    83f4da6a:	86d2                	mv	a3,s4
    83f4da6c:	4196863b          	subw	a2,a3,s9
    83f4da70:	41598bbb          	subw	s7,s3,s5
    83f4da74:	d00bf453          	fcvt.s.w	fs0,s7
    83f4da78:	d0067bd3          	fcvt.s.w	fs7,a2
    83f4da7c:	8732                	mv	a4,a2
    83f4da7e:	87de                	mv	a5,s7
    83f4da80:	00068c1b          	sext.w	s8,a3
    83f4da84:	22060463          	beqz	a2,83f4dcac <set_line_obj_attr+0x2e4>
    83f4da88:	197477d3          	fdiv.s	fa5,fs0,fs7
    83f4da8c:	02e7073b          	mulw	a4,a4,a4
    83f4da90:	00005697          	auipc	a3,0x5
    83f4da94:	8086b487          	fld	fs1,-2040(a3) # 83f52298 <__func__.1+0xa0>
    83f4da98:	229485d3          	fmv.d	fa1,fs1
    83f4da9c:	00f42227          	fsw	fa5,4(s0)
    83f4daa0:	00840913          	addi	s2,s0,8
    83f4daa4:	01040a13          	addi	s4,s0,16
    83f4daa8:	02f787bb          	mulw	a5,a5,a5
    83f4daac:	9fb9                	addw	a5,a5,a4
    83f4daae:	d2078553          	fcvt.d.w	fa0,a5
    83f4dab2:	a10f30ef          	jal	ra,83f40cc2 <pow>
    83f4dab6:	d20b07d3          	fcvt.d.w	fa5,s6
    83f4daba:	d00af9d3          	fcvt.s.w	fs3,s5
    83f4dabe:	d00cfa53          	fcvt.s.w	fs4,s9
    83f4dac2:	1297f7d3          	fmul.d	fa5,fa5,fs1
    83f4dac6:	d009fad3          	fcvt.s.w	fs5,s3
    83f4daca:	d00c7b53          	fcvt.s.w	fs6,s8
    83f4dace:	1aa7f7d3          	fdiv.d	fa5,fa5,fa0
    83f4dad2:	4017f7d3          	fcvt.s.d	fa5,fa5
    83f4dad6:	10f47453          	fmul.s	fs0,fs0,fa5
    83f4dada:	10fbfbd3          	fmul.s	fs7,fs7,fa5
    83f4dade:	409c                	lw	a5,0(s1)
    83f4dae0:	217b8953          	fmv.s	fs2,fs7
    83f4dae4:	208404d3          	fmv.s	fs1,fs0
    83f4dae8:	d007f7d3          	fcvt.s.w	fa5,a5
    83f4daec:	217b9bd3          	fneg.s	fs7,fs7
    83f4daf0:	20841453          	fneg.s	fs0,fs0
    83f4daf4:	c0079653          	fcvt.w.s	a2,fa5,rtz
    83f4daf8:	4581                	li	a1,0
    83f4dafa:	2601                	sext.w	a2,a2
    83f4dafc:	1a0bc363          	bltz	s7,83f4dca2 <set_line_obj_attr+0x2da>
    83f4db00:	0129f7d3          	fadd.s	fa5,fs3,fs2
    83f4db04:	208404d3          	fmv.s	fs1,fs0
    83f4db08:	c0079553          	fcvt.w.s	a0,fa5,rtz
    83f4db0c:	0911                	addi	s2,s2,4
    83f4db0e:	2501                	sext.w	a0,a0
    83f4db10:	2b8000ef          	jal	ra,83f4ddc8 <clip>
    83f4db14:	d00577d3          	fcvt.s.w	fa5,a0
    83f4db18:	4581                	li	a1,0
    83f4db1a:	fef92e27          	fsw	fa5,-4(s2)
    83f4db1e:	40dc                	lw	a5,4(s1)
    83f4db20:	0144f7d3          	fadd.s	fa5,fs1,fs4
    83f4db24:	d007f753          	fcvt.s.w	fa4,a5
    83f4db28:	c0079553          	fcvt.w.s	a0,fa5,rtz
    83f4db2c:	c0071653          	fcvt.w.s	a2,fa4,rtz
    83f4db30:	2501                	sext.w	a0,a0
    83f4db32:	2601                	sext.w	a2,a2
    83f4db34:	294000ef          	jal	ra,83f4ddc8 <clip>
    83f4db38:	d00577d3          	fcvt.s.w	fa5,a0
    83f4db3c:	012af953          	fadd.s	fs2,fs5,fs2
    83f4db40:	4581                	li	a1,0
    83f4db42:	00f92227          	fsw	fa5,4(s2)
    83f4db46:	409c                	lw	a5,0(s1)
    83f4db48:	c0091553          	fcvt.w.s	a0,fs2,rtz
    83f4db4c:	d007f7d3          	fcvt.s.w	fa5,a5
    83f4db50:	2501                	sext.w	a0,a0
    83f4db52:	c0079653          	fcvt.w.s	a2,fa5,rtz
    83f4db56:	2601                	sext.w	a2,a2
    83f4db58:	270000ef          	jal	ra,83f4ddc8 <clip>
    83f4db5c:	d00577d3          	fcvt.s.w	fa5,a0
    83f4db60:	009b74d3          	fadd.s	fs1,fs6,fs1
    83f4db64:	4581                	li	a1,0
    83f4db66:	00f92627          	fsw	fa5,12(s2)
    83f4db6a:	40dc                	lw	a5,4(s1)
    83f4db6c:	c0049553          	fcvt.w.s	a0,fs1,rtz
    83f4db70:	d007f7d3          	fcvt.s.w	fa5,a5
    83f4db74:	2501                	sext.w	a0,a0
    83f4db76:	c0079653          	fcvt.w.s	a2,fa5,rtz
    83f4db7a:	2601                	sext.w	a2,a2
    83f4db7c:	24c000ef          	jal	ra,83f4ddc8 <clip>
    83f4db80:	d00577d3          	fcvt.s.w	fa5,a0
    83f4db84:	00f92a27          	fsw	fa5,20(s2)
    83f4db88:	f52a1be3          	bne	s4,s2,83f4dade <set_line_obj_attr+0x116>
    83f4db8c:	01442707          	flw	fa4,20(s0)
    83f4db90:	01042507          	flw	fa0,16(s0)
    83f4db94:	00442787          	flw	fa5,4(s0)
    83f4db98:	00842607          	flw	fa2,8(s0)
    83f4db9c:	08a775d3          	fsub.s	fa1,fa4,fa0
    83f4dba0:	00c42687          	flw	fa3,12(s0)
    83f4dba4:	a0e517d3          	flt.s	a5,fa0,fa4
    83f4dba8:	60b7f7c3          	fmadd.s	fa5,fa5,fa1,fa2
    83f4dbac:	08d7f7d3          	fsub.s	fa5,fa5,fa3
    83f4dbb0:	02f42427          	fsw	fa5,40(s0)
    83f4dbb4:	e399                	bnez	a5,83f4dbba <set_line_obj_attr+0x1f2>
    83f4dbb6:	20e70553          	fmv.s	fa0,fa4
    83f4dbba:	42050553          	fcvt.d.s	fa0,fa0
    83f4dbbe:	ee3f20ef          	jal	ra,83f40aa0 <round>
    83f4dbc2:	02442787          	flw	fa5,36(s0)
    83f4dbc6:	c20517d3          	fcvt.w.d	a5,fa0,rtz
    83f4dbca:	42078553          	fcvt.d.s	fa0,fa5
    83f4dbce:	dc5c                	sw	a5,60(s0)
    83f4dbd0:	ed1f20ef          	jal	ra,83f40aa0 <round>
    83f4dbd4:	c20517d3          	fcvt.w.d	a5,fa0,rtz
    83f4dbd8:	dc1c                	sw	a5,56(s0)
    83f4dbda:	60ea                	ld	ra,152(sp)
    83f4dbdc:	644a                	ld	s0,144(sp)
    83f4dbde:	64aa                	ld	s1,136(sp)
    83f4dbe0:	690a                	ld	s2,128(sp)
    83f4dbe2:	79e6                	ld	s3,120(sp)
    83f4dbe4:	7a46                	ld	s4,112(sp)
    83f4dbe6:	7aa6                	ld	s5,104(sp)
    83f4dbe8:	7b06                	ld	s6,96(sp)
    83f4dbea:	6be6                	ld	s7,88(sp)
    83f4dbec:	6c46                	ld	s8,80(sp)
    83f4dbee:	6ca6                	ld	s9,72(sp)
    83f4dbf0:	3462                	fld	fs0,56(sp)
    83f4dbf2:	34c2                	fld	fs1,48(sp)
    83f4dbf4:	3922                	fld	fs2,40(sp)
    83f4dbf6:	3982                	fld	fs3,32(sp)
    83f4dbf8:	2a62                	fld	fs4,24(sp)
    83f4dbfa:	2ac2                	fld	fs5,16(sp)
    83f4dbfc:	2b22                	fld	fs6,8(sp)
    83f4dbfe:	2b82                	fld	fs7,0(sp)
    83f4dc00:	610d                	addi	sp,sp,160
    83f4dc02:	8082                	ret
    83f4dc04:	864e                	mv	a2,s3
    83f4dc06:	0d3ac263          	blt	s5,s3,83f4dcca <set_line_obj_attr+0x302>
    83f4dc0a:	401b569b          	sraiw	a3,s6,0x1
    83f4dc0e:	0006079b          	sext.w	a5,a2
    83f4dc12:	874e                	mv	a4,s3
    83f4dc14:	9e15                	subw	a2,a2,a3
    83f4dc16:	40d906bb          	subw	a3,s2,a3
    83f4dc1a:	0b59c663          	blt	s3,s5,83f4dcc6 <set_line_obj_attr+0x2fe>
    83f4dc1e:	9f1d                	subw	a4,a4,a5
    83f4dc20:	0167073b          	addw	a4,a4,s6
    83f4dc24:	87da                	mv	a5,s6
    83f4dc26:	85a6                	mv	a1,s1
    83f4dc28:	00440513          	addi	a0,s0,4
    83f4dc2c:	00042023          	sw	zero,0(s0)
    83f4dc30:	03742823          	sw	s7,48(s0)
    83f4dc34:	d2dff0ef          	jal	ra,83f4d960 <set_rect_position>
    83f4dc38:	02000613          	li	a2,32
    83f4dc3c:	4585                	li	a1,1
    83f4dc3e:	855a                	mv	a0,s6
    83f4dc40:	188000ef          	jal	ra,83f4ddc8 <clip>
    83f4dc44:	445c                	lw	a5,12(s0)
    83f4dc46:	4818                	lw	a4,16(s0)
    83f4dc48:	0007869b          	sext.w	a3,a5
    83f4dc4c:	00d75363          	bge	a4,a3,83f4dc52 <set_line_obj_attr+0x28a>
    83f4dc50:	87ba                	mv	a5,a4
    83f4dc52:	4017d69b          	sraiw	a3,a5,0x1
    83f4dc56:	87b6                	mv	a5,a3
    83f4dc58:	00d04363          	bgtz	a3,83f4dc5e <set_line_obj_attr+0x296>
    83f4dc5c:	4785                	li	a5,1
    83f4dc5e:	fff7869b          	addiw	a3,a5,-1
    83f4dc62:	87b6                	mv	a5,a3
    83f4dc64:	00d55363          	bge	a0,a3,83f4dc6a <set_line_obj_attr+0x2a2>
    83f4dc68:	87aa                	mv	a5,a0
    83f4dc6a:	4414                	lw	a3,8(s0)
    83f4dc6c:	c85c                	sw	a5,20(s0)
    83f4dc6e:	9f35                	addw	a4,a4,a3
    83f4dc70:	dc18                	sw	a4,56(s0)
    83f4dc72:	dc54                	sw	a3,60(s0)
    83f4dc74:	b79d                	j	83f4dbda <set_line_obj_attr+0x212>
    83f4dc76:	4015571b          	sraiw	a4,a0,0x1
    83f4dc7a:	40e9863b          	subw	a2,s3,a4
    83f4dc7e:	86ca                	mv	a3,s2
    83f4dc80:	052a4163          	blt	s4,s2,83f4dcc2 <set_line_obj_attr+0x2fa>
    83f4dc84:	0006859b          	sext.w	a1,a3
    83f4dc88:	87da                	mv	a5,s6
    83f4dc8a:	9e99                	subw	a3,a3,a4
    83f4dc8c:	875a                	mv	a4,s6
    83f4dc8e:	f9490ce3          	beq	s2,s4,83f4dc26 <set_line_obj_attr+0x25e>
    83f4dc92:	87ca                	mv	a5,s2
    83f4dc94:	03494163          	blt	s2,s4,83f4dcb6 <set_line_obj_attr+0x2ee>
    83f4dc98:	9f8d                	subw	a5,a5,a1
    83f4dc9a:	016787bb          	addw	a5,a5,s6
    83f4dc9e:	875a                	mv	a4,s6
    83f4dca0:	b759                	j	83f4dc26 <set_line_obj_attr+0x25e>
    83f4dca2:	0929f7d3          	fsub.s	fa5,fs3,fs2
    83f4dca6:	217b8953          	fmv.s	fs2,fs7
    83f4dcaa:	bdb9                	j	83f4db08 <set_line_obj_attr+0x140>
    83f4dcac:	00004697          	auipc	a3,0x4
    83f4dcb0:	7d46a787          	flw	fa5,2004(a3) # 83f52480 <__func__.1+0x288>
    83f4dcb4:	bbe1                	j	83f4da8c <set_line_obj_attr+0xc4>
    83f4dcb6:	87d2                	mv	a5,s4
    83f4dcb8:	9f8d                	subw	a5,a5,a1
    83f4dcba:	016787bb          	addw	a5,a5,s6
    83f4dcbe:	875a                	mv	a4,s6
    83f4dcc0:	b79d                	j	83f4dc26 <set_line_obj_attr+0x25e>
    83f4dcc2:	86d2                	mv	a3,s4
    83f4dcc4:	b7c1                	j	83f4dc84 <set_line_obj_attr+0x2bc>
    83f4dcc6:	8756                	mv	a4,s5
    83f4dcc8:	bf99                	j	83f4dc1e <set_line_obj_attr+0x256>
    83f4dcca:	8656                	mv	a2,s5
    83f4dccc:	401b569b          	sraiw	a3,s6,0x1
    83f4dcd0:	0006079b          	sext.w	a5,a2
    83f4dcd4:	874e                	mv	a4,s3
    83f4dcd6:	9e15                	subw	a2,a2,a3
    83f4dcd8:	40d906bb          	subw	a3,s2,a3
    83f4dcdc:	f559d1e3          	bge	s3,s5,83f4dc1e <set_line_obj_attr+0x256>
    83f4dce0:	b7dd                	j	83f4dcc6 <set_line_obj_attr+0x2fe>

0000000083f4dce2 <CVI_OSDC_est_cmpr_canvas_size>:
    83f4dce2:	1101                	addi	sp,sp,-32
    83f4dce4:	007c                	addi	a5,sp,12
    83f4dce6:	4701                	li	a4,0
    83f4dce8:	4681                	li	a3,0
    83f4dcea:	ec06                	sd	ra,24(sp)
    83f4dcec:	c602                	sw	zero,12(sp)
    83f4dcee:	abfff0ef          	jal	ra,83f4d7ac <draw_cmpr_canvas>
    83f4dcf2:	47b2                	lw	a5,12(sp)
    83f4dcf4:	60e2                	ld	ra,24(sp)
    83f4dcf6:	6505                	lui	a0,0x1
    83f4dcf8:	9d3d                	addw	a0,a0,a5
    83f4dcfa:	9941                	andi	a0,a0,-16
    83f4dcfc:	2501                	sext.w	a0,a0
    83f4dcfe:	6105                	addi	sp,sp,32
    83f4dd00:	8082                	ret

0000000083f4dd02 <CVI_OSDC_draw_cmpr_canvas>:
    83f4dd02:	aabff06f          	j	83f4d7ac <draw_cmpr_canvas>

0000000083f4dd06 <CVI_OSDC_set_rect_obj_attr>:
    83f4dd06:	1141                	addi	sp,sp,-16
    83f4dd08:	e406                	sd	ra,8(sp)
    83f4dd0a:	e022                	sd	s0,0(sp)
    83f4dd0c:	8332                	mv	t1,a2
    83f4dd0e:	842e                	mv	s0,a1
    83f4dd10:	0018c893          	xori	a7,a7,1
    83f4dd14:	85aa                	mv	a1,a0
    83f4dd16:	8636                	mv	a2,a3
    83f4dd18:	00440513          	addi	a0,s0,4
    83f4dd1c:	86ba                	mv	a3,a4
    83f4dd1e:	01142023          	sw	a7,0(s0)
    83f4dd22:	873e                	mv	a4,a5
    83f4dd24:	02642823          	sw	t1,48(s0)
    83f4dd28:	87c2                	mv	a5,a6
    83f4dd2a:	c37ff0ef          	jal	ra,83f4d960 <set_rect_position>
    83f4dd2e:	4542                	lw	a0,16(sp)
    83f4dd30:	02000613          	li	a2,32
    83f4dd34:	4585                	li	a1,1
    83f4dd36:	092000ef          	jal	ra,83f4ddc8 <clip>
    83f4dd3a:	445c                	lw	a5,12(s0)
    83f4dd3c:	4818                	lw	a4,16(s0)
    83f4dd3e:	0007869b          	sext.w	a3,a5
    83f4dd42:	00d75363          	bge	a4,a3,83f4dd48 <CVI_OSDC_set_rect_obj_attr+0x42>
    83f4dd46:	87ba                	mv	a5,a4
    83f4dd48:	4017d69b          	sraiw	a3,a5,0x1
    83f4dd4c:	87b6                	mv	a5,a3
    83f4dd4e:	00d04363          	bgtz	a3,83f4dd54 <CVI_OSDC_set_rect_obj_attr+0x4e>
    83f4dd52:	4785                	li	a5,1
    83f4dd54:	fff7869b          	addiw	a3,a5,-1
    83f4dd58:	87b6                	mv	a5,a3
    83f4dd5a:	00d55363          	bge	a0,a3,83f4dd60 <CVI_OSDC_set_rect_obj_attr+0x5a>
    83f4dd5e:	87aa                	mv	a5,a0
    83f4dd60:	4414                	lw	a3,8(s0)
    83f4dd62:	c85c                	sw	a5,20(s0)
    83f4dd64:	9f35                	addw	a4,a4,a3
    83f4dd66:	dc18                	sw	a4,56(s0)
    83f4dd68:	dc54                	sw	a3,60(s0)
    83f4dd6a:	60a2                	ld	ra,8(sp)
    83f4dd6c:	6402                	ld	s0,0(sp)
    83f4dd6e:	0141                	addi	sp,sp,16
    83f4dd70:	8082                	ret

0000000083f4dd72 <CVI_OSDC_set_bitmap_obj_attr>:
    83f4dd72:	1101                	addi	sp,sp,-32
    83f4dd74:	e822                	sd	s0,16(sp)
    83f4dd76:	e426                	sd	s1,8(sp)
    83f4dd78:	ec06                	sd	ra,24(sp)
    83f4dd7a:	842e                	mv	s0,a1
    83f4dd7c:	84b2                	mv	s1,a2
    83f4dd7e:	85aa                	mv	a1,a0
    83f4dd80:	8636                	mv	a2,a3
    83f4dd82:	86ba                	mv	a3,a4
    83f4dd84:	873e                	mv	a4,a5
    83f4dd86:	87c2                	mv	a5,a6
    83f4dd88:	02088763          	beqz	a7,83f4ddb6 <CVI_OSDC_set_bitmap_obj_attr+0x44>
    83f4dd8c:	0018151b          	slliw	a0,a6,0x1
    83f4dd90:	4811                	li	a6,4
    83f4dd92:	01042023          	sw	a6,0(s0)
    83f4dd96:	cc08                	sw	a0,24(s0)
    83f4dd98:	00440513          	addi	a0,s0,4
    83f4dd9c:	bc5ff0ef          	jal	ra,83f4d960 <set_rect_position>
    83f4dda0:	4418                	lw	a4,8(s0)
    83f4dda2:	481c                	lw	a5,16(s0)
    83f4dda4:	f804                	sd	s1,48(s0)
    83f4dda6:	dc58                	sw	a4,60(s0)
    83f4dda8:	9fb9                	addw	a5,a5,a4
    83f4ddaa:	dc1c                	sw	a5,56(s0)
    83f4ddac:	60e2                	ld	ra,24(sp)
    83f4ddae:	6442                	ld	s0,16(sp)
    83f4ddb0:	64a2                	ld	s1,8(sp)
    83f4ddb2:	6105                	addi	sp,sp,32
    83f4ddb4:	8082                	ret
    83f4ddb6:	4509                	li	a0,2
    83f4ddb8:	c008                	sw	a0,0(s0)
    83f4ddba:	cc18                	sw	a4,24(s0)
    83f4ddbc:	bff1                	j	83f4dd98 <CVI_OSDC_set_bitmap_obj_attr+0x26>

0000000083f4ddbe <CVI_OSDC_set_line_obj_attr>:
    83f4ddbe:	832a                	mv	t1,a0
    83f4ddc0:	852e                	mv	a0,a1
    83f4ddc2:	859a                	mv	a1,t1
    83f4ddc4:	c05ff06f          	j	83f4d9c8 <set_line_obj_attr>

0000000083f4ddc8 <clip>:
    83f4ddc8:	87aa                	mv	a5,a0
    83f4ddca:	8532                	mv	a0,a2
    83f4ddcc:	00f64763          	blt	a2,a5,83f4ddda <clip+0x12>
    83f4ddd0:	863e                	mv	a2,a5
    83f4ddd2:	00b7c563          	blt	a5,a1,83f4dddc <clip+0x14>
    83f4ddd6:	0006051b          	sext.w	a0,a2
    83f4ddda:	8082                	ret
    83f4dddc:	862e                	mv	a2,a1
    83f4ddde:	0006051b          	sext.w	a0,a2
    83f4dde2:	bfe5                	j	83f4ddda <clip+0x12>

0000000083f4dde4 <init_stream>:
    83f4dde4:	87aa                	mv	a5,a0
    83f4dde6:	4705                	li	a4,1
    83f4dde8:	0007a423          	sw	zero,8(a5)
    83f4ddec:	e38c                	sd	a1,0(a5)
    83f4ddee:	c7d0                	sw	a2,12(a5)
    83f4ddf0:	cb98                	sw	a4,16(a5)
    83f4ddf2:	852e                	mv	a0,a1
    83f4ddf4:	c291                	beqz	a3,83f4ddf8 <init_stream+0x14>
    83f4ddf6:	8082                	ret
    83f4ddf8:	4581                	li	a1,0
    83f4ddfa:	982fe06f          	j	83f4bf7c <memset>

0000000083f4ddfe <write_stream>:
    83f4ddfe:	451c                	lw	a5,8(a0)
    83f4de00:	4558                	lw	a4,12(a0)
    83f4de02:	00c786bb          	addw	a3,a5,a2
    83f4de06:	0037171b          	slliw	a4,a4,0x3
    83f4de0a:	8336                	mv	t1,a3
    83f4de0c:	06e6d863          	bge	a3,a4,83f4de7c <write_stream+0x7e>
    83f4de10:	471d                	li	a4,7
    83f4de12:	06c75a63          	bge	a4,a2,83f4de86 <write_stream+0x88>
    83f4de16:	ff86081b          	addiw	a6,a2,-8
    83f4de1a:	00385e1b          	srliw	t3,a6,0x3
    83f4de1e:	001e089b          	addiw	a7,t3,1
    83f4de22:	98ae                	add	a7,a7,a1
    83f4de24:	6114                	ld	a3,0(a0)
    83f4de26:	4037d613          	srai	a2,a5,0x3
    83f4de2a:	0005c703          	lbu	a4,0(a1)
    83f4de2e:	96b2                	add	a3,a3,a2
    83f4de30:	0006d603          	lhu	a2,0(a3)
    83f4de34:	8b9d                	andi	a5,a5,7
    83f4de36:	00f717bb          	sllw	a5,a4,a5
    83f4de3a:	8fd1                	or	a5,a5,a2
    83f4de3c:	00f69023          	sh	a5,0(a3)
    83f4de40:	451c                	lw	a5,8(a0)
    83f4de42:	0585                	addi	a1,a1,1
    83f4de44:	27a1                	addiw	a5,a5,8
    83f4de46:	c51c                	sw	a5,8(a0)
    83f4de48:	fcb89ee3          	bne	a7,a1,83f4de24 <write_stream+0x26>
    83f4de4c:	003e161b          	slliw	a2,t3,0x3
    83f4de50:	40c8063b          	subw	a2,a6,a2
    83f4de54:	02c05663          	blez	a2,83f4de80 <write_stream+0x82>
    83f4de58:	4514                	lw	a3,8(a0)
    83f4de5a:	6118                	ld	a4,0(a0)
    83f4de5c:	0008c783          	lbu	a5,0(a7)
    83f4de60:	4036d613          	srai	a2,a3,0x3
    83f4de64:	9732                	add	a4,a4,a2
    83f4de66:	00075603          	lhu	a2,0(a4)
    83f4de6a:	8a9d                	andi	a3,a3,7
    83f4de6c:	00d797bb          	sllw	a5,a5,a3
    83f4de70:	8fd1                	or	a5,a5,a2
    83f4de72:	00f71023          	sh	a5,0(a4)
    83f4de76:	00652423          	sw	t1,8(a0) # 1008 <_EL1_STACK_SIZE+0x808>
    83f4de7a:	8082                	ret
    83f4de7c:	57fd                	li	a5,-1
    83f4de7e:	c91c                	sw	a5,16(a0)
    83f4de80:	00652423          	sw	t1,8(a0)
    83f4de84:	8082                	ret
    83f4de86:	88ae                	mv	a7,a1
    83f4de88:	b7f1                	j	83f4de54 <write_stream+0x56>

0000000083f4de8a <get_color>:
    83f4de8a:	87aa                	mv	a5,a0
    83f4de8c:	4501                	li	a0,0
    83f4de8e:	e199                	bnez	a1,83f4de94 <get_color+0xa>
    83f4de90:	4388                	lw	a0,0(a5)
    83f4de92:	8082                	ret
    83f4de94:	4715                	li	a4,5
    83f4de96:	00e58a63          	beq	a1,a4,83f4deaa <get_color+0x20>
    83f4de9a:	4711                	li	a4,4
    83f4de9c:	04e58763          	beq	a1,a4,83f4deea <get_color+0x60>
    83f4dea0:	99f5                	andi	a1,a1,-3
    83f4dea2:	4721                	li	a4,8
    83f4dea4:	02e58e63          	beq	a1,a4,83f4dee0 <get_color+0x56>
    83f4dea8:	8082                	ret
    83f4deaa:	0007d703          	lhu	a4,0(a5)
    83f4deae:	0007d683          	lhu	a3,0(a5)
    83f4deb2:	00a7551b          	srliw	a0,a4,0xa
    83f4deb6:	0057579b          	srliw	a5,a4,0x5
    83f4deba:	897d                	andi	a0,a0,31
    83f4debc:	8afd                	andi	a3,a3,31
    83f4debe:	8bfd                	andi	a5,a5,31
    83f4dec0:	0105151b          	slliw	a0,a0,0x10
    83f4dec4:	0087979b          	slliw	a5,a5,0x8
    83f4dec8:	8d55                	or	a0,a0,a3
    83f4deca:	8d5d                	or	a0,a0,a5
    83f4decc:	010007b7          	lui	a5,0x1000
    83f4ded0:	17fd                	addi	a5,a5,-1
    83f4ded2:	00f7571b          	srliw	a4,a4,0xf
    83f4ded6:	0187171b          	slliw	a4,a4,0x18
    83f4deda:	8d7d                	and	a0,a0,a5
    83f4dedc:	8d59                	or	a0,a0,a4
    83f4dede:	8082                	ret
    83f4dee0:	0007c503          	lbu	a0,0(a5) # 1000000 <CVIMMAP_FSBL_UNZIP_SIZE+0x100000>
    83f4dee4:	0185151b          	slliw	a0,a0,0x18
    83f4dee8:	8082                	ret
    83f4deea:	0007d703          	lhu	a4,0(a5)
    83f4deee:	0007d683          	lhu	a3,0(a5)
    83f4def2:	0087551b          	srliw	a0,a4,0x8
    83f4def6:	0047579b          	srliw	a5,a4,0x4
    83f4defa:	893d                	andi	a0,a0,15
    83f4defc:	8abd                	andi	a3,a3,15
    83f4defe:	8bbd                	andi	a5,a5,15
    83f4df00:	0105151b          	slliw	a0,a0,0x10
    83f4df04:	0087979b          	slliw	a5,a5,0x8
    83f4df08:	8d55                	or	a0,a0,a3
    83f4df0a:	8d5d                	or	a0,a0,a5
    83f4df0c:	010007b7          	lui	a5,0x1000
    83f4df10:	17fd                	addi	a5,a5,-1
    83f4df12:	00c7571b          	srliw	a4,a4,0xc
    83f4df16:	0187171b          	slliw	a4,a4,0x18
    83f4df1a:	8d7d                	and	a0,a0,a5
    83f4df1c:	8d59                	or	a0,a0,a4
    83f4df1e:	8082                	ret

0000000083f4df20 <palette_cache_init>:
    83f4df20:	10000e13          	li	t3,256
    83f4df24:	02be4e3b          	divw	t3,t3,a1
    83f4df28:	06b05363          	blez	a1,83f4df8e <palette_cache_init+0x6e>
    83f4df2c:	00259313          	slli	t1,a1,0x2
    83f4df30:	4781                	li	a5,0
    83f4df32:	4581                	li	a1,0
    83f4df34:	0ff00e93          	li	t4,255
    83f4df38:	0107969b          	slliw	a3,a5,0x10
    83f4df3c:	0187971b          	slliw	a4,a5,0x18
    83f4df40:	8f55                	or	a4,a4,a3
    83f4df42:	0087961b          	slliw	a2,a5,0x8
    83f4df46:	6114                	ld	a3,0(a0)
    83f4df48:	8f5d                	or	a4,a4,a5
    83f4df4a:	8f51                	or	a4,a4,a2
    83f4df4c:	0007061b          	sext.w	a2,a4
    83f4df50:	96ae                	add	a3,a3,a1
    83f4df52:	00865893          	srli	a7,a2,0x8
    83f4df56:	01065813          	srli	a6,a2,0x10
    83f4df5a:	8261                	srli	a2,a2,0x18
    83f4df5c:	00e68023          	sb	a4,0(a3)
    83f4df60:	011680a3          	sb	a7,1(a3)
    83f4df64:	01068123          	sb	a6,2(a3)
    83f4df68:	00c681a3          	sb	a2,3(a3)
    83f4df6c:	4518                	lw	a4,8(a0)
    83f4df6e:	01c786bb          	addw	a3,a5,t3
    83f4df72:	87b6                	mv	a5,a3
    83f4df74:	2705                	addiw	a4,a4,1
    83f4df76:	c518                	sw	a4,8(a0)
    83f4df78:	0591                	addi	a1,a1,4
    83f4df7a:	0006cb63          	bltz	a3,83f4df90 <palette_cache_init+0x70>
    83f4df7e:	00ded463          	bge	t4,a3,83f4df86 <palette_cache_init+0x66>
    83f4df82:	0ff00793          	li	a5,255
    83f4df86:	0ff7f793          	andi	a5,a5,255
    83f4df8a:	fab317e3          	bne	t1,a1,83f4df38 <palette_cache_init+0x18>
    83f4df8e:	8082                	ret
    83f4df90:	4781                	li	a5,0
    83f4df92:	4681                	li	a3,0
    83f4df94:	b7ed                	j	83f4df7e <palette_cache_init+0x5e>

0000000083f4df96 <palette_cache_lookup_color>:
    83f4df96:	4514                	lw	a3,8(a0)
    83f4df98:	611c                	ld	a5,0(a0)
    83f4df9a:	88aa                	mv	a7,a0
    83f4df9c:	0005831b          	sext.w	t1,a1
    83f4dfa0:	04d05863          	blez	a3,83f4dff0 <palette_cache_lookup_color+0x5a>
    83f4dfa4:	873e                	mv	a4,a5
    83f4dfa6:	4501                	li	a0,0
    83f4dfa8:	a021                	j	83f4dfb0 <palette_cache_lookup_color+0x1a>
    83f4dfaa:	2505                	addiw	a0,a0,1
    83f4dfac:	04d50263          	beq	a0,a3,83f4dff0 <palette_cache_lookup_color+0x5a>
    83f4dfb0:	4310                	lw	a2,0(a4)
    83f4dfb2:	0711                	addi	a4,a4,4
    83f4dfb4:	0006081b          	sext.w	a6,a2
    83f4dfb8:	fe6819e3          	bne	a6,t1,83f4dfaa <palette_cache_lookup_color+0x14>
    83f4dfbc:	c52d                	beqz	a0,83f4e026 <palette_cache_lookup_color+0x90>
    83f4dfbe:	fff5081b          	addiw	a6,a0,-1
    83f4dfc2:	1802                	slli	a6,a6,0x20
    83f4dfc4:	02085813          	srli	a6,a6,0x20
    83f4dfc8:	41050833          	sub	a6,a0,a6
    83f4dfcc:	00251713          	slli	a4,a0,0x2
    83f4dfd0:	080a                	slli	a6,a6,0x2
    83f4dfd2:	a011                	j	83f4dfd6 <palette_cache_lookup_color+0x40>
    83f4dfd4:	8736                	mv	a4,a3
    83f4dfd6:	ffc70693          	addi	a3,a4,-4
    83f4dfda:	00d785b3          	add	a1,a5,a3
    83f4dfde:	418c                	lw	a1,0(a1)
    83f4dfe0:	97ba                	add	a5,a5,a4
    83f4dfe2:	c38c                	sw	a1,0(a5)
    83f4dfe4:	0008b783          	ld	a5,0(a7)
    83f4dfe8:	fee816e3          	bne	a6,a4,83f4dfd4 <palette_cache_lookup_color+0x3e>
    83f4dfec:	c390                	sw	a2,0(a5)
    83f4dfee:	8082                	ret
    83f4dff0:	fff6861b          	addiw	a2,a3,-1
    83f4dff4:	02c05763          	blez	a2,83f4e022 <palette_cache_lookup_color+0x8c>
    83f4dff8:	ffe6871b          	addiw	a4,a3,-2
    83f4dffc:	1702                	slli	a4,a4,0x20
    83f4dffe:	9301                	srli	a4,a4,0x20
    83f4e000:	40e68733          	sub	a4,a3,a4
    83f4e004:	070a                	slli	a4,a4,0x2
    83f4e006:	060a                	slli	a2,a2,0x2
    83f4e008:	1761                	addi	a4,a4,-8
    83f4e00a:	ffc60693          	addi	a3,a2,-4
    83f4e00e:	00d78533          	add	a0,a5,a3
    83f4e012:	4108                	lw	a0,0(a0)
    83f4e014:	97b2                	add	a5,a5,a2
    83f4e016:	8636                	mv	a2,a3
    83f4e018:	c388                	sw	a0,0(a5)
    83f4e01a:	0008b783          	ld	a5,0(a7)
    83f4e01e:	fed716e3          	bne	a4,a3,83f4e00a <palette_cache_lookup_color+0x74>
    83f4e022:	c38c                	sw	a1,0(a5)
    83f4e024:	557d                	li	a0,-1
    83f4e026:	8082                	ret

0000000083f4e028 <enc_literal>:
    83f4e028:	7179                	addi	sp,sp,-48
    83f4e02a:	f406                	sd	ra,40(sp)
    83f4e02c:	c42e                	sw	a1,8(sp)
    83f4e02e:	c205                	beqz	a2,83f4e04e <enc_literal+0x26>
    83f4e030:	4715                	li	a4,5
    83f4e032:	06e60b63          	beq	a2,a4,83f4e0a8 <enc_literal+0x80>
    83f4e036:	4711                	li	a4,4
    83f4e038:	02e60363          	beq	a2,a4,83f4e05e <enc_literal+0x36>
    83f4e03c:	4721                	li	a4,8
    83f4e03e:	04e60e63          	beq	a2,a4,83f4e09a <enc_literal+0x72>
    83f4e042:	4729                	li	a4,10
    83f4e044:	04e60a63          	beq	a2,a4,83f4e098 <enc_literal+0x70>
    83f4e048:	70a2                	ld	ra,40(sp)
    83f4e04a:	6145                	addi	sp,sp,48
    83f4e04c:	8082                	ret
    83f4e04e:	002c                	addi	a1,sp,8
    83f4e050:	02000613          	li	a2,32
    83f4e054:	dabff0ef          	jal	ra,83f4ddfe <write_stream>
    83f4e058:	70a2                	ld	ra,40(sp)
    83f4e05a:	6145                	addi	sp,sp,48
    83f4e05c:	8082                	ret
    83f4e05e:	00914683          	lbu	a3,9(sp)
    83f4e062:	00814783          	lbu	a5,8(sp)
    83f4e066:	00a14703          	lbu	a4,10(sp)
    83f4e06a:	00b14603          	lbu	a2,11(sp)
    83f4e06e:	8abd                	andi	a3,a3,15
    83f4e070:	0046969b          	slliw	a3,a3,0x4
    83f4e074:	8bbd                	andi	a5,a5,15
    83f4e076:	8b3d                	andi	a4,a4,15
    83f4e078:	0087171b          	slliw	a4,a4,0x8
    83f4e07c:	8fd5                	or	a5,a5,a3
    83f4e07e:	8fd9                	or	a5,a5,a4
    83f4e080:	00c6171b          	slliw	a4,a2,0xc
    83f4e084:	8fd9                	or	a5,a5,a4
    83f4e086:	082c                	addi	a1,sp,24
    83f4e088:	4641                	li	a2,16
    83f4e08a:	00f11c23          	sh	a5,24(sp)
    83f4e08e:	d71ff0ef          	jal	ra,83f4ddfe <write_stream>
    83f4e092:	70a2                	ld	ra,40(sp)
    83f4e094:	6145                	addi	sp,sp,48
    83f4e096:	8082                	ret
    83f4e098:	4611                	li	a2,4
    83f4e09a:	00b10593          	addi	a1,sp,11
    83f4e09e:	d61ff0ef          	jal	ra,83f4ddfe <write_stream>
    83f4e0a2:	70a2                	ld	ra,40(sp)
    83f4e0a4:	6145                	addi	sp,sp,48
    83f4e0a6:	8082                	ret
    83f4e0a8:	00914683          	lbu	a3,9(sp)
    83f4e0ac:	00814783          	lbu	a5,8(sp)
    83f4e0b0:	00a14703          	lbu	a4,10(sp)
    83f4e0b4:	00b14603          	lbu	a2,11(sp)
    83f4e0b8:	8afd                	andi	a3,a3,31
    83f4e0ba:	0056969b          	slliw	a3,a3,0x5
    83f4e0be:	8bfd                	andi	a5,a5,31
    83f4e0c0:	8b7d                	andi	a4,a4,31
    83f4e0c2:	00a7171b          	slliw	a4,a4,0xa
    83f4e0c6:	8fd5                	or	a5,a5,a3
    83f4e0c8:	8fd9                	or	a5,a5,a4
    83f4e0ca:	00f6171b          	slliw	a4,a2,0xf
    83f4e0ce:	bf5d                	j	83f4e084 <enc_literal+0x5c>

0000000083f4e0d0 <enc_mode_syntax>:
    83f4e0d0:	01474783          	lbu	a5,20(a4)
    83f4e0d4:	7139                	addi	sp,sp,-64
    83f4e0d6:	f822                	sd	s0,48(sp)
    83f4e0d8:	f426                	sd	s1,40(sp)
    83f4e0da:	f04a                	sd	s2,32(sp)
    83f4e0dc:	ec4e                	sd	s3,24(sp)
    83f4e0de:	fc06                	sd	ra,56(sp)
    83f4e0e0:	e852                	sd	s4,16(sp)
    83f4e0e2:	84ba                	mv	s1,a4
    83f4e0e4:	89aa                	mv	s3,a0
    83f4e0e6:	8432                	mv	s0,a2
    83f4e0e8:	8936                	mv	s2,a3
    83f4e0ea:	cbbd                	beqz	a5,83f4e160 <enc_mode_syntax+0x90>
    83f4e0ec:	4785                	li	a5,1
    83f4e0ee:	02f58f63          	beq	a1,a5,83f4e12c <enc_mode_syntax+0x5c>
    83f4e0f2:	edb9                	bnez	a1,83f4e150 <enc_mode_syntax+0x80>
    83f4e0f4:	0cc7da63          	bge	a5,a2,83f4e1c8 <enc_mode_syntax+0xf8>
    83f4e0f8:	4f10                	lw	a2,24(a4)
    83f4e0fa:	fff4079b          	addiw	a5,s0,-1
    83f4e0fe:	0037979b          	slliw	a5,a5,0x3
    83f4e102:	0047e793          	ori	a5,a5,4
    83f4e106:	260d                	addiw	a2,a2,3
    83f4e108:	00e10593          	addi	a1,sp,14
    83f4e10c:	00f11723          	sh	a5,14(sp)
    83f4e110:	cefff0ef          	jal	ra,83f4ddfe <write_stream>
    83f4e114:	7442                	ld	s0,48(sp)
    83f4e116:	5090                	lw	a2,32(s1)
    83f4e118:	70e2                	ld	ra,56(sp)
    83f4e11a:	74a2                	ld	s1,40(sp)
    83f4e11c:	6a42                	ld	s4,16(sp)
    83f4e11e:	85ca                	mv	a1,s2
    83f4e120:	854e                	mv	a0,s3
    83f4e122:	7902                	ld	s2,32(sp)
    83f4e124:	69e2                	ld	s3,24(sp)
    83f4e126:	6121                	addi	sp,sp,64
    83f4e128:	f01ff06f          	j	83f4e028 <enc_literal>
    83f4e12c:	4f50                	lw	a2,28(a4)
    83f4e12e:	0885d163          	bge	a1,s0,83f4e1b0 <enc_mode_syntax+0xe0>
    83f4e132:	4f1c                	lw	a5,24(a4)
    83f4e134:	347d                	addiw	s0,s0,-1
    83f4e136:	0034141b          	slliw	s0,s0,0x3
    83f4e13a:	278d                	addiw	a5,a5,3
    83f4e13c:	00f696bb          	sllw	a3,a3,a5
    83f4e140:	8c55                	or	s0,s0,a3
    83f4e142:	9e3d                	addw	a2,a2,a5
    83f4e144:	00e10593          	addi	a1,sp,14
    83f4e148:	00811723          	sh	s0,14(sp)
    83f4e14c:	cb3ff0ef          	jal	ra,83f4ddfe <write_stream>
    83f4e150:	70e2                	ld	ra,56(sp)
    83f4e152:	7442                	ld	s0,48(sp)
    83f4e154:	74a2                	ld	s1,40(sp)
    83f4e156:	7902                	ld	s2,32(sp)
    83f4e158:	69e2                	ld	s3,24(sp)
    83f4e15a:	6a42                	ld	s4,16(sp)
    83f4e15c:	6121                	addi	sp,sp,64
    83f4e15e:	8082                	ret
    83f4e160:	00262793          	slti	a5,a2,2
    83f4e164:	4a05                	li	s4,1
    83f4e166:	4605                	li	a2,1
    83f4e168:	00d10593          	addi	a1,sp,13
    83f4e16c:	00f106a3          	sb	a5,13(sp)
    83f4e170:	c8fff0ef          	jal	ra,83f4ddfe <write_stream>
    83f4e174:	008a4f63          	blt	s4,s0,83f4e192 <enc_mode_syntax+0xc2>
    83f4e178:	5090                	lw	a2,32(s1)
    83f4e17a:	85ca                	mv	a1,s2
    83f4e17c:	854e                	mv	a0,s3
    83f4e17e:	eabff0ef          	jal	ra,83f4e028 <enc_literal>
    83f4e182:	70e2                	ld	ra,56(sp)
    83f4e184:	7442                	ld	s0,48(sp)
    83f4e186:	74a2                	ld	s1,40(sp)
    83f4e188:	7902                	ld	s2,32(sp)
    83f4e18a:	69e2                	ld	s3,24(sp)
    83f4e18c:	6a42                	ld	s4,16(sp)
    83f4e18e:	6121                	addi	sp,sp,64
    83f4e190:	8082                	ret
    83f4e192:	4c90                	lw	a2,24(s1)
    83f4e194:	00e10593          	addi	a1,sp,14
    83f4e198:	854e                	mv	a0,s3
    83f4e19a:	347d                	addiw	s0,s0,-1
    83f4e19c:	00810723          	sb	s0,14(sp)
    83f4e1a0:	c5fff0ef          	jal	ra,83f4ddfe <write_stream>
    83f4e1a4:	5090                	lw	a2,32(s1)
    83f4e1a6:	85ca                	mv	a1,s2
    83f4e1a8:	854e                	mv	a0,s3
    83f4e1aa:	e7fff0ef          	jal	ra,83f4e028 <enc_literal>
    83f4e1ae:	bfd1                	j	83f4e182 <enc_mode_syntax+0xb2>
    83f4e1b0:	0026969b          	slliw	a3,a3,0x2
    83f4e1b4:	0026e693          	ori	a3,a3,2
    83f4e1b8:	2609                	addiw	a2,a2,2
    83f4e1ba:	00e10593          	addi	a1,sp,14
    83f4e1be:	00d11723          	sh	a3,14(sp)
    83f4e1c2:	c3dff0ef          	jal	ra,83f4ddfe <write_stream>
    83f4e1c6:	b769                	j	83f4e150 <enc_mode_syntax+0x80>
    83f4e1c8:	4605                	li	a2,1
    83f4e1ca:	00e10593          	addi	a1,sp,14
    83f4e1ce:	00f10723          	sb	a5,14(sp)
    83f4e1d2:	c2dff0ef          	jal	ra,83f4ddfe <write_stream>
    83f4e1d6:	bf3d                	j	83f4e114 <enc_mode_syntax+0x44>

0000000083f4e1d8 <osd_cmpr_enc_header>:
    83f4e1d8:	7139                	addi	sp,sp,-64
    83f4e1da:	f822                	sd	s0,48(sp)
    83f4e1dc:	fc06                	sd	ra,56(sp)
    83f4e1de:	4198                	lw	a4,0(a1)
    83f4e1e0:	41dc                	lw	a5,4(a1)
    83f4e1e2:	4685                	li	a3,1
    83f4e1e4:	377d                	addiw	a4,a4,-1
    83f4e1e6:	37fd                	addiw	a5,a5,-1
    83f4e1e8:	02369813          	slli	a6,a3,0x23
    83f4e1ec:	4621                	li	a2,8
    83f4e1ee:	842e                	mv	s0,a1
    83f4e1f0:	4581                	li	a1,0
    83f4e1f2:	e03a                	sd	a4,0(sp)
    83f4e1f4:	e43e                	sd	a5,8(sp)
    83f4e1f6:	d436                	sw	a3,40(sp)
    83f4e1f8:	ec2a                	sd	a0,24(sp)
    83f4e1fa:	f042                	sd	a6,32(sp)
    83f4e1fc:	d81fd0ef          	jal	ra,83f4bf7c <memset>
    83f4e200:	5792                	lw	a5,36(sp)
    83f4e202:	5702                	lw	a4,32(sp)
    83f4e204:	0037961b          	slliw	a2,a5,0x3
    83f4e208:	0087069b          	addiw	a3,a4,8
    83f4e20c:	87b2                	mv	a5,a2
    83f4e20e:	00c6d363          	bge	a3,a2,83f4e214 <osd_cmpr_enc_header+0x3c>
    83f4e212:	87b6                	mv	a5,a3
    83f4e214:	4611                	li	a2,4
    83f4e216:	02040593          	addi	a1,s0,32
    83f4e21a:	0828                	addi	a0,sp,24
    83f4e21c:	d03e                	sw	a5,32(sp)
    83f4e21e:	be1ff0ef          	jal	ra,83f4ddfe <write_stream>
    83f4e222:	5792                	lw	a5,36(sp)
    83f4e224:	5702                	lw	a4,32(sp)
    83f4e226:	0037961b          	slliw	a2,a5,0x3
    83f4e22a:	0037069b          	addiw	a3,a4,3
    83f4e22e:	87b2                	mv	a5,a2
    83f4e230:	00c6d363          	bge	a3,a2,83f4e236 <osd_cmpr_enc_header+0x5e>
    83f4e234:	87b6                	mv	a5,a3
    83f4e236:	4c54                	lw	a3,28(s0)
    83f4e238:	4705                	li	a4,1
    83f4e23a:	4621                	li	a2,8
    83f4e23c:	00d7173b          	sllw	a4,a4,a3
    83f4e240:	080c                	addi	a1,sp,16
    83f4e242:	0828                	addi	a0,sp,24
    83f4e244:	d03e                	sw	a5,32(sp)
    83f4e246:	e83a                	sd	a4,16(sp)
    83f4e248:	bb7ff0ef          	jal	ra,83f4ddfe <write_stream>
    83f4e24c:	4609                	li	a2,2
    83f4e24e:	01040593          	addi	a1,s0,16
    83f4e252:	0828                	addi	a0,sp,24
    83f4e254:	babff0ef          	jal	ra,83f4ddfe <write_stream>
    83f4e258:	5792                	lw	a5,36(sp)
    83f4e25a:	5702                	lw	a4,32(sp)
    83f4e25c:	0037961b          	slliw	a2,a5,0x3
    83f4e260:	0027069b          	addiw	a3,a4,2
    83f4e264:	87b2                	mv	a5,a2
    83f4e266:	00c6d363          	bge	a3,a2,83f4e26c <osd_cmpr_enc_header+0x94>
    83f4e26a:	87b6                	mv	a5,a3
    83f4e26c:	4609                	li	a2,2
    83f4e26e:	00c40593          	addi	a1,s0,12
    83f4e272:	0828                	addi	a0,sp,24
    83f4e274:	d03e                	sw	a5,32(sp)
    83f4e276:	b89ff0ef          	jal	ra,83f4ddfe <write_stream>
    83f4e27a:	5792                	lw	a5,36(sp)
    83f4e27c:	5702                	lw	a4,32(sp)
    83f4e27e:	0037961b          	slliw	a2,a5,0x3
    83f4e282:	0027069b          	addiw	a3,a4,2
    83f4e286:	87b2                	mv	a5,a2
    83f4e288:	00c6d363          	bge	a3,a2,83f4e28e <osd_cmpr_enc_header+0xb6>
    83f4e28c:	87b6                	mv	a5,a3
    83f4e28e:	858a                	mv	a1,sp
    83f4e290:	0828                	addi	a0,sp,24
    83f4e292:	4641                	li	a2,16
    83f4e294:	d03e                	sw	a5,32(sp)
    83f4e296:	b69ff0ef          	jal	ra,83f4ddfe <write_stream>
    83f4e29a:	002c                	addi	a1,sp,8
    83f4e29c:	0828                	addi	a0,sp,24
    83f4e29e:	4641                	li	a2,16
    83f4e2a0:	b5fff0ef          	jal	ra,83f4ddfe <write_stream>
    83f4e2a4:	70e2                	ld	ra,56(sp)
    83f4e2a6:	7442                	ld	s0,48(sp)
    83f4e2a8:	6121                	addi	sp,sp,64
    83f4e2aa:	8082                	ret

0000000083f4e2ac <osd_cmpr_enc_followed_run>:
    83f4e2ac:	7139                	addi	sp,sp,-64
    83f4e2ae:	f822                	sd	s0,48(sp)
    83f4e2b0:	f426                	sd	s1,40(sp)
    83f4e2b2:	f04a                	sd	s2,32(sp)
    83f4e2b4:	ec4e                	sd	s3,24(sp)
    83f4e2b6:	e852                	sd	s4,16(sp)
    83f4e2b8:	e456                	sd	s5,8(sp)
    83f4e2ba:	e05a                	sd	s6,0(sp)
    83f4e2bc:	fc06                	sd	ra,56(sp)
    83f4e2be:	84b2                	mv	s1,a2
    83f4e2c0:	89ae                	mv	s3,a1
    83f4e2c2:	4190                	lw	a2,0(a1)
    83f4e2c4:	8936                	mv	s2,a3
    83f4e2c6:	408c                	lw	a1,0(s1)
    83f4e2c8:	4294                	lw	a3,0(a3)
    83f4e2ca:	843a                	mv	s0,a4
    83f4e2cc:	8b2a                	mv	s6,a0
    83f4e2ce:	8742                	mv	a4,a6
    83f4e2d0:	8546                	mv	a0,a7
    83f4e2d2:	8abe                	mv	s5,a5
    83f4e2d4:	8a42                	mv	s4,a6
    83f4e2d6:	dfbff0ef          	jal	ra,83f4e0d0 <enc_mode_syntax>
    83f4e2da:	00045883          	lhu	a7,0(s0)
    83f4e2de:	03089793          	slli	a5,a7,0x30
    83f4e2e2:	93c1                	srli	a5,a5,0x30
    83f4e2e4:	00faf363          	bgeu	s5,a5,83f4e2ea <osd_cmpr_enc_followed_run+0x3e>
    83f4e2e8:	88d6                	mv	a7,s5
    83f4e2ea:	18c2                	slli	a7,a7,0x30
    83f4e2ec:	0308d893          	srli	a7,a7,0x30
    83f4e2f0:	0119a023          	sw	a7,0(s3)
    83f4e2f4:	00045783          	lhu	a5,0(s0)
    83f4e2f8:	4705                	li	a4,1
    83f4e2fa:	411788bb          	subw	a7,a5,a7
    83f4e2fe:	01141023          	sh	a7,0(s0)
    83f4e302:	409c                	lw	a5,0(s1)
    83f4e304:	02e78863          	beq	a5,a4,83f4e334 <osd_cmpr_enc_followed_run+0x88>
    83f4e308:	014a4783          	lbu	a5,20(s4)
    83f4e30c:	ef99                	bnez	a5,83f4e32a <osd_cmpr_enc_followed_run+0x7e>
    83f4e30e:	01692023          	sw	s6,0(s2)
    83f4e312:	0004a023          	sw	zero,0(s1)
    83f4e316:	70e2                	ld	ra,56(sp)
    83f4e318:	7442                	ld	s0,48(sp)
    83f4e31a:	74a2                	ld	s1,40(sp)
    83f4e31c:	7902                	ld	s2,32(sp)
    83f4e31e:	69e2                	ld	s3,24(sp)
    83f4e320:	6a42                	ld	s4,16(sp)
    83f4e322:	6aa2                	ld	s5,8(sp)
    83f4e324:	6b02                	ld	s6,0(sp)
    83f4e326:	6121                	addi	sp,sp,64
    83f4e328:	8082                	ret
    83f4e32a:	00092023          	sw	zero,0(s2)
    83f4e32e:	4785                	li	a5,1
    83f4e330:	c09c                	sw	a5,0(s1)
    83f4e332:	b7d5                	j	83f4e316 <osd_cmpr_enc_followed_run+0x6a>
    83f4e334:	00092783          	lw	a5,0(s2)
    83f4e338:	dff9                	beqz	a5,83f4e316 <osd_cmpr_enc_followed_run+0x6a>
    83f4e33a:	b7f9                	j	83f4e308 <osd_cmpr_enc_followed_run+0x5c>

0000000083f4e33c <osd_cmpr_enc_const_pixel>:
    83f4e33c:	715d                	addi	sp,sp,-80
    83f4e33e:	e0a2                	sd	s0,64(sp)
    83f4e340:	fc26                	sd	s1,56(sp)
    83f4e342:	f84a                	sd	s2,48(sp)
    83f4e344:	f44e                	sd	s3,40(sp)
    83f4e346:	f052                	sd	s4,32(sp)
    83f4e348:	ec56                	sd	s5,24(sp)
    83f4e34a:	e85a                	sd	s6,16(sp)
    83f4e34c:	e45e                	sd	s7,8(sp)
    83f4e34e:	e062                	sd	s8,0(sp)
    83f4e350:	e486                	sd	ra,72(sp)
    83f4e352:	0005a303          	lw	t1,0(a1)
    83f4e356:	892e                	mv	s2,a1
    83f4e358:	0005059b          	sext.w	a1,a0
    83f4e35c:	8bb2                	mv	s7,a2
    83f4e35e:	6b46                	ld	s6,80(sp)
    83f4e360:	4210                	lw	a2,0(a2)
    83f4e362:	84ae                	mv	s1,a1
    83f4e364:	8a36                	mv	s4,a3
    83f4e366:	8aba                	mv	s5,a4
    83f4e368:	843e                	mv	s0,a5
    83f4e36a:	89c6                	mv	s3,a7
    83f4e36c:	00088c1b          	sext.w	s8,a7
    83f4e370:	00b31463          	bne	t1,a1,83f4e378 <osd_cmpr_enc_const_pixel+0x3c>
    83f4e374:	06080263          	beqz	a6,83f4e3d8 <osd_cmpr_enc_const_pixel+0x9c>
    83f4e378:	000aa683          	lw	a3,0(s5)
    83f4e37c:	000a2583          	lw	a1,0(s4)
    83f4e380:	6566                	ld	a0,88(sp)
    83f4e382:	875a                	mv	a4,s6
    83f4e384:	d4dff0ef          	jal	ra,83f4e0d0 <enc_mode_syntax>
    83f4e388:	014b4783          	lbu	a5,20(s6)
    83f4e38c:	ebad                	bnez	a5,83f4e3fe <osd_cmpr_enc_const_pixel+0xc2>
    83f4e38e:	009aa023          	sw	s1,0(s5)
    83f4e392:	000a2023          	sw	zero,0(s4)
    83f4e396:	00045783          	lhu	a5,0(s0)
    83f4e39a:	03079713          	slli	a4,a5,0x30
    83f4e39e:	9341                	srli	a4,a4,0x30
    83f4e3a0:	02ec6a63          	bltu	s8,a4,83f4e3d4 <osd_cmpr_enc_const_pixel+0x98>
    83f4e3a4:	17c2                	slli	a5,a5,0x30
    83f4e3a6:	93c1                	srli	a5,a5,0x30
    83f4e3a8:	00fba023          	sw	a5,0(s7)
    83f4e3ac:	00045703          	lhu	a4,0(s0)
    83f4e3b0:	40f707bb          	subw	a5,a4,a5
    83f4e3b4:	00f41023          	sh	a5,0(s0)
    83f4e3b8:	00992023          	sw	s1,0(s2)
    83f4e3bc:	60a6                	ld	ra,72(sp)
    83f4e3be:	6406                	ld	s0,64(sp)
    83f4e3c0:	74e2                	ld	s1,56(sp)
    83f4e3c2:	7942                	ld	s2,48(sp)
    83f4e3c4:	79a2                	ld	s3,40(sp)
    83f4e3c6:	7a02                	ld	s4,32(sp)
    83f4e3c8:	6ae2                	ld	s5,24(sp)
    83f4e3ca:	6b42                	ld	s6,16(sp)
    83f4e3cc:	6ba2                	ld	s7,8(sp)
    83f4e3ce:	6c02                	ld	s8,0(sp)
    83f4e3d0:	6161                	addi	sp,sp,80
    83f4e3d2:	8082                	ret
    83f4e3d4:	87ce                	mv	a5,s3
    83f4e3d6:	b7f9                	j	83f4e3a4 <osd_cmpr_enc_const_pixel+0x68>
    83f4e3d8:	fac880e3          	beq	a7,a2,83f4e378 <osd_cmpr_enc_const_pixel+0x3c>
    83f4e3dc:	0007d783          	lhu	a5,0(a5) # 1000000 <CVIMMAP_FSBL_UNZIP_SIZE+0x100000>
    83f4e3e0:	9e3d                	addw	a2,a2,a5
    83f4e3e2:	1642                	slli	a2,a2,0x30
    83f4e3e4:	9241                	srli	a2,a2,0x30
    83f4e3e6:	87b2                	mv	a5,a2
    83f4e3e8:	00cc7363          	bgeu	s8,a2,83f4e3ee <osd_cmpr_enc_const_pixel+0xb2>
    83f4e3ec:	87c6                	mv	a5,a7
    83f4e3ee:	17c2                	slli	a5,a5,0x30
    83f4e3f0:	93c1                	srli	a5,a5,0x30
    83f4e3f2:	9e1d                	subw	a2,a2,a5
    83f4e3f4:	00c41023          	sh	a2,0(s0)
    83f4e3f8:	00fba023          	sw	a5,0(s7)
    83f4e3fc:	b7c1                	j	83f4e3bc <osd_cmpr_enc_const_pixel+0x80>
    83f4e3fe:	85a6                	mv	a1,s1
    83f4e400:	028b0513          	addi	a0,s6,40
    83f4e404:	b93ff0ef          	jal	ra,83f4df96 <palette_cache_lookup_color>
    83f4e408:	f80543e3          	bltz	a0,83f4e38e <osd_cmpr_enc_const_pixel+0x52>
    83f4e40c:	00aaa023          	sw	a0,0(s5)
    83f4e410:	4785                	li	a5,1
    83f4e412:	00fa2023          	sw	a5,0(s4)
    83f4e416:	b741                	j	83f4e396 <osd_cmpr_enc_const_pixel+0x5a>

0000000083f4e418 <osd_cmpr_frame_init>:
    83f4e418:	1101                	addi	sp,sp,-32
    83f4e41a:	e822                	sd	s0,16(sp)
    83f4e41c:	e426                	sd	s1,8(sp)
    83f4e41e:	ec06                	sd	ra,24(sp)
    83f4e420:	842a                	mv	s0,a0
    83f4e422:	4d48                	lw	a0,28(a0)
    83f4e424:	4485                	li	s1,1
    83f4e426:	00a4953b          	sllw	a0,s1,a0
    83f4e42a:	050a                	slli	a0,a0,0x2
    83f4e42c:	158000ef          	jal	ra,83f4e584 <pvPortMalloc>
    83f4e430:	f408                	sd	a0,40(s0)
    83f4e432:	4c50                	lw	a2,28(s0)
    83f4e434:	c115                	beqz	a0,83f4e458 <osd_cmpr_frame_init+0x40>
    83f4e436:	00c4963b          	sllw	a2,s1,a2
    83f4e43a:	4581                	li	a1,0
    83f4e43c:	060a                	slli	a2,a2,0x2
    83f4e43e:	b3ffd0ef          	jal	ra,83f4bf7c <memset>
    83f4e442:	4c4c                	lw	a1,28(s0)
    83f4e444:	02840513          	addi	a0,s0,40
    83f4e448:	6442                	ld	s0,16(sp)
    83f4e44a:	60e2                	ld	ra,24(sp)
    83f4e44c:	00b495bb          	sllw	a1,s1,a1
    83f4e450:	64a2                	ld	s1,8(sp)
    83f4e452:	6105                	addi	sp,sp,32
    83f4e454:	acdff06f          	j	83f4df20 <palette_cache_init>
    83f4e458:	6442                	ld	s0,16(sp)
    83f4e45a:	60e2                	ld	ra,24(sp)
    83f4e45c:	00c4963b          	sllw	a2,s1,a2
    83f4e460:	64a2                	ld	s1,8(sp)
    83f4e462:	00004597          	auipc	a1,0x4
    83f4e466:	d9658593          	addi	a1,a1,-618 # 83f521f8 <__func__.1>
    83f4e46a:	00004517          	auipc	a0,0x4
    83f4e46e:	d6e50513          	addi	a0,a0,-658 # 83f521d8 <__func__.0+0x18>
    83f4e472:	0026161b          	slliw	a2,a2,0x2
    83f4e476:	6105                	addi	sp,sp,32
    83f4e478:	b1dfd06f          	j	83f4bf94 <printf>

0000000083f4e47c <osd_cmpr_get_pixel_sz>:
    83f4e47c:	c511                	beqz	a0,83f4e488 <osd_cmpr_get_pixel_sz+0xc>
    83f4e47e:	3571                	addiw	a0,a0,-4
    83f4e480:	00253513          	sltiu	a0,a0,2
    83f4e484:	0505                	addi	a0,a0,1
    83f4e486:	8082                	ret
    83f4e488:	4511                	li	a0,4
    83f4e48a:	8082                	ret

0000000083f4e48c <osd_cmpr_get_header_sz>:
    83f4e48c:	4521                	li	a0,8
    83f4e48e:	8082                	ret

0000000083f4e490 <hal_uart_init>:
    83f4e490:	0045959b          	slliw	a1,a1,0x4
    83f4e494:	4789                	li	a5,2
    83f4e496:	02b6463b          	divw	a2,a2,a1
    83f4e49a:	04f50f63          	beq	a0,a5,83f4e4f8 <hal_uart_init+0x68>
    83f4e49e:	04a7e363          	bltu	a5,a0,83f4e4e4 <hal_uart_init+0x54>
    83f4e4a2:	c53d                	beqz	a0,83f4e510 <hal_uart_init+0x80>
    83f4e4a4:	041507b7          	lui	a5,0x4150
    83f4e4a8:	00011717          	auipc	a4,0x11
    83f4e4ac:	7af73023          	sd	a5,1952(a4) # 83f5fc48 <uart>
    83f4e4b0:	47d8                	lw	a4,12(a5)
    83f4e4b2:	0ff67693          	andi	a3,a2,255
    83f4e4b6:	4086561b          	sraiw	a2,a2,0x8
    83f4e4ba:	2701                	sext.w	a4,a4
    83f4e4bc:	08376713          	ori	a4,a4,131
    83f4e4c0:	c7d8                	sw	a4,12(a5)
    83f4e4c2:	c394                	sw	a3,0(a5)
    83f4e4c4:	0ff67613          	andi	a2,a2,255
    83f4e4c8:	c3d0                	sw	a2,4(a5)
    83f4e4ca:	47d8                	lw	a4,12(a5)
    83f4e4cc:	468d                	li	a3,3
    83f4e4ce:	2701                	sext.w	a4,a4
    83f4e4d0:	f7f77713          	andi	a4,a4,-129
    83f4e4d4:	c7d8                	sw	a4,12(a5)
    83f4e4d6:	0007a223          	sw	zero,4(a5) # 4150004 <CVIMMAP_DRAM_SIZE+0x150004>
    83f4e4da:	cb94                	sw	a3,16(a5)
    83f4e4dc:	471d                	li	a4,7
    83f4e4de:	c798                	sw	a4,8(a5)
    83f4e4e0:	c7d4                	sw	a3,12(a5)
    83f4e4e2:	8082                	ret
    83f4e4e4:	478d                	li	a5,3
    83f4e4e6:	02f51063          	bne	a0,a5,83f4e506 <hal_uart_init+0x76>
    83f4e4ea:	041707b7          	lui	a5,0x4170
    83f4e4ee:	00011717          	auipc	a4,0x11
    83f4e4f2:	74f73d23          	sd	a5,1882(a4) # 83f5fc48 <uart>
    83f4e4f6:	bf6d                	j	83f4e4b0 <hal_uart_init+0x20>
    83f4e4f8:	041607b7          	lui	a5,0x4160
    83f4e4fc:	00011717          	auipc	a4,0x11
    83f4e500:	74f73623          	sd	a5,1868(a4) # 83f5fc48 <uart>
    83f4e504:	b775                	j	83f4e4b0 <hal_uart_init+0x20>
    83f4e506:	00011797          	auipc	a5,0x11
    83f4e50a:	7427b783          	ld	a5,1858(a5) # 83f5fc48 <uart>
    83f4e50e:	b74d                	j	83f4e4b0 <hal_uart_init+0x20>
    83f4e510:	041407b7          	lui	a5,0x4140
    83f4e514:	00011717          	auipc	a4,0x11
    83f4e518:	72f73a23          	sd	a5,1844(a4) # 83f5fc48 <uart>
    83f4e51c:	bf51                	j	83f4e4b0 <hal_uart_init+0x20>

0000000083f4e51e <hal_uart_putc>:
    83f4e51e:	00011717          	auipc	a4,0x11
    83f4e522:	72a73703          	ld	a4,1834(a4) # 83f5fc48 <uart>
    83f4e526:	4b5c                	lw	a5,20(a4)
    83f4e528:	0207f793          	andi	a5,a5,32
    83f4e52c:	dfed                	beqz	a5,83f4e526 <hal_uart_putc+0x8>
    83f4e52e:	2501                	sext.w	a0,a0
    83f4e530:	c308                	sw	a0,0(a4)
    83f4e532:	8082                	ret

0000000083f4e534 <prvInsertBlockIntoFreeList>:
    83f4e534:	0000f797          	auipc	a5,0xf
    83f4e538:	fac78793          	addi	a5,a5,-84 # 83f5d4e0 <xStart>
    83f4e53c:	873e                	mv	a4,a5
    83f4e53e:	639c                	ld	a5,0(a5)
    83f4e540:	fea7eee3          	bltu	a5,a0,83f4e53c <prvInsertBlockIntoFreeList+0x8>
    83f4e544:	6710                	ld	a2,8(a4)
    83f4e546:	6514                	ld	a3,8(a0)
    83f4e548:	00c705b3          	add	a1,a4,a2
    83f4e54c:	02b50863          	beq	a0,a1,83f4e57c <prvInsertBlockIntoFreeList+0x48>
    83f4e550:	00d50633          	add	a2,a0,a3
    83f4e554:	00c78763          	beq	a5,a2,83f4e562 <prvInsertBlockIntoFreeList+0x2e>
    83f4e558:	e11c                	sd	a5,0(a0)
    83f4e55a:	00e50363          	beq	a0,a4,83f4e560 <prvInsertBlockIntoFreeList+0x2c>
    83f4e55e:	e308                	sd	a0,0(a4)
    83f4e560:	8082                	ret
    83f4e562:	00011617          	auipc	a2,0x11
    83f4e566:	6ee63603          	ld	a2,1774(a2) # 83f5fc50 <pxEnd>
    83f4e56a:	fec787e3          	beq	a5,a2,83f4e558 <prvInsertBlockIntoFreeList+0x24>
    83f4e56e:	679c                	ld	a5,8(a5)
    83f4e570:	96be                	add	a3,a3,a5
    83f4e572:	e514                	sd	a3,8(a0)
    83f4e574:	631c                	ld	a5,0(a4)
    83f4e576:	639c                	ld	a5,0(a5)
    83f4e578:	e11c                	sd	a5,0(a0)
    83f4e57a:	b7c5                	j	83f4e55a <prvInsertBlockIntoFreeList+0x26>
    83f4e57c:	96b2                	add	a3,a3,a2
    83f4e57e:	e714                	sd	a3,8(a4)
    83f4e580:	853a                	mv	a0,a4
    83f4e582:	b7f9                	j	83f4e550 <prvInsertBlockIntoFreeList+0x1c>

0000000083f4e584 <pvPortMalloc>:
    83f4e584:	7139                	addi	sp,sp,-64
    83f4e586:	f822                	sd	s0,48(sp)
    83f4e588:	fc06                	sd	ra,56(sp)
    83f4e58a:	f426                	sd	s1,40(sp)
    83f4e58c:	f04a                	sd	s2,32(sp)
    83f4e58e:	ec4e                	sd	s3,24(sp)
    83f4e590:	e852                	sd	s4,16(sp)
    83f4e592:	e456                	sd	s5,8(sp)
    83f4e594:	842a                	mv	s0,a0
    83f4e596:	6a1000ef          	jal	ra,83f4f436 <vTaskSuspendAll>
    83f4e59a:	00011697          	auipc	a3,0x11
    83f4e59e:	6b668693          	addi	a3,a3,1718 # 83f5fc50 <pxEnd>
    83f4e5a2:	629c                	ld	a5,0(a3)
    83f4e5a4:	cbe1                	beqz	a5,83f4e674 <pvPortMalloc+0xf0>
    83f4e5a6:	00011917          	auipc	s2,0x11
    83f4e5aa:	6b293903          	ld	s2,1714(s2) # 83f5fc58 <xBlockAllocatedBit>
    83f4e5ae:	008977b3          	and	a5,s2,s0
    83f4e5b2:	e3c5                	bnez	a5,83f4e652 <pvPortMalloc+0xce>
    83f4e5b4:	fff40793          	addi	a5,s0,-1
    83f4e5b8:	5739                	li	a4,-18
    83f4e5ba:	08f76c63          	bltu	a4,a5,83f4e652 <pvPortMalloc+0xce>
    83f4e5be:	00f47793          	andi	a5,s0,15
    83f4e5c2:	0441                	addi	s0,s0,16
    83f4e5c4:	e3d1                	bnez	a5,83f4e648 <pvPortMalloc+0xc4>
    83f4e5c6:	00011a97          	auipc	s5,0x11
    83f4e5ca:	69aa8a93          	addi	s5,s5,1690 # 83f5fc60 <xFreeBytesRemaining>
    83f4e5ce:	000aba03          	ld	s4,0(s5)
    83f4e5d2:	088a6063          	bltu	s4,s0,83f4e652 <pvPortMalloc+0xce>
    83f4e5d6:	0000f717          	auipc	a4,0xf
    83f4e5da:	f0a70713          	addi	a4,a4,-246 # 83f5d4e0 <xStart>
    83f4e5de:	6304                	ld	s1,0(a4)
    83f4e5e0:	a029                	j	83f4e5ea <pvPortMalloc+0x66>
    83f4e5e2:	609c                	ld	a5,0(s1)
    83f4e5e4:	c791                	beqz	a5,83f4e5f0 <pvPortMalloc+0x6c>
    83f4e5e6:	8726                	mv	a4,s1
    83f4e5e8:	84be                	mv	s1,a5
    83f4e5ea:	649c                	ld	a5,8(s1)
    83f4e5ec:	fe87ebe3          	bltu	a5,s0,83f4e5e2 <pvPortMalloc+0x5e>
    83f4e5f0:	629c                	ld	a5,0(a3)
    83f4e5f2:	06978063          	beq	a5,s1,83f4e652 <pvPortMalloc+0xce>
    83f4e5f6:	609c                	ld	a5,0(s1)
    83f4e5f8:	00073983          	ld	s3,0(a4)
    83f4e5fc:	02000693          	li	a3,32
    83f4e600:	e31c                	sd	a5,0(a4)
    83f4e602:	649c                	ld	a5,8(s1)
    83f4e604:	09c1                	addi	s3,s3,16
    83f4e606:	40878733          	sub	a4,a5,s0
    83f4e60a:	0ce6e863          	bltu	a3,a4,83f4e6da <pvPortMalloc+0x156>
    83f4e60e:	00011717          	auipc	a4,0x11
    83f4e612:	65a70713          	addi	a4,a4,1626 # 83f5fc68 <xMinimumEverFreeBytesRemaining>
    83f4e616:	6314                	ld	a3,0(a4)
    83f4e618:	40fa0a33          	sub	s4,s4,a5
    83f4e61c:	014ab023          	sd	s4,0(s5)
    83f4e620:	00da7463          	bgeu	s4,a3,83f4e628 <pvPortMalloc+0xa4>
    83f4e624:	01473023          	sd	s4,0(a4)
    83f4e628:	00011697          	auipc	a3,0x11
    83f4e62c:	64868693          	addi	a3,a3,1608 # 83f5fc70 <xNumberOfSuccessfulAllocations>
    83f4e630:	6298                	ld	a4,0(a3)
    83f4e632:	00f967b3          	or	a5,s2,a5
    83f4e636:	e49c                	sd	a5,8(s1)
    83f4e638:	0004b023          	sd	zero,0(s1)
    83f4e63c:	00170793          	addi	a5,a4,1
    83f4e640:	e29c                	sd	a5,0(a3)
    83f4e642:	37c010ef          	jal	ra,83f4f9be <xTaskResumeAll>
    83f4e646:	a819                	j	83f4e65c <pvPortMalloc+0xd8>
    83f4e648:	ff047793          	andi	a5,s0,-16
    83f4e64c:	07c1                	addi	a5,a5,16
    83f4e64e:	02f46163          	bltu	s0,a5,83f4e670 <pvPortMalloc+0xec>
    83f4e652:	36c010ef          	jal	ra,83f4f9be <xTaskResumeAll>
    83f4e656:	ffef40ef          	jal	ra,83f42e54 <vApplicationMallocFailedHook>
    83f4e65a:	4981                	li	s3,0
    83f4e65c:	70e2                	ld	ra,56(sp)
    83f4e65e:	7442                	ld	s0,48(sp)
    83f4e660:	74a2                	ld	s1,40(sp)
    83f4e662:	7902                	ld	s2,32(sp)
    83f4e664:	6a42                	ld	s4,16(sp)
    83f4e666:	6aa2                	ld	s5,8(sp)
    83f4e668:	854e                	mv	a0,s3
    83f4e66a:	69e2                	ld	s3,24(sp)
    83f4e66c:	6121                	addi	sp,sp,64
    83f4e66e:	8082                	ret
    83f4e670:	843e                	mv	s0,a5
    83f4e672:	bf91                	j	83f4e5c6 <pvPortMalloc+0x42>
    83f4e674:	00011797          	auipc	a5,0x11
    83f4e678:	6cc78793          	addi	a5,a5,1740 # 83f5fd40 <_ebss>
    83f4e67c:	00f7f713          	andi	a4,a5,15
    83f4e680:	863e                	mv	a2,a5
    83f4e682:	c719                	beqz	a4,83f4e690 <pvPortMalloc+0x10c>
    83f4e684:	00011797          	auipc	a5,0x11
    83f4e688:	6cb78793          	addi	a5,a5,1739 # 83f5fd4f <_ebss+0xf>
    83f4e68c:	9bc1                	andi	a5,a5,-16
    83f4e68e:	863e                	mv	a2,a5
    83f4e690:	00091717          	auipc	a4,0x91
    83f4e694:	6a070713          	addi	a4,a4,1696 # 83fdfd30 <_ebss+0x7fff0>
    83f4e698:	9b41                	andi	a4,a4,-16
    83f4e69a:	00073023          	sd	zero,0(a4)
    83f4e69e:	00073423          	sd	zero,8(a4)
    83f4e6a2:	597d                	li	s2,-1
    83f4e6a4:	40f707b3          	sub	a5,a4,a5
    83f4e6a8:	0000f597          	auipc	a1,0xf
    83f4e6ac:	e405b023          	sd	zero,-448(a1) # 83f5d4e8 <xStart+0x8>
    83f4e6b0:	197e                	slli	s2,s2,0x3f
    83f4e6b2:	0000f597          	auipc	a1,0xf
    83f4e6b6:	e2c5b723          	sd	a2,-466(a1) # 83f5d4e0 <xStart>
    83f4e6ba:	e298                	sd	a4,0(a3)
    83f4e6bc:	e218                	sd	a4,0(a2)
    83f4e6be:	e61c                	sd	a5,8(a2)
    83f4e6c0:	00011717          	auipc	a4,0x11
    83f4e6c4:	5af73423          	sd	a5,1448(a4) # 83f5fc68 <xMinimumEverFreeBytesRemaining>
    83f4e6c8:	00011717          	auipc	a4,0x11
    83f4e6cc:	58f73c23          	sd	a5,1432(a4) # 83f5fc60 <xFreeBytesRemaining>
    83f4e6d0:	00011797          	auipc	a5,0x11
    83f4e6d4:	5927b423          	sd	s2,1416(a5) # 83f5fc58 <xBlockAllocatedBit>
    83f4e6d8:	bdd9                	j	83f4e5ae <pvPortMalloc+0x2a>
    83f4e6da:	00848533          	add	a0,s1,s0
    83f4e6de:	e518                	sd	a4,8(a0)
    83f4e6e0:	e480                	sd	s0,8(s1)
    83f4e6e2:	e53ff0ef          	jal	ra,83f4e534 <prvInsertBlockIntoFreeList>
    83f4e6e6:	649c                	ld	a5,8(s1)
    83f4e6e8:	b71d                	j	83f4e60e <pvPortMalloc+0x8a>

0000000083f4e6ea <vPortFree>:
    83f4e6ea:	cd09                	beqz	a0,83f4e704 <vPortFree+0x1a>
    83f4e6ec:	ff853703          	ld	a4,-8(a0)
    83f4e6f0:	00011797          	auipc	a5,0x11
    83f4e6f4:	5687b783          	ld	a5,1384(a5) # 83f5fc58 <xBlockAllocatedBit>
    83f4e6f8:	00f776b3          	and	a3,a4,a5
    83f4e6fc:	c681                	beqz	a3,83f4e704 <vPortFree+0x1a>
    83f4e6fe:	ff053683          	ld	a3,-16(a0)
    83f4e702:	c291                	beqz	a3,83f4e706 <vPortFree+0x1c>
    83f4e704:	8082                	ret
    83f4e706:	1101                	addi	sp,sp,-32
    83f4e708:	fff7c793          	not	a5,a5
    83f4e70c:	ec06                	sd	ra,24(sp)
    83f4e70e:	8ff9                	and	a5,a5,a4
    83f4e710:	fef53c23          	sd	a5,-8(a0)
    83f4e714:	e42a                	sd	a0,8(sp)
    83f4e716:	521000ef          	jal	ra,83f4f436 <vTaskSuspendAll>
    83f4e71a:	6522                	ld	a0,8(sp)
    83f4e71c:	00011717          	auipc	a4,0x11
    83f4e720:	54470713          	addi	a4,a4,1348 # 83f5fc60 <xFreeBytesRemaining>
    83f4e724:	6314                	ld	a3,0(a4)
    83f4e726:	ff853783          	ld	a5,-8(a0)
    83f4e72a:	1541                	addi	a0,a0,-16
    83f4e72c:	97b6                	add	a5,a5,a3
    83f4e72e:	e31c                	sd	a5,0(a4)
    83f4e730:	e05ff0ef          	jal	ra,83f4e534 <prvInsertBlockIntoFreeList>
    83f4e734:	00011717          	auipc	a4,0x11
    83f4e738:	54470713          	addi	a4,a4,1348 # 83f5fc78 <xNumberOfSuccessfulFrees>
    83f4e73c:	631c                	ld	a5,0(a4)
    83f4e73e:	0785                	addi	a5,a5,1
    83f4e740:	e31c                	sd	a5,0(a4)
    83f4e742:	60e2                	ld	ra,24(sp)
    83f4e744:	6105                	addi	sp,sp,32
    83f4e746:	2780106f          	j	83f4f9be <xTaskResumeAll>

0000000083f4e74a <prvCopyDataToQueue>:
    83f4e74a:	1101                	addi	sp,sp,-32
    83f4e74c:	e822                	sd	s0,16(sp)
    83f4e74e:	ec06                	sd	ra,24(sp)
    83f4e750:	e426                	sd	s1,8(sp)
    83f4e752:	e04a                	sd	s2,0(sp)
    83f4e754:	615c                	ld	a5,128(a0)
    83f4e756:	7924                	ld	s1,112(a0)
    83f4e758:	842a                	mv	s0,a0
    83f4e75a:	ef81                	bnez	a5,83f4e772 <prvCopyDataToQueue+0x28>
    83f4e75c:	611c                	ld	a5,0(a0)
    83f4e75e:	0485                	addi	s1,s1,1
    83f4e760:	4501                	li	a0,0
    83f4e762:	cfa5                	beqz	a5,83f4e7da <prvCopyDataToQueue+0x90>
    83f4e764:	f824                	sd	s1,112(s0)
    83f4e766:	60e2                	ld	ra,24(sp)
    83f4e768:	6442                	ld	s0,16(sp)
    83f4e76a:	64a2                	ld	s1,8(sp)
    83f4e76c:	6902                	ld	s2,0(sp)
    83f4e76e:	6105                	addi	sp,sp,32
    83f4e770:	8082                	ret
    83f4e772:	8932                	mv	s2,a2
    83f4e774:	e61d                	bnez	a2,83f4e7a2 <prvCopyDataToQueue+0x58>
    83f4e776:	6508                	ld	a0,8(a0)
    83f4e778:	863e                	mv	a2,a5
    83f4e77a:	0485                	addi	s1,s1,1
    83f4e77c:	985f10ef          	jal	ra,83f40100 <memcpy>
    83f4e780:	641c                	ld	a5,8(s0)
    83f4e782:	6054                	ld	a3,128(s0)
    83f4e784:	6818                	ld	a4,16(s0)
    83f4e786:	4501                	li	a0,0
    83f4e788:	97b6                	add	a5,a5,a3
    83f4e78a:	e41c                	sd	a5,8(s0)
    83f4e78c:	fce7ece3          	bltu	a5,a4,83f4e764 <prvCopyDataToQueue+0x1a>
    83f4e790:	601c                	ld	a5,0(s0)
    83f4e792:	f824                	sd	s1,112(s0)
    83f4e794:	e41c                	sd	a5,8(s0)
    83f4e796:	60e2                	ld	ra,24(sp)
    83f4e798:	6442                	ld	s0,16(sp)
    83f4e79a:	64a2                	ld	s1,8(sp)
    83f4e79c:	6902                	ld	s2,0(sp)
    83f4e79e:	6105                	addi	sp,sp,32
    83f4e7a0:	8082                	ret
    83f4e7a2:	6d08                	ld	a0,24(a0)
    83f4e7a4:	863e                	mv	a2,a5
    83f4e7a6:	95bf10ef          	jal	ra,83f40100 <memcpy>
    83f4e7aa:	6058                	ld	a4,128(s0)
    83f4e7ac:	6c1c                	ld	a5,24(s0)
    83f4e7ae:	6014                	ld	a3,0(s0)
    83f4e7b0:	40e00633          	neg	a2,a4
    83f4e7b4:	8f99                	sub	a5,a5,a4
    83f4e7b6:	ec1c                	sd	a5,24(s0)
    83f4e7b8:	00d7f563          	bgeu	a5,a3,83f4e7c2 <prvCopyDataToQueue+0x78>
    83f4e7bc:	681c                	ld	a5,16(s0)
    83f4e7be:	97b2                	add	a5,a5,a2
    83f4e7c0:	ec1c                	sd	a5,24(s0)
    83f4e7c2:	4789                	li	a5,2
    83f4e7c4:	02f90163          	beq	s2,a5,83f4e7e6 <prvCopyDataToQueue+0x9c>
    83f4e7c8:	0485                	addi	s1,s1,1
    83f4e7ca:	f824                	sd	s1,112(s0)
    83f4e7cc:	60e2                	ld	ra,24(sp)
    83f4e7ce:	6442                	ld	s0,16(sp)
    83f4e7d0:	64a2                	ld	s1,8(sp)
    83f4e7d2:	6902                	ld	s2,0(sp)
    83f4e7d4:	4501                	li	a0,0
    83f4e7d6:	6105                	addi	sp,sp,32
    83f4e7d8:	8082                	ret
    83f4e7da:	6808                	ld	a0,16(s0)
    83f4e7dc:	631000ef          	jal	ra,83f4f60c <xTaskPriorityDisinherit>
    83f4e7e0:	00043823          	sd	zero,16(s0)
    83f4e7e4:	b741                	j	83f4e764 <prvCopyDataToQueue+0x1a>
    83f4e7e6:	c099                	beqz	s1,83f4e7ec <prvCopyDataToQueue+0xa2>
    83f4e7e8:	4501                	li	a0,0
    83f4e7ea:	bfad                	j	83f4e764 <prvCopyDataToQueue+0x1a>
    83f4e7ec:	4485                	li	s1,1
    83f4e7ee:	4501                	li	a0,0
    83f4e7f0:	bf95                	j	83f4e764 <prvCopyDataToQueue+0x1a>

0000000083f4e7f2 <prvUnlockQueue>:
    83f4e7f2:	1101                	addi	sp,sp,-32
    83f4e7f4:	e822                	sd	s0,16(sp)
    83f4e7f6:	e426                	sd	s1,8(sp)
    83f4e7f8:	ec06                	sd	ra,24(sp)
    83f4e7fa:	84aa                	mv	s1,a0
    83f4e7fc:	e04a                	sd	s2,0(sp)
    83f4e7fe:	6b9000ef          	jal	ra,83f4f6b6 <vTaskEnterCritical>
    83f4e802:	0894c783          	lbu	a5,137(s1)
    83f4e806:	0187941b          	slliw	s0,a5,0x18
    83f4e80a:	4184541b          	sraiw	s0,s0,0x18
    83f4e80e:	02805f63          	blez	s0,83f4e84c <prvUnlockQueue+0x5a>
    83f4e812:	04848913          	addi	s2,s1,72
    83f4e816:	a811                	j	83f4e82a <prvUnlockQueue+0x38>
    83f4e818:	fff4079b          	addiw	a5,s0,-1
    83f4e81c:	0187941b          	slliw	s0,a5,0x18
    83f4e820:	0ff7f713          	andi	a4,a5,255
    83f4e824:	4184541b          	sraiw	s0,s0,0x18
    83f4e828:	c315                	beqz	a4,83f4e84c <prvUnlockQueue+0x5a>
    83f4e82a:	64bc                	ld	a5,72(s1)
    83f4e82c:	854a                	mv	a0,s2
    83f4e82e:	cf99                	beqz	a5,83f4e84c <prvUnlockQueue+0x5a>
    83f4e830:	4d5000ef          	jal	ra,83f4f504 <xTaskRemoveFromEventList>
    83f4e834:	d175                	beqz	a0,83f4e818 <prvUnlockQueue+0x26>
    83f4e836:	5cb000ef          	jal	ra,83f4f600 <vTaskMissedYield>
    83f4e83a:	fff4079b          	addiw	a5,s0,-1
    83f4e83e:	0187941b          	slliw	s0,a5,0x18
    83f4e842:	0ff7f713          	andi	a4,a5,255
    83f4e846:	4184541b          	sraiw	s0,s0,0x18
    83f4e84a:	f365                	bnez	a4,83f4e82a <prvUnlockQueue+0x38>
    83f4e84c:	57fd                	li	a5,-1
    83f4e84e:	08f484a3          	sb	a5,137(s1)
    83f4e852:	687000ef          	jal	ra,83f4f6d8 <vTaskExitCritical>
    83f4e856:	661000ef          	jal	ra,83f4f6b6 <vTaskEnterCritical>
    83f4e85a:	0884c783          	lbu	a5,136(s1)
    83f4e85e:	0187941b          	slliw	s0,a5,0x18
    83f4e862:	4184541b          	sraiw	s0,s0,0x18
    83f4e866:	02805f63          	blez	s0,83f4e8a4 <prvUnlockQueue+0xb2>
    83f4e86a:	02048913          	addi	s2,s1,32
    83f4e86e:	a811                	j	83f4e882 <prvUnlockQueue+0x90>
    83f4e870:	fff4079b          	addiw	a5,s0,-1
    83f4e874:	0187941b          	slliw	s0,a5,0x18
    83f4e878:	0ff7f713          	andi	a4,a5,255
    83f4e87c:	4184541b          	sraiw	s0,s0,0x18
    83f4e880:	c315                	beqz	a4,83f4e8a4 <prvUnlockQueue+0xb2>
    83f4e882:	709c                	ld	a5,32(s1)
    83f4e884:	854a                	mv	a0,s2
    83f4e886:	cf99                	beqz	a5,83f4e8a4 <prvUnlockQueue+0xb2>
    83f4e888:	47d000ef          	jal	ra,83f4f504 <xTaskRemoveFromEventList>
    83f4e88c:	d175                	beqz	a0,83f4e870 <prvUnlockQueue+0x7e>
    83f4e88e:	573000ef          	jal	ra,83f4f600 <vTaskMissedYield>
    83f4e892:	fff4079b          	addiw	a5,s0,-1
    83f4e896:	0187941b          	slliw	s0,a5,0x18
    83f4e89a:	0ff7f713          	andi	a4,a5,255
    83f4e89e:	4184541b          	sraiw	s0,s0,0x18
    83f4e8a2:	f365                	bnez	a4,83f4e882 <prvUnlockQueue+0x90>
    83f4e8a4:	57fd                	li	a5,-1
    83f4e8a6:	08f48423          	sb	a5,136(s1)
    83f4e8aa:	6442                	ld	s0,16(sp)
    83f4e8ac:	60e2                	ld	ra,24(sp)
    83f4e8ae:	64a2                	ld	s1,8(sp)
    83f4e8b0:	6902                	ld	s2,0(sp)
    83f4e8b2:	6105                	addi	sp,sp,32
    83f4e8b4:	6250006f          	j	83f4f6d8 <vTaskExitCritical>

0000000083f4e8b8 <xQueueGenericReset>:
    83f4e8b8:	1101                	addi	sp,sp,-32
    83f4e8ba:	ec06                	sd	ra,24(sp)
    83f4e8bc:	e822                	sd	s0,16(sp)
    83f4e8be:	e42e                	sd	a1,8(sp)
    83f4e8c0:	c939                	beqz	a0,83f4e916 <xQueueGenericReset+0x5e>
    83f4e8c2:	7d3c                	ld	a5,120(a0)
    83f4e8c4:	842a                	mv	s0,a0
    83f4e8c6:	4501                	li	a0,0
    83f4e8c8:	c3b9                	beqz	a5,83f4e90e <xQueueGenericReset+0x56>
    83f4e8ca:	6058                	ld	a4,128(s0)
    83f4e8cc:	02e7b7b3          	mulhu	a5,a5,a4
    83f4e8d0:	ef9d                	bnez	a5,83f4e90e <xQueueGenericReset+0x56>
    83f4e8d2:	5e5000ef          	jal	ra,83f4f6b6 <vTaskEnterCritical>
    83f4e8d6:	7c3c                	ld	a5,120(s0)
    83f4e8d8:	6050                	ld	a2,128(s0)
    83f4e8da:	6018                	ld	a4,0(s0)
    83f4e8dc:	fff78693          	addi	a3,a5,-1
    83f4e8e0:	02c686b3          	mul	a3,a3,a2
    83f4e8e4:	06043823          	sd	zero,112(s0)
    83f4e8e8:	557d                	li	a0,-1
    83f4e8ea:	65a2                	ld	a1,8(sp)
    83f4e8ec:	08a40423          	sb	a0,136(s0)
    83f4e8f0:	e418                	sd	a4,8(s0)
    83f4e8f2:	08a404a3          	sb	a0,137(s0)
    83f4e8f6:	02c787b3          	mul	a5,a5,a2
    83f4e8fa:	97ba                	add	a5,a5,a4
    83f4e8fc:	9736                	add	a4,a4,a3
    83f4e8fe:	e81c                	sd	a5,16(s0)
    83f4e900:	ec18                	sd	a4,24(s0)
    83f4e902:	ed99                	bnez	a1,83f4e920 <xQueueGenericReset+0x68>
    83f4e904:	701c                	ld	a5,32(s0)
    83f4e906:	e795                	bnez	a5,83f4e932 <xQueueGenericReset+0x7a>
    83f4e908:	5d1000ef          	jal	ra,83f4f6d8 <vTaskExitCritical>
    83f4e90c:	4505                	li	a0,1
    83f4e90e:	60e2                	ld	ra,24(sp)
    83f4e910:	6442                	ld	s0,16(sp)
    83f4e912:	6105                	addi	sp,sp,32
    83f4e914:	8082                	ret
    83f4e916:	60e2                	ld	ra,24(sp)
    83f4e918:	6442                	ld	s0,16(sp)
    83f4e91a:	4501                	li	a0,0
    83f4e91c:	6105                	addi	sp,sp,32
    83f4e91e:	8082                	ret
    83f4e920:	02040513          	addi	a0,s0,32
    83f4e924:	6ca010ef          	jal	ra,83f4ffee <vListInitialise>
    83f4e928:	04840513          	addi	a0,s0,72
    83f4e92c:	6c2010ef          	jal	ra,83f4ffee <vListInitialise>
    83f4e930:	bfe1                	j	83f4e908 <xQueueGenericReset+0x50>
    83f4e932:	02040513          	addi	a0,s0,32
    83f4e936:	3cf000ef          	jal	ra,83f4f504 <xTaskRemoveFromEventList>
    83f4e93a:	d579                	beqz	a0,83f4e908 <xQueueGenericReset+0x50>
    83f4e93c:	00000073          	ecall
    83f4e940:	b7e1                	j	83f4e908 <xQueueGenericReset+0x50>

0000000083f4e942 <xQueueGenericCreateStatic>:
    83f4e942:	cd25                	beqz	a0,83f4e9ba <xQueueGenericCreateStatic+0x78>
    83f4e944:	1141                	addi	sp,sp,-16
    83f4e946:	e022                	sd	s0,0(sp)
    83f4e948:	e406                	sd	ra,8(sp)
    83f4e94a:	8436                	mv	s0,a3
    83f4e94c:	caad                	beqz	a3,83f4e9be <xQueueGenericCreateStatic+0x7c>
    83f4e94e:	ce2d                	beqz	a2,83f4e9c8 <xQueueGenericCreateStatic+0x86>
    83f4e950:	c5bd                	beqz	a1,83f4e9be <xQueueGenericCreateStatic+0x7c>
    83f4e952:	02a5b7b3          	mulhu	a5,a1,a0
    83f4e956:	4705                	li	a4,1
    83f4e958:	08e68523          	sb	a4,138(a3)
    83f4e95c:	e290                	sd	a2,0(a3)
    83f4e95e:	fea8                	sd	a0,120(a3)
    83f4e960:	e2cc                	sd	a1,128(a3)
    83f4e962:	e7b9                	bnez	a5,83f4e9b0 <xQueueGenericCreateStatic+0x6e>
    83f4e964:	553000ef          	jal	ra,83f4f6b6 <vTaskEnterCritical>
    83f4e968:	7c3c                	ld	a5,120(s0)
    83f4e96a:	6050                	ld	a2,128(s0)
    83f4e96c:	6018                	ld	a4,0(s0)
    83f4e96e:	fff78693          	addi	a3,a5,-1
    83f4e972:	02c686b3          	mul	a3,a3,a2
    83f4e976:	55fd                	li	a1,-1
    83f4e978:	06043823          	sd	zero,112(s0)
    83f4e97c:	08b40423          	sb	a1,136(s0)
    83f4e980:	e418                	sd	a4,8(s0)
    83f4e982:	08b404a3          	sb	a1,137(s0)
    83f4e986:	02040513          	addi	a0,s0,32
    83f4e98a:	02c787b3          	mul	a5,a5,a2
    83f4e98e:	97ba                	add	a5,a5,a4
    83f4e990:	9736                	add	a4,a4,a3
    83f4e992:	e81c                	sd	a5,16(s0)
    83f4e994:	ec18                	sd	a4,24(s0)
    83f4e996:	658010ef          	jal	ra,83f4ffee <vListInitialise>
    83f4e99a:	04840513          	addi	a0,s0,72
    83f4e99e:	650010ef          	jal	ra,83f4ffee <vListInitialise>
    83f4e9a2:	537000ef          	jal	ra,83f4f6d8 <vTaskExitCritical>
    83f4e9a6:	60a2                	ld	ra,8(sp)
    83f4e9a8:	8522                	mv	a0,s0
    83f4e9aa:	6402                	ld	s0,0(sp)
    83f4e9ac:	0141                	addi	sp,sp,16
    83f4e9ae:	8082                	ret
    83f4e9b0:	60a2                	ld	ra,8(sp)
    83f4e9b2:	6402                	ld	s0,0(sp)
    83f4e9b4:	8536                	mv	a0,a3
    83f4e9b6:	0141                	addi	sp,sp,16
    83f4e9b8:	8082                	ret
    83f4e9ba:	4501                	li	a0,0
    83f4e9bc:	8082                	ret
    83f4e9be:	60a2                	ld	ra,8(sp)
    83f4e9c0:	6402                	ld	s0,0(sp)
    83f4e9c2:	4501                	li	a0,0
    83f4e9c4:	0141                	addi	sp,sp,16
    83f4e9c6:	8082                	ret
    83f4e9c8:	f9fd                	bnez	a1,83f4e9be <xQueueGenericCreateStatic+0x7c>
    83f4e9ca:	4785                	li	a5,1
    83f4e9cc:	08f68523          	sb	a5,138(a3)
    83f4e9d0:	e014                	sd	a3,0(s0)
    83f4e9d2:	fea8                	sd	a0,120(a3)
    83f4e9d4:	0806b023          	sd	zero,128(a3)
    83f4e9d8:	b771                	j	83f4e964 <xQueueGenericCreateStatic+0x22>

0000000083f4e9da <xQueueGenericCreate>:
    83f4e9da:	1101                	addi	sp,sp,-32
    83f4e9dc:	ec06                	sd	ra,24(sp)
    83f4e9de:	e822                	sd	s0,16(sp)
    83f4e9e0:	e426                	sd	s1,8(sp)
    83f4e9e2:	e04a                	sd	s2,0(sp)
    83f4e9e4:	c929                	beqz	a0,83f4ea36 <xQueueGenericCreate+0x5c>
    83f4e9e6:	02a5b7b3          	mulhu	a5,a1,a0
    83f4e9ea:	842a                	mv	s0,a0
    83f4e9ec:	84ae                	mv	s1,a1
    83f4e9ee:	e7a1                	bnez	a5,83f4ea36 <xQueueGenericCreate+0x5c>
    83f4e9f0:	02b50533          	mul	a0,a0,a1
    83f4e9f4:	f6f00793          	li	a5,-145
    83f4e9f8:	02a7ef63          	bltu	a5,a0,83f4ea36 <xQueueGenericCreate+0x5c>
    83f4e9fc:	09050513          	addi	a0,a0,144
    83f4ea00:	b85ff0ef          	jal	ra,83f4e584 <pvPortMalloc>
    83f4ea04:	892a                	mv	s2,a0
    83f4ea06:	c905                	beqz	a0,83f4ea36 <xQueueGenericCreate+0x5c>
    83f4ea08:	08050523          	sb	zero,138(a0)
    83f4ea0c:	87aa                	mv	a5,a0
    83f4ea0e:	c099                	beqz	s1,83f4ea14 <xQueueGenericCreate+0x3a>
    83f4ea10:	09050793          	addi	a5,a0,144
    83f4ea14:	06893c23          	sd	s0,120(s2)
    83f4ea18:	08993023          	sd	s1,128(s2)
    83f4ea1c:	00f93023          	sd	a5,0(s2)
    83f4ea20:	854a                	mv	a0,s2
    83f4ea22:	4585                	li	a1,1
    83f4ea24:	e95ff0ef          	jal	ra,83f4e8b8 <xQueueGenericReset>
    83f4ea28:	60e2                	ld	ra,24(sp)
    83f4ea2a:	6442                	ld	s0,16(sp)
    83f4ea2c:	64a2                	ld	s1,8(sp)
    83f4ea2e:	854a                	mv	a0,s2
    83f4ea30:	6902                	ld	s2,0(sp)
    83f4ea32:	6105                	addi	sp,sp,32
    83f4ea34:	8082                	ret
    83f4ea36:	60e2                	ld	ra,24(sp)
    83f4ea38:	6442                	ld	s0,16(sp)
    83f4ea3a:	4901                	li	s2,0
    83f4ea3c:	64a2                	ld	s1,8(sp)
    83f4ea3e:	854a                	mv	a0,s2
    83f4ea40:	6902                	ld	s2,0(sp)
    83f4ea42:	6105                	addi	sp,sp,32
    83f4ea44:	8082                	ret

0000000083f4ea46 <xQueueGenericSend>:
    83f4ea46:	711d                	addi	sp,sp,-96
    83f4ea48:	e8a2                	sd	s0,80(sp)
    83f4ea4a:	e4a6                	sd	s1,72(sp)
    83f4ea4c:	842a                	mv	s0,a0
    83f4ea4e:	e0ca                	sd	s2,64(sp)
    83f4ea50:	fc4e                	sd	s3,56(sp)
    83f4ea52:	f852                	sd	s4,48(sp)
    83f4ea54:	f456                	sd	s5,40(sp)
    83f4ea56:	f05a                	sd	s6,32(sp)
    83f4ea58:	ec86                	sd	ra,88(sp)
    83f4ea5a:	8aae                	mv	s5,a1
    83f4ea5c:	e432                	sd	a2,8(sp)
    83f4ea5e:	8936                	mv	s2,a3
    83f4ea60:	02050a13          	addi	s4,a0,32
    83f4ea64:	453000ef          	jal	ra,83f4f6b6 <vTaskEnterCritical>
    83f4ea68:	7838                	ld	a4,112(s0)
    83f4ea6a:	7c3c                	ld	a5,120(s0)
    83f4ea6c:	4b01                	li	s6,0
    83f4ea6e:	4989                	li	s3,2
    83f4ea70:	54fd                	li	s1,-1
    83f4ea72:	06f76e63          	bltu	a4,a5,83f4eaee <xQueueGenericSend+0xa8>
    83f4ea76:	07390c63          	beq	s2,s3,83f4eaee <xQueueGenericSend+0xa8>
    83f4ea7a:	67a2                	ld	a5,8(sp)
    83f4ea7c:	0c078a63          	beqz	a5,83f4eb50 <xQueueGenericSend+0x10a>
    83f4ea80:	0a0b0c63          	beqz	s6,83f4eb38 <xQueueGenericSend+0xf2>
    83f4ea84:	455000ef          	jal	ra,83f4f6d8 <vTaskExitCritical>
    83f4ea88:	1af000ef          	jal	ra,83f4f436 <vTaskSuspendAll>
    83f4ea8c:	42b000ef          	jal	ra,83f4f6b6 <vTaskEnterCritical>
    83f4ea90:	08844783          	lbu	a5,136(s0)
    83f4ea94:	0187979b          	slliw	a5,a5,0x18
    83f4ea98:	4187d79b          	sraiw	a5,a5,0x18
    83f4ea9c:	00979463          	bne	a5,s1,83f4eaa4 <xQueueGenericSend+0x5e>
    83f4eaa0:	08040423          	sb	zero,136(s0)
    83f4eaa4:	08944783          	lbu	a5,137(s0)
    83f4eaa8:	0187979b          	slliw	a5,a5,0x18
    83f4eaac:	4187d79b          	sraiw	a5,a5,0x18
    83f4eab0:	00979463          	bne	a5,s1,83f4eab8 <xQueueGenericSend+0x72>
    83f4eab4:	080404a3          	sb	zero,137(s0)
    83f4eab8:	421000ef          	jal	ra,83f4f6d8 <vTaskExitCritical>
    83f4eabc:	002c                	addi	a1,sp,8
    83f4eabe:	0808                	addi	a0,sp,16
    83f4eac0:	0fa010ef          	jal	ra,83f4fbba <xTaskCheckForTimeOut>
    83f4eac4:	e951                	bnez	a0,83f4eb58 <xQueueGenericSend+0x112>
    83f4eac6:	3f1000ef          	jal	ra,83f4f6b6 <vTaskEnterCritical>
    83f4eaca:	7838                	ld	a4,112(s0)
    83f4eacc:	7c3c                	ld	a5,120(s0)
    83f4eace:	04f70563          	beq	a4,a5,83f4eb18 <xQueueGenericSend+0xd2>
    83f4ead2:	407000ef          	jal	ra,83f4f6d8 <vTaskExitCritical>
    83f4ead6:	8522                	mv	a0,s0
    83f4ead8:	d1bff0ef          	jal	ra,83f4e7f2 <prvUnlockQueue>
    83f4eadc:	6e3000ef          	jal	ra,83f4f9be <xTaskResumeAll>
    83f4eae0:	4b05                	li	s6,1
    83f4eae2:	3d5000ef          	jal	ra,83f4f6b6 <vTaskEnterCritical>
    83f4eae6:	7838                	ld	a4,112(s0)
    83f4eae8:	7c3c                	ld	a5,120(s0)
    83f4eaea:	f8f776e3          	bgeu	a4,a5,83f4ea76 <xQueueGenericSend+0x30>
    83f4eaee:	864a                	mv	a2,s2
    83f4eaf0:	85d6                	mv	a1,s5
    83f4eaf2:	8522                	mv	a0,s0
    83f4eaf4:	c57ff0ef          	jal	ra,83f4e74a <prvCopyDataToQueue>
    83f4eaf8:	643c                	ld	a5,72(s0)
    83f4eafa:	e3b9                	bnez	a5,83f4eb40 <xQueueGenericSend+0xfa>
    83f4eafc:	e539                	bnez	a0,83f4eb4a <xQueueGenericSend+0x104>
    83f4eafe:	3db000ef          	jal	ra,83f4f6d8 <vTaskExitCritical>
    83f4eb02:	4505                	li	a0,1
    83f4eb04:	60e6                	ld	ra,88(sp)
    83f4eb06:	6446                	ld	s0,80(sp)
    83f4eb08:	64a6                	ld	s1,72(sp)
    83f4eb0a:	6906                	ld	s2,64(sp)
    83f4eb0c:	79e2                	ld	s3,56(sp)
    83f4eb0e:	7a42                	ld	s4,48(sp)
    83f4eb10:	7aa2                	ld	s5,40(sp)
    83f4eb12:	7b02                	ld	s6,32(sp)
    83f4eb14:	6125                	addi	sp,sp,96
    83f4eb16:	8082                	ret
    83f4eb18:	3c1000ef          	jal	ra,83f4f6d8 <vTaskExitCritical>
    83f4eb1c:	65a2                	ld	a1,8(sp)
    83f4eb1e:	8552                	mv	a0,s4
    83f4eb20:	177000ef          	jal	ra,83f4f496 <vTaskPlaceOnEventList>
    83f4eb24:	8522                	mv	a0,s0
    83f4eb26:	ccdff0ef          	jal	ra,83f4e7f2 <prvUnlockQueue>
    83f4eb2a:	695000ef          	jal	ra,83f4f9be <xTaskResumeAll>
    83f4eb2e:	f94d                	bnez	a0,83f4eae0 <xQueueGenericSend+0x9a>
    83f4eb30:	00000073          	ecall
    83f4eb34:	4b05                	li	s6,1
    83f4eb36:	b775                	j	83f4eae2 <xQueueGenericSend+0x9c>
    83f4eb38:	0808                	addi	a0,sp,16
    83f4eb3a:	2b1000ef          	jal	ra,83f4f5ea <vTaskInternalSetTimeOutState>
    83f4eb3e:	b799                	j	83f4ea84 <xQueueGenericSend+0x3e>
    83f4eb40:	04840513          	addi	a0,s0,72
    83f4eb44:	1c1000ef          	jal	ra,83f4f504 <xTaskRemoveFromEventList>
    83f4eb48:	d95d                	beqz	a0,83f4eafe <xQueueGenericSend+0xb8>
    83f4eb4a:	00000073          	ecall
    83f4eb4e:	bf45                	j	83f4eafe <xQueueGenericSend+0xb8>
    83f4eb50:	389000ef          	jal	ra,83f4f6d8 <vTaskExitCritical>
    83f4eb54:	4501                	li	a0,0
    83f4eb56:	b77d                	j	83f4eb04 <xQueueGenericSend+0xbe>
    83f4eb58:	8522                	mv	a0,s0
    83f4eb5a:	c99ff0ef          	jal	ra,83f4e7f2 <prvUnlockQueue>
    83f4eb5e:	661000ef          	jal	ra,83f4f9be <xTaskResumeAll>
    83f4eb62:	4501                	li	a0,0
    83f4eb64:	b745                	j	83f4eb04 <xQueueGenericSend+0xbe>

0000000083f4eb66 <xQueueGenericSendFromISR>:
    83f4eb66:	7179                	addi	sp,sp,-48
    83f4eb68:	f022                	sd	s0,32(sp)
    83f4eb6a:	e84a                	sd	s2,16(sp)
    83f4eb6c:	f406                	sd	ra,40(sp)
    83f4eb6e:	ec26                	sd	s1,24(sp)
    83f4eb70:	e44e                	sd	s3,8(sp)
    83f4eb72:	7938                	ld	a4,112(a0)
    83f4eb74:	7d3c                	ld	a5,120(a0)
    83f4eb76:	8932                	mv	s2,a2
    83f4eb78:	842a                	mv	s0,a0
    83f4eb7a:	8636                	mv	a2,a3
    83f4eb7c:	00f76d63          	bltu	a4,a5,83f4eb96 <xQueueGenericSendFromISR+0x30>
    83f4eb80:	4789                	li	a5,2
    83f4eb82:	4501                	li	a0,0
    83f4eb84:	00f68963          	beq	a3,a5,83f4eb96 <xQueueGenericSendFromISR+0x30>
    83f4eb88:	70a2                	ld	ra,40(sp)
    83f4eb8a:	7402                	ld	s0,32(sp)
    83f4eb8c:	64e2                	ld	s1,24(sp)
    83f4eb8e:	6942                	ld	s2,16(sp)
    83f4eb90:	69a2                	ld	s3,8(sp)
    83f4eb92:	6145                	addi	sp,sp,48
    83f4eb94:	8082                	ret
    83f4eb96:	08944483          	lbu	s1,137(s0)
    83f4eb9a:	783c                	ld	a5,112(s0)
    83f4eb9c:	8522                	mv	a0,s0
    83f4eb9e:	0184999b          	slliw	s3,s1,0x18
    83f4eba2:	ba9ff0ef          	jal	ra,83f4e74a <prvCopyDataToQueue>
    83f4eba6:	4189d99b          	sraiw	s3,s3,0x18
    83f4ebaa:	57fd                	li	a5,-1
    83f4ebac:	02f98163          	beq	s3,a5,83f4ebce <xQueueGenericSendFromISR+0x68>
    83f4ebb0:	2485                	addiw	s1,s1,1
    83f4ebb2:	0184949b          	slliw	s1,s1,0x18
    83f4ebb6:	4184d49b          	sraiw	s1,s1,0x18
    83f4ebba:	089404a3          	sb	s1,137(s0)
    83f4ebbe:	70a2                	ld	ra,40(sp)
    83f4ebc0:	7402                	ld	s0,32(sp)
    83f4ebc2:	64e2                	ld	s1,24(sp)
    83f4ebc4:	6942                	ld	s2,16(sp)
    83f4ebc6:	69a2                	ld	s3,8(sp)
    83f4ebc8:	4505                	li	a0,1
    83f4ebca:	6145                	addi	sp,sp,48
    83f4ebcc:	8082                	ret
    83f4ebce:	643c                	ld	a5,72(s0)
    83f4ebd0:	d7fd                	beqz	a5,83f4ebbe <xQueueGenericSendFromISR+0x58>
    83f4ebd2:	04840513          	addi	a0,s0,72
    83f4ebd6:	12f000ef          	jal	ra,83f4f504 <xTaskRemoveFromEventList>
    83f4ebda:	d175                	beqz	a0,83f4ebbe <xQueueGenericSendFromISR+0x58>
    83f4ebdc:	fe0901e3          	beqz	s2,83f4ebbe <xQueueGenericSendFromISR+0x58>
    83f4ebe0:	4785                	li	a5,1
    83f4ebe2:	00f93023          	sd	a5,0(s2)
    83f4ebe6:	4505                	li	a0,1
    83f4ebe8:	b745                	j	83f4eb88 <xQueueGenericSendFromISR+0x22>

0000000083f4ebea <xQueueGiveFromISR>:
    83f4ebea:	793c                	ld	a5,112(a0)
    83f4ebec:	7d38                	ld	a4,120(a0)
    83f4ebee:	02e7f663          	bgeu	a5,a4,83f4ec1a <xQueueGiveFromISR+0x30>
    83f4ebf2:	08954703          	lbu	a4,137(a0)
    83f4ebf6:	0785                	addi	a5,a5,1
    83f4ebf8:	f93c                	sd	a5,112(a0)
    83f4ebfa:	0187169b          	slliw	a3,a4,0x18
    83f4ebfe:	4186d69b          	sraiw	a3,a3,0x18
    83f4ec02:	57fd                	li	a5,-1
    83f4ec04:	00f68d63          	beq	a3,a5,83f4ec1e <xQueueGiveFromISR+0x34>
    83f4ec08:	2705                	addiw	a4,a4,1
    83f4ec0a:	0187171b          	slliw	a4,a4,0x18
    83f4ec0e:	4187571b          	sraiw	a4,a4,0x18
    83f4ec12:	08e504a3          	sb	a4,137(a0)
    83f4ec16:	4505                	li	a0,1
    83f4ec18:	8082                	ret
    83f4ec1a:	4501                	li	a0,0
    83f4ec1c:	8082                	ret
    83f4ec1e:	653c                	ld	a5,72(a0)
    83f4ec20:	e399                	bnez	a5,83f4ec26 <xQueueGiveFromISR+0x3c>
    83f4ec22:	4505                	li	a0,1
    83f4ec24:	8082                	ret
    83f4ec26:	1101                	addi	sp,sp,-32
    83f4ec28:	04850513          	addi	a0,a0,72
    83f4ec2c:	ec06                	sd	ra,24(sp)
    83f4ec2e:	e42e                	sd	a1,8(sp)
    83f4ec30:	0d5000ef          	jal	ra,83f4f504 <xTaskRemoveFromEventList>
    83f4ec34:	c509                	beqz	a0,83f4ec3e <xQueueGiveFromISR+0x54>
    83f4ec36:	65a2                	ld	a1,8(sp)
    83f4ec38:	c199                	beqz	a1,83f4ec3e <xQueueGiveFromISR+0x54>
    83f4ec3a:	4785                	li	a5,1
    83f4ec3c:	e19c                	sd	a5,0(a1)
    83f4ec3e:	60e2                	ld	ra,24(sp)
    83f4ec40:	4505                	li	a0,1
    83f4ec42:	6105                	addi	sp,sp,32
    83f4ec44:	8082                	ret

0000000083f4ec46 <xQueueReceive>:
    83f4ec46:	715d                	addi	sp,sp,-80
    83f4ec48:	e0a2                	sd	s0,64(sp)
    83f4ec4a:	842a                	mv	s0,a0
    83f4ec4c:	f84a                	sd	s2,48(sp)
    83f4ec4e:	f44e                	sd	s3,40(sp)
    83f4ec50:	e486                	sd	ra,72(sp)
    83f4ec52:	fc26                	sd	s1,56(sp)
    83f4ec54:	f052                	sd	s4,32(sp)
    83f4ec56:	89ae                	mv	s3,a1
    83f4ec58:	e432                	sd	a2,8(sp)
    83f4ec5a:	25d000ef          	jal	ra,83f4f6b6 <vTaskEnterCritical>
    83f4ec5e:	07043903          	ld	s2,112(s0)
    83f4ec62:	0c091563          	bnez	s2,83f4ed2c <xQueueReceive+0xe6>
    83f4ec66:	67a2                	ld	a5,8(sp)
    83f4ec68:	c3c1                	beqz	a5,83f4ece8 <xQueueReceive+0xa2>
    83f4ec6a:	0808                	addi	a0,sp,16
    83f4ec6c:	17f000ef          	jal	ra,83f4f5ea <vTaskInternalSetTimeOutState>
    83f4ec70:	54fd                	li	s1,-1
    83f4ec72:	04840a13          	addi	s4,s0,72
    83f4ec76:	263000ef          	jal	ra,83f4f6d8 <vTaskExitCritical>
    83f4ec7a:	7bc000ef          	jal	ra,83f4f436 <vTaskSuspendAll>
    83f4ec7e:	239000ef          	jal	ra,83f4f6b6 <vTaskEnterCritical>
    83f4ec82:	08844783          	lbu	a5,136(s0)
    83f4ec86:	0187979b          	slliw	a5,a5,0x18
    83f4ec8a:	4187d79b          	sraiw	a5,a5,0x18
    83f4ec8e:	00979463          	bne	a5,s1,83f4ec96 <xQueueReceive+0x50>
    83f4ec92:	08040423          	sb	zero,136(s0)
    83f4ec96:	08944783          	lbu	a5,137(s0)
    83f4ec9a:	0187979b          	slliw	a5,a5,0x18
    83f4ec9e:	4187d79b          	sraiw	a5,a5,0x18
    83f4eca2:	00979463          	bne	a5,s1,83f4ecaa <xQueueReceive+0x64>
    83f4eca6:	080404a3          	sb	zero,137(s0)
    83f4ecaa:	22f000ef          	jal	ra,83f4f6d8 <vTaskExitCritical>
    83f4ecae:	002c                	addi	a1,sp,8
    83f4ecb0:	0808                	addi	a0,sp,16
    83f4ecb2:	709000ef          	jal	ra,83f4fbba <xTaskCheckForTimeOut>
    83f4ecb6:	e521                	bnez	a0,83f4ecfe <xQueueReceive+0xb8>
    83f4ecb8:	1ff000ef          	jal	ra,83f4f6b6 <vTaskEnterCritical>
    83f4ecbc:	783c                	ld	a5,112(s0)
    83f4ecbe:	efa1                	bnez	a5,83f4ed16 <xQueueReceive+0xd0>
    83f4ecc0:	219000ef          	jal	ra,83f4f6d8 <vTaskExitCritical>
    83f4ecc4:	65a2                	ld	a1,8(sp)
    83f4ecc6:	8552                	mv	a0,s4
    83f4ecc8:	7ce000ef          	jal	ra,83f4f496 <vTaskPlaceOnEventList>
    83f4eccc:	8522                	mv	a0,s0
    83f4ecce:	b25ff0ef          	jal	ra,83f4e7f2 <prvUnlockQueue>
    83f4ecd2:	4ed000ef          	jal	ra,83f4f9be <xTaskResumeAll>
    83f4ecd6:	c921                	beqz	a0,83f4ed26 <xQueueReceive+0xe0>
    83f4ecd8:	1df000ef          	jal	ra,83f4f6b6 <vTaskEnterCritical>
    83f4ecdc:	07043903          	ld	s2,112(s0)
    83f4ece0:	04091663          	bnez	s2,83f4ed2c <xQueueReceive+0xe6>
    83f4ece4:	67a2                	ld	a5,8(sp)
    83f4ece6:	fbc1                	bnez	a5,83f4ec76 <xQueueReceive+0x30>
    83f4ece8:	1f1000ef          	jal	ra,83f4f6d8 <vTaskExitCritical>
    83f4ecec:	60a6                	ld	ra,72(sp)
    83f4ecee:	6406                	ld	s0,64(sp)
    83f4ecf0:	74e2                	ld	s1,56(sp)
    83f4ecf2:	7942                	ld	s2,48(sp)
    83f4ecf4:	79a2                	ld	s3,40(sp)
    83f4ecf6:	7a02                	ld	s4,32(sp)
    83f4ecf8:	4501                	li	a0,0
    83f4ecfa:	6161                	addi	sp,sp,80
    83f4ecfc:	8082                	ret
    83f4ecfe:	8522                	mv	a0,s0
    83f4ed00:	af3ff0ef          	jal	ra,83f4e7f2 <prvUnlockQueue>
    83f4ed04:	4bb000ef          	jal	ra,83f4f9be <xTaskResumeAll>
    83f4ed08:	1af000ef          	jal	ra,83f4f6b6 <vTaskEnterCritical>
    83f4ed0c:	783c                	ld	a5,112(s0)
    83f4ed0e:	dfe9                	beqz	a5,83f4ece8 <xQueueReceive+0xa2>
    83f4ed10:	1c9000ef          	jal	ra,83f4f6d8 <vTaskExitCritical>
    83f4ed14:	b7d1                	j	83f4ecd8 <xQueueReceive+0x92>
    83f4ed16:	1c3000ef          	jal	ra,83f4f6d8 <vTaskExitCritical>
    83f4ed1a:	8522                	mv	a0,s0
    83f4ed1c:	ad7ff0ef          	jal	ra,83f4e7f2 <prvUnlockQueue>
    83f4ed20:	49f000ef          	jal	ra,83f4f9be <xTaskResumeAll>
    83f4ed24:	bf55                	j	83f4ecd8 <xQueueReceive+0x92>
    83f4ed26:	00000073          	ecall
    83f4ed2a:	b77d                	j	83f4ecd8 <xQueueReceive+0x92>
    83f4ed2c:	6050                	ld	a2,128(s0)
    83f4ed2e:	ca11                	beqz	a2,83f4ed42 <xQueueReceive+0xfc>
    83f4ed30:	6c0c                	ld	a1,24(s0)
    83f4ed32:	681c                	ld	a5,16(s0)
    83f4ed34:	95b2                	add	a1,a1,a2
    83f4ed36:	ec0c                	sd	a1,24(s0)
    83f4ed38:	02f5f563          	bgeu	a1,a5,83f4ed62 <xQueueReceive+0x11c>
    83f4ed3c:	854e                	mv	a0,s3
    83f4ed3e:	bc2f10ef          	jal	ra,83f40100 <memcpy>
    83f4ed42:	197d                	addi	s2,s2,-1
    83f4ed44:	07243823          	sd	s2,112(s0)
    83f4ed48:	701c                	ld	a5,32(s0)
    83f4ed4a:	ef99                	bnez	a5,83f4ed68 <xQueueReceive+0x122>
    83f4ed4c:	18d000ef          	jal	ra,83f4f6d8 <vTaskExitCritical>
    83f4ed50:	60a6                	ld	ra,72(sp)
    83f4ed52:	6406                	ld	s0,64(sp)
    83f4ed54:	74e2                	ld	s1,56(sp)
    83f4ed56:	7942                	ld	s2,48(sp)
    83f4ed58:	79a2                	ld	s3,40(sp)
    83f4ed5a:	7a02                	ld	s4,32(sp)
    83f4ed5c:	4505                	li	a0,1
    83f4ed5e:	6161                	addi	sp,sp,80
    83f4ed60:	8082                	ret
    83f4ed62:	600c                	ld	a1,0(s0)
    83f4ed64:	ec0c                	sd	a1,24(s0)
    83f4ed66:	bfd9                	j	83f4ed3c <xQueueReceive+0xf6>
    83f4ed68:	02040513          	addi	a0,s0,32
    83f4ed6c:	798000ef          	jal	ra,83f4f504 <xTaskRemoveFromEventList>
    83f4ed70:	dd71                	beqz	a0,83f4ed4c <xQueueReceive+0x106>
    83f4ed72:	00000073          	ecall
    83f4ed76:	bfd9                	j	83f4ed4c <xQueueReceive+0x106>

0000000083f4ed78 <xQueueReceiveFromISR>:
    83f4ed78:	7179                	addi	sp,sp,-48
    83f4ed7a:	f406                	sd	ra,40(sp)
    83f4ed7c:	f022                	sd	s0,32(sp)
    83f4ed7e:	ec26                	sd	s1,24(sp)
    83f4ed80:	e84a                	sd	s2,16(sp)
    83f4ed82:	e44e                	sd	s3,8(sp)
    83f4ed84:	e052                	sd	s4,0(sp)
    83f4ed86:	07053903          	ld	s2,112(a0)
    83f4ed8a:	00091b63          	bnez	s2,83f4eda0 <xQueueReceiveFromISR+0x28>
    83f4ed8e:	70a2                	ld	ra,40(sp)
    83f4ed90:	7402                	ld	s0,32(sp)
    83f4ed92:	64e2                	ld	s1,24(sp)
    83f4ed94:	6942                	ld	s2,16(sp)
    83f4ed96:	69a2                	ld	s3,8(sp)
    83f4ed98:	6a02                	ld	s4,0(sp)
    83f4ed9a:	4501                	li	a0,0
    83f4ed9c:	6145                	addi	sp,sp,48
    83f4ed9e:	8082                	ret
    83f4eda0:	08854983          	lbu	s3,136(a0)
    83f4eda4:	84b2                	mv	s1,a2
    83f4eda6:	6150                	ld	a2,128(a0)
    83f4eda8:	01899a1b          	slliw	s4,s3,0x18
    83f4edac:	842a                	mv	s0,a0
    83f4edae:	418a5a1b          	sraiw	s4,s4,0x18
    83f4edb2:	ce01                	beqz	a2,83f4edca <xQueueReceiveFromISR+0x52>
    83f4edb4:	852e                	mv	a0,a1
    83f4edb6:	6c0c                	ld	a1,24(s0)
    83f4edb8:	681c                	ld	a5,16(s0)
    83f4edba:	95b2                	add	a1,a1,a2
    83f4edbc:	ec0c                	sd	a1,24(s0)
    83f4edbe:	00f5e463          	bltu	a1,a5,83f4edc6 <xQueueReceiveFromISR+0x4e>
    83f4edc2:	600c                	ld	a1,0(s0)
    83f4edc4:	ec0c                	sd	a1,24(s0)
    83f4edc6:	b3af10ef          	jal	ra,83f40100 <memcpy>
    83f4edca:	197d                	addi	s2,s2,-1
    83f4edcc:	07243823          	sd	s2,112(s0)
    83f4edd0:	57fd                	li	a5,-1
    83f4edd2:	02fa0263          	beq	s4,a5,83f4edf6 <xQueueReceiveFromISR+0x7e>
    83f4edd6:	2985                	addiw	s3,s3,1
    83f4edd8:	0189999b          	slliw	s3,s3,0x18
    83f4eddc:	4189d99b          	sraiw	s3,s3,0x18
    83f4ede0:	09340423          	sb	s3,136(s0)
    83f4ede4:	70a2                	ld	ra,40(sp)
    83f4ede6:	7402                	ld	s0,32(sp)
    83f4ede8:	64e2                	ld	s1,24(sp)
    83f4edea:	6942                	ld	s2,16(sp)
    83f4edec:	69a2                	ld	s3,8(sp)
    83f4edee:	6a02                	ld	s4,0(sp)
    83f4edf0:	4505                	li	a0,1
    83f4edf2:	6145                	addi	sp,sp,48
    83f4edf4:	8082                	ret
    83f4edf6:	701c                	ld	a5,32(s0)
    83f4edf8:	eb91                	bnez	a5,83f4ee0c <xQueueReceiveFromISR+0x94>
    83f4edfa:	4505                	li	a0,1
    83f4edfc:	70a2                	ld	ra,40(sp)
    83f4edfe:	7402                	ld	s0,32(sp)
    83f4ee00:	64e2                	ld	s1,24(sp)
    83f4ee02:	6942                	ld	s2,16(sp)
    83f4ee04:	69a2                	ld	s3,8(sp)
    83f4ee06:	6a02                	ld	s4,0(sp)
    83f4ee08:	6145                	addi	sp,sp,48
    83f4ee0a:	8082                	ret
    83f4ee0c:	02040513          	addi	a0,s0,32
    83f4ee10:	6f4000ef          	jal	ra,83f4f504 <xTaskRemoveFromEventList>
    83f4ee14:	d17d                	beqz	a0,83f4edfa <xQueueReceiveFromISR+0x82>
    83f4ee16:	d0f5                	beqz	s1,83f4edfa <xQueueReceiveFromISR+0x82>
    83f4ee18:	4785                	li	a5,1
    83f4ee1a:	e09c                	sd	a5,0(s1)
    83f4ee1c:	4505                	li	a0,1
    83f4ee1e:	bff9                	j	83f4edfc <xQueueReceiveFromISR+0x84>

0000000083f4ee20 <vQueueAddToRegistry>:
    83f4ee20:	c1b9                	beqz	a1,83f4ee66 <vQueueAddToRegistry+0x46>
    83f4ee22:	4701                	li	a4,0
    83f4ee24:	0000e897          	auipc	a7,0xe
    83f4ee28:	6cc88893          	addi	a7,a7,1740 # 83f5d4f0 <xQueueRegistry>
    83f4ee2c:	00471793          	slli	a5,a4,0x4
    83f4ee30:	00f886b3          	add	a3,a7,a5
    83f4ee34:	0086b803          	ld	a6,8(a3)
    83f4ee38:	4601                	li	a2,0
    83f4ee3a:	03200313          	li	t1,50
    83f4ee3e:	02a80063          	beq	a6,a0,83f4ee5e <vQueueAddToRegistry+0x3e>
    83f4ee42:	00170793          	addi	a5,a4,1
    83f4ee46:	c20d                	beqz	a2,83f4ee68 <vQueueAddToRegistry+0x48>
    83f4ee48:	873e                	mv	a4,a5
    83f4ee4a:	00678c63          	beq	a5,t1,83f4ee62 <vQueueAddToRegistry+0x42>
    83f4ee4e:	00471793          	slli	a5,a4,0x4
    83f4ee52:	00f886b3          	add	a3,a7,a5
    83f4ee56:	0086b803          	ld	a6,8(a3)
    83f4ee5a:	fea814e3          	bne	a6,a0,83f4ee42 <vQueueAddToRegistry+0x22>
    83f4ee5e:	00f88633          	add	a2,a7,a5
    83f4ee62:	e20c                	sd	a1,0(a2)
    83f4ee64:	e608                	sd	a0,8(a2)
    83f4ee66:	8082                	ret
    83f4ee68:	0006b803          	ld	a6,0(a3)
    83f4ee6c:	06c1                	addi	a3,a3,16
    83f4ee6e:	863a                	mv	a2,a4
    83f4ee70:	873e                	mv	a4,a5
    83f4ee72:	00080f63          	beqz	a6,83f4ee90 <vQueueAddToRegistry+0x70>
    83f4ee76:	fe6788e3          	beq	a5,t1,83f4ee66 <vQueueAddToRegistry+0x46>
    83f4ee7a:	6690                	ld	a2,8(a3)
    83f4ee7c:	00c50f63          	beq	a0,a2,83f4ee9a <vQueueAddToRegistry+0x7a>
    83f4ee80:	0006b803          	ld	a6,0(a3)
    83f4ee84:	0785                	addi	a5,a5,1
    83f4ee86:	06c1                	addi	a3,a3,16
    83f4ee88:	863a                	mv	a2,a4
    83f4ee8a:	873e                	mv	a4,a5
    83f4ee8c:	fe0815e3          	bnez	a6,83f4ee76 <vQueueAddToRegistry+0x56>
    83f4ee90:	0612                	slli	a2,a2,0x4
    83f4ee92:	9646                	add	a2,a2,a7
    83f4ee94:	fa679de3          	bne	a5,t1,83f4ee4e <vQueueAddToRegistry+0x2e>
    83f4ee98:	b7e9                	j	83f4ee62 <vQueueAddToRegistry+0x42>
    83f4ee9a:	0792                	slli	a5,a5,0x4
    83f4ee9c:	b7c9                	j	83f4ee5e <vQueueAddToRegistry+0x3e>

0000000083f4ee9e <vQueueWaitForMessageRestricted>:
    83f4ee9e:	1101                	addi	sp,sp,-32
    83f4eea0:	e822                	sd	s0,16(sp)
    83f4eea2:	e426                	sd	s1,8(sp)
    83f4eea4:	e04a                	sd	s2,0(sp)
    83f4eea6:	842a                	mv	s0,a0
    83f4eea8:	ec06                	sd	ra,24(sp)
    83f4eeaa:	84ae                	mv	s1,a1
    83f4eeac:	8932                	mv	s2,a2
    83f4eeae:	009000ef          	jal	ra,83f4f6b6 <vTaskEnterCritical>
    83f4eeb2:	08844783          	lbu	a5,136(s0)
    83f4eeb6:	577d                	li	a4,-1
    83f4eeb8:	0187979b          	slliw	a5,a5,0x18
    83f4eebc:	4187d79b          	sraiw	a5,a5,0x18
    83f4eec0:	00e79463          	bne	a5,a4,83f4eec8 <vQueueWaitForMessageRestricted+0x2a>
    83f4eec4:	08040423          	sb	zero,136(s0)
    83f4eec8:	08944783          	lbu	a5,137(s0)
    83f4eecc:	577d                	li	a4,-1
    83f4eece:	0187979b          	slliw	a5,a5,0x18
    83f4eed2:	4187d79b          	sraiw	a5,a5,0x18
    83f4eed6:	00e79463          	bne	a5,a4,83f4eede <vQueueWaitForMessageRestricted+0x40>
    83f4eeda:	080404a3          	sb	zero,137(s0)
    83f4eede:	7fa000ef          	jal	ra,83f4f6d8 <vTaskExitCritical>
    83f4eee2:	783c                	ld	a5,112(s0)
    83f4eee4:	cb89                	beqz	a5,83f4eef6 <vQueueWaitForMessageRestricted+0x58>
    83f4eee6:	8522                	mv	a0,s0
    83f4eee8:	6442                	ld	s0,16(sp)
    83f4eeea:	60e2                	ld	ra,24(sp)
    83f4eeec:	64a2                	ld	s1,8(sp)
    83f4eeee:	6902                	ld	s2,0(sp)
    83f4eef0:	6105                	addi	sp,sp,32
    83f4eef2:	901ff06f          	j	83f4e7f2 <prvUnlockQueue>
    83f4eef6:	04840513          	addi	a0,s0,72
    83f4eefa:	864a                	mv	a2,s2
    83f4eefc:	85a6                	mv	a1,s1
    83f4eefe:	5be000ef          	jal	ra,83f4f4bc <vTaskPlaceOnEventListRestricted>
    83f4ef02:	8522                	mv	a0,s0
    83f4ef04:	6442                	ld	s0,16(sp)
    83f4ef06:	60e2                	ld	ra,24(sp)
    83f4ef08:	64a2                	ld	s1,8(sp)
    83f4ef0a:	6902                	ld	s2,0(sp)
    83f4ef0c:	6105                	addi	sp,sp,32
    83f4ef0e:	8e5ff06f          	j	83f4e7f2 <prvUnlockQueue>

0000000083f4ef12 <prvAddCurrentTaskToDelayedList>:
    83f4ef12:	7179                	addi	sp,sp,-48
    83f4ef14:	ec26                	sd	s1,24(sp)
    83f4ef16:	00011497          	auipc	s1,0x11
    83f4ef1a:	d7248493          	addi	s1,s1,-654 # 83f5fc88 <pxCurrentTCB>
    83f4ef1e:	e84a                	sd	s2,16(sp)
    83f4ef20:	00011917          	auipc	s2,0x11
    83f4ef24:	dc893903          	ld	s2,-568(s2) # 83f5fce8 <xTickCount>
    83f4ef28:	6098                	ld	a4,0(s1)
    83f4ef2a:	609c                	ld	a5,0(s1)
    83f4ef2c:	f022                	sd	s0,32(sp)
    83f4ef2e:	e44e                	sd	s3,8(sp)
    83f4ef30:	f406                	sd	ra,40(sp)
    83f4ef32:	842a                	mv	s0,a0
    83f4ef34:	0a070023          	sb	zero,160(a4)
    83f4ef38:	00878513          	addi	a0,a5,8
    83f4ef3c:	89ae                	mv	s3,a1
    83f4ef3e:	0f8010ef          	jal	ra,83f50036 <uxListRemove>
    83f4ef42:	ed19                	bnez	a0,83f4ef60 <prvAddCurrentTaskToDelayedList+0x4e>
    83f4ef44:	609c                	ld	a5,0(s1)
    83f4ef46:	00011717          	auipc	a4,0x11
    83f4ef4a:	d7a70713          	addi	a4,a4,-646 # 83f5fcc0 <uxTopReadyPriority>
    83f4ef4e:	6314                	ld	a3,0(a4)
    83f4ef50:	6fb0                	ld	a2,88(a5)
    83f4ef52:	4785                	li	a5,1
    83f4ef54:	00c797b3          	sll	a5,a5,a2
    83f4ef58:	fff7c793          	not	a5,a5
    83f4ef5c:	8ff5                	and	a5,a5,a3
    83f4ef5e:	e31c                	sd	a5,0(a4)
    83f4ef60:	57fd                	li	a5,-1
    83f4ef62:	04f40c63          	beq	s0,a5,83f4efba <prvAddCurrentTaskToDelayedList+0xa8>
    83f4ef66:	609c                	ld	a5,0(s1)
    83f4ef68:	944a                	add	s0,s0,s2
    83f4ef6a:	e780                	sd	s0,8(a5)
    83f4ef6c:	03246963          	bltu	s0,s2,83f4ef9e <prvAddCurrentTaskToDelayedList+0x8c>
    83f4ef70:	00011517          	auipc	a0,0x11
    83f4ef74:	d2053503          	ld	a0,-736(a0) # 83f5fc90 <pxDelayedTaskList>
    83f4ef78:	608c                	ld	a1,0(s1)
    83f4ef7a:	05a1                	addi	a1,a1,8
    83f4ef7c:	08c010ef          	jal	ra,83f50008 <vListInsert>
    83f4ef80:	00011797          	auipc	a5,0x11
    83f4ef84:	d4878793          	addi	a5,a5,-696 # 83f5fcc8 <xNextTaskUnblockTime>
    83f4ef88:	6398                	ld	a4,0(a5)
    83f4ef8a:	00e47363          	bgeu	s0,a4,83f4ef90 <prvAddCurrentTaskToDelayedList+0x7e>
    83f4ef8e:	e380                	sd	s0,0(a5)
    83f4ef90:	70a2                	ld	ra,40(sp)
    83f4ef92:	7402                	ld	s0,32(sp)
    83f4ef94:	64e2                	ld	s1,24(sp)
    83f4ef96:	6942                	ld	s2,16(sp)
    83f4ef98:	69a2                	ld	s3,8(sp)
    83f4ef9a:	6145                	addi	sp,sp,48
    83f4ef9c:	8082                	ret
    83f4ef9e:	7402                	ld	s0,32(sp)
    83f4efa0:	00011517          	auipc	a0,0x11
    83f4efa4:	cf853503          	ld	a0,-776(a0) # 83f5fc98 <pxOverflowDelayedTaskList>
    83f4efa8:	608c                	ld	a1,0(s1)
    83f4efaa:	70a2                	ld	ra,40(sp)
    83f4efac:	64e2                	ld	s1,24(sp)
    83f4efae:	6942                	ld	s2,16(sp)
    83f4efb0:	69a2                	ld	s3,8(sp)
    83f4efb2:	05a1                	addi	a1,a1,8
    83f4efb4:	6145                	addi	sp,sp,48
    83f4efb6:	0520106f          	j	83f50008 <vListInsert>
    83f4efba:	fa0986e3          	beqz	s3,83f4ef66 <prvAddCurrentTaskToDelayedList+0x54>
    83f4efbe:	0000f797          	auipc	a5,0xf
    83f4efc2:	a0a78793          	addi	a5,a5,-1526 # 83f5d9c8 <xSuspendedTaskList>
    83f4efc6:	6098                	ld	a4,0(s1)
    83f4efc8:	6794                	ld	a3,8(a5)
    83f4efca:	0004b883          	ld	a7,0(s1)
    83f4efce:	608c                	ld	a1,0(s1)
    83f4efd0:	eb14                	sd	a3,16(a4)
    83f4efd2:	6a88                	ld	a0,16(a3)
    83f4efd4:	6090                	ld	a2,0(s1)
    83f4efd6:	0004b803          	ld	a6,0(s1)
    83f4efda:	6398                	ld	a4,0(a5)
    83f4efdc:	00a8bc23          	sd	a0,24(a7)
    83f4efe0:	05a1                	addi	a1,a1,8
    83f4efe2:	e50c                	sd	a1,8(a0)
    83f4efe4:	0621                	addi	a2,a2,8
    83f4efe6:	ea90                	sd	a2,16(a3)
    83f4efe8:	0705                	addi	a4,a4,1
    83f4efea:	02f83423          	sd	a5,40(a6)
    83f4efee:	e398                	sd	a4,0(a5)
    83f4eff0:	70a2                	ld	ra,40(sp)
    83f4eff2:	7402                	ld	s0,32(sp)
    83f4eff4:	64e2                	ld	s1,24(sp)
    83f4eff6:	6942                	ld	s2,16(sp)
    83f4eff8:	69a2                	ld	s3,8(sp)
    83f4effa:	6145                	addi	sp,sp,48
    83f4effc:	8082                	ret

0000000083f4effe <vTaskSwitchContext.part.0>:
    83f4effe:	1101                	addi	sp,sp,-32
    83f4f000:	e822                	sd	s0,16(sp)
    83f4f002:	00011797          	auipc	a5,0x11
    83f4f006:	ce07b723          	sd	zero,-786(a5) # 83f5fcf0 <xYieldPending>
    83f4f00a:	00011417          	auipc	s0,0x11
    83f4f00e:	c7e40413          	addi	s0,s0,-898 # 83f5fc88 <pxCurrentTCB>
    83f4f012:	6018                	ld	a4,0(s0)
    83f4f014:	ec06                	sd	ra,24(sp)
    83f4f016:	e426                	sd	s1,8(sp)
    83f4f018:	7338                	ld	a4,96(a4)
    83f4f01a:	a5a5a7b7          	lui	a5,0xa5a5a
    83f4f01e:	5a578793          	addi	a5,a5,1445 # ffffffffa5a5a5a5 <_end+0xffffffff21a5a865>
    83f4f022:	4314                	lw	a3,0(a4)
    83f4f024:	00f69563          	bne	a3,a5,83f4f02e <vTaskSwitchContext.part.0+0x30>
    83f4f028:	435c                	lw	a5,4(a4)
    83f4f02a:	06d78b63          	beq	a5,a3,83f4f0a0 <vTaskSwitchContext.part.0+0xa2>
    83f4f02e:	6008                	ld	a0,0(s0)
    83f4f030:	600c                	ld	a1,0(s0)
    83f4f032:	06858593          	addi	a1,a1,104
    83f4f036:	e39f30ef          	jal	ra,83f42e6e <vApplicationStackOverflowHook>
    83f4f03a:	00011497          	auipc	s1,0x11
    83f4f03e:	c4648493          	addi	s1,s1,-954 # 83f5fc80 <FreeRTOS_errno>
    83f4f042:	601c                	ld	a5,0(s0)
    83f4f044:	4098                	lw	a4,0(s1)
    83f4f046:	00011517          	auipc	a0,0x11
    83f4f04a:	c7a53503          	ld	a0,-902(a0) # 83f5fcc0 <uxTopReadyPriority>
    83f4f04e:	1502                	slli	a0,a0,0x20
    83f4f050:	0ae7a223          	sw	a4,164(a5)
    83f4f054:	9101                	srli	a0,a0,0x20
    83f4f056:	d9bf30ef          	jal	ra,83f42df0 <__clzdi2>
    83f4f05a:	47fd                	li	a5,31
    83f4f05c:	3501                	addiw	a0,a0,-32
    83f4f05e:	40a78533          	sub	a0,a5,a0
    83f4f062:	00251793          	slli	a5,a0,0x2
    83f4f066:	97aa                	add	a5,a5,a0
    83f4f068:	0000e717          	auipc	a4,0xe
    83f4f06c:	7a870713          	addi	a4,a4,1960 # 83f5d810 <pxReadyTasksLists>
    83f4f070:	078e                	slli	a5,a5,0x3
    83f4f072:	00f706b3          	add	a3,a4,a5
    83f4f076:	6690                	ld	a2,8(a3)
    83f4f078:	07c1                	addi	a5,a5,16
    83f4f07a:	97ba                	add	a5,a5,a4
    83f4f07c:	6618                	ld	a4,8(a2)
    83f4f07e:	e698                	sd	a4,8(a3)
    83f4f080:	00f70d63          	beq	a4,a5,83f4f09a <vTaskSwitchContext.part.0+0x9c>
    83f4f084:	6f1c                	ld	a5,24(a4)
    83f4f086:	60e2                	ld	ra,24(sp)
    83f4f088:	e01c                	sd	a5,0(s0)
    83f4f08a:	601c                	ld	a5,0(s0)
    83f4f08c:	6442                	ld	s0,16(sp)
    83f4f08e:	0a47a783          	lw	a5,164(a5)
    83f4f092:	c09c                	sw	a5,0(s1)
    83f4f094:	64a2                	ld	s1,8(sp)
    83f4f096:	6105                	addi	sp,sp,32
    83f4f098:	8082                	ret
    83f4f09a:	6718                	ld	a4,8(a4)
    83f4f09c:	e698                	sd	a4,8(a3)
    83f4f09e:	b7dd                	j	83f4f084 <vTaskSwitchContext.part.0+0x86>
    83f4f0a0:	4714                	lw	a3,8(a4)
    83f4f0a2:	f8f696e3          	bne	a3,a5,83f4f02e <vTaskSwitchContext.part.0+0x30>
    83f4f0a6:	475c                	lw	a5,12(a4)
    83f4f0a8:	f8d793e3          	bne	a5,a3,83f4f02e <vTaskSwitchContext.part.0+0x30>
    83f4f0ac:	b779                	j	83f4f03a <vTaskSwitchContext.part.0+0x3c>

0000000083f4f0ae <prvInitialiseNewTask.constprop.0>:
    83f4f0ae:	7139                	addi	sp,sp,-64
    83f4f0b0:	f822                	sd	s0,48(sp)
    83f4f0b2:	f426                	sd	s1,40(sp)
    83f4f0b4:	f04a                	sd	s2,32(sp)
    83f4f0b6:	ec4e                	sd	s3,24(sp)
    83f4f0b8:	e852                	sd	s4,16(sp)
    83f4f0ba:	e456                	sd	s5,8(sp)
    83f4f0bc:	e05a                	sd	s6,0(sp)
    83f4f0be:	fc06                	sd	ra,56(sp)
    83f4f0c0:	8a2a                	mv	s4,a0
    83f4f0c2:	06083503          	ld	a0,96(a6)
    83f4f0c6:	842e                	mv	s0,a1
    83f4f0c8:	02061593          	slli	a1,a2,0x20
    83f4f0cc:	89b2                	mv	s3,a2
    83f4f0ce:	01d5d613          	srli	a2,a1,0x1d
    83f4f0d2:	0a500593          	li	a1,165
    83f4f0d6:	84c2                	mv	s1,a6
    83f4f0d8:	893a                	mv	s2,a4
    83f4f0da:	8b3e                	mv	s6,a5
    83f4f0dc:	8ab6                	mv	s5,a3
    83f4f0de:	e9ffc0ef          	jal	ra,83f4bf7c <memset>
    83f4f0e2:	39fd                	addiw	s3,s3,-1
    83f4f0e4:	70bc                	ld	a5,96(s1)
    83f4f0e6:	02099713          	slli	a4,s3,0x20
    83f4f0ea:	01d75993          	srli	s3,a4,0x1d
    83f4f0ee:	99be                	add	s3,s3,a5
    83f4f0f0:	ff09f993          	andi	s3,s3,-16
    83f4f0f4:	cc51                	beqz	s0,83f4f190 <prvInitialiseNewTask.constprop.0+0xe2>
    83f4f0f6:	85a2                	mv	a1,s0
    83f4f0f8:	06848813          	addi	a6,s1,104
    83f4f0fc:	01040793          	addi	a5,s0,16
    83f4f100:	0005c883          	lbu	a7,0(a1)
    83f4f104:	0805                	addi	a6,a6,1
    83f4f106:	0585                	addi	a1,a1,1
    83f4f108:	ff180fa3          	sb	a7,-1(a6)
    83f4f10c:	00088463          	beqz	a7,83f4f114 <prvInitialiseNewTask.constprop.0+0x66>
    83f4f110:	fef598e3          	bne	a1,a5,83f4f100 <prvInitialiseNewTask.constprop.0+0x52>
    83f4f114:	06048ba3          	sb	zero,119(s1)
    83f4f118:	479d                	li	a5,7
    83f4f11a:	0127f363          	bgeu	a5,s2,83f4f120 <prvInitialiseNewTask.constprop.0+0x72>
    83f4f11e:	491d                	li	s2,7
    83f4f120:	00848513          	addi	a0,s1,8
    83f4f124:	0524bc23          	sd	s2,88(s1)
    83f4f128:	0924b023          	sd	s2,128(s1)
    83f4f12c:	0804b423          	sd	zero,136(s1)
    83f4f130:	6d3000ef          	jal	ra,83f50002 <vListInitialiseItem>
    83f4f134:	03048513          	addi	a0,s1,48
    83f4f138:	6cb000ef          	jal	ra,83f50002 <vListInitialiseItem>
    83f4f13c:	47a1                	li	a5,8
    83f4f13e:	41278433          	sub	s0,a5,s2
    83f4f142:	4631                	li	a2,12
    83f4f144:	4581                	li	a1,0
    83f4f146:	f084                	sd	s1,32(s1)
    83f4f148:	f880                	sd	s0,48(s1)
    83f4f14a:	e4a4                	sd	s1,72(s1)
    83f4f14c:	0604bc23          	sd	zero,120(s1)
    83f4f150:	09048513          	addi	a0,s1,144
    83f4f154:	e29fc0ef          	jal	ra,83f4bf7c <memset>
    83f4f158:	460d                	li	a2,3
    83f4f15a:	4581                	li	a1,0
    83f4f15c:	09c48513          	addi	a0,s1,156
    83f4f160:	e1dfc0ef          	jal	ra,83f4bf7c <memset>
    83f4f164:	8656                	mv	a2,s5
    83f4f166:	0a048023          	sb	zero,160(s1)
    83f4f16a:	85d2                	mv	a1,s4
    83f4f16c:	854e                	mv	a0,s3
    83f4f16e:	b92f10ef          	jal	ra,83f40500 <pxPortInitialiseStack>
    83f4f172:	e088                	sd	a0,0(s1)
    83f4f174:	000b0463          	beqz	s6,83f4f17c <prvInitialiseNewTask.constprop.0+0xce>
    83f4f178:	009b3023          	sd	s1,0(s6)
    83f4f17c:	70e2                	ld	ra,56(sp)
    83f4f17e:	7442                	ld	s0,48(sp)
    83f4f180:	74a2                	ld	s1,40(sp)
    83f4f182:	7902                	ld	s2,32(sp)
    83f4f184:	69e2                	ld	s3,24(sp)
    83f4f186:	6a42                	ld	s4,16(sp)
    83f4f188:	6aa2                	ld	s5,8(sp)
    83f4f18a:	6b02                	ld	s6,0(sp)
    83f4f18c:	6121                	addi	sp,sp,64
    83f4f18e:	8082                	ret
    83f4f190:	06048423          	sb	zero,104(s1)
    83f4f194:	b751                	j	83f4f118 <prvInitialiseNewTask.constprop.0+0x6a>

0000000083f4f196 <prvIdleTask>:
    83f4f196:	715d                	addi	sp,sp,-80
    83f4f198:	fc26                	sd	s1,56(sp)
    83f4f19a:	f84a                	sd	s2,48(sp)
    83f4f19c:	f44e                	sd	s3,40(sp)
    83f4f19e:	f052                	sd	s4,32(sp)
    83f4f1a0:	ec56                	sd	s5,24(sp)
    83f4f1a2:	e85a                	sd	s6,16(sp)
    83f4f1a4:	e45e                	sd	s7,8(sp)
    83f4f1a6:	e486                	sd	ra,72(sp)
    83f4f1a8:	e0a2                	sd	s0,64(sp)
    83f4f1aa:	00011497          	auipc	s1,0x11
    83f4f1ae:	afe48493          	addi	s1,s1,-1282 # 83f5fca8 <uxDeletedTasksWaitingCleanUp>
    83f4f1b2:	00011997          	auipc	s3,0x11
    83f4f1b6:	b2e98993          	addi	s3,s3,-1234 # 83f5fce0 <xSchedulerRunning>
    83f4f1ba:	00011a17          	auipc	s4,0x11
    83f4f1be:	acea0a13          	addi	s4,s4,-1330 # 83f5fc88 <pxCurrentTCB>
    83f4f1c2:	0000fa97          	auipc	s5,0xf
    83f4f1c6:	82ea8a93          	addi	s5,s5,-2002 # 83f5d9f0 <xTasksWaitingTermination>
    83f4f1ca:	00011917          	auipc	s2,0x11
    83f4f1ce:	ad690913          	addi	s2,s2,-1322 # 83f5fca0 <uxCurrentNumberOfTasks>
    83f4f1d2:	0000eb97          	auipc	s7,0xe
    83f4f1d6:	63eb8b93          	addi	s7,s7,1598 # 83f5d810 <pxReadyTasksLists>
    83f4f1da:	4b05                	li	s6,1
    83f4f1dc:	609c                	ld	a5,0(s1)
    83f4f1de:	cba5                	beqz	a5,83f4f24e <prvIdleTask+0xb8>
    83f4f1e0:	30047073          	csrci	mstatus,8
    83f4f1e4:	0009b783          	ld	a5,0(s3)
    83f4f1e8:	cb81                	beqz	a5,83f4f1f8 <prvIdleTask+0x62>
    83f4f1ea:	000a3703          	ld	a4,0(s4)
    83f4f1ee:	000a3783          	ld	a5,0(s4)
    83f4f1f2:	7f3c                	ld	a5,120(a4)
    83f4f1f4:	0785                	addi	a5,a5,1
    83f4f1f6:	ff3c                	sd	a5,120(a4)
    83f4f1f8:	018ab783          	ld	a5,24(s5)
    83f4f1fc:	6f80                	ld	s0,24(a5)
    83f4f1fe:	00840513          	addi	a0,s0,8
    83f4f202:	635000ef          	jal	ra,83f50036 <uxListRemove>
    83f4f206:	00093783          	ld	a5,0(s2)
    83f4f20a:	17fd                	addi	a5,a5,-1
    83f4f20c:	00f93023          	sd	a5,0(s2)
    83f4f210:	609c                	ld	a5,0(s1)
    83f4f212:	17fd                	addi	a5,a5,-1
    83f4f214:	e09c                	sd	a5,0(s1)
    83f4f216:	0009b783          	ld	a5,0(s3)
    83f4f21a:	c385                	beqz	a5,83f4f23a <prvIdleTask+0xa4>
    83f4f21c:	000a3783          	ld	a5,0(s4)
    83f4f220:	7fbc                	ld	a5,120(a5)
    83f4f222:	cf81                	beqz	a5,83f4f23a <prvIdleTask+0xa4>
    83f4f224:	000a3703          	ld	a4,0(s4)
    83f4f228:	000a3683          	ld	a3,0(s4)
    83f4f22c:	7f3c                	ld	a5,120(a4)
    83f4f22e:	17fd                	addi	a5,a5,-1
    83f4f230:	ff3c                	sd	a5,120(a4)
    83f4f232:	7ebc                	ld	a5,120(a3)
    83f4f234:	e399                	bnez	a5,83f4f23a <prvIdleTask+0xa4>
    83f4f236:	30046073          	csrsi	mstatus,8
    83f4f23a:	09f44783          	lbu	a5,159(s0)
    83f4f23e:	cf99                	beqz	a5,83f4f25c <prvIdleTask+0xc6>
    83f4f240:	f9679ee3          	bne	a5,s6,83f4f1dc <prvIdleTask+0x46>
    83f4f244:	8522                	mv	a0,s0
    83f4f246:	ca4ff0ef          	jal	ra,83f4e6ea <vPortFree>
    83f4f24a:	609c                	ld	a5,0(s1)
    83f4f24c:	fbd1                	bnez	a5,83f4f1e0 <prvIdleTask+0x4a>
    83f4f24e:	000bb783          	ld	a5,0(s7)
    83f4f252:	f8fb75e3          	bgeu	s6,a5,83f4f1dc <prvIdleTask+0x46>
    83f4f256:	00000073          	ecall
    83f4f25a:	b749                	j	83f4f1dc <prvIdleTask+0x46>
    83f4f25c:	7028                	ld	a0,96(s0)
    83f4f25e:	c8cff0ef          	jal	ra,83f4e6ea <vPortFree>
    83f4f262:	8522                	mv	a0,s0
    83f4f264:	c86ff0ef          	jal	ra,83f4e6ea <vPortFree>
    83f4f268:	bf95                	j	83f4f1dc <prvIdleTask+0x46>

0000000083f4f26a <xTaskIncrementTick.part.0>:
    83f4f26a:	00011797          	auipc	a5,0x11
    83f4f26e:	a7e78793          	addi	a5,a5,-1410 # 83f5fce8 <xTickCount>
    83f4f272:	0007b803          	ld	a6,0(a5)
    83f4f276:	00011f17          	auipc	t5,0x11
    83f4f27a:	a52f0f13          	addi	t5,t5,-1454 # 83f5fcc8 <xNextTaskUnblockTime>
    83f4f27e:	0805                	addi	a6,a6,1
    83f4f280:	0107b023          	sd	a6,0(a5)
    83f4f284:	16080663          	beqz	a6,83f4f3f0 <xTaskIncrementTick.part.0+0x186>
    83f4f288:	000f3783          	ld	a5,0(t5)
    83f4f28c:	0ef86963          	bltu	a6,a5,83f4f37e <xTaskIncrementTick.part.0+0x114>
    83f4f290:	00011897          	auipc	a7,0x11
    83f4f294:	a0088893          	addi	a7,a7,-1536 # 83f5fc90 <pxDelayedTaskList>
    83f4f298:	0008b783          	ld	a5,0(a7)
    83f4f29c:	4501                	li	a0,0
    83f4f29e:	0000e597          	auipc	a1,0xe
    83f4f2a2:	57258593          	addi	a1,a1,1394 # 83f5d810 <pxReadyTasksLists>
    83f4f2a6:	639c                	ld	a5,0(a5)
    83f4f2a8:	00011e17          	auipc	t3,0x11
    83f4f2ac:	9e0e0e13          	addi	t3,t3,-1568 # 83f5fc88 <pxCurrentTCB>
    83f4f2b0:	10078a63          	beqz	a5,83f4f3c4 <xTaskIncrementTick.part.0+0x15a>
    83f4f2b4:	00011317          	auipc	t1,0x11
    83f4f2b8:	a0c30313          	addi	t1,t1,-1524 # 83f5fcc0 <uxTopReadyPriority>
    83f4f2bc:	4e85                	li	t4,1
    83f4f2be:	a069                	j	83f4f348 <xTaskIncrementTick.part.0+0xde>
    83f4f2c0:	0207b423          	sd	zero,40(a5)
    83f4f2c4:	6314                	ld	a3,0(a4)
    83f4f2c6:	16fd                	addi	a3,a3,-1
    83f4f2c8:	e314                	sd	a3,0(a4)
    83f4f2ca:	6bb8                	ld	a4,80(a5)
    83f4f2cc:	c315                	beqz	a4,83f4f2f0 <xTaskIncrementTick.part.0+0x86>
    83f4f2ce:	0387bf83          	ld	t6,56(a5)
    83f4f2d2:	63b4                	ld	a3,64(a5)
    83f4f2d4:	00dfb823          	sd	a3,16(t6)
    83f4f2d8:	0387bf83          	ld	t6,56(a5)
    83f4f2dc:	01f6b423          	sd	t6,8(a3)
    83f4f2e0:	6714                	ld	a3,8(a4)
    83f4f2e2:	0e568563          	beq	a3,t0,83f4f3cc <xTaskIncrementTick.part.0+0x162>
    83f4f2e6:	0407b823          	sd	zero,80(a5)
    83f4f2ea:	6314                	ld	a3,0(a4)
    83f4f2ec:	16fd                	addi	a3,a3,-1
    83f4f2ee:	e314                	sd	a3,0(a4)
    83f4f2f0:	6fb8                	ld	a4,88(a5)
    83f4f2f2:	00033f83          	ld	t6,0(t1)
    83f4f2f6:	00271693          	slli	a3,a4,0x2
    83f4f2fa:	96ba                	add	a3,a3,a4
    83f4f2fc:	068e                	slli	a3,a3,0x3
    83f4f2fe:	96ae                	add	a3,a3,a1
    83f4f300:	6694                	ld	a3,8(a3)
    83f4f302:	00ee9733          	sll	a4,t4,a4
    83f4f306:	01f76733          	or	a4,a4,t6
    83f4f30a:	eb94                	sd	a3,16(a5)
    83f4f30c:	0106bf83          	ld	t6,16(a3)
    83f4f310:	00e33023          	sd	a4,0(t1)
    83f4f314:	01f7bc23          	sd	t6,24(a5)
    83f4f318:	00cfb423          	sd	a2,8(t6)
    83f4f31c:	ea90                	sd	a2,16(a3)
    83f4f31e:	6fb4                	ld	a3,88(a5)
    83f4f320:	00269713          	slli	a4,a3,0x2
    83f4f324:	9736                	add	a4,a4,a3
    83f4f326:	070e                	slli	a4,a4,0x3
    83f4f328:	972e                	add	a4,a4,a1
    83f4f32a:	f798                	sd	a4,40(a5)
    83f4f32c:	6314                	ld	a3,0(a4)
    83f4f32e:	0685                	addi	a3,a3,1
    83f4f330:	e314                	sd	a3,0(a4)
    83f4f332:	000e3683          	ld	a3,0(t3)
    83f4f336:	6fb8                	ld	a4,88(a5)
    83f4f338:	6ebc                	ld	a5,88(a3)
    83f4f33a:	00f76363          	bltu	a4,a5,83f4f340 <xTaskIncrementTick.part.0+0xd6>
    83f4f33e:	4505                	li	a0,1
    83f4f340:	0008b783          	ld	a5,0(a7)
    83f4f344:	639c                	ld	a5,0(a5)
    83f4f346:	cfbd                	beqz	a5,83f4f3c4 <xTaskIncrementTick.part.0+0x15a>
    83f4f348:	0008b783          	ld	a5,0(a7)
    83f4f34c:	6f9c                	ld	a5,24(a5)
    83f4f34e:	6f9c                	ld	a5,24(a5)
    83f4f350:	6798                	ld	a4,8(a5)
    83f4f352:	00878613          	addi	a2,a5,8
    83f4f356:	03078293          	addi	t0,a5,48
    83f4f35a:	0ce86563          	bltu	a6,a4,83f4f424 <xTaskIncrementTick.part.0+0x1ba>
    83f4f35e:	0107bf83          	ld	t6,16(a5)
    83f4f362:	6f94                	ld	a3,24(a5)
    83f4f364:	7798                	ld	a4,40(a5)
    83f4f366:	00dfb823          	sd	a3,16(t6)
    83f4f36a:	0107bf83          	ld	t6,16(a5)
    83f4f36e:	01f6b423          	sd	t6,8(a3)
    83f4f372:	6714                	ld	a3,8(a4)
    83f4f374:	f4c696e3          	bne	a3,a2,83f4f2c0 <xTaskIncrementTick.part.0+0x56>
    83f4f378:	6f94                	ld	a3,24(a5)
    83f4f37a:	e714                	sd	a3,8(a4)
    83f4f37c:	b791                	j	83f4f2c0 <xTaskIncrementTick.part.0+0x56>
    83f4f37e:	4501                	li	a0,0
    83f4f380:	0000e597          	auipc	a1,0xe
    83f4f384:	49058593          	addi	a1,a1,1168 # 83f5d810 <pxReadyTasksLists>
    83f4f388:	00011e17          	auipc	t3,0x11
    83f4f38c:	900e0e13          	addi	t3,t3,-1792 # 83f5fc88 <pxCurrentTCB>
    83f4f390:	000e3783          	ld	a5,0(t3)
    83f4f394:	4685                	li	a3,1
    83f4f396:	6fb8                	ld	a4,88(a5)
    83f4f398:	00271793          	slli	a5,a4,0x2
    83f4f39c:	97ba                	add	a5,a5,a4
    83f4f39e:	078e                	slli	a5,a5,0x3
    83f4f3a0:	95be                	add	a1,a1,a5
    83f4f3a2:	619c                	ld	a5,0(a1)
    83f4f3a4:	00f6f363          	bgeu	a3,a5,83f4f3aa <xTaskIncrementTick.part.0+0x140>
    83f4f3a8:	4505                	li	a0,1
    83f4f3aa:	00011797          	auipc	a5,0x11
    83f4f3ae:	92e7b783          	ld	a5,-1746(a5) # 83f5fcd8 <xPendedTicks>
    83f4f3b2:	c385                	beqz	a5,83f4f3d2 <xTaskIncrementTick.part.0+0x168>
    83f4f3b4:	00011797          	auipc	a5,0x11
    83f4f3b8:	93c7b783          	ld	a5,-1732(a5) # 83f5fcf0 <xYieldPending>
    83f4f3bc:	c399                	beqz	a5,83f4f3c2 <xTaskIncrementTick.part.0+0x158>
    83f4f3be:	4505                	li	a0,1
    83f4f3c0:	8082                	ret
    83f4f3c2:	8082                	ret
    83f4f3c4:	57fd                	li	a5,-1
    83f4f3c6:	00ff3023          	sd	a5,0(t5)
    83f4f3ca:	b7d9                	j	83f4f390 <xTaskIncrementTick.part.0+0x126>
    83f4f3cc:	63b4                	ld	a3,64(a5)
    83f4f3ce:	e714                	sd	a3,8(a4)
    83f4f3d0:	bf19                	j	83f4f2e6 <xTaskIncrementTick.part.0+0x7c>
    83f4f3d2:	1101                	addi	sp,sp,-32
    83f4f3d4:	e42a                	sd	a0,8(sp)
    83f4f3d6:	ec06                	sd	ra,24(sp)
    83f4f3d8:	abff30ef          	jal	ra,83f42e96 <vApplicationTickHook>
    83f4f3dc:	00011797          	auipc	a5,0x11
    83f4f3e0:	9147b783          	ld	a5,-1772(a5) # 83f5fcf0 <xYieldPending>
    83f4f3e4:	6522                	ld	a0,8(sp)
    83f4f3e6:	c391                	beqz	a5,83f4f3ea <xTaskIncrementTick.part.0+0x180>
    83f4f3e8:	4505                	li	a0,1
    83f4f3ea:	60e2                	ld	ra,24(sp)
    83f4f3ec:	6105                	addi	sp,sp,32
    83f4f3ee:	8082                	ret
    83f4f3f0:	00011797          	auipc	a5,0x11
    83f4f3f4:	8a078793          	addi	a5,a5,-1888 # 83f5fc90 <pxDelayedTaskList>
    83f4f3f8:	00011717          	auipc	a4,0x11
    83f4f3fc:	8a070713          	addi	a4,a4,-1888 # 83f5fc98 <pxOverflowDelayedTaskList>
    83f4f400:	6390                	ld	a2,0(a5)
    83f4f402:	630c                	ld	a1,0(a4)
    83f4f404:	00011697          	auipc	a3,0x11
    83f4f408:	8cc68693          	addi	a3,a3,-1844 # 83f5fcd0 <xNumOfOverflows>
    83f4f40c:	e38c                	sd	a1,0(a5)
    83f4f40e:	e310                	sd	a2,0(a4)
    83f4f410:	6298                	ld	a4,0(a3)
    83f4f412:	0705                	addi	a4,a4,1
    83f4f414:	e298                	sd	a4,0(a3)
    83f4f416:	6398                	ld	a4,0(a5)
    83f4f418:	6318                	ld	a4,0(a4)
    83f4f41a:	eb01                	bnez	a4,83f4f42a <xTaskIncrementTick.part.0+0x1c0>
    83f4f41c:	57fd                	li	a5,-1
    83f4f41e:	00ff3023          	sd	a5,0(t5)
    83f4f422:	b59d                	j	83f4f288 <xTaskIncrementTick.part.0+0x1e>
    83f4f424:	00ef3023          	sd	a4,0(t5)
    83f4f428:	b7a5                	j	83f4f390 <xTaskIncrementTick.part.0+0x126>
    83f4f42a:	639c                	ld	a5,0(a5)
    83f4f42c:	6f9c                	ld	a5,24(a5)
    83f4f42e:	639c                	ld	a5,0(a5)
    83f4f430:	00ff3023          	sd	a5,0(t5)
    83f4f434:	bd91                	j	83f4f288 <xTaskIncrementTick.part.0+0x1e>

0000000083f4f436 <vTaskSuspendAll>:
    83f4f436:	00011717          	auipc	a4,0x11
    83f4f43a:	87a70713          	addi	a4,a4,-1926 # 83f5fcb0 <uxSchedulerSuspended>
    83f4f43e:	631c                	ld	a5,0(a4)
    83f4f440:	0785                	addi	a5,a5,1
    83f4f442:	e31c                	sd	a5,0(a4)
    83f4f444:	8082                	ret

0000000083f4f446 <xTaskGetTickCount>:
    83f4f446:	00011517          	auipc	a0,0x11
    83f4f44a:	8a253503          	ld	a0,-1886(a0) # 83f5fce8 <xTickCount>
    83f4f44e:	8082                	ret

0000000083f4f450 <xTaskIncrementTick>:
    83f4f450:	00011797          	auipc	a5,0x11
    83f4f454:	8607b783          	ld	a5,-1952(a5) # 83f5fcb0 <uxSchedulerSuspended>
    83f4f458:	e399                	bnez	a5,83f4f45e <xTaskIncrementTick+0xe>
    83f4f45a:	e11ff06f          	j	83f4f26a <xTaskIncrementTick.part.0>
    83f4f45e:	1141                	addi	sp,sp,-16
    83f4f460:	e406                	sd	ra,8(sp)
    83f4f462:	00011717          	auipc	a4,0x11
    83f4f466:	87670713          	addi	a4,a4,-1930 # 83f5fcd8 <xPendedTicks>
    83f4f46a:	631c                	ld	a5,0(a4)
    83f4f46c:	0785                	addi	a5,a5,1
    83f4f46e:	e31c                	sd	a5,0(a4)
    83f4f470:	a27f30ef          	jal	ra,83f42e96 <vApplicationTickHook>
    83f4f474:	60a2                	ld	ra,8(sp)
    83f4f476:	4501                	li	a0,0
    83f4f478:	0141                	addi	sp,sp,16
    83f4f47a:	8082                	ret

0000000083f4f47c <vTaskSwitchContext>:
    83f4f47c:	00011797          	auipc	a5,0x11
    83f4f480:	8347b783          	ld	a5,-1996(a5) # 83f5fcb0 <uxSchedulerSuspended>
    83f4f484:	c799                	beqz	a5,83f4f492 <vTaskSwitchContext+0x16>
    83f4f486:	4785                	li	a5,1
    83f4f488:	00011717          	auipc	a4,0x11
    83f4f48c:	86f73423          	sd	a5,-1944(a4) # 83f5fcf0 <xYieldPending>
    83f4f490:	8082                	ret
    83f4f492:	b6dff06f          	j	83f4effe <vTaskSwitchContext.part.0>

0000000083f4f496 <vTaskPlaceOnEventList>:
    83f4f496:	1141                	addi	sp,sp,-16
    83f4f498:	00010797          	auipc	a5,0x10
    83f4f49c:	7f07b783          	ld	a5,2032(a5) # 83f5fc88 <pxCurrentTCB>
    83f4f4a0:	e022                	sd	s0,0(sp)
    83f4f4a2:	842e                	mv	s0,a1
    83f4f4a4:	03078593          	addi	a1,a5,48
    83f4f4a8:	e406                	sd	ra,8(sp)
    83f4f4aa:	35f000ef          	jal	ra,83f50008 <vListInsert>
    83f4f4ae:	8522                	mv	a0,s0
    83f4f4b0:	6402                	ld	s0,0(sp)
    83f4f4b2:	60a2                	ld	ra,8(sp)
    83f4f4b4:	4585                	li	a1,1
    83f4f4b6:	0141                	addi	sp,sp,16
    83f4f4b8:	a5bff06f          	j	83f4ef12 <prvAddCurrentTaskToDelayedList>

0000000083f4f4bc <vTaskPlaceOnEventListRestricted>:
    83f4f4bc:	00010797          	auipc	a5,0x10
    83f4f4c0:	7cc78793          	addi	a5,a5,1996 # 83f5fc88 <pxCurrentTCB>
    83f4f4c4:	6394                	ld	a3,0(a5)
    83f4f4c6:	6518                	ld	a4,8(a0)
    83f4f4c8:	0007b303          	ld	t1,0(a5)
    83f4f4cc:	0007b803          	ld	a6,0(a5)
    83f4f4d0:	fe98                	sd	a4,56(a3)
    83f4f4d2:	01073883          	ld	a7,16(a4)
    83f4f4d6:	6394                	ld	a3,0(a5)
    83f4f4d8:	03080813          	addi	a6,a6,48
    83f4f4dc:	05133023          	sd	a7,64(t1)
    83f4f4e0:	0007b303          	ld	t1,0(a5)
    83f4f4e4:	0108b423          	sd	a6,8(a7)
    83f4f4e8:	03068793          	addi	a5,a3,48
    83f4f4ec:	eb1c                	sd	a5,16(a4)
    83f4f4ee:	04a33823          	sd	a0,80(t1)
    83f4f4f2:	611c                	ld	a5,0(a0)
    83f4f4f4:	0785                	addi	a5,a5,1
    83f4f4f6:	e11c                	sd	a5,0(a0)
    83f4f4f8:	852e                	mv	a0,a1
    83f4f4fa:	c211                	beqz	a2,83f4f4fe <vTaskPlaceOnEventListRestricted+0x42>
    83f4f4fc:	557d                	li	a0,-1
    83f4f4fe:	85b2                	mv	a1,a2
    83f4f500:	a13ff06f          	j	83f4ef12 <prvAddCurrentTaskToDelayedList>

0000000083f4f504 <xTaskRemoveFromEventList>:
    83f4f504:	6d1c                	ld	a5,24(a0)
    83f4f506:	6f9c                	ld	a5,24(a5)
    83f4f508:	7f8c                	ld	a1,56(a5)
    83f4f50a:	63b4                	ld	a3,64(a5)
    83f4f50c:	6bb8                	ld	a4,80(a5)
    83f4f50e:	03078613          	addi	a2,a5,48
    83f4f512:	e994                	sd	a3,16(a1)
    83f4f514:	7f8c                	ld	a1,56(a5)
    83f4f516:	e68c                	sd	a1,8(a3)
    83f4f518:	6714                	ld	a3,8(a4)
    83f4f51a:	0cc68263          	beq	a3,a2,83f4f5de <xTaskRemoveFromEventList+0xda>
    83f4f51e:	0407b823          	sd	zero,80(a5)
    83f4f522:	6314                	ld	a3,0(a4)
    83f4f524:	16fd                	addi	a3,a3,-1
    83f4f526:	e314                	sd	a3,0(a4)
    83f4f528:	00010717          	auipc	a4,0x10
    83f4f52c:	78873703          	ld	a4,1928(a4) # 83f5fcb0 <uxSchedulerSuspended>
    83f4f530:	eb41                	bnez	a4,83f4f5c0 <xTaskRemoveFromEventList+0xbc>
    83f4f532:	6b90                	ld	a2,16(a5)
    83f4f534:	6f94                	ld	a3,24(a5)
    83f4f536:	7798                	ld	a4,40(a5)
    83f4f538:	00878593          	addi	a1,a5,8
    83f4f53c:	ea14                	sd	a3,16(a2)
    83f4f53e:	6b90                	ld	a2,16(a5)
    83f4f540:	e690                	sd	a2,8(a3)
    83f4f542:	6714                	ld	a3,8(a4)
    83f4f544:	0ab68063          	beq	a3,a1,83f4f5e4 <xTaskRemoveFromEventList+0xe0>
    83f4f548:	0207b423          	sd	zero,40(a5)
    83f4f54c:	6310                	ld	a2,0(a4)
    83f4f54e:	0000e697          	auipc	a3,0xe
    83f4f552:	2c268693          	addi	a3,a3,706 # 83f5d810 <pxReadyTasksLists>
    83f4f556:	00010817          	auipc	a6,0x10
    83f4f55a:	76a80813          	addi	a6,a6,1898 # 83f5fcc0 <uxTopReadyPriority>
    83f4f55e:	167d                	addi	a2,a2,-1
    83f4f560:	e310                	sd	a2,0(a4)
    83f4f562:	6fa8                	ld	a0,88(a5)
    83f4f564:	00083883          	ld	a7,0(a6)
    83f4f568:	00251713          	slli	a4,a0,0x2
    83f4f56c:	972a                	add	a4,a4,a0
    83f4f56e:	070e                	slli	a4,a4,0x3
    83f4f570:	9736                	add	a4,a4,a3
    83f4f572:	6710                	ld	a2,8(a4)
    83f4f574:	4705                	li	a4,1
    83f4f576:	00a71733          	sll	a4,a4,a0
    83f4f57a:	eb90                	sd	a2,16(a5)
    83f4f57c:	6a08                	ld	a0,16(a2)
    83f4f57e:	01176733          	or	a4,a4,a7
    83f4f582:	00e83023          	sd	a4,0(a6)
    83f4f586:	ef88                	sd	a0,24(a5)
    83f4f588:	e50c                	sd	a1,8(a0)
    83f4f58a:	ea0c                	sd	a1,16(a2)
    83f4f58c:	6fb0                	ld	a2,88(a5)
    83f4f58e:	00261713          	slli	a4,a2,0x2
    83f4f592:	9732                	add	a4,a4,a2
    83f4f594:	070e                	slli	a4,a4,0x3
    83f4f596:	9736                	add	a4,a4,a3
    83f4f598:	f798                	sd	a4,40(a5)
    83f4f59a:	6314                	ld	a3,0(a4)
    83f4f59c:	0685                	addi	a3,a3,1
    83f4f59e:	e314                	sd	a3,0(a4)
    83f4f5a0:	00010697          	auipc	a3,0x10
    83f4f5a4:	6e86b683          	ld	a3,1768(a3) # 83f5fc88 <pxCurrentTCB>
    83f4f5a8:	6fb8                	ld	a4,88(a5)
    83f4f5aa:	6ebc                	ld	a5,88(a3)
    83f4f5ac:	4501                	li	a0,0
    83f4f5ae:	00e7f863          	bgeu	a5,a4,83f4f5be <xTaskRemoveFromEventList+0xba>
    83f4f5b2:	4785                	li	a5,1
    83f4f5b4:	00010717          	auipc	a4,0x10
    83f4f5b8:	72f73e23          	sd	a5,1852(a4) # 83f5fcf0 <xYieldPending>
    83f4f5bc:	4505                	li	a0,1
    83f4f5be:	8082                	ret
    83f4f5c0:	0000e717          	auipc	a4,0xe
    83f4f5c4:	3e070713          	addi	a4,a4,992 # 83f5d9a0 <xPendingReadyList>
    83f4f5c8:	6714                	ld	a3,8(a4)
    83f4f5ca:	630c                	ld	a1,0(a4)
    83f4f5cc:	ff94                	sd	a3,56(a5)
    83f4f5ce:	6a88                	ld	a0,16(a3)
    83f4f5d0:	0585                	addi	a1,a1,1
    83f4f5d2:	e30c                	sd	a1,0(a4)
    83f4f5d4:	e3a8                	sd	a0,64(a5)
    83f4f5d6:	e510                	sd	a2,8(a0)
    83f4f5d8:	ea90                	sd	a2,16(a3)
    83f4f5da:	ebb8                	sd	a4,80(a5)
    83f4f5dc:	b7d1                	j	83f4f5a0 <xTaskRemoveFromEventList+0x9c>
    83f4f5de:	63b4                	ld	a3,64(a5)
    83f4f5e0:	e714                	sd	a3,8(a4)
    83f4f5e2:	bf35                	j	83f4f51e <xTaskRemoveFromEventList+0x1a>
    83f4f5e4:	6f94                	ld	a3,24(a5)
    83f4f5e6:	e714                	sd	a3,8(a4)
    83f4f5e8:	b785                	j	83f4f548 <xTaskRemoveFromEventList+0x44>

0000000083f4f5ea <vTaskInternalSetTimeOutState>:
    83f4f5ea:	00010717          	auipc	a4,0x10
    83f4f5ee:	6e673703          	ld	a4,1766(a4) # 83f5fcd0 <xNumOfOverflows>
    83f4f5f2:	00010797          	auipc	a5,0x10
    83f4f5f6:	6f67b783          	ld	a5,1782(a5) # 83f5fce8 <xTickCount>
    83f4f5fa:	e118                	sd	a4,0(a0)
    83f4f5fc:	e51c                	sd	a5,8(a0)
    83f4f5fe:	8082                	ret

0000000083f4f600 <vTaskMissedYield>:
    83f4f600:	4785                	li	a5,1
    83f4f602:	00010717          	auipc	a4,0x10
    83f4f606:	6ef73723          	sd	a5,1774(a4) # 83f5fcf0 <xYieldPending>
    83f4f60a:	8082                	ret

0000000083f4f60c <xTaskPriorityDisinherit>:
    83f4f60c:	c505                	beqz	a0,83f4f634 <xTaskPriorityDisinherit+0x28>
    83f4f60e:	1101                	addi	sp,sp,-32
    83f4f610:	e822                	sd	s0,16(sp)
    83f4f612:	ec06                	sd	ra,24(sp)
    83f4f614:	e426                	sd	s1,8(sp)
    83f4f616:	655c                	ld	a5,136(a0)
    83f4f618:	6d34                	ld	a3,88(a0)
    83f4f61a:	6158                	ld	a4,128(a0)
    83f4f61c:	17fd                	addi	a5,a5,-1
    83f4f61e:	e55c                	sd	a5,136(a0)
    83f4f620:	842a                	mv	s0,a0
    83f4f622:	00e68363          	beq	a3,a4,83f4f628 <xTaskPriorityDisinherit+0x1c>
    83f4f626:	cb89                	beqz	a5,83f4f638 <xTaskPriorityDisinherit+0x2c>
    83f4f628:	60e2                	ld	ra,24(sp)
    83f4f62a:	6442                	ld	s0,16(sp)
    83f4f62c:	64a2                	ld	s1,8(sp)
    83f4f62e:	4501                	li	a0,0
    83f4f630:	6105                	addi	sp,sp,32
    83f4f632:	8082                	ret
    83f4f634:	4501                	li	a0,0
    83f4f636:	8082                	ret
    83f4f638:	00850493          	addi	s1,a0,8
    83f4f63c:	8526                	mv	a0,s1
    83f4f63e:	1f9000ef          	jal	ra,83f50036 <uxListRemove>
    83f4f642:	00010597          	auipc	a1,0x10
    83f4f646:	67e58593          	addi	a1,a1,1662 # 83f5fcc0 <uxTopReadyPriority>
    83f4f64a:	e911                	bnez	a0,83f4f65e <xTaskPriorityDisinherit+0x52>
    83f4f64c:	6c34                	ld	a3,88(s0)
    83f4f64e:	6198                	ld	a4,0(a1)
    83f4f650:	4785                	li	a5,1
    83f4f652:	00d797b3          	sll	a5,a5,a3
    83f4f656:	fff7c793          	not	a5,a5
    83f4f65a:	8ff9                	and	a5,a5,a4
    83f4f65c:	e19c                	sd	a5,0(a1)
    83f4f65e:	6050                	ld	a2,128(s0)
    83f4f660:	46a1                	li	a3,8
    83f4f662:	0000e717          	auipc	a4,0xe
    83f4f666:	1ae70713          	addi	a4,a4,430 # 83f5d810 <pxReadyTasksLists>
    83f4f66a:	00261793          	slli	a5,a2,0x2
    83f4f66e:	97b2                	add	a5,a5,a2
    83f4f670:	8e91                	sub	a3,a3,a2
    83f4f672:	078e                	slli	a5,a5,0x3
    83f4f674:	ec30                	sd	a2,88(s0)
    83f4f676:	f814                	sd	a3,48(s0)
    83f4f678:	97ba                	add	a5,a5,a4
    83f4f67a:	679c                	ld	a5,8(a5)
    83f4f67c:	4685                	li	a3,1
    83f4f67e:	00c696b3          	sll	a3,a3,a2
    83f4f682:	e81c                	sd	a5,16(s0)
    83f4f684:	6b88                	ld	a0,16(a5)
    83f4f686:	0005b803          	ld	a6,0(a1)
    83f4f68a:	ec08                	sd	a0,24(s0)
    83f4f68c:	e504                	sd	s1,8(a0)
    83f4f68e:	eb84                	sd	s1,16(a5)
    83f4f690:	6c30                	ld	a2,88(s0)
    83f4f692:	0106e6b3          	or	a3,a3,a6
    83f4f696:	e194                	sd	a3,0(a1)
    83f4f698:	00261793          	slli	a5,a2,0x2
    83f4f69c:	97b2                	add	a5,a5,a2
    83f4f69e:	078e                	slli	a5,a5,0x3
    83f4f6a0:	97ba                	add	a5,a5,a4
    83f4f6a2:	f41c                	sd	a5,40(s0)
    83f4f6a4:	6398                	ld	a4,0(a5)
    83f4f6a6:	4505                	li	a0,1
    83f4f6a8:	0705                	addi	a4,a4,1
    83f4f6aa:	e398                	sd	a4,0(a5)
    83f4f6ac:	60e2                	ld	ra,24(sp)
    83f4f6ae:	6442                	ld	s0,16(sp)
    83f4f6b0:	64a2                	ld	s1,8(sp)
    83f4f6b2:	6105                	addi	sp,sp,32
    83f4f6b4:	8082                	ret

0000000083f4f6b6 <vTaskEnterCritical>:
    83f4f6b6:	30047073          	csrci	mstatus,8
    83f4f6ba:	00010797          	auipc	a5,0x10
    83f4f6be:	6267b783          	ld	a5,1574(a5) # 83f5fce0 <xSchedulerRunning>
    83f4f6c2:	cb91                	beqz	a5,83f4f6d6 <vTaskEnterCritical+0x20>
    83f4f6c4:	00010797          	auipc	a5,0x10
    83f4f6c8:	5c478793          	addi	a5,a5,1476 # 83f5fc88 <pxCurrentTCB>
    83f4f6cc:	6398                	ld	a4,0(a5)
    83f4f6ce:	639c                	ld	a5,0(a5)
    83f4f6d0:	7f3c                	ld	a5,120(a4)
    83f4f6d2:	0785                	addi	a5,a5,1
    83f4f6d4:	ff3c                	sd	a5,120(a4)
    83f4f6d6:	8082                	ret

0000000083f4f6d8 <vTaskExitCritical>:
    83f4f6d8:	00010797          	auipc	a5,0x10
    83f4f6dc:	6087b783          	ld	a5,1544(a5) # 83f5fce0 <xSchedulerRunning>
    83f4f6e0:	c38d                	beqz	a5,83f4f702 <vTaskExitCritical+0x2a>
    83f4f6e2:	00010797          	auipc	a5,0x10
    83f4f6e6:	5a678793          	addi	a5,a5,1446 # 83f5fc88 <pxCurrentTCB>
    83f4f6ea:	6398                	ld	a4,0(a5)
    83f4f6ec:	7f38                	ld	a4,120(a4)
    83f4f6ee:	cb11                	beqz	a4,83f4f702 <vTaskExitCritical+0x2a>
    83f4f6f0:	6398                	ld	a4,0(a5)
    83f4f6f2:	6394                	ld	a3,0(a5)
    83f4f6f4:	7f3c                	ld	a5,120(a4)
    83f4f6f6:	17fd                	addi	a5,a5,-1
    83f4f6f8:	ff3c                	sd	a5,120(a4)
    83f4f6fa:	7ebc                	ld	a5,120(a3)
    83f4f6fc:	e399                	bnez	a5,83f4f702 <vTaskExitCritical+0x2a>
    83f4f6fe:	30046073          	csrsi	mstatus,8
    83f4f702:	8082                	ret

0000000083f4f704 <prvAddNewTaskToReadyList>:
    83f4f704:	7139                	addi	sp,sp,-64
    83f4f706:	f822                	sd	s0,48(sp)
    83f4f708:	fc06                	sd	ra,56(sp)
    83f4f70a:	f426                	sd	s1,40(sp)
    83f4f70c:	f04a                	sd	s2,32(sp)
    83f4f70e:	ec4e                	sd	s3,24(sp)
    83f4f710:	e852                	sd	s4,16(sp)
    83f4f712:	e456                	sd	s5,8(sp)
    83f4f714:	842a                	mv	s0,a0
    83f4f716:	30047073          	csrci	mstatus,8
    83f4f71a:	00010997          	auipc	s3,0x10
    83f4f71e:	5c698993          	addi	s3,s3,1478 # 83f5fce0 <xSchedulerRunning>
    83f4f722:	0009b783          	ld	a5,0(s3)
    83f4f726:	00010917          	auipc	s2,0x10
    83f4f72a:	56290913          	addi	s2,s2,1378 # 83f5fc88 <pxCurrentTCB>
    83f4f72e:	cb81                	beqz	a5,83f4f73e <prvAddNewTaskToReadyList+0x3a>
    83f4f730:	00093703          	ld	a4,0(s2)
    83f4f734:	00093783          	ld	a5,0(s2)
    83f4f738:	7f3c                	ld	a5,120(a4)
    83f4f73a:	0785                	addi	a5,a5,1
    83f4f73c:	ff3c                	sd	a5,120(a4)
    83f4f73e:	00010717          	auipc	a4,0x10
    83f4f742:	56270713          	addi	a4,a4,1378 # 83f5fca0 <uxCurrentNumberOfTasks>
    83f4f746:	631c                	ld	a5,0(a4)
    83f4f748:	0785                	addi	a5,a5,1
    83f4f74a:	e31c                	sd	a5,0(a4)
    83f4f74c:	00093783          	ld	a5,0(s2)
    83f4f750:	c3cd                	beqz	a5,83f4f7f2 <prvAddNewTaskToReadyList+0xee>
    83f4f752:	0009b783          	ld	a5,0(s3)
    83f4f756:	6c34                	ld	a3,88(s0)
    83f4f758:	0000e497          	auipc	s1,0xe
    83f4f75c:	0b848493          	addi	s1,s1,184 # 83f5d810 <pxReadyTasksLists>
    83f4f760:	c3c9                	beqz	a5,83f4f7e2 <prvAddNewTaskToReadyList+0xde>
    83f4f762:	00269793          	slli	a5,a3,0x2
    83f4f766:	97b6                	add	a5,a5,a3
    83f4f768:	078e                	slli	a5,a5,0x3
    83f4f76a:	97a6                	add	a5,a5,s1
    83f4f76c:	6790                	ld	a2,8(a5)
    83f4f76e:	00840793          	addi	a5,s0,8
    83f4f772:	00010597          	auipc	a1,0x10
    83f4f776:	54e58593          	addi	a1,a1,1358 # 83f5fcc0 <uxTopReadyPriority>
    83f4f77a:	e810                	sd	a2,16(s0)
    83f4f77c:	6a08                	ld	a0,16(a2)
    83f4f77e:	0005b803          	ld	a6,0(a1)
    83f4f782:	4705                	li	a4,1
    83f4f784:	ec08                	sd	a0,24(s0)
    83f4f786:	e51c                	sd	a5,8(a0)
    83f4f788:	ea1c                	sd	a5,16(a2)
    83f4f78a:	6c30                	ld	a2,88(s0)
    83f4f78c:	00d71733          	sll	a4,a4,a3
    83f4f790:	01076733          	or	a4,a4,a6
    83f4f794:	00261793          	slli	a5,a2,0x2
    83f4f798:	97b2                	add	a5,a5,a2
    83f4f79a:	078e                	slli	a5,a5,0x3
    83f4f79c:	97a6                	add	a5,a5,s1
    83f4f79e:	f41c                	sd	a5,40(s0)
    83f4f7a0:	e198                	sd	a4,0(a1)
    83f4f7a2:	6398                	ld	a4,0(a5)
    83f4f7a4:	00010617          	auipc	a2,0x10
    83f4f7a8:	51460613          	addi	a2,a2,1300 # 83f5fcb8 <uxTaskNumber>
    83f4f7ac:	6214                	ld	a3,0(a2)
    83f4f7ae:	0705                	addi	a4,a4,1
    83f4f7b0:	e398                	sd	a4,0(a5)
    83f4f7b2:	0685                	addi	a3,a3,1
    83f4f7b4:	e214                	sd	a3,0(a2)
    83f4f7b6:	f23ff0ef          	jal	ra,83f4f6d8 <vTaskExitCritical>
    83f4f7ba:	0009b783          	ld	a5,0(s3)
    83f4f7be:	cb89                	beqz	a5,83f4f7d0 <prvAddNewTaskToReadyList+0xcc>
    83f4f7c0:	00093703          	ld	a4,0(s2)
    83f4f7c4:	6c3c                	ld	a5,88(s0)
    83f4f7c6:	6f38                	ld	a4,88(a4)
    83f4f7c8:	00f77463          	bgeu	a4,a5,83f4f7d0 <prvAddNewTaskToReadyList+0xcc>
    83f4f7cc:	00000073          	ecall
    83f4f7d0:	70e2                	ld	ra,56(sp)
    83f4f7d2:	7442                	ld	s0,48(sp)
    83f4f7d4:	74a2                	ld	s1,40(sp)
    83f4f7d6:	7902                	ld	s2,32(sp)
    83f4f7d8:	69e2                	ld	s3,24(sp)
    83f4f7da:	6a42                	ld	s4,16(sp)
    83f4f7dc:	6aa2                	ld	s5,8(sp)
    83f4f7de:	6121                	addi	sp,sp,64
    83f4f7e0:	8082                	ret
    83f4f7e2:	00093783          	ld	a5,0(s2)
    83f4f7e6:	6fbc                	ld	a5,88(a5)
    83f4f7e8:	f6f6ede3          	bltu	a3,a5,83f4f762 <prvAddNewTaskToReadyList+0x5e>
    83f4f7ec:	00893023          	sd	s0,0(s2)
    83f4f7f0:	bf8d                	j	83f4f762 <prvAddNewTaskToReadyList+0x5e>
    83f4f7f2:	00893023          	sd	s0,0(s2)
    83f4f7f6:	6318                	ld	a4,0(a4)
    83f4f7f8:	4785                	li	a5,1
    83f4f7fa:	00f70863          	beq	a4,a5,83f4f80a <prvAddNewTaskToReadyList+0x106>
    83f4f7fe:	6c34                	ld	a3,88(s0)
    83f4f800:	0000e497          	auipc	s1,0xe
    83f4f804:	01048493          	addi	s1,s1,16 # 83f5d810 <pxReadyTasksLists>
    83f4f808:	bfa9                	j	83f4f762 <prvAddNewTaskToReadyList+0x5e>
    83f4f80a:	0000e497          	auipc	s1,0xe
    83f4f80e:	00648493          	addi	s1,s1,6 # 83f5d810 <pxReadyTasksLists>
    83f4f812:	8a26                	mv	s4,s1
    83f4f814:	0000ea97          	auipc	s5,0xe
    83f4f818:	13ca8a93          	addi	s5,s5,316 # 83f5d950 <xDelayedTaskList1>
    83f4f81c:	8552                	mv	a0,s4
    83f4f81e:	028a0a13          	addi	s4,s4,40
    83f4f822:	7cc000ef          	jal	ra,83f4ffee <vListInitialise>
    83f4f826:	ff4a9be3          	bne	s5,s4,83f4f81c <prvAddNewTaskToReadyList+0x118>
    83f4f82a:	0000ea97          	auipc	s5,0xe
    83f4f82e:	126a8a93          	addi	s5,s5,294 # 83f5d950 <xDelayedTaskList1>
    83f4f832:	8556                	mv	a0,s5
    83f4f834:	7ba000ef          	jal	ra,83f4ffee <vListInitialise>
    83f4f838:	0000ea17          	auipc	s4,0xe
    83f4f83c:	140a0a13          	addi	s4,s4,320 # 83f5d978 <xDelayedTaskList2>
    83f4f840:	8552                	mv	a0,s4
    83f4f842:	7ac000ef          	jal	ra,83f4ffee <vListInitialise>
    83f4f846:	0000e517          	auipc	a0,0xe
    83f4f84a:	15a50513          	addi	a0,a0,346 # 83f5d9a0 <xPendingReadyList>
    83f4f84e:	7a0000ef          	jal	ra,83f4ffee <vListInitialise>
    83f4f852:	0000e517          	auipc	a0,0xe
    83f4f856:	19e50513          	addi	a0,a0,414 # 83f5d9f0 <xTasksWaitingTermination>
    83f4f85a:	794000ef          	jal	ra,83f4ffee <vListInitialise>
    83f4f85e:	0000e517          	auipc	a0,0xe
    83f4f862:	16a50513          	addi	a0,a0,362 # 83f5d9c8 <xSuspendedTaskList>
    83f4f866:	788000ef          	jal	ra,83f4ffee <vListInitialise>
    83f4f86a:	00010797          	auipc	a5,0x10
    83f4f86e:	4357b323          	sd	s5,1062(a5) # 83f5fc90 <pxDelayedTaskList>
    83f4f872:	6c34                	ld	a3,88(s0)
    83f4f874:	00010797          	auipc	a5,0x10
    83f4f878:	4347b223          	sd	s4,1060(a5) # 83f5fc98 <pxOverflowDelayedTaskList>
    83f4f87c:	b5dd                	j	83f4f762 <prvAddNewTaskToReadyList+0x5e>

0000000083f4f87e <xTaskCreateStatic>:
    83f4f87e:	02080b63          	beqz	a6,83f4f8b4 <xTaskCreateStatic+0x36>
    83f4f882:	88be                	mv	a7,a5
    83f4f884:	4781                	li	a5,0
    83f4f886:	02088863          	beqz	a7,83f4f8b6 <xTaskCreateStatic+0x38>
    83f4f88a:	1101                	addi	sp,sp,-32
    83f4f88c:	07183023          	sd	a7,96(a6)
    83f4f890:	4889                	li	a7,2
    83f4f892:	003c                	addi	a5,sp,8
    83f4f894:	09180fa3          	sb	a7,159(a6)
    83f4f898:	ec06                	sd	ra,24(sp)
    83f4f89a:	e822                	sd	s0,16(sp)
    83f4f89c:	8442                	mv	s0,a6
    83f4f89e:	811ff0ef          	jal	ra,83f4f0ae <prvInitialiseNewTask.constprop.0>
    83f4f8a2:	8522                	mv	a0,s0
    83f4f8a4:	e61ff0ef          	jal	ra,83f4f704 <prvAddNewTaskToReadyList>
    83f4f8a8:	67a2                	ld	a5,8(sp)
    83f4f8aa:	60e2                	ld	ra,24(sp)
    83f4f8ac:	6442                	ld	s0,16(sp)
    83f4f8ae:	853e                	mv	a0,a5
    83f4f8b0:	6105                	addi	sp,sp,32
    83f4f8b2:	8082                	ret
    83f4f8b4:	4781                	li	a5,0
    83f4f8b6:	853e                	mv	a0,a5
    83f4f8b8:	8082                	ret

0000000083f4f8ba <xTaskCreate>:
    83f4f8ba:	715d                	addi	sp,sp,-80
    83f4f8bc:	f44e                	sd	s3,40(sp)
    83f4f8be:	89aa                	mv	s3,a0
    83f4f8c0:	00361513          	slli	a0,a2,0x3
    83f4f8c4:	fc26                	sd	s1,56(sp)
    83f4f8c6:	f052                	sd	s4,32(sp)
    83f4f8c8:	ec56                	sd	s5,24(sp)
    83f4f8ca:	e85a                	sd	s6,16(sp)
    83f4f8cc:	e45e                	sd	s7,8(sp)
    83f4f8ce:	e486                	sd	ra,72(sp)
    83f4f8d0:	e0a2                	sd	s0,64(sp)
    83f4f8d2:	f84a                	sd	s2,48(sp)
    83f4f8d4:	84b2                	mv	s1,a2
    83f4f8d6:	8a2e                	mv	s4,a1
    83f4f8d8:	8ab6                	mv	s5,a3
    83f4f8da:	8b3a                	mv	s6,a4
    83f4f8dc:	8bbe                	mv	s7,a5
    83f4f8de:	ca7fe0ef          	jal	ra,83f4e584 <pvPortMalloc>
    83f4f8e2:	c139                	beqz	a0,83f4f928 <xTaskCreate+0x6e>
    83f4f8e4:	842a                	mv	s0,a0
    83f4f8e6:	0a800513          	li	a0,168
    83f4f8ea:	c9bfe0ef          	jal	ra,83f4e584 <pvPortMalloc>
    83f4f8ee:	892a                	mv	s2,a0
    83f4f8f0:	cd15                	beqz	a0,83f4f92c <xTaskCreate+0x72>
    83f4f8f2:	882a                	mv	a6,a0
    83f4f8f4:	87de                	mv	a5,s7
    83f4f8f6:	875a                	mv	a4,s6
    83f4f8f8:	86d6                	mv	a3,s5
    83f4f8fa:	8626                	mv	a2,s1
    83f4f8fc:	85d2                	mv	a1,s4
    83f4f8fe:	f120                	sd	s0,96(a0)
    83f4f900:	08050fa3          	sb	zero,159(a0)
    83f4f904:	854e                	mv	a0,s3
    83f4f906:	fa8ff0ef          	jal	ra,83f4f0ae <prvInitialiseNewTask.constprop.0>
    83f4f90a:	854a                	mv	a0,s2
    83f4f90c:	df9ff0ef          	jal	ra,83f4f704 <prvAddNewTaskToReadyList>
    83f4f910:	4505                	li	a0,1
    83f4f912:	60a6                	ld	ra,72(sp)
    83f4f914:	6406                	ld	s0,64(sp)
    83f4f916:	74e2                	ld	s1,56(sp)
    83f4f918:	7942                	ld	s2,48(sp)
    83f4f91a:	79a2                	ld	s3,40(sp)
    83f4f91c:	7a02                	ld	s4,32(sp)
    83f4f91e:	6ae2                	ld	s5,24(sp)
    83f4f920:	6b42                	ld	s6,16(sp)
    83f4f922:	6ba2                	ld	s7,8(sp)
    83f4f924:	6161                	addi	sp,sp,80
    83f4f926:	8082                	ret
    83f4f928:	557d                	li	a0,-1
    83f4f92a:	b7e5                	j	83f4f912 <xTaskCreate+0x58>
    83f4f92c:	8522                	mv	a0,s0
    83f4f92e:	dbdfe0ef          	jal	ra,83f4e6ea <vPortFree>
    83f4f932:	557d                	li	a0,-1
    83f4f934:	bff9                	j	83f4f912 <xTaskCreate+0x58>

0000000083f4f936 <vTaskStartScheduler>:
    83f4f936:	7179                	addi	sp,sp,-48
    83f4f938:	0050                	addi	a2,sp,4
    83f4f93a:	080c                	addi	a1,sp,16
    83f4f93c:	0028                	addi	a0,sp,8
    83f4f93e:	f022                	sd	s0,32(sp)
    83f4f940:	f406                	sd	ra,40(sp)
    83f4f942:	e402                	sd	zero,8(sp)
    83f4f944:	e802                	sd	zero,16(sp)
    83f4f946:	d52f30ef          	jal	ra,83f42e98 <vApplicationGetIdleTaskMemory>
    83f4f94a:	6422                	ld	s0,8(sp)
    83f4f94c:	c02d                	beqz	s0,83f4f9ae <vTaskStartScheduler+0x78>
    83f4f94e:	6542                	ld	a0,16(sp)
    83f4f950:	cd39                	beqz	a0,83f4f9ae <vTaskStartScheduler+0x78>
    83f4f952:	4612                	lw	a2,4(sp)
    83f4f954:	f028                	sd	a0,96(s0)
    83f4f956:	4509                	li	a0,2
    83f4f958:	083c                	addi	a5,sp,24
    83f4f95a:	8822                	mv	a6,s0
    83f4f95c:	4701                	li	a4,0
    83f4f95e:	4681                	li	a3,0
    83f4f960:	00003597          	auipc	a1,0x3
    83f4f964:	8b058593          	addi	a1,a1,-1872 # 83f52210 <__func__.1+0x18>
    83f4f968:	08a40fa3          	sb	a0,159(s0)
    83f4f96c:	00000517          	auipc	a0,0x0
    83f4f970:	82a50513          	addi	a0,a0,-2006 # 83f4f196 <prvIdleTask>
    83f4f974:	f3aff0ef          	jal	ra,83f4f0ae <prvInitialiseNewTask.constprop.0>
    83f4f978:	8522                	mv	a0,s0
    83f4f97a:	d8bff0ef          	jal	ra,83f4f704 <prvAddNewTaskToReadyList>
    83f4f97e:	67e2                	ld	a5,24(sp)
    83f4f980:	c79d                	beqz	a5,83f4f9ae <vTaskStartScheduler+0x78>
    83f4f982:	61a000ef          	jal	ra,83f4ff9c <xTimerCreateTimerTask>
    83f4f986:	4785                	li	a5,1
    83f4f988:	02f51363          	bne	a0,a5,83f4f9ae <vTaskStartScheduler+0x78>
    83f4f98c:	30047073          	csrci	mstatus,8
    83f4f990:	57fd                	li	a5,-1
    83f4f992:	00010717          	auipc	a4,0x10
    83f4f996:	32f73b23          	sd	a5,822(a4) # 83f5fcc8 <xNextTaskUnblockTime>
    83f4f99a:	00010797          	auipc	a5,0x10
    83f4f99e:	34a7b323          	sd	a0,838(a5) # 83f5fce0 <xSchedulerRunning>
    83f4f9a2:	00010797          	auipc	a5,0x10
    83f4f9a6:	3407b323          	sd	zero,838(a5) # 83f5fce8 <xTickCount>
    83f4f9aa:	726000ef          	jal	ra,83f500d0 <xPortStartScheduler>
    83f4f9ae:	70a2                	ld	ra,40(sp)
    83f4f9b0:	7402                	ld	s0,32(sp)
    83f4f9b2:	00004797          	auipc	a5,0x4
    83f4f9b6:	81e7b783          	ld	a5,-2018(a5) # 83f531d0 <uxTopUsedPriority>
    83f4f9ba:	6145                	addi	sp,sp,48
    83f4f9bc:	8082                	ret

0000000083f4f9be <xTaskResumeAll>:
    83f4f9be:	7179                	addi	sp,sp,-48
    83f4f9c0:	f406                	sd	ra,40(sp)
    83f4f9c2:	f022                	sd	s0,32(sp)
    83f4f9c4:	ec26                	sd	s1,24(sp)
    83f4f9c6:	e84a                	sd	s2,16(sp)
    83f4f9c8:	e44e                	sd	s3,8(sp)
    83f4f9ca:	e052                	sd	s4,0(sp)
    83f4f9cc:	30047073          	csrci	mstatus,8
    83f4f9d0:	00010797          	auipc	a5,0x10
    83f4f9d4:	3107b783          	ld	a5,784(a5) # 83f5fce0 <xSchedulerRunning>
    83f4f9d8:	cf81                	beqz	a5,83f4f9f0 <xTaskResumeAll+0x32>
    83f4f9da:	00010897          	auipc	a7,0x10
    83f4f9de:	2ae88893          	addi	a7,a7,686 # 83f5fc88 <pxCurrentTCB>
    83f4f9e2:	0008b703          	ld	a4,0(a7)
    83f4f9e6:	0008b783          	ld	a5,0(a7)
    83f4f9ea:	7f3c                	ld	a5,120(a4)
    83f4f9ec:	0785                	addi	a5,a5,1
    83f4f9ee:	ff3c                	sd	a5,120(a4)
    83f4f9f0:	00010497          	auipc	s1,0x10
    83f4f9f4:	2c048493          	addi	s1,s1,704 # 83f5fcb0 <uxSchedulerSuspended>
    83f4f9f8:	609c                	ld	a5,0(s1)
    83f4f9fa:	17fd                	addi	a5,a5,-1
    83f4f9fc:	e09c                	sd	a5,0(s1)
    83f4f9fe:	609c                	ld	a5,0(s1)
    83f4fa00:	10079263          	bnez	a5,83f4fb04 <xTaskResumeAll+0x146>
    83f4fa04:	00010797          	auipc	a5,0x10
    83f4fa08:	29c7b783          	ld	a5,668(a5) # 83f5fca0 <uxCurrentNumberOfTasks>
    83f4fa0c:	cfe5                	beqz	a5,83f4fb04 <xTaskResumeAll+0x146>
    83f4fa0e:	0000e597          	auipc	a1,0xe
    83f4fa12:	f9258593          	addi	a1,a1,-110 # 83f5d9a0 <xPendingReadyList>
    83f4fa16:	619c                	ld	a5,0(a1)
    83f4fa18:	00010417          	auipc	s0,0x10
    83f4fa1c:	2d840413          	addi	s0,s0,728 # 83f5fcf0 <xYieldPending>
    83f4fa20:	10078f63          	beqz	a5,83f4fb3e <xTaskResumeAll+0x180>
    83f4fa24:	00010897          	auipc	a7,0x10
    83f4fa28:	26488893          	addi	a7,a7,612 # 83f5fc88 <pxCurrentTCB>
    83f4fa2c:	00010817          	auipc	a6,0x10
    83f4fa30:	29480813          	addi	a6,a6,660 # 83f5fcc0 <uxTopReadyPriority>
    83f4fa34:	0000e517          	auipc	a0,0xe
    83f4fa38:	ddc50513          	addi	a0,a0,-548 # 83f5d810 <pxReadyTasksLists>
    83f4fa3c:	00010417          	auipc	s0,0x10
    83f4fa40:	2b440413          	addi	s0,s0,692 # 83f5fcf0 <xYieldPending>
    83f4fa44:	4305                	li	t1,1
    83f4fa46:	a069                	j	83f4fad0 <xTaskResumeAll+0x112>
    83f4fa48:	0407b823          	sd	zero,80(a5)
    83f4fa4c:	6314                	ld	a3,0(a4)
    83f4fa4e:	16fd                	addi	a3,a3,-1
    83f4fa50:	e314                	sd	a3,0(a4)
    83f4fa52:	0107be03          	ld	t3,16(a5)
    83f4fa56:	6f94                	ld	a3,24(a5)
    83f4fa58:	7798                	ld	a4,40(a5)
    83f4fa5a:	00878613          	addi	a2,a5,8
    83f4fa5e:	00de3823          	sd	a3,16(t3)
    83f4fa62:	0107be03          	ld	t3,16(a5)
    83f4fa66:	01c6b423          	sd	t3,8(a3)
    83f4fa6a:	6714                	ld	a3,8(a4)
    83f4fa6c:	0ac68863          	beq	a3,a2,83f4fb1c <xTaskResumeAll+0x15e>
    83f4fa70:	0207b423          	sd	zero,40(a5)
    83f4fa74:	6314                	ld	a3,0(a4)
    83f4fa76:	16fd                	addi	a3,a3,-1
    83f4fa78:	e314                	sd	a3,0(a4)
    83f4fa7a:	6fb8                	ld	a4,88(a5)
    83f4fa7c:	00083e03          	ld	t3,0(a6)
    83f4fa80:	00271693          	slli	a3,a4,0x2
    83f4fa84:	96ba                	add	a3,a3,a4
    83f4fa86:	068e                	slli	a3,a3,0x3
    83f4fa88:	96aa                	add	a3,a3,a0
    83f4fa8a:	6694                	ld	a3,8(a3)
    83f4fa8c:	00e31733          	sll	a4,t1,a4
    83f4fa90:	01c76733          	or	a4,a4,t3
    83f4fa94:	eb94                	sd	a3,16(a5)
    83f4fa96:	0106be03          	ld	t3,16(a3)
    83f4fa9a:	00e83023          	sd	a4,0(a6)
    83f4fa9e:	01c7bc23          	sd	t3,24(a5)
    83f4faa2:	00ce3423          	sd	a2,8(t3)
    83f4faa6:	ea90                	sd	a2,16(a3)
    83f4faa8:	6fb4                	ld	a3,88(a5)
    83f4faaa:	00269713          	slli	a4,a3,0x2
    83f4faae:	9736                	add	a4,a4,a3
    83f4fab0:	070e                	slli	a4,a4,0x3
    83f4fab2:	972a                	add	a4,a4,a0
    83f4fab4:	f798                	sd	a4,40(a5)
    83f4fab6:	6314                	ld	a3,0(a4)
    83f4fab8:	0685                	addi	a3,a3,1
    83f4faba:	e314                	sd	a3,0(a4)
    83f4fabc:	0008b683          	ld	a3,0(a7)
    83f4fac0:	6fb8                	ld	a4,88(a5)
    83f4fac2:	6ebc                	ld	a5,88(a3)
    83f4fac4:	00f76463          	bltu	a4,a5,83f4facc <xTaskResumeAll+0x10e>
    83f4fac8:	00643023          	sd	t1,0(s0)
    83f4facc:	619c                	ld	a5,0(a1)
    83f4face:	cbb1                	beqz	a5,83f4fb22 <xTaskResumeAll+0x164>
    83f4fad0:	6d9c                	ld	a5,24(a1)
    83f4fad2:	6f9c                	ld	a5,24(a5)
    83f4fad4:	0387be03          	ld	t3,56(a5)
    83f4fad8:	63b4                	ld	a3,64(a5)
    83f4fada:	6bb8                	ld	a4,80(a5)
    83f4fadc:	03078613          	addi	a2,a5,48
    83f4fae0:	00de3823          	sd	a3,16(t3)
    83f4fae4:	0387be03          	ld	t3,56(a5)
    83f4fae8:	01c6b423          	sd	t3,8(a3)
    83f4faec:	6714                	ld	a3,8(a4)
    83f4faee:	f4c69de3          	bne	a3,a2,83f4fa48 <xTaskResumeAll+0x8a>
    83f4faf2:	63b4                	ld	a3,64(a5)
    83f4faf4:	e714                	sd	a3,8(a4)
    83f4faf6:	bf89                	j	83f4fa48 <xTaskResumeAll+0x8a>
    83f4faf8:	00010797          	auipc	a5,0x10
    83f4fafc:	1e07b023          	sd	zero,480(a5) # 83f5fcd8 <xPendedTicks>
    83f4fb00:	601c                	ld	a5,0(s0)
    83f4fb02:	ebb5                	bnez	a5,83f4fb76 <xTaskResumeAll+0x1b8>
    83f4fb04:	4401                	li	s0,0
    83f4fb06:	bd3ff0ef          	jal	ra,83f4f6d8 <vTaskExitCritical>
    83f4fb0a:	70a2                	ld	ra,40(sp)
    83f4fb0c:	8522                	mv	a0,s0
    83f4fb0e:	7402                	ld	s0,32(sp)
    83f4fb10:	64e2                	ld	s1,24(sp)
    83f4fb12:	6942                	ld	s2,16(sp)
    83f4fb14:	69a2                	ld	s3,8(sp)
    83f4fb16:	6a02                	ld	s4,0(sp)
    83f4fb18:	6145                	addi	sp,sp,48
    83f4fb1a:	8082                	ret
    83f4fb1c:	6f94                	ld	a3,24(a5)
    83f4fb1e:	e714                	sd	a3,8(a4)
    83f4fb20:	bf81                	j	83f4fa70 <xTaskResumeAll+0xb2>
    83f4fb22:	00010797          	auipc	a5,0x10
    83f4fb26:	16e78793          	addi	a5,a5,366 # 83f5fc90 <pxDelayedTaskList>
    83f4fb2a:	6398                	ld	a4,0(a5)
    83f4fb2c:	6318                	ld	a4,0(a4)
    83f4fb2e:	cb21                	beqz	a4,83f4fb7e <xTaskResumeAll+0x1c0>
    83f4fb30:	639c                	ld	a5,0(a5)
    83f4fb32:	6f9c                	ld	a5,24(a5)
    83f4fb34:	639c                	ld	a5,0(a5)
    83f4fb36:	00010717          	auipc	a4,0x10
    83f4fb3a:	18f73923          	sd	a5,402(a4) # 83f5fcc8 <xNextTaskUnblockTime>
    83f4fb3e:	00010997          	auipc	s3,0x10
    83f4fb42:	19a98993          	addi	s3,s3,410 # 83f5fcd8 <xPendedTicks>
    83f4fb46:	0009b903          	ld	s2,0(s3)
    83f4fb4a:	fa090be3          	beqz	s2,83f4fb00 <xTaskResumeAll+0x142>
    83f4fb4e:	4a05                	li	s4,1
    83f4fb50:	a809                	j	83f4fb62 <xTaskResumeAll+0x1a4>
    83f4fb52:	f18ff0ef          	jal	ra,83f4f26a <xTaskIncrementTick.part.0>
    83f4fb56:	c119                	beqz	a0,83f4fb5c <xTaskResumeAll+0x19e>
    83f4fb58:	01443023          	sd	s4,0(s0)
    83f4fb5c:	197d                	addi	s2,s2,-1
    83f4fb5e:	f8090de3          	beqz	s2,83f4faf8 <xTaskResumeAll+0x13a>
    83f4fb62:	609c                	ld	a5,0(s1)
    83f4fb64:	d7fd                	beqz	a5,83f4fb52 <xTaskResumeAll+0x194>
    83f4fb66:	0009b783          	ld	a5,0(s3)
    83f4fb6a:	0785                	addi	a5,a5,1
    83f4fb6c:	00f9b023          	sd	a5,0(s3)
    83f4fb70:	b26f30ef          	jal	ra,83f42e96 <vApplicationTickHook>
    83f4fb74:	b7e5                	j	83f4fb5c <xTaskResumeAll+0x19e>
    83f4fb76:	00000073          	ecall
    83f4fb7a:	4405                	li	s0,1
    83f4fb7c:	b769                	j	83f4fb06 <xTaskResumeAll+0x148>
    83f4fb7e:	57fd                	li	a5,-1
    83f4fb80:	00010717          	auipc	a4,0x10
    83f4fb84:	14f73423          	sd	a5,328(a4) # 83f5fcc8 <xNextTaskUnblockTime>
    83f4fb88:	bf5d                	j	83f4fb3e <xTaskResumeAll+0x180>

0000000083f4fb8a <vTaskDelay>:
    83f4fb8a:	e501                	bnez	a0,83f4fb92 <vTaskDelay+0x8>
    83f4fb8c:	00000073          	ecall
    83f4fb90:	8082                	ret
    83f4fb92:	1141                	addi	sp,sp,-16
    83f4fb94:	e406                	sd	ra,8(sp)
    83f4fb96:	00010717          	auipc	a4,0x10
    83f4fb9a:	11a70713          	addi	a4,a4,282 # 83f5fcb0 <uxSchedulerSuspended>
    83f4fb9e:	631c                	ld	a5,0(a4)
    83f4fba0:	0785                	addi	a5,a5,1
    83f4fba2:	e31c                	sd	a5,0(a4)
    83f4fba4:	4581                	li	a1,0
    83f4fba6:	b6cff0ef          	jal	ra,83f4ef12 <prvAddCurrentTaskToDelayedList>
    83f4fbaa:	e15ff0ef          	jal	ra,83f4f9be <xTaskResumeAll>
    83f4fbae:	e119                	bnez	a0,83f4fbb4 <vTaskDelay+0x2a>
    83f4fbb0:	00000073          	ecall
    83f4fbb4:	60a2                	ld	ra,8(sp)
    83f4fbb6:	0141                	addi	sp,sp,16
    83f4fbb8:	8082                	ret

0000000083f4fbba <xTaskCheckForTimeOut>:
    83f4fbba:	1141                	addi	sp,sp,-16
    83f4fbbc:	e406                	sd	ra,8(sp)
    83f4fbbe:	e022                	sd	s0,0(sp)
    83f4fbc0:	87aa                	mv	a5,a0
    83f4fbc2:	30047073          	csrci	mstatus,8
    83f4fbc6:	00010697          	auipc	a3,0x10
    83f4fbca:	11a6b683          	ld	a3,282(a3) # 83f5fce0 <xSchedulerRunning>
    83f4fbce:	00010717          	auipc	a4,0x10
    83f4fbd2:	0ba70713          	addi	a4,a4,186 # 83f5fc88 <pxCurrentTCB>
    83f4fbd6:	c691                	beqz	a3,83f4fbe2 <xTaskCheckForTimeOut+0x28>
    83f4fbd8:	6310                	ld	a2,0(a4)
    83f4fbda:	6314                	ld	a3,0(a4)
    83f4fbdc:	7e34                	ld	a3,120(a2)
    83f4fbde:	0685                	addi	a3,a3,1
    83f4fbe0:	fe34                	sd	a3,120(a2)
    83f4fbe2:	00010697          	auipc	a3,0x10
    83f4fbe6:	10668693          	addi	a3,a3,262 # 83f5fce8 <xTickCount>
    83f4fbea:	6288                	ld	a0,0(a3)
    83f4fbec:	6310                	ld	a2,0(a4)
    83f4fbee:	0a064603          	lbu	a2,160(a2)
    83f4fbf2:	ce01                	beqz	a2,83f4fc0a <xTaskCheckForTimeOut+0x50>
    83f4fbf4:	631c                	ld	a5,0(a4)
    83f4fbf6:	4405                	li	s0,1
    83f4fbf8:	0a078023          	sb	zero,160(a5)
    83f4fbfc:	addff0ef          	jal	ra,83f4f6d8 <vTaskExitCritical>
    83f4fc00:	60a2                	ld	ra,8(sp)
    83f4fc02:	8522                	mv	a0,s0
    83f4fc04:	6402                	ld	s0,0(sp)
    83f4fc06:	0141                	addi	sp,sp,16
    83f4fc08:	8082                	ret
    83f4fc0a:	6198                	ld	a4,0(a1)
    83f4fc0c:	567d                	li	a2,-1
    83f4fc0e:	4401                	li	s0,0
    83f4fc10:	fec706e3          	beq	a4,a2,83f4fbfc <xTaskCheckForTimeOut+0x42>
    83f4fc14:	00010817          	auipc	a6,0x10
    83f4fc18:	0bc80813          	addi	a6,a6,188 # 83f5fcd0 <xNumOfOverflows>
    83f4fc1c:	00083883          	ld	a7,0(a6)
    83f4fc20:	0007b303          	ld	t1,0(a5)
    83f4fc24:	6790                	ld	a2,8(a5)
    83f4fc26:	01130e63          	beq	t1,a7,83f4fc42 <xTaskCheckForTimeOut+0x88>
    83f4fc2a:	00c56c63          	bltu	a0,a2,83f4fc42 <xTaskCheckForTimeOut+0x88>
    83f4fc2e:	0005b023          	sd	zero,0(a1)
    83f4fc32:	aa7ff0ef          	jal	ra,83f4f6d8 <vTaskExitCritical>
    83f4fc36:	4405                	li	s0,1
    83f4fc38:	60a2                	ld	ra,8(sp)
    83f4fc3a:	8522                	mv	a0,s0
    83f4fc3c:	6402                	ld	s0,0(sp)
    83f4fc3e:	0141                	addi	sp,sp,16
    83f4fc40:	8082                	ret
    83f4fc42:	40c508b3          	sub	a7,a0,a2
    83f4fc46:	fee8f4e3          	bgeu	a7,a4,83f4fc2e <xTaskCheckForTimeOut+0x74>
    83f4fc4a:	00083803          	ld	a6,0(a6)
    83f4fc4e:	8f09                	sub	a4,a4,a0
    83f4fc50:	6294                	ld	a3,0(a3)
    83f4fc52:	9732                	add	a4,a4,a2
    83f4fc54:	e198                	sd	a4,0(a1)
    83f4fc56:	0107b023          	sd	a6,0(a5)
    83f4fc5a:	e794                	sd	a3,8(a5)
    83f4fc5c:	a7dff0ef          	jal	ra,83f4f6d8 <vTaskExitCritical>
    83f4fc60:	4401                	li	s0,0
    83f4fc62:	60a2                	ld	ra,8(sp)
    83f4fc64:	8522                	mv	a0,s0
    83f4fc66:	6402                	ld	s0,0(sp)
    83f4fc68:	0141                	addi	sp,sp,16
    83f4fc6a:	8082                	ret

0000000083f4fc6c <prvCheckForValidListAndQueue>:
    83f4fc6c:	1101                	addi	sp,sp,-32
    83f4fc6e:	e822                	sd	s0,16(sp)
    83f4fc70:	ec06                	sd	ra,24(sp)
    83f4fc72:	e426                	sd	s1,8(sp)
    83f4fc74:	e04a                	sd	s2,0(sp)
    83f4fc76:	00010417          	auipc	s0,0x10
    83f4fc7a:	09a40413          	addi	s0,s0,154 # 83f5fd10 <xTimerQueue>
    83f4fc7e:	a39ff0ef          	jal	ra,83f4f6b6 <vTaskEnterCritical>
    83f4fc82:	601c                	ld	a5,0(s0)
    83f4fc84:	cb81                	beqz	a5,83f4fc94 <prvCheckForValidListAndQueue+0x28>
    83f4fc86:	6442                	ld	s0,16(sp)
    83f4fc88:	60e2                	ld	ra,24(sp)
    83f4fc8a:	64a2                	ld	s1,8(sp)
    83f4fc8c:	6902                	ld	s2,0(sp)
    83f4fc8e:	6105                	addi	sp,sp,32
    83f4fc90:	a49ff06f          	j	83f4f6d8 <vTaskExitCritical>
    83f4fc94:	0000e917          	auipc	s2,0xe
    83f4fc98:	e2490913          	addi	s2,s2,-476 # 83f5dab8 <xActiveTimerList1>
    83f4fc9c:	854a                	mv	a0,s2
    83f4fc9e:	350000ef          	jal	ra,83f4ffee <vListInitialise>
    83f4fca2:	0000e497          	auipc	s1,0xe
    83f4fca6:	e3e48493          	addi	s1,s1,-450 # 83f5dae0 <xActiveTimerList2>
    83f4fcaa:	8526                	mv	a0,s1
    83f4fcac:	342000ef          	jal	ra,83f4ffee <vListInitialise>
    83f4fcb0:	4701                	li	a4,0
    83f4fcb2:	0000e697          	auipc	a3,0xe
    83f4fcb6:	e5668693          	addi	a3,a3,-426 # 83f5db08 <xStaticTimerQueue.0>
    83f4fcba:	0000e617          	auipc	a2,0xe
    83f4fcbe:	d5e60613          	addi	a2,a2,-674 # 83f5da18 <ucStaticTimerQueueStorage.1>
    83f4fcc2:	02000593          	li	a1,32
    83f4fcc6:	4515                	li	a0,5
    83f4fcc8:	00010797          	auipc	a5,0x10
    83f4fccc:	0327b823          	sd	s2,48(a5) # 83f5fcf8 <pxCurrentTimerList>
    83f4fcd0:	00010797          	auipc	a5,0x10
    83f4fcd4:	0297b823          	sd	s1,48(a5) # 83f5fd00 <pxOverflowTimerList>
    83f4fcd8:	c6bfe0ef          	jal	ra,83f4e942 <xQueueGenericCreateStatic>
    83f4fcdc:	e008                	sd	a0,0(s0)
    83f4fcde:	d545                	beqz	a0,83f4fc86 <prvCheckForValidListAndQueue+0x1a>
    83f4fce0:	00002597          	auipc	a1,0x2
    83f4fce4:	53858593          	addi	a1,a1,1336 # 83f52218 <__func__.1+0x20>
    83f4fce8:	938ff0ef          	jal	ra,83f4ee20 <vQueueAddToRegistry>
    83f4fcec:	bf69                	j	83f4fc86 <prvCheckForValidListAndQueue+0x1a>

0000000083f4fcee <prvReloadTimer>:
    83f4fcee:	1101                	addi	sp,sp,-32
    83f4fcf0:	e822                	sd	s0,16(sp)
    83f4fcf2:	e04a                	sd	s2,0(sp)
    83f4fcf4:	ec06                	sd	ra,24(sp)
    83f4fcf6:	e426                	sd	s1,8(sp)
    83f4fcf8:	842a                	mv	s0,a0
    83f4fcfa:	8932                	mv	s2,a2
    83f4fcfc:	a031                	j	83f4fd08 <prvReloadTimer+0x1a>
    83f4fcfe:	02f76f63          	bltu	a4,a5,83f4fd3c <prvReloadTimer+0x4e>
    83f4fd02:	603c                	ld	a5,64(s0)
    83f4fd04:	9782                	jalr	a5
    83f4fd06:	85a6                	mv	a1,s1
    83f4fd08:	781c                	ld	a5,48(s0)
    83f4fd0a:	f000                	sd	s0,32(s0)
    83f4fd0c:	8522                	mv	a0,s0
    83f4fd0e:	00b784b3          	add	s1,a5,a1
    83f4fd12:	e404                	sd	s1,8(s0)
    83f4fd14:	40b90733          	sub	a4,s2,a1
    83f4fd18:	fe9973e3          	bgeu	s2,s1,83f4fcfe <prvReloadTimer+0x10>
    83f4fd1c:	00b97463          	bgeu	s2,a1,83f4fd24 <prvReloadTimer+0x36>
    83f4fd20:	feb4f1e3          	bgeu	s1,a1,83f4fd02 <prvReloadTimer+0x14>
    83f4fd24:	00840593          	addi	a1,s0,8
    83f4fd28:	6442                	ld	s0,16(sp)
    83f4fd2a:	60e2                	ld	ra,24(sp)
    83f4fd2c:	64a2                	ld	s1,8(sp)
    83f4fd2e:	6902                	ld	s2,0(sp)
    83f4fd30:	00010517          	auipc	a0,0x10
    83f4fd34:	fc853503          	ld	a0,-56(a0) # 83f5fcf8 <pxCurrentTimerList>
    83f4fd38:	6105                	addi	sp,sp,32
    83f4fd3a:	a4f9                	j	83f50008 <vListInsert>
    83f4fd3c:	00840593          	addi	a1,s0,8
    83f4fd40:	6442                	ld	s0,16(sp)
    83f4fd42:	60e2                	ld	ra,24(sp)
    83f4fd44:	64a2                	ld	s1,8(sp)
    83f4fd46:	6902                	ld	s2,0(sp)
    83f4fd48:	00010517          	auipc	a0,0x10
    83f4fd4c:	fb853503          	ld	a0,-72(a0) # 83f5fd00 <pxOverflowTimerList>
    83f4fd50:	6105                	addi	sp,sp,32
    83f4fd52:	ac5d                	j	83f50008 <vListInsert>

0000000083f4fd54 <prvProcessExpiredTimer>:
    83f4fd54:	1101                	addi	sp,sp,-32
    83f4fd56:	e426                	sd	s1,8(sp)
    83f4fd58:	e04a                	sd	s2,0(sp)
    83f4fd5a:	ec06                	sd	ra,24(sp)
    83f4fd5c:	e822                	sd	s0,16(sp)
    83f4fd5e:	00010797          	auipc	a5,0x10
    83f4fd62:	f9a7b783          	ld	a5,-102(a5) # 83f5fcf8 <pxCurrentTimerList>
    83f4fd66:	6f9c                	ld	a5,24(a5)
    83f4fd68:	84aa                	mv	s1,a0
    83f4fd6a:	892e                	mv	s2,a1
    83f4fd6c:	6f80                	ld	s0,24(a5)
    83f4fd6e:	00840513          	addi	a0,s0,8
    83f4fd72:	2c4000ef          	jal	ra,83f50036 <uxListRemove>
    83f4fd76:	04844783          	lbu	a5,72(s0)
    83f4fd7a:	0047f713          	andi	a4,a5,4
    83f4fd7e:	ef01                	bnez	a4,83f4fd96 <prvProcessExpiredTimer+0x42>
    83f4fd80:	9bf9                	andi	a5,a5,-2
    83f4fd82:	04f40423          	sb	a5,72(s0)
    83f4fd86:	603c                	ld	a5,64(s0)
    83f4fd88:	8522                	mv	a0,s0
    83f4fd8a:	6442                	ld	s0,16(sp)
    83f4fd8c:	60e2                	ld	ra,24(sp)
    83f4fd8e:	64a2                	ld	s1,8(sp)
    83f4fd90:	6902                	ld	s2,0(sp)
    83f4fd92:	6105                	addi	sp,sp,32
    83f4fd94:	8782                	jr	a5
    83f4fd96:	864a                	mv	a2,s2
    83f4fd98:	85a6                	mv	a1,s1
    83f4fd9a:	8522                	mv	a0,s0
    83f4fd9c:	f53ff0ef          	jal	ra,83f4fcee <prvReloadTimer>
    83f4fda0:	b7dd                	j	83f4fd86 <prvProcessExpiredTimer+0x32>

0000000083f4fda2 <prvTimerTask>:
    83f4fda2:	7159                	addi	sp,sp,-112
    83f4fda4:	eca6                	sd	s1,88(sp)
    83f4fda6:	e8ca                	sd	s2,80(sp)
    83f4fda8:	e4ce                	sd	s3,72(sp)
    83f4fdaa:	e0d2                	sd	s4,64(sp)
    83f4fdac:	fc56                	sd	s5,56(sp)
    83f4fdae:	f85a                	sd	s6,48(sp)
    83f4fdb0:	f486                	sd	ra,104(sp)
    83f4fdb2:	f0a2                	sd	s0,96(sp)
    83f4fdb4:	f45e                	sd	s7,40(sp)
    83f4fdb6:	00010917          	auipc	s2,0x10
    83f4fdba:	f4290913          	addi	s2,s2,-190 # 83f5fcf8 <pxCurrentTimerList>
    83f4fdbe:	00010997          	auipc	s3,0x10
    83f4fdc2:	f4a98993          	addi	s3,s3,-182 # 83f5fd08 <xLastTime.2>
    83f4fdc6:	00010a97          	auipc	s5,0x10
    83f4fdca:	f3aa8a93          	addi	s5,s5,-198 # 83f5fd00 <pxOverflowTimerList>
    83f4fdce:	00010497          	auipc	s1,0x10
    83f4fdd2:	f4248493          	addi	s1,s1,-190 # 83f5fd10 <xTimerQueue>
    83f4fdd6:	00002a17          	auipc	s4,0x2
    83f4fdda:	44aa0a13          	addi	s4,s4,1098 # 83f52220 <__func__.1+0x28>
    83f4fdde:	4b25                	li	s6,9
    83f4fde0:	00093783          	ld	a5,0(s2)
    83f4fde4:	0007bb83          	ld	s7,0(a5)
    83f4fde8:	140b8c63          	beqz	s7,83f4ff40 <prvTimerTask+0x19e>
    83f4fdec:	6f9c                	ld	a5,24(a5)
    83f4fdee:	0007bb83          	ld	s7,0(a5)
    83f4fdf2:	e44ff0ef          	jal	ra,83f4f436 <vTaskSuspendAll>
    83f4fdf6:	e50ff0ef          	jal	ra,83f4f446 <xTaskGetTickCount>
    83f4fdfa:	0009b783          	ld	a5,0(s3)
    83f4fdfe:	842a                	mv	s0,a0
    83f4fe00:	06f56763          	bltu	a0,a5,83f4fe6e <prvTimerTask+0xcc>
    83f4fe04:	00a9b023          	sd	a0,0(s3)
    83f4fe08:	4601                	li	a2,0
    83f4fe0a:	17757763          	bgeu	a0,s7,83f4ff78 <prvTimerTask+0x1d6>
    83f4fe0e:	6088                	ld	a0,0(s1)
    83f4fe10:	408b85b3          	sub	a1,s7,s0
    83f4fe14:	88aff0ef          	jal	ra,83f4ee9e <vQueueWaitForMessageRestricted>
    83f4fe18:	ba7ff0ef          	jal	ra,83f4f9be <xTaskResumeAll>
    83f4fe1c:	e119                	bnez	a0,83f4fe22 <prvTimerTask+0x80>
    83f4fe1e:	00000073          	ecall
    83f4fe22:	6088                	ld	a0,0(s1)
    83f4fe24:	4601                	li	a2,0
    83f4fe26:	858a                	mv	a1,sp
    83f4fe28:	e1ffe0ef          	jal	ra,83f4ec46 <xQueueReceive>
    83f4fe2c:	d955                	beqz	a0,83f4fde0 <prvTimerTask+0x3e>
    83f4fe2e:	6782                	ld	a5,0(sp)
    83f4fe30:	6442                	ld	s0,16(sp)
    83f4fe32:	0e07ce63          	bltz	a5,83f4ff2e <prvTimerTask+0x18c>
    83f4fe36:	741c                	ld	a5,40(s0)
    83f4fe38:	c789                	beqz	a5,83f4fe42 <prvTimerTask+0xa0>
    83f4fe3a:	00840513          	addi	a0,s0,8
    83f4fe3e:	1f8000ef          	jal	ra,83f50036 <uxListRemove>
    83f4fe42:	e04ff0ef          	jal	ra,83f4f446 <xTaskGetTickCount>
    83f4fe46:	0009b783          	ld	a5,0(s3)
    83f4fe4a:	8baa                	mv	s7,a0
    83f4fe4c:	04f56563          	bltu	a0,a5,83f4fe96 <prvTimerTask+0xf4>
    83f4fe50:	6782                	ld	a5,0(sp)
    83f4fe52:	0179b023          	sd	s7,0(s3)
    83f4fe56:	fcfb66e3          	bltu	s6,a5,83f4fe22 <prvTimerTask+0x80>
    83f4fe5a:	078a                	slli	a5,a5,0x2
    83f4fe5c:	97d2                	add	a5,a5,s4
    83f4fe5e:	439c                	lw	a5,0(a5)
    83f4fe60:	97d2                	add	a5,a5,s4
    83f4fe62:	8782                	jr	a5
    83f4fe64:	6f9c                	ld	a5,24(a5)
    83f4fe66:	55fd                	li	a1,-1
    83f4fe68:	6388                	ld	a0,0(a5)
    83f4fe6a:	eebff0ef          	jal	ra,83f4fd54 <prvProcessExpiredTimer>
    83f4fe6e:	00093783          	ld	a5,0(s2)
    83f4fe72:	6398                	ld	a4,0(a5)
    83f4fe74:	fb65                	bnez	a4,83f4fe64 <prvTimerTask+0xc2>
    83f4fe76:	000ab703          	ld	a4,0(s5)
    83f4fe7a:	0089b023          	sd	s0,0(s3)
    83f4fe7e:	00fab023          	sd	a5,0(s5)
    83f4fe82:	00e93023          	sd	a4,0(s2)
    83f4fe86:	b39ff0ef          	jal	ra,83f4f9be <xTaskResumeAll>
    83f4fe8a:	bf61                	j	83f4fe22 <prvTimerTask+0x80>
    83f4fe8c:	6f9c                	ld	a5,24(a5)
    83f4fe8e:	55fd                	li	a1,-1
    83f4fe90:	6388                	ld	a0,0(a5)
    83f4fe92:	ec3ff0ef          	jal	ra,83f4fd54 <prvProcessExpiredTimer>
    83f4fe96:	00093783          	ld	a5,0(s2)
    83f4fe9a:	6398                	ld	a4,0(a5)
    83f4fe9c:	fb65                	bnez	a4,83f4fe8c <prvTimerTask+0xea>
    83f4fe9e:	000ab703          	ld	a4,0(s5)
    83f4fea2:	00fab023          	sd	a5,0(s5)
    83f4fea6:	00e93023          	sd	a4,0(s2)
    83f4feaa:	b75d                	j	83f4fe50 <prvTimerTask+0xae>
    83f4feac:	04844703          	lbu	a4,72(s0)
    83f4feb0:	67a2                	ld	a5,8(sp)
    83f4feb2:	780c                	ld	a1,48(s0)
    83f4feb4:	00176693          	ori	a3,a4,1
    83f4feb8:	04d40423          	sb	a3,72(s0)
    83f4febc:	00b786b3          	add	a3,a5,a1
    83f4fec0:	e414                	sd	a3,8(s0)
    83f4fec2:	f000                	sd	s0,32(s0)
    83f4fec4:	08dbef63          	bltu	s7,a3,83f4ff62 <prvTimerTask+0x1c0>
    83f4fec8:	40fb87b3          	sub	a5,s7,a5
    83f4fecc:	02b7eb63          	bltu	a5,a1,83f4ff02 <prvTimerTask+0x160>
    83f4fed0:	00477793          	andi	a5,a4,4
    83f4fed4:	efcd                	bnez	a5,83f4ff8e <prvTimerTask+0x1ec>
    83f4fed6:	9b79                	andi	a4,a4,-2
    83f4fed8:	04e40423          	sb	a4,72(s0)
    83f4fedc:	603c                	ld	a5,64(s0)
    83f4fede:	8522                	mv	a0,s0
    83f4fee0:	9782                	jalr	a5
    83f4fee2:	b781                	j	83f4fe22 <prvTimerTask+0x80>
    83f4fee4:	6722                	ld	a4,8(sp)
    83f4fee6:	04844783          	lbu	a5,72(s0)
    83f4feea:	f000                	sd	s0,32(s0)
    83f4feec:	017706b3          	add	a3,a4,s7
    83f4fef0:	0017e793          	ori	a5,a5,1
    83f4fef4:	04f40423          	sb	a5,72(s0)
    83f4fef8:	f818                	sd	a4,48(s0)
    83f4fefa:	e414                	sd	a3,8(s0)
    83f4fefc:	06dbe763          	bltu	s7,a3,83f4ff6a <prvTimerTask+0x1c8>
    83f4ff00:	d30d                	beqz	a4,83f4fe22 <prvTimerTask+0x80>
    83f4ff02:	000ab503          	ld	a0,0(s5)
    83f4ff06:	00840593          	addi	a1,s0,8
    83f4ff0a:	0fe000ef          	jal	ra,83f50008 <vListInsert>
    83f4ff0e:	bf11                	j	83f4fe22 <prvTimerTask+0x80>
    83f4ff10:	04844783          	lbu	a5,72(s0)
    83f4ff14:	9bf9                	andi	a5,a5,-2
    83f4ff16:	04f40423          	sb	a5,72(s0)
    83f4ff1a:	b721                	j	83f4fe22 <prvTimerTask+0x80>
    83f4ff1c:	04844783          	lbu	a5,72(s0)
    83f4ff20:	0027f713          	andi	a4,a5,2
    83f4ff24:	c32d                	beqz	a4,83f4ff86 <prvTimerTask+0x1e4>
    83f4ff26:	9bf9                	andi	a5,a5,-2
    83f4ff28:	04f40423          	sb	a5,72(s0)
    83f4ff2c:	bddd                	j	83f4fe22 <prvTimerTask+0x80>
    83f4ff2e:	67a2                	ld	a5,8(sp)
    83f4ff30:	45e2                	lw	a1,24(sp)
    83f4ff32:	8522                	mv	a0,s0
    83f4ff34:	9782                	jalr	a5
    83f4ff36:	6782                	ld	a5,0(sp)
    83f4ff38:	ee07c5e3          	bltz	a5,83f4fe22 <prvTimerTask+0x80>
    83f4ff3c:	6442                	ld	s0,16(sp)
    83f4ff3e:	bde5                	j	83f4fe36 <prvTimerTask+0x94>
    83f4ff40:	cf6ff0ef          	jal	ra,83f4f436 <vTaskSuspendAll>
    83f4ff44:	d02ff0ef          	jal	ra,83f4f446 <xTaskGetTickCount>
    83f4ff48:	0009b783          	ld	a5,0(s3)
    83f4ff4c:	842a                	mv	s0,a0
    83f4ff4e:	f2f560e3          	bltu	a0,a5,83f4fe6e <prvTimerTask+0xcc>
    83f4ff52:	000ab783          	ld	a5,0(s5)
    83f4ff56:	0089b023          	sd	s0,0(s3)
    83f4ff5a:	6390                	ld	a2,0(a5)
    83f4ff5c:	00163613          	seqz	a2,a2
    83f4ff60:	b57d                	j	83f4fe0e <prvTimerTask+0x6c>
    83f4ff62:	00fbf463          	bgeu	s7,a5,83f4ff6a <prvTimerTask+0x1c8>
    83f4ff66:	f6f6f5e3          	bgeu	a3,a5,83f4fed0 <prvTimerTask+0x12e>
    83f4ff6a:	00093503          	ld	a0,0(s2)
    83f4ff6e:	00840593          	addi	a1,s0,8
    83f4ff72:	096000ef          	jal	ra,83f50008 <vListInsert>
    83f4ff76:	b575                	j	83f4fe22 <prvTimerTask+0x80>
    83f4ff78:	a47ff0ef          	jal	ra,83f4f9be <xTaskResumeAll>
    83f4ff7c:	85a2                	mv	a1,s0
    83f4ff7e:	855e                	mv	a0,s7
    83f4ff80:	dd5ff0ef          	jal	ra,83f4fd54 <prvProcessExpiredTimer>
    83f4ff84:	bd79                	j	83f4fe22 <prvTimerTask+0x80>
    83f4ff86:	8522                	mv	a0,s0
    83f4ff88:	f62fe0ef          	jal	ra,83f4e6ea <vPortFree>
    83f4ff8c:	bd59                	j	83f4fe22 <prvTimerTask+0x80>
    83f4ff8e:	67a2                	ld	a5,8(sp)
    83f4ff90:	865e                	mv	a2,s7
    83f4ff92:	8522                	mv	a0,s0
    83f4ff94:	95be                	add	a1,a1,a5
    83f4ff96:	d59ff0ef          	jal	ra,83f4fcee <prvReloadTimer>
    83f4ff9a:	b789                	j	83f4fedc <prvTimerTask+0x13a>

0000000083f4ff9c <xTimerCreateTimerTask>:
    83f4ff9c:	7179                	addi	sp,sp,-48
    83f4ff9e:	f406                	sd	ra,40(sp)
    83f4ffa0:	ccdff0ef          	jal	ra,83f4fc6c <prvCheckForValidListAndQueue>
    83f4ffa4:	00010797          	auipc	a5,0x10
    83f4ffa8:	d6c7b783          	ld	a5,-660(a5) # 83f5fd10 <xTimerQueue>
    83f4ffac:	4501                	li	a0,0
    83f4ffae:	cf8d                	beqz	a5,83f4ffe8 <xTimerCreateTimerTask+0x4c>
    83f4ffb0:	0070                	addi	a2,sp,12
    83f4ffb2:	082c                	addi	a1,sp,24
    83f4ffb4:	0808                	addi	a0,sp,16
    83f4ffb6:	e802                	sd	zero,16(sp)
    83f4ffb8:	ec02                	sd	zero,24(sp)
    83f4ffba:	efbf20ef          	jal	ra,83f42eb4 <vApplicationGetTimerTaskMemory>
    83f4ffbe:	67e2                	ld	a5,24(sp)
    83f4ffc0:	6842                	ld	a6,16(sp)
    83f4ffc2:	4632                	lw	a2,12(sp)
    83f4ffc4:	471d                	li	a4,7
    83f4ffc6:	4681                	li	a3,0
    83f4ffc8:	00002597          	auipc	a1,0x2
    83f4ffcc:	28058593          	addi	a1,a1,640 # 83f52248 <__func__.1+0x50>
    83f4ffd0:	00000517          	auipc	a0,0x0
    83f4ffd4:	dd250513          	addi	a0,a0,-558 # 83f4fda2 <prvTimerTask>
    83f4ffd8:	8a7ff0ef          	jal	ra,83f4f87e <xTaskCreateStatic>
    83f4ffdc:	00010797          	auipc	a5,0x10
    83f4ffe0:	d2a7be23          	sd	a0,-708(a5) # 83f5fd18 <xTimerTaskHandle>
    83f4ffe4:	00a03533          	snez	a0,a0
    83f4ffe8:	70a2                	ld	ra,40(sp)
    83f4ffea:	6145                	addi	sp,sp,48
    83f4ffec:	8082                	ret

0000000083f4ffee <vListInitialise>:
    83f4ffee:	01050793          	addi	a5,a0,16
    83f4fff2:	577d                	li	a4,-1
    83f4fff4:	e51c                	sd	a5,8(a0)
    83f4fff6:	e918                	sd	a4,16(a0)
    83f4fff8:	ed1c                	sd	a5,24(a0)
    83f4fffa:	f11c                	sd	a5,32(a0)
    83f4fffc:	00053023          	sd	zero,0(a0)
    83f50000:	8082                	ret

0000000083f50002 <vListInitialiseItem>:
    83f50002:	02053023          	sd	zero,32(a0)
    83f50006:	8082                	ret

0000000083f50008 <vListInsert>:
    83f50008:	6190                	ld	a2,0(a1)
    83f5000a:	577d                	li	a4,-1
    83f5000c:	01050793          	addi	a5,a0,16
    83f50010:	02e60063          	beq	a2,a4,83f50030 <vListInsert+0x28>
    83f50014:	86be                	mv	a3,a5
    83f50016:	679c                	ld	a5,8(a5)
    83f50018:	6398                	ld	a4,0(a5)
    83f5001a:	fee67de3          	bgeu	a2,a4,83f50014 <vListInsert+0xc>
    83f5001e:	e59c                	sd	a5,8(a1)
    83f50020:	eb8c                	sd	a1,16(a5)
    83f50022:	e994                	sd	a3,16(a1)
    83f50024:	e68c                	sd	a1,8(a3)
    83f50026:	f188                	sd	a0,32(a1)
    83f50028:	611c                	ld	a5,0(a0)
    83f5002a:	0785                	addi	a5,a5,1
    83f5002c:	e11c                	sd	a5,0(a0)
    83f5002e:	8082                	ret
    83f50030:	7114                	ld	a3,32(a0)
    83f50032:	669c                	ld	a5,8(a3)
    83f50034:	b7ed                	j	83f5001e <vListInsert+0x16>

0000000083f50036 <uxListRemove>:
    83f50036:	6514                	ld	a3,8(a0)
    83f50038:	6918                	ld	a4,16(a0)
    83f5003a:	711c                	ld	a5,32(a0)
    83f5003c:	ea98                	sd	a4,16(a3)
    83f5003e:	6514                	ld	a3,8(a0)
    83f50040:	e714                	sd	a3,8(a4)
    83f50042:	6798                	ld	a4,8(a5)
    83f50044:	00a70963          	beq	a4,a0,83f50056 <uxListRemove+0x20>
    83f50048:	02053023          	sd	zero,32(a0)
    83f5004c:	6398                	ld	a4,0(a5)
    83f5004e:	177d                	addi	a4,a4,-1
    83f50050:	e398                	sd	a4,0(a5)
    83f50052:	6388                	ld	a0,0(a5)
    83f50054:	8082                	ret
    83f50056:	6918                	ld	a4,16(a0)
    83f50058:	e798                	sd	a4,8(a5)
    83f5005a:	02053023          	sd	zero,32(a0)
    83f5005e:	6398                	ld	a4,0(a5)
    83f50060:	177d                	addi	a4,a4,-1
    83f50062:	e398                	sd	a4,0(a5)
    83f50064:	6388                	ld	a0,0(a5)
    83f50066:	8082                	ret

0000000083f50068 <vPortSetupTimerInterrupt>:
    83f50068:	1141                	addi	sp,sp,-16
    83f5006a:	f14027f3          	csrr	a5,mhartid
    83f5006e:	c63e                	sw	a5,12(sp)
    83f50070:	47b2                	lw	a5,12(sp)
    83f50072:	4732                	lw	a4,12(sp)
    83f50074:	0e8016b7          	lui	a3,0xe801
    83f50078:	1782                	slli	a5,a5,0x20
    83f5007a:	80068693          	addi	a3,a3,-2048 # e800800 <CVIMMAP_DRAM_SIZE+0xa800800>
    83f5007e:	9381                	srli	a5,a5,0x20
    83f50080:	97b6                	add	a5,a5,a3
    83f50082:	02071693          	slli	a3,a4,0x20
    83f50086:	01d6d713          	srli	a4,a3,0x1d
    83f5008a:	740046b7          	lui	a3,0x74004
    83f5008e:	0691                	addi	a3,a3,4
    83f50090:	9736                	add	a4,a4,a3
    83f50092:	078e                	slli	a5,a5,0x3
    83f50094:	00010597          	auipc	a1,0x10
    83f50098:	c8c58593          	addi	a1,a1,-884 # 83f5fd20 <pulMachineTimerCompareRegisterH>
    83f5009c:	00010697          	auipc	a3,0x10
    83f500a0:	c8f6b623          	sd	a5,-884(a3) # 83f5fd28 <pulMachineTimerCompareRegisterL>
    83f500a4:	e198                	sd	a4,0(a1)
    83f500a6:	c0102773          	rdtime	a4
    83f500aa:	667d                	lui	a2,0x1f
    83f500ac:	84860613          	addi	a2,a2,-1976 # 1e848 <_EL1_STACK_SIZE+0x1e048>
    83f500b0:	00010697          	auipc	a3,0x10
    83f500b4:	c8068693          	addi	a3,a3,-896 # 83f5fd30 <ullNextTime>
    83f500b8:	9732                	add	a4,a4,a2
    83f500ba:	e298                	sd	a4,0(a3)
    83f500bc:	2701                	sext.w	a4,a4
    83f500be:	c398                	sw	a4,0(a5)
    83f500c0:	42d8                	lw	a4,4(a3)
    83f500c2:	619c                	ld	a5,0(a1)
    83f500c4:	c398                	sw	a4,0(a5)
    83f500c6:	629c                	ld	a5,0(a3)
    83f500c8:	963e                	add	a2,a2,a5
    83f500ca:	e290                	sd	a2,0(a3)
    83f500cc:	0141                	addi	sp,sp,16
    83f500ce:	8082                	ret

0000000083f500d0 <xPortStartScheduler>:
    83f500d0:	1141                	addi	sp,sp,-16
    83f500d2:	e406                	sd	ra,8(sp)
    83f500d4:	f95ff0ef          	jal	ra,83f50068 <vPortSetupTimerInterrupt>
    83f500d8:	6785                	lui	a5,0x1
    83f500da:	8807879b          	addiw	a5,a5,-1920
    83f500de:	3047a073          	csrs	mie,a5
    83f500e2:	b1ef00ef          	jal	ra,83f40400 <xPortStartFirstTask>
    83f500e6:	60a2                	ld	ra,8(sp)
    83f500e8:	4501                	li	a0,0
    83f500ea:	0141                	addi	sp,sp,16
    83f500ec:	8082                	ret

0000000083f500ee <arch_usleep>:
    83f500ee:	c01027f3          	rdtime	a5
    83f500f2:	00151713          	slli	a4,a0,0x1
    83f500f6:	972a                	add	a4,a4,a0
    83f500f8:	070e                	slli	a4,a4,0x3
    83f500fa:	972a                	add	a4,a4,a0
    83f500fc:	973e                	add	a4,a4,a5
    83f500fe:	c01027f3          	rdtime	a5
    83f50102:	fee7eee3          	bltu	a5,a4,83f500fe <arch_usleep+0x10>
    83f50106:	8082                	ret
